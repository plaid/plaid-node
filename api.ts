/* tslint:disable */
/* eslint-disable */
/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.385.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Specifies the use case of the transfer. Required for transfers on an ACH network.  `\"ccd\"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts  `\"ppd\"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, eg. bill payment  `\"tel\"` - Telephone-Initiated Entry  `\"web\"` - Internet-Initiated Entry - debits from a consumer’s account where their authorization is obtained over the Internet
 * @export
 * @enum {string}
 */
export enum ACHClass {
    Ccd = 'ccd',
    Ppd = 'ppd',
    Tel = 'tel',
    Web = 'web'
}

/**
 * Information about the APR on the account.
 * @export
 * @interface APR
 */
// Edited by Plaid, line 9. any to unknown
export interface APR {
    [key: string]: object | unknown;

    /**
     * Annual Percentage Rate applied. 
     * @type {number}
     * @memberof APR
     */
    apr_percentage: number;
    /**
     * The type of balance to which the APR applies.
     * @type {string}
     * @memberof APR
     */
    apr_type: APRAprTypeEnum;
    /**
     * Amount of money that is subjected to the APR if a balance was carried beyond payment due date. How it is calculated can vary by card issuer. It is often calculated as an average daily balance.
     * @type {number}
     * @memberof APR
     */
    balance_subject_to_apr: number | null;
    /**
     * Amount of money charged due to interest from last statement.
     * @type {number}
     * @memberof APR
     */
    interest_charge_amount: number | null;
}

/**
    * @export
    * @enum {string}
    */
export enum APRAprTypeEnum {
    BalanceTransferApr = 'balance_transfer_apr',
    CashApr = 'cash_apr',
    PurchaseApr = 'purchase_apr',
    Special = 'special'
}

/**
 * Allow or disallow product access by account. Unlisted (e.g. missing) accounts will be considered `new_accounts`.
 * @export
 * @interface AccountAccess
 */
// Edited by Plaid, line 9. any to unknown
export interface AccountAccess {
    /**
     * The unique account identifier for this account. This value must match that returned by the data access API for this account.
     * @type {string}
     * @memberof AccountAccess
     */
    unique_id: string;
    /**
     * Allow the application to see this account (and associated details, including balance) in the list of accounts  If unset, defaults to `true`.
     * @type {boolean}
     * @memberof AccountAccess
     */
    authorized?: boolean | null;
    /**
     * 
     * @type {AccountProductAccessNullable}
     * @memberof AccountAccess
     */
    account_product_access?: AccountProductAccessNullable | null;
}
/**
 * Asset information about an account
 * @export
 * @interface AccountAssets
 */
// Edited by Plaid, line 9. any to unknown
export interface AccountAssets {
    /**
     * Plaid’s unique identifier for the account. This value will not change unless Plaid can\'t reconcile the account with the data returned by the financial institution. This may occur, for example, when the name of the account changes. If this happens a new `account_id` will be assigned to the account.  The `account_id` can also change if the `access_token` is deleted and the same credentials that were used to generate that `access_token` are used to generate a new `access_token` on a later date. In that case, the new `account_id` will be different from the old `account_id`.  If an account with a specific `account_id` disappears instead of changing, the account is likely closed. Closed accounts are not returned by the Plaid API.  Like all Plaid identifiers, the `account_id` is case sensitive.
     * @type {string}
     * @memberof AccountAssets
     */
    account_id: string;
    /**
     * 
     * @type {AccountBalance}
     * @memberof AccountAssets
     */
    balances: AccountBalance;
    /**
     * The last 2-4 alphanumeric characters of an account\'s official account number. Note that the mask may be non-unique between an Item\'s accounts, and it may also not match the mask that the bank displays to the user.
     * @type {string}
     * @memberof AccountAssets
     */
    mask: string | null;
    /**
     * The name of the account, either assigned by the user or by the financial institution itself
     * @type {string}
     * @memberof AccountAssets
     */
    name: string;
    /**
     * The official name of the account as given by the financial institution
     * @type {string}
     * @memberof AccountAssets
     */
    official_name: string | null;
    /**
     * 
     * @type {AccountType}
     * @memberof AccountAssets
     */
    type: AccountType;
    /**
     * 
     * @type {AccountSubtype}
     * @memberof AccountAssets
     */
    subtype: AccountSubtype | null;
    /**
     * The current verification status of an Auth Item initiated through Automated or Manual micro-deposits.  Returned for Auth Items only.  `pending_automatic_verification`: The Item is pending automatic verification  `pending_manual_verification`: The Item is pending manual micro-deposit verification. Items remain in this state until the user successfully verifies the two amounts.  `automatically_verified`: The Item has successfully been automatically verified   `manually_verified`: The Item has successfully been manually verified  `verification_expired`: Plaid was unable to automatically verify the deposit within 7 calendar days and will no longer attempt to validate the Item. Users may retry by submitting their information again through Link.  `verification_failed`: The Item failed manual micro-deposit verification because the user exhausted all 3 verification attempts. Users may retry by submitting their information again through Link.   
     * @type {string}
     * @memberof AccountAssets
     */
    verification_status?: AccountAssetsVerificationStatusEnum;
    /**
     * A unique and persistent identifier for accounts that can be used to trace multiple instances of the same account across different Items for depository accounts. This is currently an opt-in field and only supported for Chase Items.
     * @type {string}
     * @memberof AccountAssets
     */
    persistent_account_id?: string;
    /**
     * The duration of transaction history available for this Item, typically defined as the time since the date of the earliest transaction in that account. Only returned by Assets endpoints.
     * @type {number}
     * @memberof AccountAssets
     */
    days_available: number;
    /**
     * Transaction history associated with the account. Only returned by Assets endpoints. Transaction history returned by endpoints such as `/transactions/get` or `/investments/transactions/get` will be returned in the top-level `transactions` field instead.
     * @type {Array<AssetReportTransaction>}
     * @memberof AccountAssets
     */
    transactions: Array<AssetReportTransaction>;
    /**
     * Data returned by the financial institution about the account owner or owners. Only returned by Identity or Assets endpoints. For business accounts, the name reported may be either the name of the individual or the name of the business, depending on the institution. Multiple owners on a single account will be represented in the same `owner` object, not in multiple owner objects within the array. In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29)
     * @type {Array<Owner>}
     * @memberof AccountAssets
     */
    owners: Array<Owner>;
    /**
     * 
     * @type {OwnershipType}
     * @memberof AccountAssets
     */
    ownership_type?: OwnershipType | null;
    /**
     * Calculated data about the historical balances on the account. Only returned by Assets endpoints and currently not supported by `brokerage` or `investment` accounts.
     * @type {Array<HistoricalBalance>}
     * @memberof AccountAssets
     */
    historical_balances: Array<HistoricalBalance>;
}

/**
    * @export
    * @enum {string}
    */
export enum AccountAssetsVerificationStatusEnum {
    AutomaticallyVerified = 'automatically_verified',
    PendingAutomaticVerification = 'pending_automatic_verification',
    PendingManualVerification = 'pending_manual_verification',
    ManuallyVerified = 'manually_verified',
    VerificationExpired = 'verification_expired',
    VerificationFailed = 'verification_failed'
}

/**
 * 
 * @export
 * @interface AccountAssetsAllOf
 */
// Edited by Plaid, line 9. any to unknown
export interface AccountAssetsAllOf {
    /**
     * The duration of transaction history available for this Item, typically defined as the time since the date of the earliest transaction in that account. Only returned by Assets endpoints.
     * @type {number}
     * @memberof AccountAssetsAllOf
     */
    days_available?: number;
    /**
     * Transaction history associated with the account. Only returned by Assets endpoints. Transaction history returned by endpoints such as `/transactions/get` or `/investments/transactions/get` will be returned in the top-level `transactions` field instead.
     * @type {Array<AssetReportTransaction>}
     * @memberof AccountAssetsAllOf
     */
    transactions?: Array<AssetReportTransaction>;
    /**
     * Data returned by the financial institution about the account owner or owners. Only returned by Identity or Assets endpoints. For business accounts, the name reported may be either the name of the individual or the name of the business, depending on the institution. Multiple owners on a single account will be represented in the same `owner` object, not in multiple owner objects within the array. In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29)
     * @type {Array<Owner>}
     * @memberof AccountAssetsAllOf
     */
    owners?: Array<Owner>;
    /**
     * 
     * @type {OwnershipType}
     * @memberof AccountAssetsAllOf
     */
    ownership_type?: OwnershipType | null;
    /**
     * Calculated data about the historical balances on the account. Only returned by Assets endpoints and currently not supported by `brokerage` or `investment` accounts.
     * @type {Array<HistoricalBalance>}
     * @memberof AccountAssetsAllOf
     */
    historical_balances?: Array<HistoricalBalance>;
}
/**
 * A set of fields describing the balance for an account. Balance information may be cached unless the balance object was returned by `/accounts/balance/get`.
 * @export
 * @interface AccountBalance
 */
// Edited by Plaid, line 9. any to unknown
export interface AccountBalance {
    [key: string]: object | unknown;

    /**
     * The amount of funds available to be withdrawn from the account, as determined by the financial institution.  For `credit`-type accounts, the `available` balance typically equals the `limit` less the `current` balance, less any pending outflows plus any pending inflows.  For `depository`-type accounts, the `available` balance typically equals the `current` balance less any pending outflows plus any pending inflows. For `depository`-type accounts, the `available` balance does not include the overdraft limit.  For `investment`-type accounts (or `brokerage`-type accounts for API versions 2018-05-22 and earlier), the `available` balance is the total cash available to withdraw as presented by the institution.  Note that not all institutions calculate the `available`  balance. In the event that `available` balance is unavailable, Plaid will return an `available` balance value of `null`.  Available balance may be cached and is not guaranteed to be up-to-date in realtime unless the value was returned by `/accounts/balance/get`.  If `current` is `null` this field is guaranteed not to be `null`.
     * @type {number}
     * @memberof AccountBalance
     */
    available: number | null;
    /**
     * The total amount of funds in or owed by the account.  For `credit`-type accounts, a positive balance indicates the amount owed; a negative amount indicates the lender owing the account holder.  For `loan`-type accounts, the current balance is the principal remaining on the loan, except in the case of student loan accounts at Sallie Mae (`ins_116944`). For Sallie Mae student loans, the account\'s balance includes both principal and any outstanding interest.  For `investment`-type accounts (or `brokerage`-type accounts for API versions 2018-05-22 and earlier), the current balance is the total value of assets as presented by the institution.  Note that balance information may be cached unless the value was returned by `/accounts/balance/get`; if the Item is enabled for Transactions, the balance will be at least as recent as the most recent Transaction update. If you require realtime balance information, use the `available` balance as provided by `/accounts/balance/get`.  When returned by `/accounts/balance/get`, this field may be `null`. When this happens, `available` is guaranteed not to be `null`.
     * @type {number}
     * @memberof AccountBalance
     */
    current: number | null;
    /**
     * For `credit`-type accounts, this represents the credit limit.  For `depository`-type accounts, this represents the pre-arranged overdraft limit, which is common for current (checking) accounts in Europe.  In North America, this field is typically only available for `credit`-type accounts.
     * @type {number}
     * @memberof AccountBalance
     */
    limit: number | null;
    /**
     * The ISO-4217 currency code of the balance. Always null if `unofficial_currency_code` is non-null.
     * @type {string}
     * @memberof AccountBalance
     */
    iso_currency_code: string | null;
    /**
     * The unofficial currency code associated with the balance. Always null if `iso_currency_code` is non-null. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `unofficial_currency_code`s.
     * @type {string}
     * @memberof AccountBalance
     */
    unofficial_currency_code: string | null;
    /**
     * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the last time that the balance for the given account has been updated  This is currently only provided when the `min_last_updated_datetime` is passed when calling `/accounts/balance/get` for `ins_128026` (Capital One).
     * @type {string}
     * @memberof AccountBalance
     */
    last_updated_datetime?: string | null;
}
/**
 * A single account at a financial institution.
 * @export
 * @interface AccountBase
 */
// Edited by Plaid, line 9. any to unknown
export interface AccountBase {
    [key: string]: object | unknown;

    /**
     * Plaid’s unique identifier for the account. This value will not change unless Plaid can\'t reconcile the account with the data returned by the financial institution. This may occur, for example, when the name of the account changes. If this happens a new `account_id` will be assigned to the account.  The `account_id` can also change if the `access_token` is deleted and the same credentials that were used to generate that `access_token` are used to generate a new `access_token` on a later date. In that case, the new `account_id` will be different from the old `account_id`.  If an account with a specific `account_id` disappears instead of changing, the account is likely closed. Closed accounts are not returned by the Plaid API.  Like all Plaid identifiers, the `account_id` is case sensitive.
     * @type {string}
     * @memberof AccountBase
     */
    account_id: string;
    /**
     * 
     * @type {AccountBalance}
     * @memberof AccountBase
     */
    balances: AccountBalance;
    /**
     * The last 2-4 alphanumeric characters of an account\'s official account number. Note that the mask may be non-unique between an Item\'s accounts, and it may also not match the mask that the bank displays to the user.
     * @type {string}
     * @memberof AccountBase
     */
    mask: string | null;
    /**
     * The name of the account, either assigned by the user or by the financial institution itself
     * @type {string}
     * @memberof AccountBase
     */
    name: string;
    /**
     * The official name of the account as given by the financial institution
     * @type {string}
     * @memberof AccountBase
     */
    official_name: string | null;
    /**
     * 
     * @type {AccountType}
     * @memberof AccountBase
     */
    type: AccountType;
    /**
     * 
     * @type {AccountSubtype}
     * @memberof AccountBase
     */
    subtype: AccountSubtype | null;
    /**
     * The current verification status of an Auth Item initiated through Automated or Manual micro-deposits.  Returned for Auth Items only.  `pending_automatic_verification`: The Item is pending automatic verification  `pending_manual_verification`: The Item is pending manual micro-deposit verification. Items remain in this state until the user successfully verifies the two amounts.  `automatically_verified`: The Item has successfully been automatically verified   `manually_verified`: The Item has successfully been manually verified  `verification_expired`: Plaid was unable to automatically verify the deposit within 7 calendar days and will no longer attempt to validate the Item. Users may retry by submitting their information again through Link.  `verification_failed`: The Item failed manual micro-deposit verification because the user exhausted all 3 verification attempts. Users may retry by submitting their information again through Link.   
     * @type {string}
     * @memberof AccountBase
     */
    verification_status?: AccountBaseVerificationStatusEnum;
    /**
     * A unique and persistent identifier for accounts that can be used to trace multiple instances of the same account across different Items for depository accounts. This is currently an opt-in field and only supported for Chase Items.
     * @type {string}
     * @memberof AccountBase
     */
    persistent_account_id?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum AccountBaseVerificationStatusEnum {
    AutomaticallyVerified = 'automatically_verified',
    PendingAutomaticVerification = 'pending_automatic_verification',
    PendingManualVerification = 'pending_manual_verification',
    ManuallyVerified = 'manually_verified',
    VerificationExpired = 'verification_expired',
    VerificationFailed = 'verification_failed'
}

/**
 * Enumerates the account subtypes that the application wishes for the user to be able to select from. For more details refer to Plaid documentation on account filters.
 * @export
 * @interface AccountFilter
 */
// Edited by Plaid, line 9. any to unknown
export interface AccountFilter {
    /**
     * A list of account subtypes to be filtered.
     * @type {Array<string>}
     * @memberof AccountFilter
     */
    depository?: Array<string>;
    /**
     * A list of account subtypes to be filtered.
     * @type {Array<string>}
     * @memberof AccountFilter
     */
    credit?: Array<string>;
    /**
     * A list of account subtypes to be filtered.
     * @type {Array<string>}
     * @memberof AccountFilter
     */
    loan?: Array<string>;
    /**
     * A list of account subtypes to be filtered.
     * @type {Array<string>}
     * @memberof AccountFilter
     */
    investment?: Array<string>;
}
/**
 * The `account_filters` specified in the original call to `/link/token/create`. 
 * @export
 * @interface AccountFiltersResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface AccountFiltersResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {DepositoryFilter}
     * @memberof AccountFiltersResponse
     */
    depository?: DepositoryFilter;
    /**
     * 
     * @type {CreditFilter}
     * @memberof AccountFiltersResponse
     */
    credit?: CreditFilter;
    /**
     * 
     * @type {LoanFilter}
     * @memberof AccountFiltersResponse
     */
    loan?: LoanFilter;
    /**
     * 
     * @type {InvestmentFilter}
     * @memberof AccountFiltersResponse
     */
    investment?: InvestmentFilter;
}
/**
 * Identity information about an account
 * @export
 * @interface AccountIdentity
 */
// Edited by Plaid, line 9. any to unknown
export interface AccountIdentity {
    /**
     * Plaid’s unique identifier for the account. This value will not change unless Plaid can\'t reconcile the account with the data returned by the financial institution. This may occur, for example, when the name of the account changes. If this happens a new `account_id` will be assigned to the account.  The `account_id` can also change if the `access_token` is deleted and the same credentials that were used to generate that `access_token` are used to generate a new `access_token` on a later date. In that case, the new `account_id` will be different from the old `account_id`.  If an account with a specific `account_id` disappears instead of changing, the account is likely closed. Closed accounts are not returned by the Plaid API.  Like all Plaid identifiers, the `account_id` is case sensitive.
     * @type {string}
     * @memberof AccountIdentity
     */
    account_id: string;
    /**
     * 
     * @type {AccountBalance}
     * @memberof AccountIdentity
     */
    balances: AccountBalance;
    /**
     * The last 2-4 alphanumeric characters of an account\'s official account number. Note that the mask may be non-unique between an Item\'s accounts, and it may also not match the mask that the bank displays to the user.
     * @type {string}
     * @memberof AccountIdentity
     */
    mask: string | null;
    /**
     * The name of the account, either assigned by the user or by the financial institution itself
     * @type {string}
     * @memberof AccountIdentity
     */
    name: string;
    /**
     * The official name of the account as given by the financial institution
     * @type {string}
     * @memberof AccountIdentity
     */
    official_name: string | null;
    /**
     * 
     * @type {AccountType}
     * @memberof AccountIdentity
     */
    type: AccountType;
    /**
     * 
     * @type {AccountSubtype}
     * @memberof AccountIdentity
     */
    subtype: AccountSubtype | null;
    /**
     * The current verification status of an Auth Item initiated through Automated or Manual micro-deposits.  Returned for Auth Items only.  `pending_automatic_verification`: The Item is pending automatic verification  `pending_manual_verification`: The Item is pending manual micro-deposit verification. Items remain in this state until the user successfully verifies the two amounts.  `automatically_verified`: The Item has successfully been automatically verified   `manually_verified`: The Item has successfully been manually verified  `verification_expired`: Plaid was unable to automatically verify the deposit within 7 calendar days and will no longer attempt to validate the Item. Users may retry by submitting their information again through Link.  `verification_failed`: The Item failed manual micro-deposit verification because the user exhausted all 3 verification attempts. Users may retry by submitting their information again through Link.   
     * @type {string}
     * @memberof AccountIdentity
     */
    verification_status?: AccountIdentityVerificationStatusEnum;
    /**
     * A unique and persistent identifier for accounts that can be used to trace multiple instances of the same account across different Items for depository accounts. This is currently an opt-in field and only supported for Chase Items.
     * @type {string}
     * @memberof AccountIdentity
     */
    persistent_account_id?: string;
    /**
     * Data returned by the financial institution about the account owner or owners. Only returned by Identity or Assets endpoints. For business accounts, the name reported may be either the name of the individual or the name of the business, depending on the institution. Multiple owners on a single account will be represented in the same `owner` object, not in multiple owner objects within the array. In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29)
     * @type {Array<Owner>}
     * @memberof AccountIdentity
     */
    owners: Array<Owner>;
}

/**
    * @export
    * @enum {string}
    */
export enum AccountIdentityVerificationStatusEnum {
    AutomaticallyVerified = 'automatically_verified',
    PendingAutomaticVerification = 'pending_automatic_verification',
    PendingManualVerification = 'pending_manual_verification',
    ManuallyVerified = 'manually_verified',
    VerificationExpired = 'verification_expired',
    VerificationFailed = 'verification_failed'
}

/**
 * 
 * @export
 * @interface AccountIdentityAllOf
 */
// Edited by Plaid, line 9. any to unknown
export interface AccountIdentityAllOf {
    /**
     * Data returned by the financial institution about the account owner or owners. Only returned by Identity or Assets endpoints. For business accounts, the name reported may be either the name of the individual or the name of the business, depending on the institution. Multiple owners on a single account will be represented in the same `owner` object, not in multiple owner objects within the array. In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29)
     * @type {Array<Owner>}
     * @memberof AccountIdentityAllOf
     */
    owners: Array<Owner>;
}
/**
 * Identity match scores for an account
 * @export
 * @interface AccountIdentityMatchScore
 */
// Edited by Plaid, line 9. any to unknown
export interface AccountIdentityMatchScore {
    /**
     * Plaid’s unique identifier for the account. This value will not change unless Plaid can\'t reconcile the account with the data returned by the financial institution. This may occur, for example, when the name of the account changes. If this happens a new `account_id` will be assigned to the account.  The `account_id` can also change if the `access_token` is deleted and the same credentials that were used to generate that `access_token` are used to generate a new `access_token` on a later date. In that case, the new `account_id` will be different from the old `account_id`.  If an account with a specific `account_id` disappears instead of changing, the account is likely closed. Closed accounts are not returned by the Plaid API.  Like all Plaid identifiers, the `account_id` is case sensitive.
     * @type {string}
     * @memberof AccountIdentityMatchScore
     */
    account_id: string;
    /**
     * 
     * @type {AccountBalance}
     * @memberof AccountIdentityMatchScore
     */
    balances: AccountBalance;
    /**
     * The last 2-4 alphanumeric characters of an account\'s official account number. Note that the mask may be non-unique between an Item\'s accounts, and it may also not match the mask that the bank displays to the user.
     * @type {string}
     * @memberof AccountIdentityMatchScore
     */
    mask: string | null;
    /**
     * The name of the account, either assigned by the user or by the financial institution itself
     * @type {string}
     * @memberof AccountIdentityMatchScore
     */
    name: string;
    /**
     * The official name of the account as given by the financial institution
     * @type {string}
     * @memberof AccountIdentityMatchScore
     */
    official_name: string | null;
    /**
     * 
     * @type {AccountType}
     * @memberof AccountIdentityMatchScore
     */
    type: AccountType;
    /**
     * 
     * @type {AccountSubtype}
     * @memberof AccountIdentityMatchScore
     */
    subtype: AccountSubtype | null;
    /**
     * The current verification status of an Auth Item initiated through Automated or Manual micro-deposits.  Returned for Auth Items only.  `pending_automatic_verification`: The Item is pending automatic verification  `pending_manual_verification`: The Item is pending manual micro-deposit verification. Items remain in this state until the user successfully verifies the two amounts.  `automatically_verified`: The Item has successfully been automatically verified   `manually_verified`: The Item has successfully been manually verified  `verification_expired`: Plaid was unable to automatically verify the deposit within 7 calendar days and will no longer attempt to validate the Item. Users may retry by submitting their information again through Link.  `verification_failed`: The Item failed manual micro-deposit verification because the user exhausted all 3 verification attempts. Users may retry by submitting their information again through Link.   
     * @type {string}
     * @memberof AccountIdentityMatchScore
     */
    verification_status?: AccountIdentityMatchScoreVerificationStatusEnum;
    /**
     * A unique and persistent identifier for accounts that can be used to trace multiple instances of the same account across different Items for depository accounts. This is currently an opt-in field and only supported for Chase Items.
     * @type {string}
     * @memberof AccountIdentityMatchScore
     */
    persistent_account_id?: string;
    /**
     * 
     * @type {NameMatchScore}
     * @memberof AccountIdentityMatchScore
     */
    legal_name?: NameMatchScore | null;
    /**
     * 
     * @type {PhoneNumberMatchScore}
     * @memberof AccountIdentityMatchScore
     */
    phone_number?: PhoneNumberMatchScore | null;
    /**
     * 
     * @type {EmailAddressMatchScore}
     * @memberof AccountIdentityMatchScore
     */
    email_address?: EmailAddressMatchScore | null;
    /**
     * 
     * @type {AddressMatchScore}
     * @memberof AccountIdentityMatchScore
     */
    address?: AddressMatchScore | null;
}

/**
    * @export
    * @enum {string}
    */
export enum AccountIdentityMatchScoreVerificationStatusEnum {
    AutomaticallyVerified = 'automatically_verified',
    PendingAutomaticVerification = 'pending_automatic_verification',
    PendingManualVerification = 'pending_manual_verification',
    ManuallyVerified = 'manually_verified',
    VerificationExpired = 'verification_expired',
    VerificationFailed = 'verification_failed'
}

/**
 * 
 * @export
 * @interface AccountIdentityMatchScoreAllOf
 */
// Edited by Plaid, line 9. any to unknown
export interface AccountIdentityMatchScoreAllOf {
    /**
     * 
     * @type {NameMatchScore}
     * @memberof AccountIdentityMatchScoreAllOf
     */
    legal_name?: NameMatchScore | null;
    /**
     * 
     * @type {PhoneNumberMatchScore}
     * @memberof AccountIdentityMatchScoreAllOf
     */
    phone_number?: PhoneNumberMatchScore | null;
    /**
     * 
     * @type {EmailAddressMatchScore}
     * @memberof AccountIdentityMatchScoreAllOf
     */
    email_address?: EmailAddressMatchScore | null;
    /**
     * 
     * @type {AddressMatchScore}
     * @memberof AccountIdentityMatchScoreAllOf
     */
    address?: AddressMatchScore | null;
}
/**
 * Allow the application to access specific products on this account
 * @export
 * @interface AccountProductAccess
 */
// Edited by Plaid, line 9. any to unknown
export interface AccountProductAccess {
    /**
     * Allow the application to access account data. Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
     * @type {boolean}
     * @memberof AccountProductAccess
     */
    account_data?: boolean | null;
    /**
     * Allow the application to access bank statements. Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
     * @type {boolean}
     * @memberof AccountProductAccess
     */
    statements?: boolean | null;
    /**
     * Allow the application to access tax documents. Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
     * @type {boolean}
     * @memberof AccountProductAccess
     */
    tax_documents?: boolean | null;
}
/**
 * Allow the application to access specific products on this account
 * @export
 * @interface AccountProductAccessNullable
 */
// Edited by Plaid, line 9. any to unknown
export interface AccountProductAccessNullable {
    /**
     * Allow the application to access account data. Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
     * @type {boolean}
     * @memberof AccountProductAccessNullable
     */
    account_data?: boolean | null;
    /**
     * Allow the application to access bank statements. Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
     * @type {boolean}
     * @memberof AccountProductAccessNullable
     */
    statements?: boolean | null;
    /**
     * Allow the application to access tax documents. Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
     * @type {boolean}
     * @memberof AccountProductAccessNullable
     */
    tax_documents?: boolean | null;
}
/**
 * The application requires that accounts be limited to a specific cardinality. `MULTI_SELECT`: indicates that the user should be allowed to pick multiple accounts. `SINGLE_SELECT`: indicates that the user should be allowed to pick only a single account. `ALL`: indicates that the user must share all of their accounts and should not be given the opportunity to de-select
 * @export
 * @enum {string}
 */
export enum AccountSelectionCardinality {
    SingleSelect = 'SINGLE_SELECT',
    MultiSelect = 'MULTI_SELECT',
    All = 'ALL'
}

/**
 * See the [Account type schema](https://plaid.com/docs/api/accounts/#account-type-schema) for a full listing of account types and corresponding subtypes.
 * @export
 * @enum {string}
 */
export enum AccountSubtype {
    _401a = '401a',
    _401k = '401k',
    _403B = '403B',
    _457b = '457b',
    _529 = '529',
    Brokerage = 'brokerage',
    CashIsa = 'cash isa',
    CryptoExchange = 'crypto exchange',
    EducationSavingsAccount = 'education savings account',
    Ebt = 'ebt',
    FixedAnnuity = 'fixed annuity',
    Gic = 'gic',
    HealthReimbursementArrangement = 'health reimbursement arrangement',
    Hsa = 'hsa',
    Isa = 'isa',
    Ira = 'ira',
    Lif = 'lif',
    LifeInsurance = 'life insurance',
    Lira = 'lira',
    Lrif = 'lrif',
    Lrsp = 'lrsp',
    NonCustodialWallet = 'non-custodial wallet',
    NonTaxableBrokerageAccount = 'non-taxable brokerage account',
    Other = 'other',
    OtherInsurance = 'other insurance',
    OtherAnnuity = 'other annuity',
    Prif = 'prif',
    Rdsp = 'rdsp',
    Resp = 'resp',
    Rlif = 'rlif',
    Rrif = 'rrif',
    Pension = 'pension',
    ProfitSharingPlan = 'profit sharing plan',
    Retirement = 'retirement',
    Roth = 'roth',
    Roth401k = 'roth 401k',
    Rrsp = 'rrsp',
    SepIra = 'sep ira',
    SimpleIra = 'simple ira',
    Sipp = 'sipp',
    StockPlan = 'stock plan',
    ThriftSavingsPlan = 'thrift savings plan',
    Tfsa = 'tfsa',
    Trust = 'trust',
    Ugma = 'ugma',
    Utma = 'utma',
    VariableAnnuity = 'variable annuity',
    CreditCard = 'credit card',
    Paypal = 'paypal',
    Cd = 'cd',
    Checking = 'checking',
    Savings = 'savings',
    MoneyMarket = 'money market',
    Prepaid = 'prepaid',
    Auto = 'auto',
    Business = 'business',
    Commercial = 'commercial',
    Construction = 'construction',
    Consumer = 'consumer',
    HomeEquity = 'home equity',
    Loan = 'loan',
    Mortgage = 'mortgage',
    Overdraft = 'overdraft',
    LineOfCredit = 'line of credit',
    Student = 'student',
    CashManagement = 'cash management',
    Keogh = 'keogh',
    MutualFund = 'mutual fund',
    Recurring = 'recurring',
    Rewards = 'rewards',
    SafeDeposit = 'safe deposit',
    Sarsep = 'sarsep',
    Payroll = 'payroll',
    Null = 'null'
}

/**
 * `investment:` Investment account. In API versions 2018-05-22 and earlier, this type is called `brokerage` instead.  `credit:` Credit card  `depository:` Depository account  `loan:` Loan account  `other:` Non-specified account type  See the [Account type schema](https://plaid.com/docs/api/accounts#account-type-schema) for a full listing of account types and corresponding subtypes.
 * @export
 * @enum {string}
 */
export enum AccountType {
    Investment = 'investment',
    Credit = 'credit',
    Depository = 'depository',
    Loan = 'loan',
    Brokerage = 'brokerage',
    Other = 'other'
}

/**
 * AccountsBalanceGetRequest defines the request schema for `/accounts/balance/get`
 * @export
 * @interface AccountsBalanceGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface AccountsBalanceGetRequest {
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof AccountsBalanceGetRequest
     */
    access_token: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof AccountsBalanceGetRequest
     */
    secret?: string;
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof AccountsBalanceGetRequest
     */
    client_id?: string;
    /**
     * 
     * @type {AccountsBalanceGetRequestOptions}
     * @memberof AccountsBalanceGetRequest
     */
    options?: AccountsBalanceGetRequestOptions;
}
/**
 * An optional object to filter `/accounts/balance/get` results.
 * @export
 * @interface AccountsBalanceGetRequestOptions
 */
// Edited by Plaid, line 9. any to unknown
export interface AccountsBalanceGetRequestOptions {
    /**
     * A list of `account_ids` to retrieve for the Item. The default value is `null`.  Note: An error will be returned if a provided `account_id` is not associated with the Item.
     * @type {Array<string>}
     * @memberof AccountsBalanceGetRequestOptions
     */
    account_ids?: Array<string>;
    /**
     * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the oldest acceptable balance when making a request to `/accounts/balance/get`.  If the balance that is pulled for `ins_128026` (Capital One) is older than the given timestamp, an `INVALID_REQUEST` error with the code of `LAST_UPDATED_DATETIME_OUT_OF_RANGE` will be returned with the most recent timestamp for the requested account contained in the response.  This field is only used when the institution is `ins_128026` (Capital One), in which case a value must be provided or an `INVALID_REQUEST` error with the code of `INVALID_FIELD` will be returned. For all other institutions, this field is ignored.
     * @type {string}
     * @memberof AccountsBalanceGetRequestOptions
     */
    min_last_updated_datetime?: string;
}
/**
 * AccountsGetRequest defines the request schema for `/accounts/get`
 * @export
 * @interface AccountsGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface AccountsGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof AccountsGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof AccountsGetRequest
     */
    secret?: string;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof AccountsGetRequest
     */
    access_token: string;
    /**
     * 
     * @type {AccountsGetRequestOptions}
     * @memberof AccountsGetRequest
     */
    options?: AccountsGetRequestOptions;
}
/**
 * An optional object to filter `/accounts/get` results.
 * @export
 * @interface AccountsGetRequestOptions
 */
// Edited by Plaid, line 9. any to unknown
export interface AccountsGetRequestOptions {
    /**
     * An array of `account_ids` to retrieve for the Account.
     * @type {Array<string>}
     * @memberof AccountsGetRequestOptions
     */
    account_ids?: Array<string>;
}
/**
 * AccountsGetResponse defines the response schema for `/accounts/get` and `/accounts/balance/get`.
 * @export
 * @interface AccountsGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface AccountsGetResponse {
    [key: string]: object | unknown;

    /**
     * An array of financial institution accounts associated with the Item. If `/accounts/balance/get` was called, each account will include real-time balance information.
     * @type {Array<AccountBase>}
     * @memberof AccountsGetResponse
     */
    accounts: Array<AccountBase>;
    /**
     * 
     * @type {Item}
     * @memberof AccountsGetResponse
     */
    item: Item;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof AccountsGetResponse
     */
    request_id: string;
}
/**
 * Enum representing the state of the action/activity.
 * @export
 * @enum {string}
 */
export enum ActionState {
    Unknown = 'UNKNOWN',
    Attempt = 'ATTEMPT',
    Success = 'SUCCESS',
    Failure = 'FAILURE',
    Skipped = 'SKIPPED'
}

/**
 * Describes a consent activity.
 * @export
 * @interface Activity
 */
// Edited by Plaid, line 9. any to unknown
export interface Activity {
    /**
     * 
     * @type {ActivityType}
     * @memberof Activity
     */
    activity: ActivityType;
    /**
     * The date this activity was initiated [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format in UTC.
     * @type {string}
     * @memberof Activity
     */
    initiated_date: string;
    /**
     * A unique identifier for the activity
     * @type {string}
     * @memberof Activity
     */
    id: string;
    /**
     * Application ID of the client who initiated the activity.
     * @type {string}
     * @memberof Activity
     */
    initiator: string;
    /**
     * 
     * @type {ActionState}
     * @memberof Activity
     */
    state: ActionState;
    /**
     * This field will map to the application ID that is returned from /item/applications/list, or provided to the institution in an oauth redirect.
     * @type {string}
     * @memberof Activity
     */
    target_application_id?: string;
    /**
     * 
     * @type {ScopesNullable}
     * @memberof Activity
     */
    scopes?: ScopesNullable | null;
}
/**
 * Types of consent activities
 * @export
 * @enum {string}
 */
export enum ActivityType {
    Unknown = 'UNKNOWN',
    ItemCreate = 'ITEM_CREATE',
    ItemImport = 'ITEM_IMPORT',
    ItemUpdate = 'ITEM_UPDATE',
    ItemUnlink = 'ITEM_UNLINK',
    PortalUnlink = 'PORTAL_UNLINK',
    PortalItemsDelete = 'PORTAL_ITEMS_DELETE',
    ItemRemove = 'ITEM_REMOVE',
    InvariantCheckerDeletion = 'INVARIANT_CHECKER_DELETION',
    ScopesUpdate = 'SCOPES_UPDATE'
}

/**
 * A physical mailing address.
 * @export
 * @interface Address
 */
// Edited by Plaid, line 9. any to unknown
export interface Address {
    [key: string]: object | unknown;

    /**
     * 
     * @type {AddressData}
     * @memberof Address
     */
    data: AddressData;
    /**
     * When `true`, identifies the address as the primary address on an account.
     * @type {boolean}
     * @memberof Address
     */
    primary?: boolean;
}
/**
 * Data about the components comprising an address.
 * @export
 * @interface AddressData
 */
// Edited by Plaid, line 9. any to unknown
export interface AddressData {
    [key: string]: object | unknown;

    /**
     * The full city name
     * @type {string}
     * @memberof AddressData
     */
    city: string | null;
    /**
     * The region or state. In API versions 2018-05-22 and earlier, this field is called `state`. Example: `\"NC\"`
     * @type {string}
     * @memberof AddressData
     */
    region: string | null;
    /**
     * The full street address Example: `\"564 Main Street, APT 15\"`
     * @type {string}
     * @memberof AddressData
     */
    street: string;
    /**
     * The postal code. In API versions 2018-05-22 and earlier, this field is called `zip`.
     * @type {string}
     * @memberof AddressData
     */
    postal_code: string | null;
    /**
     * The ISO 3166-1 alpha-2 country code
     * @type {string}
     * @memberof AddressData
     */
    country: string | null;
}
/**
 * Data about the components comprising an address.
 * @export
 * @interface AddressDataNullable
 */
// Edited by Plaid, line 9. any to unknown
export interface AddressDataNullable {
    /**
     * The full city name
     * @type {string}
     * @memberof AddressDataNullable
     */
    city: string | null;
    /**
     * The region or state. In API versions 2018-05-22 and earlier, this field is called `state`. Example: `\"NC\"`
     * @type {string}
     * @memberof AddressDataNullable
     */
    region: string | null;
    /**
     * The full street address Example: `\"564 Main Street, APT 15\"`
     * @type {string}
     * @memberof AddressDataNullable
     */
    street: string;
    /**
     * The postal code. In API versions 2018-05-22 and earlier, this field is called `zip`.
     * @type {string}
     * @memberof AddressDataNullable
     */
    postal_code: string | null;
    /**
     * The ISO 3166-1 alpha-2 country code
     * @type {string}
     * @memberof AddressDataNullable
     */
    country: string | null;
}
/**
 * Score found by matching address provided by the API with the address on the account at the financial institution. The score can range from 0 to 100 where 100 is a perfect match and 0 is a no match. If the account contains multiple owners, the maximum match score is filled.
 * @export
 * @interface AddressMatchScore
 */
// Edited by Plaid, line 9. any to unknown
export interface AddressMatchScore {
    [key: string]: object | unknown;

    /**
     * Match score for address. The score can range from 0 to 100 where 100 is a perfect match and 0 is a no match. If the address is missing from either the API or financial institution, this is null.
     * @type {number}
     * @memberof AddressMatchScore
     */
    score?: number | null;
    /**
     * postal code was provided for both and was a match
     * @type {boolean}
     * @memberof AddressMatchScore
     */
    is_postal_code_match?: boolean | null;
}
/**
 * A physical mailing address.
 * @export
 * @interface AddressNullable
 */
// Edited by Plaid, line 9. any to unknown
export interface AddressNullable {
    /**
     * 
     * @type {AddressData}
     * @memberof AddressNullable
     */
    data: AddressData;
    /**
     * When `true`, identifies the address as the primary address on an account.
     * @type {boolean}
     * @memberof AddressNullable
     */
    primary?: boolean;
}
/**
 * Field describing whether the associated address is being used for commercial or residential purposes.  Note: This value will be `no_data` when Plaid does not have sufficient data to determine the address\'s use.
 * @export
 * @enum {string}
 */
export enum AddressPurposeLabel {
    Residential = 'residential',
    Commercial = 'commercial',
    NoData = 'no_data'
}

/**
 * Metadata about the application
 * @export
 * @interface Application
 */
// Edited by Plaid, line 9. any to unknown
export interface Application {
    /**
     * This field will map to the application ID that is returned from /item/applications/list, or provided to the institution in an oauth redirect.
     * @type {string}
     * @memberof Application
     */
    application_id: string;
    /**
     * The name of the application
     * @type {string}
     * @memberof Application
     */
    name: string;
    /**
     * A human-readable name of the application for display purposes
     * @type {string}
     * @memberof Application
     */
    display_name: string | null;
    /**
     * The date this application was granted production access at Plaid in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format in UTC.
     * @type {string}
     * @memberof Application
     */
    join_date: string;
    /**
     * A URL that links to the application logo image.
     * @type {string}
     * @memberof Application
     */
    logo_url: string | null;
    /**
     * The URL for the application\'s website
     * @type {string}
     * @memberof Application
     */
    application_url: string | null;
    /**
     * A string provided by the connected app stating why they use their respective enabled products.
     * @type {string}
     * @memberof Application
     */
    reason_for_access: string | null;
    /**
     * A string representing client’s broad use case as assessed by Plaid.
     * @type {string}
     * @memberof Application
     */
    use_case: string | null;
    /**
     * A string representing the name of client’s legal entity.
     * @type {string}
     * @memberof Application
     */
    company_legal_name: string | null;
    /**
     * A string representing the city of the client’s headquarters.
     * @type {string}
     * @memberof Application
     */
    city: string | null;
    /**
     * A string representing the region of the client’s headquarters.
     * @type {string}
     * @memberof Application
     */
    region: string | null;
    /**
     * A string representing the postal code of the client’s headquarters.
     * @type {string}
     * @memberof Application
     */
    postal_code: string | null;
    /**
     * A string representing the country code of the client’s headquarters.
     * @type {string}
     * @memberof Application
     */
    country_code: string | null;
}
/**
 * ApplicationGetRequest defines the schema for `/application/get`
 * @export
 * @interface ApplicationGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface ApplicationGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof ApplicationGetRequest
     */
    client_id: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof ApplicationGetRequest
     */
    secret: string;
    /**
     * This field will map to the application ID that is returned from /item/applications/list, or provided to the institution in an oauth redirect.
     * @type {string}
     * @memberof ApplicationGetRequest
     */
    application_id: string;
}
/**
 * ApplicationGetResponse defines the response schema for `/application/get`
 * @export
 * @interface ApplicationGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface ApplicationGetResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof ApplicationGetResponse
     */
    request_id: string;
    /**
     * 
     * @type {Application}
     * @memberof ApplicationGetResponse
     */
    application: Application;
}
/**
 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
 * @export
 * @interface Asset
 */
// Edited by Plaid, line 9. any to unknown
export interface Asset {
    [key: string]: object | unknown;

    /**
     * 
     * @type {AssetDetail}
     * @memberof Asset
     */
    ASSET_DETAIL: AssetDetail;
    /**
     * 
     * @type {AssetOwners}
     * @memberof Asset
     */
    ASSET_OWNERS: AssetOwners;
    /**
     * 
     * @type {AssetHolder}
     * @memberof Asset
     */
    ASSET_HOLDER: AssetHolder;
    /**
     * 
     * @type {AssetTransactions}
     * @memberof Asset
     */
    ASSET_TRANSACTIONS: AssetTransactions;
    /**
     * 
     * @type {ValidationSources}
     * @memberof Asset
     */
    VALIDATION_SOURCES: ValidationSources;
}
/**
 * Details about an asset.
 * @export
 * @interface AssetDetail
 */
// Edited by Plaid, line 9. any to unknown
export interface AssetDetail {
    [key: string]: object | unknown;

    /**
     * A vendor created unique Identifier.
     * @type {string}
     * @memberof AssetDetail
     */
    AssetUniqueIdentifier: string;
    /**
     * A unique alphanumeric string identifying an asset.
     * @type {string}
     * @memberof AssetDetail
     */
    AssetAccountIdentifier: string;
    /**
     * Account Report As of Date / Create Date. Format YYYY-MM-DD
     * @type {string}
     * @memberof AssetDetail
     */
    AssetAsOfDate: string;
    /**
     * A text description that further defines the Asset. This could be used to describe the shares associated with the stocks, bonds or mutual funds, retirement funds or business owned that the borrower has disclosed (named) as an asset.
     * @type {string}
     * @memberof AssetDetail
     */
    AssetDescription: string | null;
    /**
     * Asset Account Available Balance.
     * @type {number}
     * @memberof AssetDetail
     */
    AssetAvailableBalanceAmount: number;
    /**
     * A vendor created unique Identifier
     * @type {number}
     * @memberof AssetDetail
     */
    AssetCurrentBalanceAmount: number;
    /**
     * 
     * @type {AssetType}
     * @memberof AssetDetail
     */
    AssetType: AssetType;
    /**
     * Additional Asset Decription some examples are Investment Tax-Deferred , Loan, 401K, 403B, Checking, Money Market, Credit Card,ROTH,529,Biller,ROLLOVER,CD,Savings,Investment Taxable, IRA, Mortgage, Line Of Credit.
     * @type {string}
     * @memberof AssetDetail
     */
    AssetTypeAdditionalDescription: string | null;
    /**
     * The Number of days requested made to the Financial Institution. Example When looking for 3 months of data from the FI, pass in 90 days.
     * @type {number}
     * @memberof AssetDetail
     */
    AssetDaysRequestedCount: number;
    /**
     * Ownership type of the asset account.
     * @type {string}
     * @memberof AssetDetail
     */
    AssetOwnershipType: string | null;
}
/**
 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
 * @export
 * @interface AssetHolder
 */
// Edited by Plaid, line 9. any to unknown
export interface AssetHolder {
    [key: string]: object | unknown;

    /**
     * 
     * @type {AssetHolderName}
     * @memberof AssetHolder
     */
    NAME: AssetHolderName;
}
/**
 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
 * @export
 * @interface AssetHolderName
 */
// Edited by Plaid, line 9. any to unknown
export interface AssetHolderName {
    [key: string]: object | unknown;

    /**
     * The unparsed name of either an individual or a legal entity.
     * @type {string}
     * @memberof AssetHolderName
     */
    FullName: string;
}
/**
 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
 * @export
 * @interface AssetOwner
 */
// Edited by Plaid, line 9. any to unknown
export interface AssetOwner {
    [key: string]: object | unknown;

    /**
     * Account Owner Full Name.
     * @type {string}
     * @memberof AssetOwner
     */
    AssetOwnerText: string | null;
}
/**
 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
 * @export
 * @interface AssetOwners
 */
// Edited by Plaid, line 9. any to unknown
export interface AssetOwners {
    [key: string]: object | unknown;

    /**
     * Multiple Occurances of Account Owners Full Name up to 4.
     * @type {Array<AssetOwner>}
     * @memberof AssetOwners
     */
    ASSET_OWNER: Array<AssetOwner>;
}
/**
 * An object representing an Asset Report
 * @export
 * @interface AssetReport
 */
// Edited by Plaid, line 9. any to unknown
export interface AssetReport {
    [key: string]: object | unknown;

    /**
     * A unique ID identifying an Asset Report. Like all Plaid identifiers, this ID is case sensitive.
     * @type {string}
     * @memberof AssetReport
     */
    asset_report_id: string;
    /**
     * An identifier you determine and submit for the Asset Report.
     * @type {string}
     * @memberof AssetReport
     */
    client_report_id: string | null;
    /**
     * The date and time when the Asset Report was created, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (e.g. \"2018-04-12T03:32:11Z\").
     * @type {string}
     * @memberof AssetReport
     */
    date_generated: string;
    /**
     * The duration of transaction history you requested
     * @type {number}
     * @memberof AssetReport
     */
    days_requested: number;
    /**
     * 
     * @type {AssetReportUser}
     * @memberof AssetReport
     */
    user: AssetReportUser;
    /**
     * Data returned by Plaid about each of the Items included in the Asset Report.
     * @type {Array<AssetReportItem>}
     * @memberof AssetReport
     */
    items: Array<AssetReportItem>;
}
/**
 * A list of add-ons that should be included in the Asset Report.  `fast_assets`: When Fast Assets is requested, Plaid will create two versions of the Asset Report: the Fast Asset Report, which will contain only Identity and Balance information, and the Full Asset Report, which will also contain Transactions information. A `PRODUCT_READY` webhook will be fired for each Asset Report when it is ready, and the `report_type` field will indicate whether the webhook is firing for the `full` or `fast` Asset Report. To retrieve the Fast Asset Report, call `/asset_report/get` with `fast_report` set to `true`. There is no additional charge for using Fast Assets.  `investments`: Request an Asset Report with Investments. This add-on is in closed beta and not generally available.
 * @export
 * @enum {string}
 */
export enum AssetReportAddOns {
    Investments = 'investments',
    FastAssets = 'fast_assets'
}

/**
 * AssetReportAuditCopyCreateRequest defines the request schema for `/asset_report/audit_copy/get`
 * @export
 * @interface AssetReportAuditCopyCreateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface AssetReportAuditCopyCreateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof AssetReportAuditCopyCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof AssetReportAuditCopyCreateRequest
     */
    secret?: string;
    /**
     * A token that can be provided to endpoints such as `/asset_report/get` or `/asset_report/pdf/get` to fetch or update an Asset Report.
     * @type {string}
     * @memberof AssetReportAuditCopyCreateRequest
     */
    asset_report_token: string;
    /**
     * The `auditor_id` of the third party with whom you would like to share the Asset Report.
     * @type {string}
     * @memberof AssetReportAuditCopyCreateRequest
     */
    auditor_id?: string;
}
/**
 * AssetReportAuditCopyCreateResponse defines the response schema for `/asset_report/audit_copy/get`
 * @export
 * @interface AssetReportAuditCopyCreateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface AssetReportAuditCopyCreateResponse {
    [key: string]: object | unknown;

    /**
     * A token that can be shared with a third party auditor to allow them to obtain access to the Asset Report. This token should be stored securely.
     * @type {string}
     * @memberof AssetReportAuditCopyCreateResponse
     */
    audit_copy_token: string;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof AssetReportAuditCopyCreateResponse
     */
    request_id: string;
}
/**
 * AssetReportAuditCopyGetRequest defines the request schema for `/asset_report/audit_copy/get`
 * @export
 * @interface AssetReportAuditCopyGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface AssetReportAuditCopyGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof AssetReportAuditCopyGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof AssetReportAuditCopyGetRequest
     */
    secret?: string;
    /**
     * The `audit_copy_token` granting access to the Audit Copy you would like to get.
     * @type {string}
     * @memberof AssetReportAuditCopyGetRequest
     */
    audit_copy_token: string;
}
/**
 * AssetReportAuditCopyRemoveRequest defines the request schema for `/asset_report/audit_copy/remove`
 * @export
 * @interface AssetReportAuditCopyRemoveRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface AssetReportAuditCopyRemoveRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof AssetReportAuditCopyRemoveRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof AssetReportAuditCopyRemoveRequest
     */
    secret?: string;
    /**
     * The `audit_copy_token` granting access to the Audit Copy you would like to revoke.
     * @type {string}
     * @memberof AssetReportAuditCopyRemoveRequest
     */
    audit_copy_token: string;
}
/**
 * AssetReportAuditCopyRemoveResponse defines the response schema for `/asset_report/audit_copy/remove`
 * @export
 * @interface AssetReportAuditCopyRemoveResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface AssetReportAuditCopyRemoveResponse {
    [key: string]: object | unknown;

    /**
     * `true` if the Audit Copy was successfully removed.
     * @type {boolean}
     * @memberof AssetReportAuditCopyRemoveResponse
     */
    removed: boolean;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof AssetReportAuditCopyRemoveResponse
     */
    request_id: string;
}
/**
 * AssetReportCreateRequest defines the request schema for `/asset_report/create`
 * @export
 * @interface AssetReportCreateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface AssetReportCreateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof AssetReportCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof AssetReportCreateRequest
     */
    secret?: string;
    /**
     * An array of access tokens corresponding to the Items that will be included in the report. The `assets` product must have been initialized for the Items during link; the Assets product cannot be added after initialization.
     * @type {Array<string>}
     * @memberof AssetReportCreateRequest
     */
    access_tokens?: Array<string>;
    /**
     * The user token associated with the User for which to create an asset report for. All items associated with the User will be included in the report.
     * @type {string}
     * @memberof AssetReportCreateRequest
     */
    user_token?: string;
    /**
     * The maximum integer number of days of history to include in the Asset Report. If using Fannie Mae Day 1 Certainty, `days_requested` must be at least 61 for new originations or at least 31 for refinancings.  An Asset Report requested with \"Additional History\" (that is, with more than 61 days of transaction history) will incur an Additional History fee.
     * @type {number}
     * @memberof AssetReportCreateRequest
     */
    days_requested: number;
    /**
     * 
     * @type {AssetReportCreateRequestOptions}
     * @memberof AssetReportCreateRequest
     */
    options?: AssetReportCreateRequestOptions;
}
/**
 * An optional object to filter `/asset_report/create` results. If provided, must be non-`null`. The optional `user` object is required for the report to be eligible for Fannie Mae\'s Day 1 Certainty program.
 * @export
 * @interface AssetReportCreateRequestOptions
 */
// Edited by Plaid, line 9. any to unknown
export interface AssetReportCreateRequestOptions {
    /**
     * Client-generated identifier, which can be used by lenders to track loan applications.
     * @type {string}
     * @memberof AssetReportCreateRequestOptions
     */
    client_report_id?: string | null;
    /**
     * URL to which Plaid will send Assets webhooks, for example when the requested Asset Report is ready.
     * @type {string}
     * @memberof AssetReportCreateRequestOptions
     */
    webhook?: string | null;
    /**
     * true to return balance and identity earlier as a fast report. Defaults to false if omitted.
     * @type {boolean}
     * @memberof AssetReportCreateRequestOptions
     * @deprecated
     */
    include_fast_report?: boolean | null;
    /**
     * Additional information that can be included in the asset report. Possible values: `\"investments\"`
     * @type {Array<string>}
     * @memberof AssetReportCreateRequestOptions
     * @deprecated
     */
    products?: Array<string>;
    /**
     * Use this field to request a `fast_asset` report. When Fast Assets is requested, Plaid will create two versions of the Asset Report: first, the Fast Asset Report, which will contain only current identity and balance information, and later, the Full Asset Report, which will also contain historical balance information and transaction data. A `PRODUCT_READY` webhook will be fired for each Asset Report when it is ready, and the `report_type` field will indicate whether the webhook is firing for the `full` or `fast` Asset Report. To retrieve the Fast Asset Report, call `/asset_report/get` with `fast_report` set to `true`. There is no additional charge for using Fast Assets.
     * @type {Array<AssetReportAddOns>}
     * @memberof AssetReportCreateRequestOptions
     */
    add_ons?: Array<AssetReportAddOns>;
    /**
     * 
     * @type {AssetReportUser}
     * @memberof AssetReportCreateRequestOptions
     */
    user?: AssetReportUser;
}
/**
 * AssetReportCreateResponse defines the response schema for `/asset_report/create`
 * @export
 * @interface AssetReportCreateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface AssetReportCreateResponse {
    [key: string]: object | unknown;

    /**
     * A token that can be provided to endpoints such as `/asset_report/get` or `/asset_report/pdf/get` to fetch or update an Asset Report.
     * @type {string}
     * @memberof AssetReportCreateResponse
     */
    asset_report_token: string;
    /**
     * A unique ID identifying an Asset Report. Like all Plaid identifiers, this ID is case sensitive.
     * @type {string}
     * @memberof AssetReportCreateResponse
     */
    asset_report_id: string;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof AssetReportCreateResponse
     */
    request_id: string;
}
/**
 * AssetReportFilterRequest defines the request schema for `/asset_report/filter`
 * @export
 * @interface AssetReportFilterRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface AssetReportFilterRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof AssetReportFilterRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof AssetReportFilterRequest
     */
    secret?: string;
    /**
     * A token that can be provided to endpoints such as `/asset_report/get` or `/asset_report/pdf/get` to fetch or update an Asset Report.
     * @type {string}
     * @memberof AssetReportFilterRequest
     */
    asset_report_token: string;
    /**
     * The accounts to exclude from the Asset Report, identified by `account_id`.
     * @type {Array<string>}
     * @memberof AssetReportFilterRequest
     */
    account_ids_to_exclude: Array<string>;
}
/**
 * AssetReportFilterResponse defines the response schema for `/asset_report/filter`
 * @export
 * @interface AssetReportFilterResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface AssetReportFilterResponse {
    [key: string]: object | unknown;

    /**
     * A token that can be provided to endpoints such as `/asset_report/get` or `/asset_report/pdf/get` to fetch or update an Asset Report.
     * @type {string}
     * @memberof AssetReportFilterResponse
     */
    asset_report_token: string;
    /**
     * A unique ID identifying an Asset Report. Like all Plaid identifiers, this ID is case sensitive.
     * @type {string}
     * @memberof AssetReportFilterResponse
     */
    asset_report_id: string;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof AssetReportFilterResponse
     */
    request_id: string;
}
/**
 * An object representing an Asset Report with Freddie Mac schema.
 * @export
 * @interface AssetReportFreddie
 */
// Edited by Plaid, line 9. any to unknown
export interface AssetReportFreddie {
    [key: string]: object | unknown;

    /**
     * 
     * @type {Loans}
     * @memberof AssetReportFreddie
     */
    LOANS: Loans;
    /**
     * 
     * @type {Parties}
     * @memberof AssetReportFreddie
     */
    PARTIES: Parties;
    /**
     * 
     * @type {Services}
     * @memberof AssetReportFreddie
     */
    SERVICES: Services;
}
/**
 * AssetReportFreddieGetRequest defines the request schema for `credit/asset_report/freddie_mac/get`
 * @export
 * @interface AssetReportFreddieGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface AssetReportFreddieGetRequest {
    [key: string]: object | unknown;

    /**
     * A token that can be shared with a third party auditor to allow them to obtain access to the Asset Report. This token should be stored securely.
     * @type {string}
     * @memberof AssetReportFreddieGetRequest
     */
    audit_copy_token: string;
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof AssetReportFreddieGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof AssetReportFreddieGetRequest
     */
    secret?: string;
}
/**
 * AssetReportFreddieGetResponse defines the response schema for `/asset_report/get`
 * @export
 * @interface AssetReportFreddieGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface AssetReportFreddieGetResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {AssetReportFreddie}
     * @memberof AssetReportFreddieGetResponse
     */
    DEAL: AssetReportFreddie;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof AssetReportFreddieGetResponse
     */
    request_id: string;
    /**
     * The Verification Of Assets (aka VOA or Freddie Mac Schema) schema version.
     * @type {number}
     * @memberof AssetReportFreddieGetResponse
     */
    SchemaVersion: number;
}
/**
 * AssetReportGetRequest defines the request schema for `/asset_report/get`
 * @export
 * @interface AssetReportGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface AssetReportGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof AssetReportGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof AssetReportGetRequest
     */
    secret?: string;
    /**
     * A token that can be provided to endpoints such as `/asset_report/get` or `/asset_report/pdf/get` to fetch or update an Asset Report.
     * @type {string}
     * @memberof AssetReportGetRequest
     */
    asset_report_token: string;
    /**
     * `true` if you would like to retrieve the Asset Report with Insights, `false` otherwise. This field defaults to `false` if omitted.
     * @type {boolean}
     * @memberof AssetReportGetRequest
     */
    include_insights?: boolean;
    /**
     * `true` to fetch \"fast\" version of asset report. Defaults to false if omitted. Can only be used if `/asset_report/create` was called with `options.add_ons` set to `[\"fast_assets\"]`.
     * @type {boolean}
     * @memberof AssetReportGetRequest
     */
    fast_report?: boolean;
    /**
     * 
     * @type {AssetReportGetRequestOptions}
     * @memberof AssetReportGetRequest
     */
    options?: AssetReportGetRequestOptions;
}
/**
 * An optional object to filter or add data to `/asset_report/get` results. If provided, must be non-`null`.
 * @export
 * @interface AssetReportGetRequestOptions
 */
// Edited by Plaid, line 9. any to unknown
export interface AssetReportGetRequestOptions {
    /**
     * The maximum number of days of history to include in the Asset Report.
     * @type {number}
     * @memberof AssetReportGetRequestOptions
     */
    days_to_include?: number | null;
}
/**
 * AssetReportGetResponse defines the response schema for `/asset_report/get`
 * @export
 * @interface AssetReportGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface AssetReportGetResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {AssetReport}
     * @memberof AssetReportGetResponse
     */
    report: AssetReport;
    /**
     * If the Asset Report generation was successful but identity information cannot be returned, this array will contain information about the errors causing identity information to be missing
     * @type {Array<Warning>}
     * @memberof AssetReportGetResponse
     */
    warnings: Array<Warning>;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof AssetReportGetResponse
     */
    request_id: string;
}
/**
 * A representation of an Item within an Asset Report.
 * @export
 * @interface AssetReportItem
 */
// Edited by Plaid, line 9. any to unknown
export interface AssetReportItem {
    [key: string]: object | unknown;

    /**
     * The `item_id` of the Item associated with this webhook, warning, or error
     * @type {string}
     * @memberof AssetReportItem
     */
    item_id: string;
    /**
     * The full financial institution name associated with the Item.
     * @type {string}
     * @memberof AssetReportItem
     */
    institution_name: string;
    /**
     * The id of the financial institution associated with the Item.
     * @type {string}
     * @memberof AssetReportItem
     */
    institution_id: string;
    /**
     * The date and time when this Item’s data was last retrieved from the financial institution, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
     * @type {string}
     * @memberof AssetReportItem
     */
    date_last_updated: string;
    /**
     * Data about each of the accounts open on the Item.
     * @type {Array<AccountAssets>}
     * @memberof AssetReportItem
     */
    accounts: Array<AccountAssets>;
}
/**
 * AssetReportPDFGetRequest defines the request schema for `/asset_report/pdf/get`
 * @export
 * @interface AssetReportPDFGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface AssetReportPDFGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof AssetReportPDFGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof AssetReportPDFGetRequest
     */
    secret?: string;
    /**
     * A token that can be provided to endpoints such as `/asset_report/get` or `/asset_report/pdf/get` to fetch or update an Asset Report.
     * @type {string}
     * @memberof AssetReportPDFGetRequest
     */
    asset_report_token: string;
    /**
     * 
     * @type {AssetReportPDFGetRequestOptions}
     * @memberof AssetReportPDFGetRequest
     */
    options?: AssetReportPDFGetRequestOptions;
}
/**
 * An optional object to filter or add data to `/asset_report/get` results. If provided, must be non-`null`.
 * @export
 * @interface AssetReportPDFGetRequestOptions
 */
// Edited by Plaid, line 9. any to unknown
export interface AssetReportPDFGetRequestOptions {
    /**
     * The maximum integer number of days of history to include in the Asset Report.
     * @type {number}
     * @memberof AssetReportPDFGetRequestOptions
     */
    days_to_include?: number | null;
}
/**
 * AssetReportRefreshRequest defines the request schema for `/asset_report/refresh`
 * @export
 * @interface AssetReportRefreshRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface AssetReportRefreshRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof AssetReportRefreshRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof AssetReportRefreshRequest
     */
    secret?: string;
    /**
     * The `asset_report_token` returned by the original call to `/asset_report/create`
     * @type {string}
     * @memberof AssetReportRefreshRequest
     */
    asset_report_token: string;
    /**
     * The maximum number of days of history to include in the Asset Report. Must be an integer. If not specified, the value from the original call to `/asset_report/create` will be used.
     * @type {number}
     * @memberof AssetReportRefreshRequest
     */
    days_requested?: number | null;
    /**
     * 
     * @type {AssetReportRefreshRequestOptions}
     * @memberof AssetReportRefreshRequest
     */
    options?: AssetReportRefreshRequestOptions;
}
/**
 * An optional object to filter `/asset_report/refresh` results. If provided, cannot be `null`. If not specified, the `options` from the original call to `/asset_report/create` will be used.
 * @export
 * @interface AssetReportRefreshRequestOptions
 */
// Edited by Plaid, line 9. any to unknown
export interface AssetReportRefreshRequestOptions {
    /**
     * Client-generated identifier, which can be used by lenders to track loan applications.
     * @type {string}
     * @memberof AssetReportRefreshRequestOptions
     */
    client_report_id?: string | null;
    /**
     * URL to which Plaid will send Assets webhooks, for example when the requested Asset Report is ready.
     * @type {string}
     * @memberof AssetReportRefreshRequestOptions
     */
    webhook?: string | null;
    /**
     * 
     * @type {AssetReportUser}
     * @memberof AssetReportRefreshRequestOptions
     */
    user?: AssetReportUser;
}
/**
 * AssetReportRefreshResponse defines the response schema for `/asset_report/refresh`
 * @export
 * @interface AssetReportRefreshResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface AssetReportRefreshResponse {
    [key: string]: object | unknown;

    /**
     * A unique ID identifying an Asset Report. Like all Plaid identifiers, this ID is case sensitive.
     * @type {string}
     * @memberof AssetReportRefreshResponse
     */
    asset_report_id: string;
    /**
     * A token that can be provided to endpoints such as `/asset_report/get` or `/asset_report/pdf/get` to fetch or update an Asset Report.
     * @type {string}
     * @memberof AssetReportRefreshResponse
     */
    asset_report_token: string;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof AssetReportRefreshResponse
     */
    request_id: string;
}
/**
 * AssetReportRemoveRequest defines the request schema for `/asset_report/remove`
 * @export
 * @interface AssetReportRemoveRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface AssetReportRemoveRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof AssetReportRemoveRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof AssetReportRemoveRequest
     */
    secret?: string;
    /**
     * A token that can be provided to endpoints such as `/asset_report/get` or `/asset_report/pdf/get` to fetch or update an Asset Report.
     * @type {string}
     * @memberof AssetReportRemoveRequest
     */
    asset_report_token: string;
}
/**
 * AssetReportRemoveResponse defines the response schema for `/asset_report/remove`
 * @export
 * @interface AssetReportRemoveResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface AssetReportRemoveResponse {
    [key: string]: object | unknown;

    /**
     * `true` if the Asset Report was successfully removed.
     * @type {boolean}
     * @memberof AssetReportRemoveResponse
     */
    removed: boolean;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof AssetReportRemoveResponse
     */
    request_id: string;
}
/**
 * A transaction on the asset report
 * @export
 * @interface AssetReportTransaction
 */
// Edited by Plaid, line 9. any to unknown
export interface AssetReportTransaction {
    [key: string]: object | unknown;

    /**
     * The ID of the account in which this transaction occurred.
     * @type {string}
     * @memberof AssetReportTransaction
     */
    account_id: string;
    /**
     * The settled value of the transaction, denominated in the transactions\'s currency, as stated in `iso_currency_code` or `unofficial_currency_code`. Positive values when money moves out of the account; negative values when money moves in. For example, debit card purchases are positive; credit card payments, direct deposits, and refunds are negative.
     * @type {number}
     * @memberof AssetReportTransaction
     */
    amount: number;
    /**
     * The ISO-4217 currency code of the transaction. Always `null` if `unofficial_currency_code` is non-null.
     * @type {string}
     * @memberof AssetReportTransaction
     */
    iso_currency_code: string | null;
    /**
     * The unofficial currency code associated with the transaction. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
     * @type {string}
     * @memberof AssetReportTransaction
     */
    unofficial_currency_code: string | null;
    /**
     * The string returned by the financial institution to describe the transaction. For transactions returned by `/transactions/get`, this field is in beta and will be omitted unless the client is both enrolled in the closed beta program and has set `options.include_original_description` to `true`.
     * @type {string}
     * @memberof AssetReportTransaction
     */
    original_description: string | null;
    /**
     * A hierarchical array of the categories to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).  All Transactions implementations are recommended to use the new `personal_finance_category` instead of `category`. `personal_finance_category` provides more meaningful categorization and greater accuracy.  If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
     * @type {Array<string>}
     * @memberof AssetReportTransaction
     */
    category?: Array<string> | null;
    /**
     * The ID of the category to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).  All Transactions implementations are recommended to use the new `personal_finance_category` instead of `category_id`, as it provides greater accuracy and more meaningful categorization.  If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
     * @type {string}
     * @memberof AssetReportTransaction
     */
    category_id?: string | null;
    /**
     * 
     * @type {CreditCategory}
     * @memberof AssetReportTransaction
     */
    credit_category?: CreditCategory | null;
    /**
     * The check number of the transaction. This field is only populated for check transactions.
     * @type {string}
     * @memberof AssetReportTransaction
     */
    check_number?: string | null;
    /**
     * For pending transactions, the date that the transaction occurred; for posted transactions, the date that the transaction posted. Both dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DD` ).
     * @type {string}
     * @memberof AssetReportTransaction
     */
    date: string;
    /**
     * The date on which the transaction took place, in IS0 8601 format.
     * @type {string}
     * @memberof AssetReportTransaction
     */
    date_transacted?: string | null;
    /**
     * 
     * @type {Location}
     * @memberof AssetReportTransaction
     */
    location?: Location;
    /**
     * The merchant name or transaction description.  If the `transactions` object was returned by a Transactions endpoint such as `/transactions/get`, this field will always appear. If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
     * @type {string}
     * @memberof AssetReportTransaction
     */
    name?: string;
    /**
     * The merchant name, as enriched by Plaid from the `name` field. This is typically a more human-readable version of the merchant counterparty in the transaction. For some bank transactions (such as checks or account transfers) where there is no meaningful merchant name, this value will be `null`.
     * @type {string}
     * @memberof AssetReportTransaction
     */
    merchant_name?: string | null;
    /**
     * 
     * @type {PaymentMeta}
     * @memberof AssetReportTransaction
     */
    payment_meta?: PaymentMeta;
    /**
     * When `true`, identifies the transaction as pending or unsettled. Pending transaction details (name, type, amount, category ID) may change before they are settled.
     * @type {boolean}
     * @memberof AssetReportTransaction
     */
    pending: boolean;
    /**
     * The ID of a posted transaction\'s associated pending transaction, where applicable.
     * @type {string}
     * @memberof AssetReportTransaction
     */
    pending_transaction_id?: string | null;
    /**
     * The name of the account owner. This field is not typically populated and only relevant when dealing with sub-accounts.
     * @type {string}
     * @memberof AssetReportTransaction
     */
    account_owner?: string | null;
    /**
     * The unique ID of the transaction. Like all Plaid identifiers, the `transaction_id` is case sensitive.
     * @type {string}
     * @memberof AssetReportTransaction
     */
    transaction_id: string;
    /**
     * 
     * @type {AssetReportTransactionType}
     * @memberof AssetReportTransaction
     */
    transaction_type?: AssetReportTransactionType;
    /**
     * A unique identifier for an income source.
     * @type {string}
     * @memberof AssetReportTransaction
     */
    income_source_id?: string;
}
/**
 * `digital:` transactions that took place online.  `place:` transactions that were made at a physical location.  `special:` transactions that relate to banks, e.g. fees or deposits.  `unresolved:` transactions that do not fit into the other three types. 
 * @export
 * @enum {string}
 */
export enum AssetReportTransactionType {
    Digital = 'digital',
    Place = 'place',
    Special = 'special',
    Unresolved = 'unresolved'
}

/**
 * The user object allows you to provide additional information about the user to be appended to the Asset Report. All fields are optional. The `first_name`, `last_name`, and `ssn` fields are required if you would like the Report to be eligible for Fannie Mae’s Day 1 Certainty™ program.
 * @export
 * @interface AssetReportUser
 */
// Edited by Plaid, line 9. any to unknown
export interface AssetReportUser {
    [key: string]: object | unknown;

    /**
     * An identifier you determine and submit for the user.
     * @type {string}
     * @memberof AssetReportUser
     */
    client_user_id?: string | null;
    /**
     * The user\'s first name. Required for the Fannie Mae Day 1 Certainty™ program.
     * @type {string}
     * @memberof AssetReportUser
     */
    first_name?: string | null;
    /**
     * The user\'s middle name
     * @type {string}
     * @memberof AssetReportUser
     */
    middle_name?: string | null;
    /**
     * The user\'s last name.  Required for the Fannie Mae Day 1 Certainty™ program.
     * @type {string}
     * @memberof AssetReportUser
     */
    last_name?: string | null;
    /**
     * The user\'s Social Security Number. Required for the Fannie Mae Day 1 Certainty™ program.  Format: \"ddd-dd-dddd\"
     * @type {string}
     * @memberof AssetReportUser
     */
    ssn?: string | null;
    /**
     * The user\'s phone number, in E.164 format: +{countrycode}{number}. For example: \"+14151234567\". Phone numbers provided in other formats will be parsed on a best-effort basis.
     * @type {string}
     * @memberof AssetReportUser
     */
    phone_number?: string | null;
    /**
     * The user\'s email address.
     * @type {string}
     * @memberof AssetReportUser
     */
    email?: string | null;
}
/**
 * An object representing...
 * @export
 * @interface AssetTransaction
 */
// Edited by Plaid, line 9. any to unknown
export interface AssetTransaction {
    [key: string]: object | unknown;

    /**
     * 
     * @type {AssetTransactionDetail}
     * @memberof AssetTransaction
     */
    ASSET_TRANSACTION_DETAIL: AssetTransactionDetail;
    /**
     * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
     * @type {Array<AssetTransactionDescription>}
     * @memberof AssetTransaction
     */
    ASSET_TRANSACTION_DESCRIPTON: Array<AssetTransactionDescription>;
}
/**
 * Asset Transaction Category Type Enumerated derived by Vendor.
 * @export
 * @enum {string}
 */
export enum AssetTransactionCategoryType {
    AtmFee = 'ATMFee',
    Advertising = 'Advertising',
    AirTravel = 'AirTravel',
    AlcoholBars = 'AlcoholBars',
    Allowance = 'Allowance',
    Amusement = 'Amusement',
    Arts = 'Arts',
    AutoTransport = 'AutoTransport',
    AutoInsurance = 'AutoInsurance',
    AutoPayment = 'AutoPayment',
    BabySupplies = 'BabySupplies',
    BabysitterDaycare = 'BabysitterDaycare',
    BankFee = 'BankFee',
    BillsUtilities = 'BillsUtilities',
    Bonus = 'Bonus',
    BooksSupplies = 'BooksSupplies',
    BusinessServices = 'Business Services',
    Buy = 'Buy',
    CashAtm = 'CashATM',
    Charity = 'Charity',
    Check = 'Check',
    ChildSupport = 'ChildSupport',
    Clothing = 'Clothing',
    CoffeeShops = 'CoffeeShops',
    CreditCardPayment = 'CreditCardPayment',
    Dentist = 'Dentist',
    Doctor = 'Doctor',
    Education = 'Education',
    ElectronicsSoftware = 'ElectronicsSoftware',
    Entertainment = 'Entertainment',
    Eyecare = 'Eyecare',
    FastFood = 'FastFood',
    FederalTax = 'FederalTax',
    FeesCharges = 'FeesCharges',
    FinanceCharge = 'FinanceCharge',
    Financial = 'Financial',
    FinancialAdvisor = 'FinancialAdvisor',
    FoodDining = 'FoodDining',
    Furnishings = 'Furnishings',
    GasFuel = 'GasFuel',
    GiftsDonations = 'GiftsDonations',
    Groceries = 'Groceries',
    Gym = 'Gym',
    Hair = 'Hair',
    HealthFitness = 'HealthFitness',
    HealthInsurance = 'HealthInsurance',
    Hobbies = 'Hobbies',
    Home = 'Home',
    HomeImprovement = 'HomeImprovement',
    HomeInsurance = 'HomeInsurance',
    HomePhone = 'HomePhone',
    HomeServices = 'HomeServices',
    HomeSupplies = 'HomeSupplies',
    Hotel = 'Hotel',
    Income = 'Income',
    InterestIncome = 'InterestIncome',
    Internet = 'Internet',
    Investments = 'Investments',
    Kids = 'Kids',
    KidsActivities = 'KidsActivities',
    LateFee = 'LateFee',
    Laundry = 'Laundry',
    LawnGarden = 'LawnGarden',
    Legal = 'Legal',
    LifeInsurance = 'LifeInsurance',
    LoanInsurance = 'LoanInsurance',
    LoanPayment = 'LoanPayment',
    Loans = 'Loans',
    MobilePhone = 'MobilePhone',
    MortgageRent = 'MortgageRent',
    MoviesDvds = 'MoviesDVDs',
    Music = 'Music',
    NewspapersMagazines = 'NewspapersMagazines',
    OfficeSupplies = 'OfficeSupplies',
    Parking = 'Parking',
    Paycheck = 'Paycheck',
    PersonalCare = 'PersonalCare',
    PetFoodSupplies = 'PetFoodSupplies',
    PetGrooming = 'PetGrooming',
    Pets = 'Pets',
    Pharmacy = 'Pharmacy',
    Printing = 'Printing',
    PropertyTax = 'Property Tax',
    PublicTransportation = 'Public Transportation',
    Reimbursement = 'Reimbursement',
    RentalCarTaxi = 'RentalCarTaxi',
    Restaurants = 'Restaurants',
    SalesTax = 'SalesTax',
    ServiceParts = 'ServiceParts',
    ServiceFee = 'ServiceFee',
    Shipping = 'Shipping',
    Shopping = 'Shopping',
    SpaMassage = 'SpaMassage',
    SportingGoods = 'SportingGoods',
    Sports = 'Sports',
    StateTax = 'StateTax',
    StudentLoan = 'Student Loan',
    Taxes = 'Taxes',
    Television = 'Television',
    Toys = 'Toys',
    Transfer = 'Transfer',
    Travel = 'Travel',
    Tuition = 'Tuition',
    Uncategorized = 'Uncategorized',
    Utilities = 'Utilities',
    Vacation = 'Vacation',
    Veterinary = 'Veterinary'
}

/**
 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
 * @export
 * @interface AssetTransactionDescription
 */
// Edited by Plaid, line 9. any to unknown
export interface AssetTransactionDescription {
    [key: string]: object | unknown;

    /**
     * Asset Transaction Description String up to 3 occurances 1 required.
     * @type {string}
     * @memberof AssetTransactionDescription
     */
    AssetTransactionDescription: string;
}
/**
 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
 * @export
 * @interface AssetTransactionDetail
 */
// Edited by Plaid, line 9. any to unknown
export interface AssetTransactionDetail {
    [key: string]: object | unknown;

    /**
     * A vendor created unique Identifier.
     * @type {string}
     * @memberof AssetTransactionDetail
     */
    AssetTransactionUniqueIdentifier: string;
    /**
     * Asset Transaction Amount.
     * @type {number}
     * @memberof AssetTransactionDetail
     */
    AssetTransactionAmount: number;
    /**
     * Asset Transaction Date.
     * @type {string}
     * @memberof AssetTransactionDetail
     */
    AssetTransactionDate: string;
    /**
     * Asset Transaction Post Date.
     * @type {string}
     * @memberof AssetTransactionDetail
     */
    AssetTransactionPostDate: string;
    /**
     * 
     * @type {AssetTransactionType}
     * @memberof AssetTransactionDetail
     */
    AssetTransactionType: AssetTransactionType;
    /**
     * Populate with who did the transaction.
     * @type {string}
     * @memberof AssetTransactionDetail
     */
    AssetTransactionPaidByName: string | null;
    /**
     * FI Provided - examples are atm, cash, check, credit, debit, deposit, directDebit, directDeposit, dividend, fee, interest, other, payment, pointOfSale, repeatPayment, serviceCharge, transfer.
     * @type {string}
     * @memberof AssetTransactionDetail
     */
    AssetTransactionTypeAdditionalDescription: string | null;
    /**
     * 
     * @type {AssetTransactionCategoryType}
     * @memberof AssetTransactionDetail
     */
    AssetTransactionCategoryType: AssetTransactionCategoryType | null;
    /**
     * FI provided Transaction Identifier.
     * @type {string}
     * @memberof AssetTransactionDetail
     */
    FinancialInstitutionTransactionIdentifier: string | null;
}
/**
 * Asset Transaction Type.
 * @export
 * @enum {string}
 */
export enum AssetTransactionType {
    Credit = 'Credit',
    Debit = 'Debit'
}

/**
 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
 * @export
 * @interface AssetTransactions
 */
// Edited by Plaid, line 9. any to unknown
export interface AssetTransactions {
    [key: string]: object | unknown;

    /**
     * 
     * @type {Array<AssetTransaction>}
     * @memberof AssetTransactions
     */
    ASSET_TRANSACTION: Array<AssetTransaction>;
}
/**
 * A value from a MISMO prescribed list that specifies financial assets in a mortgage loan transaction. Assets may be either liquid or fixed and are associated with a corresponding asset amount.
 * @export
 * @enum {string}
 */
export enum AssetType {
    CheckingAccount = 'CheckingAccount',
    SavingsAccount = 'SavingsAccount',
    Investment = 'Investment',
    MoneyMarketFund = 'MoneyMarketFund',
    Other = 'Other'
}

/**
 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
 * @export
 * @interface Assets
 */
// Edited by Plaid, line 9. any to unknown
export interface Assets {
    [key: string]: object | unknown;

    /**
     * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
     * @type {Array<Asset>}
     * @memberof Assets
     */
    ASSET: Array<Asset>;
}
/**
 * Fired when Asset Report generation has failed. The resulting `error` will have an `error_type` of `ASSET_REPORT_ERROR`.
 * @export
 * @interface AssetsErrorWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface AssetsErrorWebhook {
    [key: string]: object | unknown;

    /**
     * `ASSETS`
     * @type {string}
     * @memberof AssetsErrorWebhook
     */
    webhook_type: string;
    /**
     * `ERROR`
     * @type {string}
     * @memberof AssetsErrorWebhook
     */
    webhook_code: string;
    /**
     * 
     * @type {PlaidError}
     * @memberof AssetsErrorWebhook
     */
    error: PlaidError | null;
    /**
     * The ID associated with the Asset Report.
     * @type {string}
     * @memberof AssetsErrorWebhook
     */
    asset_report_id: string;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof AssetsErrorWebhook
     */
    environment: WebhookEnvironmentValues;
}
/**
 * Fired when the Asset Report has been generated and `/asset_report/get` is ready to be called.  If you attempt to retrieve an Asset Report before this webhook has fired, you’ll receive a response with the HTTP status code 400 and a Plaid error code of `PRODUCT_NOT_READY`.
 * @export
 * @interface AssetsProductReadyWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface AssetsProductReadyWebhook {
    [key: string]: object | unknown;

    /**
     * `ASSETS`
     * @type {string}
     * @memberof AssetsProductReadyWebhook
     */
    webhook_type: string;
    /**
     * `PRODUCT_READY`
     * @type {string}
     * @memberof AssetsProductReadyWebhook
     */
    webhook_code: string;
    /**
     * The `asset_report_id` corresponding to the Asset Report the webhook has fired for.
     * @type {string}
     * @memberof AssetsProductReadyWebhook
     */
    asset_report_id: string;
    /**
     * The report type, indicating whether the Asset Report is a `full` or `fast` report.
     * @type {string}
     * @memberof AssetsProductReadyWebhook
     */
    report_type?: string;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof AssetsProductReadyWebhook
     */
    environment: WebhookEnvironmentValues;
}
/**
 * An object containing identifying numbers used for making electronic transfers to and from the `accounts`. The identifying number type (ACH, EFT, IBAN, or BACS) used will depend on the country of the account. An account may have more than one number type. If a particular identifying number type is not used by any `accounts` for which data has been requested, the array for that type will be empty.
 * @export
 * @interface AuthGetNumbers
 */
// Edited by Plaid, line 9. any to unknown
export interface AuthGetNumbers {
    [key: string]: object | unknown;

    /**
     * An array of ACH numbers identifying accounts.
     * @type {Array<NumbersACH>}
     * @memberof AuthGetNumbers
     */
    ach: Array<NumbersACH>;
    /**
     * An array of EFT numbers identifying accounts.
     * @type {Array<NumbersEFT>}
     * @memberof AuthGetNumbers
     */
    eft: Array<NumbersEFT>;
    /**
     * An array of IBAN numbers identifying accounts.
     * @type {Array<NumbersInternational>}
     * @memberof AuthGetNumbers
     */
    international: Array<NumbersInternational>;
    /**
     * An array of BACS numbers identifying accounts.
     * @type {Array<NumbersBACS>}
     * @memberof AuthGetNumbers
     */
    bacs: Array<NumbersBACS>;
}
/**
 * AuthGetRequest defines the request schema for `/auth/get`
 * @export
 * @interface AuthGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface AuthGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof AuthGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof AuthGetRequest
     */
    secret?: string;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof AuthGetRequest
     */
    access_token: string;
    /**
     * 
     * @type {AuthGetRequestOptions}
     * @memberof AuthGetRequest
     */
    options?: AuthGetRequestOptions;
}
/**
 * An optional object to filter `/auth/get` results.
 * @export
 * @interface AuthGetRequestOptions
 */
// Edited by Plaid, line 9. any to unknown
export interface AuthGetRequestOptions {
    /**
     * A list of `account_ids` to retrieve for the Item. Note: An error will be returned if a provided `account_id` is not associated with the Item.
     * @type {Array<string>}
     * @memberof AuthGetRequestOptions
     */
    account_ids?: Array<string>;
}
/**
 * AuthGetResponse defines the response schema for `/auth/get`
 * @export
 * @interface AuthGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface AuthGetResponse {
    [key: string]: object | unknown;

    /**
     * The `accounts` for which numbers are being retrieved.
     * @type {Array<AccountBase>}
     * @memberof AuthGetResponse
     */
    accounts: Array<AccountBase>;
    /**
     * 
     * @type {AuthGetNumbers}
     * @memberof AuthGetResponse
     */
    numbers: AuthGetNumbers;
    /**
     * 
     * @type {Item}
     * @memberof AuthGetResponse
     */
    item: Item;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof AuthGetResponse
     */
    request_id: string;
}
/**
 * Metadata that captures information about the Auth features of an institution.
 * @export
 * @interface AuthMetadata
 */
// Edited by Plaid, line 9. any to unknown
export interface AuthMetadata {
    [key: string]: object | unknown;

    /**
     * 
     * @type {AuthSupportedMethods}
     * @memberof AuthMetadata
     */
    supported_methods: AuthSupportedMethods | null;
}
/**
 * Metadata specifically related to which auth methods an institution supports.
 * @export
 * @interface AuthSupportedMethods
 */
// Edited by Plaid, line 9. any to unknown
export interface AuthSupportedMethods {
    [key: string]: object | unknown;

    /**
     * Indicates if instant auth is supported.
     * @type {boolean}
     * @memberof AuthSupportedMethods
     */
    instant_auth: boolean;
    /**
     * Indicates if instant match is supported.
     * @type {boolean}
     * @memberof AuthSupportedMethods
     */
    instant_match: boolean;
    /**
     * Indicates if automated microdeposits are supported.
     * @type {boolean}
     * @memberof AuthSupportedMethods
     */
    automated_micro_deposits: boolean;
}
/**
 * Fired when an Item is verified via automated micro-deposits. We recommend communicating to your users when this event is received to notify them that their account is verified and ready for use.
 * @export
 * @interface AutomaticallyVerifiedWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface AutomaticallyVerifiedWebhook {
    [key: string]: object | unknown;

    /**
     * `AUTH`
     * @type {string}
     * @memberof AutomaticallyVerifiedWebhook
     */
    webhook_type: string;
    /**
     * `AUTOMATICALLY_VERIFIED`
     * @type {string}
     * @memberof AutomaticallyVerifiedWebhook
     */
    webhook_code: string;
    /**
     * The `account_id` of the account associated with the webhook
     * @type {string}
     * @memberof AutomaticallyVerifiedWebhook
     */
    account_id: string;
    /**
     * The `item_id` of the Item associated with this webhook, warning, or error
     * @type {string}
     * @memberof AutomaticallyVerifiedWebhook
     */
    item_id: string;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof AutomaticallyVerifiedWebhook
     */
    environment: WebhookEnvironmentValues;
}
/**
 * The result of the bank income refresh report generation  `SUCCESS`: The refreshed report was successfully generated and can be retrieved via /credit/bank_income/get  `FAILURE`: The refreshed report failed to be generated
 * @export
 * @enum {string}
 */
export enum BankIncomeRefreshCompleteResult {
    Success = 'SUCCESS',
    Failure = 'FAILURE'
}

/**
 * Fired when a refreshed bank income report has finished generating or failed to generate, triggered by calling `/credit/bank_income/refresh`.
 * @export
 * @interface BankIncomeRefreshCompleteWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface BankIncomeRefreshCompleteWebhook {
    [key: string]: object | unknown;

    /**
     * `INCOME`
     * @type {string}
     * @memberof BankIncomeRefreshCompleteWebhook
     */
    webhook_type: string;
    /**
     * `BANK_INCOME_REFRESH_COMPLETE`
     * @type {string}
     * @memberof BankIncomeRefreshCompleteWebhook
     */
    webhook_code: string;
    /**
     * The `user_id` corresponding to the user the webhook has fired for.
     * @type {string}
     * @memberof BankIncomeRefreshCompleteWebhook
     */
    user_id: string;
    /**
     * 
     * @type {BankIncomeRefreshCompleteResult}
     * @memberof BankIncomeRefreshCompleteWebhook
     */
    result: BankIncomeRefreshCompleteResult;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof BankIncomeRefreshCompleteWebhook
     */
    environment: WebhookEnvironmentValues;
}
/**
 * Fired when a change to the user\'s income is detected. You should call `/credit/bank_income/refresh` to get updated income data for the user
 * @export
 * @interface BankIncomeRefreshUpdateWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface BankIncomeRefreshUpdateWebhook {
    [key: string]: object | unknown;

    /**
     * `INCOME`
     * @type {string}
     * @memberof BankIncomeRefreshUpdateWebhook
     */
    webhook_type: string;
    /**
     * `BANK_INCOME_REFRESH_UPDATE`
     * @type {string}
     * @memberof BankIncomeRefreshUpdateWebhook
     */
    webhook_code: string;
    /**
     * The `user_id` corresponding to the user the webhook has fired for.
     * @type {string}
     * @memberof BankIncomeRefreshUpdateWebhook
     */
    user_id: string;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof BankIncomeRefreshUpdateWebhook
     */
    environment: WebhookEnvironmentValues;
}
/**
 * The object contains a risk score and a risk tier that evaluate the transaction return risk because an account is overdrawn or because an ineligible account is used. Common return codes in this category include: \"R01\", \"R02\", \"R03\", \"R04\", \"R06\", \"R08\",  \"R09\", \"R13\", \"R16\", \"R17\", \"R20\", \"R23\". These returns have a turnaround time of 2 banking days.
 * @export
 * @interface BankInitiatedReturnRisk
 */
// Edited by Plaid, line 9. any to unknown
export interface BankInitiatedReturnRisk {
    /**
     * A score from 1-99 that indicates the transaction return risk: a higher risk score suggests a higher return likelihood.
     * @type {number}
     * @memberof BankInitiatedReturnRisk
     */
    score: number;
    /**
     * In the `bank_initiated_return_risk` object, there are eight risk tiers corresponding to the scores:   1: Predicted bank-initiated return incidence rate between 0.0% - 0.5%   2: Predicted bank-initiated return incidence rate between 0.5% - 1.5%   3: Predicted bank-initiated return incidence rate between 1.5% - 3%   4: Predicted bank-initiated return incidence rate between 3% - 5%   5: Predicted bank-initiated return incidence rate between 5% - 10%   6: Predicted bank-initiated return incidence rate between 10% - 15%   7: Predicted bank-initiated return incidence rate between 15% and 50%   8: Predicted bank-initiated return incidence rate greater than 50% 
     * @type {number}
     * @memberof BankInitiatedReturnRisk
     */
    risk_tier: number;
}
/**
 * Represents a bank transfer within the Bank Transfers API.
 * @export
 * @interface BankTransfer
 */
// Edited by Plaid, line 9. any to unknown
export interface BankTransfer {
    [key: string]: object | unknown;

    /**
     * Plaid’s unique identifier for a bank transfer.
     * @type {string}
     * @memberof BankTransfer
     */
    id: string;
    /**
     * 
     * @type {ACHClass}
     * @memberof BankTransfer
     */
    ach_class: ACHClass;
    /**
     * The account ID that should be credited/debited for this bank transfer.
     * @type {string}
     * @memberof BankTransfer
     */
    account_id: string;
    /**
     * 
     * @type {BankTransferType}
     * @memberof BankTransfer
     */
    type: BankTransferType;
    /**
     * 
     * @type {BankTransferUser}
     * @memberof BankTransfer
     */
    user: BankTransferUser;
    /**
     * The amount of the bank transfer (decimal string with two digits of precision e.g. \"10.00\").
     * @type {string}
     * @memberof BankTransfer
     */
    amount: string;
    /**
     * The currency of the transfer amount, e.g. \"USD\"
     * @type {string}
     * @memberof BankTransfer
     */
    iso_currency_code: string;
    /**
     * The description of the transfer.
     * @type {string}
     * @memberof BankTransfer
     */
    description: string;
    /**
     * The datetime when this bank transfer was created. This will be of the form `2006-01-02T15:04:05Z`
     * @type {string}
     * @memberof BankTransfer
     */
    created: string;
    /**
     * 
     * @type {BankTransferStatus}
     * @memberof BankTransfer
     */
    status: BankTransferStatus;
    /**
     * 
     * @type {BankTransferNetwork}
     * @memberof BankTransfer
     */
    network: BankTransferNetwork;
    /**
     * When `true`, you can still cancel this bank transfer.
     * @type {boolean}
     * @memberof BankTransfer
     */
    cancellable: boolean;
    /**
     * 
     * @type {BankTransferFailure}
     * @memberof BankTransfer
     */
    failure_reason: BankTransferFailure | null;
    /**
     * A string containing the custom tag provided by the client in the create request. Will be null if not provided.
     * @type {string}
     * @memberof BankTransfer
     */
    custom_tag: string | null;
    /**
     * The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply: The JSON values must be Strings (no nested JSON objects allowed) Only ASCII characters may be used Maximum of 50 key/value pairs Maximum key length of 40 characters Maximum value length of 500 characters 
     * @type {{ [key: string]: string; }}
     * @memberof BankTransfer
     */
    metadata: { [key: string]: string; } | null;
    /**
     * Plaid’s unique identifier for the origination account that was used for this transfer.
     * @type {string}
     * @memberof BankTransfer
     */
    origination_account_id: string;
    /**
     * 
     * @type {BankTransferDirection}
     * @memberof BankTransfer
     */
    direction: BankTransferDirection | null;
}
/**
 * Information about the balance of a bank transfer
 * @export
 * @interface BankTransferBalance
 */
// Edited by Plaid, line 9. any to unknown
export interface BankTransferBalance {
    [key: string]: object | unknown;

    /**
     * The total available balance - the sum of all successful debit transfer amounts minus all credit transfer amounts.
     * @type {string}
     * @memberof BankTransferBalance
     */
    available: string;
    /**
     * The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.
     * @type {string}
     * @memberof BankTransferBalance
     */
    transactable: string;
}
/**
 * Defines the request schema for `/bank_transfer/balance/get`
 * @export
 * @interface BankTransferBalanceGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface BankTransferBalanceGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof BankTransferBalanceGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof BankTransferBalanceGetRequest
     */
    secret?: string;
    /**
     * If multiple origination accounts are available, `origination_account_id` must be used to specify the account for which balance will be returned.
     * @type {string}
     * @memberof BankTransferBalanceGetRequest
     */
    origination_account_id?: string | null;
}
/**
 * Defines the response schema for `/bank_transfer/balance/get`
 * @export
 * @interface BankTransferBalanceGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface BankTransferBalanceGetResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {BankTransferBalance}
     * @memberof BankTransferBalanceGetResponse
     */
    balance: BankTransferBalance;
    /**
     * The ID of the origination account that this balance belongs to.
     * @type {string}
     * @memberof BankTransferBalanceGetResponse
     */
    origination_account_id: string | null;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof BankTransferBalanceGetResponse
     */
    request_id: string;
}
/**
 * Defines the request schema for `/bank_transfer/cancel`
 * @export
 * @interface BankTransferCancelRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface BankTransferCancelRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof BankTransferCancelRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof BankTransferCancelRequest
     */
    secret?: string;
    /**
     * Plaid’s unique identifier for a bank transfer.
     * @type {string}
     * @memberof BankTransferCancelRequest
     */
    bank_transfer_id: string;
}
/**
 * Defines the response schema for `/bank_transfer/cancel`
 * @export
 * @interface BankTransferCancelResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface BankTransferCancelResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof BankTransferCancelResponse
     */
    request_id: string;
}
/**
 * Defines the request schema for `/bank_transfer/create`
 * @export
 * @interface BankTransferCreateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface BankTransferCreateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof BankTransferCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof BankTransferCreateRequest
     */
    secret?: string;
    /**
     * A random key provided by the client, per unique bank transfer. Maximum of 50 characters.  The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create a bank transfer fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single bank transfer is created.
     * @type {string}
     * @memberof BankTransferCreateRequest
     */
    idempotency_key: string;
    /**
     * The Plaid `access_token` for the account that will be debited or credited.
     * @type {string}
     * @memberof BankTransferCreateRequest
     */
    access_token: string;
    /**
     * The Plaid `account_id` for the account that will be debited or credited.
     * @type {string}
     * @memberof BankTransferCreateRequest
     */
    account_id: string;
    /**
     * 
     * @type {BankTransferType}
     * @memberof BankTransferCreateRequest
     */
    type: BankTransferType;
    /**
     * 
     * @type {BankTransferNetwork}
     * @memberof BankTransferCreateRequest
     */
    network: BankTransferNetwork;
    /**
     * The amount of the bank transfer (decimal string with two digits of precision e.g. \"10.00\").
     * @type {string}
     * @memberof BankTransferCreateRequest
     */
    amount: string;
    /**
     * The currency of the transfer amount – should be set to \"USD\".
     * @type {string}
     * @memberof BankTransferCreateRequest
     */
    iso_currency_code: string;
    /**
     * The transfer description. Maximum of 10 characters.
     * @type {string}
     * @memberof BankTransferCreateRequest
     */
    description: string;
    /**
     * 
     * @type {ACHClass}
     * @memberof BankTransferCreateRequest
     */
    ach_class?: ACHClass;
    /**
     * 
     * @type {BankTransferUser}
     * @memberof BankTransferCreateRequest
     */
    user: BankTransferUser;
    /**
     * An arbitrary string provided by the client for storage with the bank transfer. May be up to 100 characters.
     * @type {string}
     * @memberof BankTransferCreateRequest
     */
    custom_tag?: string | null;
    /**
     * The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply: The JSON values must be Strings (no nested JSON objects allowed) Only ASCII characters may be used Maximum of 50 key/value pairs Maximum key length of 40 characters Maximum value length of 500 characters 
     * @type {{ [key: string]: string; }}
     * @memberof BankTransferCreateRequest
     */
    metadata?: { [key: string]: string; } | null;
    /**
     * Plaid’s unique identifier for the origination account for this transfer. If you have more than one origination account, this value must be specified. Otherwise, this field should be left blank.
     * @type {string}
     * @memberof BankTransferCreateRequest
     */
    origination_account_id?: string | null;
}
/**
 * Defines the response schema for `/bank_transfer/create`
 * @export
 * @interface BankTransferCreateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface BankTransferCreateResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {BankTransfer}
     * @memberof BankTransferCreateResponse
     */
    bank_transfer: BankTransfer;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof BankTransferCreateResponse
     */
    request_id: string;
}
/**
 * Indicates the direction of the transfer: `outbound` for API-initiated transfers, or `inbound` for payments received by the FBO account.
 * @export
 * @enum {string}
 */
export enum BankTransferDirection {
    Outbound = 'outbound',
    Inbound = 'inbound',
    Null = 'null'
}

/**
 * Represents an event in the Bank Transfers API.
 * @export
 * @interface BankTransferEvent
 */
// Edited by Plaid, line 9. any to unknown
export interface BankTransferEvent {
    [key: string]: object | unknown;

    /**
     * Plaid’s unique identifier for this event. IDs are sequential unsigned 64-bit integers.
     * @type {number}
     * @memberof BankTransferEvent
     */
    event_id: number;
    /**
     * The datetime when this event occurred. This will be of the form `2006-01-02T15:04:05Z`.
     * @type {string}
     * @memberof BankTransferEvent
     */
    timestamp: string;
    /**
     * 
     * @type {BankTransferEventType}
     * @memberof BankTransferEvent
     */
    event_type: BankTransferEventType;
    /**
     * The account ID associated with the bank transfer.
     * @type {string}
     * @memberof BankTransferEvent
     */
    account_id: string;
    /**
     * Plaid’s unique identifier for a bank transfer.
     * @type {string}
     * @memberof BankTransferEvent
     */
    bank_transfer_id: string;
    /**
     * The ID of the origination account that this balance belongs to.
     * @type {string}
     * @memberof BankTransferEvent
     */
    origination_account_id: string | null;
    /**
     * 
     * @type {BankTransferType}
     * @memberof BankTransferEvent
     */
    bank_transfer_type: BankTransferType;
    /**
     * The bank transfer amount.
     * @type {string}
     * @memberof BankTransferEvent
     */
    bank_transfer_amount: string;
    /**
     * The currency of the bank transfer amount.
     * @type {string}
     * @memberof BankTransferEvent
     */
    bank_transfer_iso_currency_code: string;
    /**
     * 
     * @type {BankTransferFailure}
     * @memberof BankTransferEvent
     */
    failure_reason: BankTransferFailure | null;
    /**
     * 
     * @type {BankTransferDirection}
     * @memberof BankTransferEvent
     */
    direction: BankTransferDirection | null;
}
/**
 * The type of bank transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into your origination account; a `credit` indicates a transfer of money out of your origination account.
 * @export
 * @enum {string}
 */
export enum BankTransferEventListBankTransferType {
    Debit = 'debit',
    Credit = 'credit',
    Null = 'null'
}

/**
 * Indicates the direction of the transfer: `outbound`: for API-initiated transfers `inbound`: for payments received by the FBO account.
 * @export
 * @enum {string}
 */
export enum BankTransferEventListDirection {
    Inbound = 'inbound',
    Outbound = 'outbound',
    Null = 'null'
}

/**
 * Defines the request schema for `/bank_transfer/event/list`
 * @export
 * @interface BankTransferEventListRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface BankTransferEventListRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof BankTransferEventListRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof BankTransferEventListRequest
     */
    secret?: string;
    /**
     * The start datetime of bank transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
     * @type {string}
     * @memberof BankTransferEventListRequest
     */
    start_date?: string | null;
    /**
     * The end datetime of bank transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
     * @type {string}
     * @memberof BankTransferEventListRequest
     */
    end_date?: string | null;
    /**
     * Plaid’s unique identifier for a bank transfer.
     * @type {string}
     * @memberof BankTransferEventListRequest
     */
    bank_transfer_id?: string | null;
    /**
     * The account ID to get events for all transactions to/from an account.
     * @type {string}
     * @memberof BankTransferEventListRequest
     */
    account_id?: string | null;
    /**
     * 
     * @type {BankTransferEventListBankTransferType}
     * @memberof BankTransferEventListRequest
     */
    bank_transfer_type?: BankTransferEventListBankTransferType | null;
    /**
     * Filter events by event type.
     * @type {Array<BankTransferEventType>}
     * @memberof BankTransferEventListRequest
     */
    event_types?: Array<BankTransferEventType>;
    /**
     * The maximum number of bank transfer events to return. If the number of events matching the above parameters is greater than `count`, the most recent events will be returned.
     * @type {number}
     * @memberof BankTransferEventListRequest
     */
    count?: number | null;
    /**
     * The offset into the list of bank transfer events. When `count`=25 and `offset`=0, the first 25 events will be returned. When `count`=25 and `offset`=25, the next 25 bank transfer events will be returned.
     * @type {number}
     * @memberof BankTransferEventListRequest
     */
    offset?: number | null;
    /**
     * The origination account ID to get events for transfers from a specific origination account.
     * @type {string}
     * @memberof BankTransferEventListRequest
     */
    origination_account_id?: string | null;
    /**
     * 
     * @type {BankTransferEventListDirection}
     * @memberof BankTransferEventListRequest
     */
    direction?: BankTransferEventListDirection | null;
}
/**
 * Defines the response schema for `/bank_transfer/event/list`
 * @export
 * @interface BankTransferEventListResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface BankTransferEventListResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {Array<BankTransferEvent>}
     * @memberof BankTransferEventListResponse
     */
    bank_transfer_events: Array<BankTransferEvent>;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof BankTransferEventListResponse
     */
    request_id: string;
}
/**
 * Defines the request schema for `/bank_transfer/event/sync`
 * @export
 * @interface BankTransferEventSyncRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface BankTransferEventSyncRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof BankTransferEventSyncRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof BankTransferEventSyncRequest
     */
    secret?: string;
    /**
     * The latest (largest) `event_id` fetched via the sync endpoint, or 0 initially.
     * @type {number}
     * @memberof BankTransferEventSyncRequest
     */
    after_id: number;
    /**
     * The maximum number of bank transfer events to return.
     * @type {number}
     * @memberof BankTransferEventSyncRequest
     */
    count?: number | null;
}
/**
 * Defines the response schema for `/bank_transfer/event/sync`
 * @export
 * @interface BankTransferEventSyncResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface BankTransferEventSyncResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {Array<BankTransferEvent>}
     * @memberof BankTransferEventSyncResponse
     */
    bank_transfer_events: Array<BankTransferEvent>;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof BankTransferEventSyncResponse
     */
    request_id: string;
}
/**
 * The type of event that this bank transfer represents.  `pending`: A new transfer was created; it is in the pending state.  `cancelled`: The transfer was cancelled by the client.  `failed`: The transfer failed, no funds were moved.  `posted`: The transfer has been successfully submitted to the payment network.  `reversed`: A posted transfer was reversed.
 * @export
 * @enum {string}
 */
export enum BankTransferEventType {
    Pending = 'pending',
    Cancelled = 'cancelled',
    Failed = 'failed',
    Posted = 'posted',
    Reversed = 'reversed'
}

/**
 * The failure reason if the type of this transfer is `\"failed\"` or `\"reversed\"`. Null value otherwise.
 * @export
 * @interface BankTransferFailure
 */
// Edited by Plaid, line 9. any to unknown
export interface BankTransferFailure {
    [key: string]: object | unknown;

    /**
     * The ACH return code, e.g. `R01`.  A return code will be provided if and only if the transfer status is `reversed`. For a full listing of ACH return codes, see [Bank Transfers errors](https://plaid.com/docs/errors/bank-transfers/#ach-return-codes).
     * @type {string}
     * @memberof BankTransferFailure
     */
    ach_return_code?: string | null;
    /**
     * A human-readable description of the reason for the failure or reversal.
     * @type {string}
     * @memberof BankTransferFailure
     */
    description?: string;
}
/**
 * Defines the request schema for `/bank_transfer/get`
 * @export
 * @interface BankTransferGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface BankTransferGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof BankTransferGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof BankTransferGetRequest
     */
    secret?: string;
    /**
     * Plaid’s unique identifier for a bank transfer.
     * @type {string}
     * @memberof BankTransferGetRequest
     */
    bank_transfer_id: string;
}
/**
 * Defines the response schema for `/bank_transfer/get`
 * @export
 * @interface BankTransferGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface BankTransferGetResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {BankTransfer}
     * @memberof BankTransferGetResponse
     */
    bank_transfer: BankTransfer;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof BankTransferGetResponse
     */
    request_id: string;
}
/**
 * Defines the request schema for `/bank_transfer/list`
 * @export
 * @interface BankTransferListRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface BankTransferListRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof BankTransferListRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof BankTransferListRequest
     */
    secret?: string;
    /**
     * The start datetime of bank transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
     * @type {string}
     * @memberof BankTransferListRequest
     */
    start_date?: string | null;
    /**
     * The end datetime of bank transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
     * @type {string}
     * @memberof BankTransferListRequest
     */
    end_date?: string | null;
    /**
     * The maximum number of bank transfers to return.
     * @type {number}
     * @memberof BankTransferListRequest
     */
    count?: number;
    /**
     * The number of bank transfers to skip before returning results.
     * @type {number}
     * @memberof BankTransferListRequest
     */
    offset?: number;
    /**
     * Filter bank transfers to only those originated through the specified origination account.
     * @type {string}
     * @memberof BankTransferListRequest
     */
    origination_account_id?: string | null;
    /**
     * 
     * @type {BankTransferDirection}
     * @memberof BankTransferListRequest
     */
    direction?: BankTransferDirection | null;
}
/**
 * Defines the response schema for `/bank_transfer/list`
 * @export
 * @interface BankTransferListResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface BankTransferListResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {Array<BankTransfer>}
     * @memberof BankTransferListResponse
     */
    bank_transfers: Array<BankTransfer>;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof BankTransferListResponse
     */
    request_id: string;
}
/**
 * Defines the request schema for `/bank_transfer/migrate_account`
 * @export
 * @interface BankTransferMigrateAccountRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface BankTransferMigrateAccountRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof BankTransferMigrateAccountRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof BankTransferMigrateAccountRequest
     */
    secret?: string;
    /**
     * The user\'s account number.
     * @type {string}
     * @memberof BankTransferMigrateAccountRequest
     */
    account_number: string;
    /**
     * The user\'s routing number.
     * @type {string}
     * @memberof BankTransferMigrateAccountRequest
     */
    routing_number: string;
    /**
     * The user\'s wire transfer routing number. This is the ABA number; for some institutions, this may differ from the ACH number used in `routing_number`.
     * @type {string}
     * @memberof BankTransferMigrateAccountRequest
     */
    wire_routing_number?: string;
    /**
     * The type of the bank account (`checking` or `savings`).
     * @type {string}
     * @memberof BankTransferMigrateAccountRequest
     */
    account_type: string;
}
/**
 * Defines the response schema for `/bank_transfer/migrate_account`
 * @export
 * @interface BankTransferMigrateAccountResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface BankTransferMigrateAccountResponse {
    [key: string]: object | unknown;

    /**
     * The Plaid `access_token` for the newly created Item.
     * @type {string}
     * @memberof BankTransferMigrateAccountResponse
     */
    access_token: string;
    /**
     * The Plaid `account_id` for the newly created Item.
     * @type {string}
     * @memberof BankTransferMigrateAccountResponse
     */
    account_id: string;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof BankTransferMigrateAccountResponse
     */
    request_id: string;
}
/**
 * The network or rails used for the transfer. Valid options are `ach`, `same-day-ach`, or `wire`.
 * @export
 * @enum {string}
 */
export enum BankTransferNetwork {
    Ach = 'ach',
    SameDayAch = 'same-day-ach',
    Wire = 'wire'
}

/**
 * The status of the transfer.
 * @export
 * @enum {string}
 */
export enum BankTransferStatus {
    Pending = 'pending',
    Posted = 'posted',
    Cancelled = 'cancelled',
    Failed = 'failed',
    Reversed = 'reversed'
}

/**
 * BankTransferSweep describes a sweep transfer.
 * @export
 * @interface BankTransferSweep
 */
// Edited by Plaid, line 9. any to unknown
export interface BankTransferSweep {
    [key: string]: object | unknown;

    /**
     * Identifier of the sweep.
     * @type {string}
     * @memberof BankTransferSweep
     */
    id: string;
    /**
     * The datetime when the sweep occurred, in RFC 3339 format.
     * @type {string}
     * @memberof BankTransferSweep
     */
    created_at: string;
    /**
     * The amount of the sweep.
     * @type {string}
     * @memberof BankTransferSweep
     */
    amount: string;
    /**
     * The currency of the sweep, e.g. \"USD\".
     * @type {string}
     * @memberof BankTransferSweep
     */
    iso_currency_code: string;
}
/**
 * Defines the request schema for `/bank_transfer/sweep/get`
 * @export
 * @interface BankTransferSweepGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface BankTransferSweepGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof BankTransferSweepGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof BankTransferSweepGetRequest
     */
    secret?: string;
    /**
     * Identifier of the sweep.
     * @type {string}
     * @memberof BankTransferSweepGetRequest
     */
    sweep_id: string;
}
/**
 * BankTransferSweepGetResponse defines the response schema for `/bank_transfer/sweep/get`
 * @export
 * @interface BankTransferSweepGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface BankTransferSweepGetResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {BankTransferSweep}
     * @memberof BankTransferSweepGetResponse
     */
    sweep: BankTransferSweep;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof BankTransferSweepGetResponse
     */
    request_id: string;
}
/**
 * BankTransferSweepListRequest defines the request schema for `/bank_transfer/sweep/list`
 * @export
 * @interface BankTransferSweepListRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface BankTransferSweepListRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof BankTransferSweepListRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof BankTransferSweepListRequest
     */
    secret?: string;
    /**
     * If multiple origination accounts are available, `origination_account_id` must be used to specify the account that the sweeps belong to.
     * @type {string}
     * @memberof BankTransferSweepListRequest
     */
    origination_account_id?: string | null;
    /**
     * The start datetime of sweeps to return (RFC 3339 format).
     * @type {string}
     * @memberof BankTransferSweepListRequest
     */
    start_time?: string | null;
    /**
     * The end datetime of sweeps to return (RFC 3339 format).
     * @type {string}
     * @memberof BankTransferSweepListRequest
     */
    end_time?: string | null;
    /**
     * The maximum number of sweeps to return.
     * @type {number}
     * @memberof BankTransferSweepListRequest
     */
    count?: number | null;
}
/**
 * BankTransferSweepListResponse defines the response schema for `/bank_transfer/sweep/list`
 * @export
 * @interface BankTransferSweepListResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface BankTransferSweepListResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {Array<BankTransferSweep>}
     * @memberof BankTransferSweepListResponse
     */
    sweeps: Array<BankTransferSweep>;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof BankTransferSweepListResponse
     */
    request_id: string;
}
/**
 * The type of bank transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into the origination account; a `credit` indicates a transfer of money out of the origination account.
 * @export
 * @enum {string}
 */
export enum BankTransferType {
    Debit = 'debit',
    Credit = 'credit'
}

/**
 * The legal name and other information for the account holder.
 * @export
 * @interface BankTransferUser
 */
// Edited by Plaid, line 9. any to unknown
export interface BankTransferUser {
    [key: string]: object | unknown;

    /**
     * The account holder’s full legal name. If the transfer `ach_class` is `ccd`, this should be the business name of the account holder.
     * @type {string}
     * @memberof BankTransferUser
     */
    legal_name: string;
    /**
     * The account holder’s email.
     * @type {string}
     * @memberof BankTransferUser
     */
    email_address?: string | null;
    /**
     * The account holder\'s routing number. This field is only used in response data. Do not provide this field when making requests.
     * @type {string}
     * @memberof BankTransferUser
     */
    routing_number?: string;
}
/**
 * Fired when new bank transfer events are available. Receiving this webhook indicates you should fetch the new events from `/bank_transfer/event/sync`.
 * @export
 * @interface BankTransfersEventsUpdateWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface BankTransfersEventsUpdateWebhook {
    [key: string]: object | unknown;

    /**
     * `BANK_TRANSFERS`
     * @type {string}
     * @memberof BankTransfersEventsUpdateWebhook
     */
    webhook_type: string;
    /**
     * `BANK_TRANSFERS_EVENTS_UPDATE`
     * @type {string}
     * @memberof BankTransfersEventsUpdateWebhook
     */
    webhook_code: string;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof BankTransfersEventsUpdateWebhook
     */
    environment: WebhookEnvironmentValues;
}
/**
 * Fired when new ACH events are available. To begin receiving this webhook, you must first register your webhook listener endpoint via the [webhooks page in the Dashboard](https://dashboard.plaid.com/team/webhooks). The `BANK_TRANSFERS_EVENTS_UPDATE` webhook can be used to track the progress of ACH transfers used in [micro-deposit verification](/docs/auth/coverage/microdeposit-events/). Receiving this webhook indicates you should fetch the new events from `/bank_transfer/event/sync`. Note that [Transfer](https://plaid.com/docs/transfer) customers should use Transfer webhooks instead of using `BANK_TRANSFERS_EVENTS_UPDATE`; see [micro-deposit events documentation](https://plaid.com/docs/auth/coverage/microdeposit-events/) for more details.
 * @export
 * @interface BankTransfersEventsUpdateWebhookForAuth
 */
// Edited by Plaid, line 9. any to unknown
export interface BankTransfersEventsUpdateWebhookForAuth {
    [key: string]: object | unknown;

    /**
     * `BANK_TRANSFERS`
     * @type {string}
     * @memberof BankTransfersEventsUpdateWebhookForAuth
     */
    webhook_type: string;
    /**
     * `BANK_TRANSFERS_EVENTS_UPDATE`
     * @type {string}
     * @memberof BankTransfersEventsUpdateWebhookForAuth
     */
    webhook_code: string;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof BankTransfersEventsUpdateWebhookForAuth
     */
    environment: WebhookEnvironmentValues;
}
/**
 * CategoriesGetResponse defines the response schema for `/categories/get`
 * @export
 * @interface CategoriesGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface CategoriesGetResponse {
    [key: string]: object | unknown;

    /**
     * An array of all of the transaction categories used by Plaid.
     * @type {Array<Category>}
     * @memberof CategoriesGetResponse
     */
    categories: Array<Category>;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof CategoriesGetResponse
     */
    request_id: string;
}
/**
 * Information describing a transaction category
 * @export
 * @interface Category
 */
// Edited by Plaid, line 9. any to unknown
export interface Category {
    [key: string]: object | unknown;

    /**
     * An identifying number for the category. `category_id` is a Plaid-specific identifier and does not necessarily correspond to merchant category codes.
     * @type {string}
     * @memberof Category
     */
    category_id: string;
    /**
     * `place` for physical transactions or `special` for other transactions such as bank charges.
     * @type {string}
     * @memberof Category
     */
    group: string;
    /**
     * A hierarchical array of the categories to which this `category_id` belongs.
     * @type {Array<string>}
     * @memberof Category
     */
    hierarchy: Array<string>;
}
/**
 * An error object and associated `item_id` used to identify a specific Item and error when a batch operation operating on multiple Items has encountered an error in one of the Items.
 * @export
 * @interface Cause
 */
// Edited by Plaid, line 9. any to unknown
export interface Cause {
    /**
     * 
     * @type {PlaidErrorType}
     * @memberof Cause
     */
    error_type: PlaidErrorType;
    /**
     * The particular error code. Safe for programmatic use.
     * @type {string}
     * @memberof Cause
     */
    error_code: string;
    /**
     * A developer-friendly representation of the error code. This may change over time and is not safe for programmatic use.
     * @type {string}
     * @memberof Cause
     */
    error_message: string;
    /**
     * A user-friendly representation of the error code. `null` if the error is not related to user action.  This may change over time and is not safe for programmatic use.
     * @type {string}
     * @memberof Cause
     */
    display_message: string | null;
    /**
     * A unique ID identifying the request, to be used for troubleshooting purposes. This field will be omitted in errors provided by webhooks.
     * @type {string}
     * @memberof Cause
     */
    request_id?: string;
    /**
     * In the Assets product, a request can pertain to more than one Item. If an error is returned for such a request, `causes` will return an array of errors containing a breakdown of these errors on the individual Item level, if any can be identified.  `causes` will only be provided for the `error_type` `ASSET_REPORT_ERROR`. `causes` will also not be populated inside an error nested within a `warning` object.
     * @type {Array<any>}
     * @memberof Cause
     */
    causes?: Array<any>;
    /**
     * The HTTP status code associated with the error. This will only be returned in the response body when the error information is provided via a webhook.
     * @type {number}
     * @memberof Cause
     */
    status?: number | null;
    /**
     * The URL of a Plaid documentation page with more information about the error
     * @type {string}
     * @memberof Cause
     */
    documentation_url?: string;
    /**
     * Suggested steps for resolving the error
     * @type {string}
     * @memberof Cause
     */
    suggested_action?: string | null;
    /**
     * The `item_id` of the Item associated with this webhook, warning, or error
     * @type {string}
     * @memberof Cause
     */
    item_id: string;
}
/**
 * 
 * @export
 * @interface CauseAllOf
 */
// Edited by Plaid, line 9. any to unknown
export interface CauseAllOf {
    /**
     * The `item_id` of the Item associated with this webhook, warning, or error
     * @type {string}
     * @memberof CauseAllOf
     */
    item_id?: string;
}
/**
 * A client-provided transaction that Plaid has enhanced.
 * @export
 * @interface ClientProvidedEnhancedTransaction
 */
// Edited by Plaid, line 9. any to unknown
export interface ClientProvidedEnhancedTransaction {
    [key: string]: object | unknown;

    /**
     * Unique transaction identifier to tie transactions back to clients\' systems.
     * @type {string}
     * @memberof ClientProvidedEnhancedTransaction
     */
    id: string;
    /**
     * The raw description of the transaction.
     * @type {string}
     * @memberof ClientProvidedEnhancedTransaction
     */
    description: string;
    /**
     * The value of the transaction, denominated in the account\'s currency, as stated in `iso_currency_code`. Positive values when money moves out of the account; negative values when money moves in. For example, debit card purchases are positive; credit card payments, direct deposits, and refunds are negative.
     * @type {number}
     * @memberof ClientProvidedEnhancedTransaction
     */
    amount: number;
    /**
     * The ISO-4217 currency code of the transaction.
     * @type {string}
     * @memberof ClientProvidedEnhancedTransaction
     */
    iso_currency_code: string;
    /**
     * 
     * @type {Enhancements}
     * @memberof ClientProvidedEnhancedTransaction
     */
    enhancements: Enhancements;
}
/**
 * A client-provided transaction that Plaid has enriched.
 * @export
 * @interface ClientProvidedEnrichedTransaction
 */
// Edited by Plaid, line 9. any to unknown
export interface ClientProvidedEnrichedTransaction {
    [key: string]: object | unknown;

    /**
     * The unique ID for the transaction as provided by you in the request.
     * @type {string}
     * @memberof ClientProvidedEnrichedTransaction
     */
    id: string;
    /**
     * A unique user id used to group transactions for a given user, as a unique identifier from your application. Personally identifiable information, such as an email address or phone number, should not be used in the client_user_id.
     * @type {string}
     * @memberof ClientProvidedEnrichedTransaction
     */
    client_user_id?: string;
    /**
     * A unique account id used to group transactions for a given account, as a unique identifier from your application. Personally identifiable information, such as an email address or phone number, should not be used in the client_account_id.
     * @type {string}
     * @memberof ClientProvidedEnrichedTransaction
     */
    client_account_id?: string;
    /**
     * The account type associated with the transaction. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).
     * @type {string}
     * @memberof ClientProvidedEnrichedTransaction
     */
    account_type?: string;
    /**
     * The account subtype associated with the transaction. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).
     * @type {string}
     * @memberof ClientProvidedEnrichedTransaction
     */
    account_subtype?: string;
    /**
     * The raw description of the transaction.
     * @type {string}
     * @memberof ClientProvidedEnrichedTransaction
     */
    description: string;
    /**
     * The absolute value of the transaction (>= 0)
     * @type {number}
     * @memberof ClientProvidedEnrichedTransaction
     */
    amount: number;
    /**
     * 
     * @type {EnrichTransactionDirection}
     * @memberof ClientProvidedEnrichedTransaction
     */
    direction?: EnrichTransactionDirection;
    /**
     * The ISO-4217 currency code of the transaction e.g. USD.
     * @type {string}
     * @memberof ClientProvidedEnrichedTransaction
     */
    iso_currency_code: string;
    /**
     * 
     * @type {Enrichments}
     * @memberof ClientProvidedEnrichedTransaction
     */
    enrichments: Enrichments;
}
/**
 * A client-provided transaction for Plaid to enhance.
 * @export
 * @interface ClientProvidedRawTransaction
 */
// Edited by Plaid, line 9. any to unknown
export interface ClientProvidedRawTransaction {
    [key: string]: object | unknown;

    /**
     * A unique ID for the transaction used to help you tie data back to your systems.
     * @type {string}
     * @memberof ClientProvidedRawTransaction
     */
    id: string;
    /**
     * The raw description of the transaction.
     * @type {string}
     * @memberof ClientProvidedRawTransaction
     */
    description: string;
    /**
     * The value of the transaction with direction. (NOTE: this will affect enrichment results, so directions are important):.   Negative (-) for credits (e.g., incoming transfers, refunds)   Positive (+) for debits (e.g., purchases, fees, outgoing transfers)
     * @type {number}
     * @memberof ClientProvidedRawTransaction
     */
    amount: number;
    /**
     * The ISO-4217 currency code of the transaction e.g. USD.
     * @type {string}
     * @memberof ClientProvidedRawTransaction
     */
    iso_currency_code: string;
}
/**
 * A client-provided transaction for Plaid to enrich.
 * @export
 * @interface ClientProvidedTransaction
 */
// Edited by Plaid, line 9. any to unknown
export interface ClientProvidedTransaction {
    [key: string]: object | unknown;

    /**
     * A unique ID for the transaction used to help you tie data back to your systems.
     * @type {string}
     * @memberof ClientProvidedTransaction
     */
    id: string;
    /**
     * A unique user id used to group transactions for a given user, as a unique identifier from your application. Personally identifiable information, such as an email address or phone number, should not be used in the client_user_id.
     * @type {string}
     * @memberof ClientProvidedTransaction
     */
    client_user_id?: string;
    /**
     * A unique account id used to group transactions for a given account, as a unique identifier from your application. Personally identifiable information, such as an email address or phone number, should not be used in the client_account_id.
     * @type {string}
     * @memberof ClientProvidedTransaction
     */
    client_account_id?: string;
    /**
     * The account type associated with the transaction. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).
     * @type {string}
     * @memberof ClientProvidedTransaction
     */
    account_type?: string;
    /**
     * The account subtype associated with the transaction. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).
     * @type {string}
     * @memberof ClientProvidedTransaction
     */
    account_subtype?: string;
    /**
     * The raw description of the transaction. If you have location data in available an unstructured format, it may be appended to the `description` field.
     * @type {string}
     * @memberof ClientProvidedTransaction
     */
    description: string;
    /**
     * The absolute value of the transaction (>= 0). When testing Enrich, note that `amount` data should be realistic. Unrealistic or inaccurate `amount` data may result in reduced quality output.
     * @type {number}
     * @memberof ClientProvidedTransaction
     */
    amount: number;
    /**
     * 
     * @type {EnrichTransactionDirection}
     * @memberof ClientProvidedTransaction
     */
    direction: EnrichTransactionDirection;
    /**
     * The ISO-4217 currency code of the transaction e.g. USD.
     * @type {string}
     * @memberof ClientProvidedTransaction
     */
    iso_currency_code: string;
    /**
     * 
     * @type {ClientProvidedTransactionLocation}
     * @memberof ClientProvidedTransaction
     */
    location?: ClientProvidedTransactionLocation;
    /**
     * Merchant category codes (MCCs) are four-digit numbers that describe a merchant\'s primary business activities.
     * @type {string}
     * @memberof ClientProvidedTransaction
     */
    mcc?: string;
    /**
     * The date the transaction posted, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format.
     * @type {string}
     * @memberof ClientProvidedTransaction
     */
    date_posted?: string;
}
/**
 * A representation of where a transaction took place.  Use this field to pass in structured location information you may have about your transactions. Providing location data is optional but can increase result quality. If you have unstructured location information, it may be appended to the `description` field.
 * @export
 * @interface ClientProvidedTransactionLocation
 */
// Edited by Plaid, line 9. any to unknown
export interface ClientProvidedTransactionLocation {
    [key: string]: object | unknown;

    /**
     * The country where the transaction occurred.
     * @type {string}
     * @memberof ClientProvidedTransactionLocation
     */
    country?: string;
    /**
     * The region or state where the transaction occurred.
     * @type {string}
     * @memberof ClientProvidedTransactionLocation
     */
    region?: string;
    /**
     * The city where the transaction occurred.
     * @type {string}
     * @memberof ClientProvidedTransactionLocation
     */
    city?: string;
    /**
     * The street address where the transaction occurred.
     * @type {string}
     * @memberof ClientProvidedTransactionLocation
     */
    address?: string;
    /**
     * The postal code where the transaction occurred.
     * @type {string}
     * @memberof ClientProvidedTransactionLocation
     */
    postal_code?: string;
}
/**
 * Describes the connected application for a particular end user.
 * @export
 * @interface ConnectedApplication
 */
// Edited by Plaid, line 9. any to unknown
export interface ConnectedApplication {
    /**
     * This field will map to the application ID that is returned from /item/applications/list, or provided to the institution in an oauth redirect.
     * @type {string}
     * @memberof ConnectedApplication
     */
    application_id: string;
    /**
     * The name of the application
     * @type {string}
     * @memberof ConnectedApplication
     */
    name: string;
    /**
     * A human-readable name of the application for display purposes
     * @type {string}
     * @memberof ConnectedApplication
     */
    display_name?: string | null;
    /**
     * A URL that links to the application logo image.
     * @type {string}
     * @memberof ConnectedApplication
     */
    logo_url?: string | null;
    /**
     * The URL for the application\'s website
     * @type {string}
     * @memberof ConnectedApplication
     */
    application_url?: string | null;
    /**
     * A string provided by the connected app stating why they use their respective enabled products.
     * @type {string}
     * @memberof ConnectedApplication
     */
    reason_for_access?: string | null;
    /**
     * The date this application was linked in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format in UTC.
     * @type {string}
     * @memberof ConnectedApplication
     */
    created_at: string;
    /**
     * 
     * @type {ScopesNullable}
     * @memberof ConnectedApplication
     */
    scopes?: ScopesNullable | null;
}
/**
 * The counterparty, such as the merchant or financial institution, is extracted by Plaid from the raw description.
 * @export
 * @interface Counterparty
 */
// Edited by Plaid, line 9. any to unknown
export interface Counterparty {
    [key: string]: object | unknown;

    /**
     * The name of the counterparty, such as the merchant or the financial institution, as extracted by Plaid from the raw description.
     * @type {string}
     * @memberof Counterparty
     */
    name: string;
    /**
     * A unique, stable, Plaid-generated id that maps to the counterparty.
     * @type {string}
     * @memberof Counterparty
     */
    entity_id?: string | null;
    /**
     * 
     * @type {CounterpartyType}
     * @memberof Counterparty
     */
    type: CounterpartyType;
    /**
     * The website associated with the counterparty.
     * @type {string}
     * @memberof Counterparty
     */
    website: string | null;
    /**
     * The URL of a logo associated with the counterparty, if available. The logo is formatted as a 100x100 pixel PNG file.
     * @type {string}
     * @memberof Counterparty
     */
    logo_url: string | null;
}
/**
 * The counterparty type.  `merchant`: a provider of goods or services for purchase `financial_institution`: a financial entity (bank, credit union, BNPL, fintech) `payment_app`: a transfer or P2P app (e.g. Zelle) `marketplace`: a marketplace (e.g DoorDash, Google Play Store) `payment_terminal`: a point-of-sale payment terminal (e.g Square, Toast) `income_source`: the payer in an income transaction (e.g., an employer, client, or government agency)
 * @export
 * @enum {string}
 */
export enum CounterpartyType {
    Merchant = 'merchant',
    FinancialInstitution = 'financial_institution',
    PaymentApp = 'payment_app',
    Marketplace = 'marketplace',
    PaymentTerminal = 'payment_terminal',
    IncomeSource = 'income_source'
}

/**
 * ISO-3166-1 alpha-2 country code standard.
 * @export
 * @enum {string}
 */
export enum CountryCode {
    Us = 'US',
    Gb = 'GB',
    Es = 'ES',
    Nl = 'NL',
    Fr = 'FR',
    Ie = 'IE',
    Ca = 'CA',
    De = 'DE',
    It = 'IT',
    Pl = 'PL',
    Dk = 'DK',
    No = 'NO',
    Se = 'SE',
    Ee = 'EE',
    Lt = 'LT',
    Lv = 'LV',
    Pt = 'PT'
}

/**
 * An object representing an end user\'s 1099 tax form
 * @export
 * @interface Credit1099
 */
// Edited by Plaid, line 9. any to unknown
export interface Credit1099 {
    [key: string]: object | unknown;

    /**
     * An identifier of the document referenced by the document metadata.
     * @type {string}
     * @memberof Credit1099
     */
    document_id: string | null;
    /**
     * 
     * @type {CreditDocumentMetadata}
     * @memberof Credit1099
     */
    document_metadata?: CreditDocumentMetadata;
    /**
     * 
     * @type {Form1099Type}
     * @memberof Credit1099
     */
    form_1099_type?: Form1099Type;
    /**
     * 
     * @type {Credit1099Recipient}
     * @memberof Credit1099
     */
    recipient?: Credit1099Recipient;
    /**
     * 
     * @type {Credit1099Payer}
     * @memberof Credit1099
     */
    payer?: Credit1099Payer;
    /**
     * 
     * @type {Credit1099Filer}
     * @memberof Credit1099
     */
    filer?: Credit1099Filer;
    /**
     * Tax year of the tax form.
     * @type {string}
     * @memberof Credit1099
     */
    tax_year?: string | null;
    /**
     * Amount in rent by payer.
     * @type {number}
     * @memberof Credit1099
     */
    rents?: number | null;
    /**
     * Amount in royalties by payer.
     * @type {number}
     * @memberof Credit1099
     */
    royalties?: number | null;
    /**
     * Amount in other income by payer.
     * @type {number}
     * @memberof Credit1099
     */
    other_income?: number | null;
    /**
     * Amount of federal income tax withheld from payer.
     * @type {number}
     * @memberof Credit1099
     */
    federal_income_tax_withheld?: number | null;
    /**
     * Amount of fishing boat proceeds from payer.
     * @type {number}
     * @memberof Credit1099
     */
    fishing_boat_proceeds?: number | null;
    /**
     * Amount of medical and healthcare payments from payer.
     * @type {number}
     * @memberof Credit1099
     */
    medical_and_healthcare_payments?: number | null;
    /**
     * Amount of nonemployee compensation from payer.
     * @type {number}
     * @memberof Credit1099
     */
    nonemployee_compensation?: number | null;
    /**
     * Amount of substitute payments made by payer.
     * @type {number}
     * @memberof Credit1099
     */
    substitute_payments_in_lieu_of_dividends_or_interest?: number | null;
    /**
     * Whether or not payer made direct sales over $5000 of consumer products.
     * @type {string}
     * @memberof Credit1099
     */
    payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer?: string | null;
    /**
     * Amount of crop insurance proceeds.
     * @type {number}
     * @memberof Credit1099
     */
    crop_insurance_proceeds?: number | null;
    /**
     * Amount of golden parachute payments made by payer.
     * @type {number}
     * @memberof Credit1099
     */
    excess_golden_parachute_payments?: number | null;
    /**
     * Amount of gross proceeds paid to an attorney by payer.
     * @type {number}
     * @memberof Credit1099
     */
    gross_proceeds_paid_to_an_attorney?: number | null;
    /**
     * Amount of 409A deferrals earned by payer.
     * @type {number}
     * @memberof Credit1099
     */
    section_409a_deferrals?: number | null;
    /**
     * Amount of 409A income earned by payer.
     * @type {number}
     * @memberof Credit1099
     */
    section_409a_income?: number | null;
    /**
     * Amount of state tax withheld of payer for primary state.
     * @type {number}
     * @memberof Credit1099
     */
    state_tax_withheld?: number | null;
    /**
     * Amount of state tax withheld of payer for secondary state.
     * @type {number}
     * @memberof Credit1099
     */
    state_tax_withheld_lower?: number | null;
    /**
     * Primary state ID.
     * @type {string}
     * @memberof Credit1099
     */
    payer_state_number?: string | null;
    /**
     * Secondary state ID.
     * @type {string}
     * @memberof Credit1099
     */
    payer_state_number_lower?: string | null;
    /**
     * State income reported for primary state.
     * @type {number}
     * @memberof Credit1099
     */
    state_income?: number | null;
    /**
     * State income reported for secondary state.
     * @type {number}
     * @memberof Credit1099
     */
    state_income_lower?: number | null;
    /**
     * One of the values will be provided Payment card Third party network
     * @type {string}
     * @memberof Credit1099
     */
    transactions_reported?: string | null;
    /**
     * Name of the PSE (Payment Settlement Entity).
     * @type {string}
     * @memberof Credit1099
     */
    pse_name?: string | null;
    /**
     * Formatted (XXX) XXX-XXXX. Phone number of the PSE (Payment Settlement Entity).
     * @type {string}
     * @memberof Credit1099
     */
    pse_telephone_number?: string | null;
    /**
     * Gross amount reported.
     * @type {number}
     * @memberof Credit1099
     */
    gross_amount?: number | null;
    /**
     * Amount in card not present transactions.
     * @type {number}
     * @memberof Credit1099
     */
    card_not_present_transaction?: number | null;
    /**
     * Merchant category of filer.
     * @type {string}
     * @memberof Credit1099
     */
    merchant_category_code?: string | null;
    /**
     * Number of payment transactions made.
     * @type {string}
     * @memberof Credit1099
     */
    number_of_payment_transactions?: string | null;
    /**
     * Amount reported for January.
     * @type {number}
     * @memberof Credit1099
     */
    january_amount?: number | null;
    /**
     * Amount reported for February.
     * @type {number}
     * @memberof Credit1099
     */
    february_amount?: number | null;
    /**
     * Amount reported for March.
     * @type {number}
     * @memberof Credit1099
     */
    march_amount?: number | null;
    /**
     * Amount reported for April.
     * @type {number}
     * @memberof Credit1099
     */
    april_amount?: number | null;
    /**
     * Amount reported for May.
     * @type {number}
     * @memberof Credit1099
     */
    may_amount?: number | null;
    /**
     * Amount reported for June.
     * @type {number}
     * @memberof Credit1099
     */
    june_amount?: number | null;
    /**
     * Amount reported for July.
     * @type {number}
     * @memberof Credit1099
     */
    july_amount?: number | null;
    /**
     * Amount reported for August.
     * @type {number}
     * @memberof Credit1099
     */
    august_amount?: number | null;
    /**
     * Amount reported for September.
     * @type {number}
     * @memberof Credit1099
     */
    september_amount?: number | null;
    /**
     * Amount reported for October.
     * @type {number}
     * @memberof Credit1099
     */
    october_amount?: number | null;
    /**
     * Amount reported for November.
     * @type {number}
     * @memberof Credit1099
     */
    november_amount?: number | null;
    /**
     * Amount reported for December.
     * @type {number}
     * @memberof Credit1099
     */
    december_amount?: number | null;
    /**
     * Primary state of business.
     * @type {string}
     * @memberof Credit1099
     */
    primary_state?: string | null;
    /**
     * Secondary state of business.
     * @type {string}
     * @memberof Credit1099
     */
    secondary_state?: string | null;
    /**
     * Primary state ID.
     * @type {string}
     * @memberof Credit1099
     */
    primary_state_id?: string | null;
    /**
     * Secondary state ID.
     * @type {string}
     * @memberof Credit1099
     */
    secondary_state_id?: string | null;
    /**
     * State income tax reported for primary state.
     * @type {number}
     * @memberof Credit1099
     */
    primary_state_income_tax?: number | null;
    /**
     * State income tax reported for secondary state.
     * @type {number}
     * @memberof Credit1099
     */
    secondary_state_income_tax?: number | null;
}
/**
 * An object representing a filer used by 1099-K tax documents.
 * @export
 * @interface Credit1099Filer
 */
// Edited by Plaid, line 9. any to unknown
export interface Credit1099Filer {
    [key: string]: object | unknown;

    /**
     * 
     * @type {CreditPayStubAddress}
     * @memberof Credit1099Filer
     */
    address?: CreditPayStubAddress;
    /**
     * Name of filer.
     * @type {string}
     * @memberof Credit1099Filer
     */
    name?: string | null;
    /**
     * Tax identification number of filer.
     * @type {string}
     * @memberof Credit1099Filer
     */
    tin?: string | null;
    /**
     * One of the following values will be provided: Payment Settlement Entity (PSE), Electronic Payment Facilitator (EPF), Other Third Party
     * @type {string}
     * @memberof Credit1099Filer
     */
    type?: string | null;
}
/**
 * An object representing a payer used by 1099-MISC tax documents.
 * @export
 * @interface Credit1099Payer
 */
// Edited by Plaid, line 9. any to unknown
export interface Credit1099Payer {
    [key: string]: object | unknown;

    /**
     * 
     * @type {CreditPayStubAddress}
     * @memberof Credit1099Payer
     */
    address?: CreditPayStubAddress;
    /**
     * Name of payer.
     * @type {string}
     * @memberof Credit1099Payer
     */
    name?: string | null;
    /**
     * Tax identification number of payer.
     * @type {string}
     * @memberof Credit1099Payer
     */
    tin?: string | null;
    /**
     * Telephone number of payer.
     * @type {string}
     * @memberof Credit1099Payer
     */
    telephone_number?: string | null;
}
/**
 * An object representing a recipient used in both 1099-K and 1099-MISC tax documents.
 * @export
 * @interface Credit1099Recipient
 */
// Edited by Plaid, line 9. any to unknown
export interface Credit1099Recipient {
    [key: string]: object | unknown;

    /**
     * 
     * @type {CreditPayStubAddress}
     * @memberof Credit1099Recipient
     */
    address?: CreditPayStubAddress;
    /**
     * Name of recipient.
     * @type {string}
     * @memberof Credit1099Recipient
     */
    name?: string | null;
    /**
     * Tax identification number of recipient.
     * @type {string}
     * @memberof Credit1099Recipient
     */
    tin?: string | null;
    /**
     * Account number number of recipient.
     * @type {string}
     * @memberof Credit1099Recipient
     */
    account_number?: string | null;
    /**
     * Checked if FACTA is a filing requirement.
     * @type {string}
     * @memberof Credit1099Recipient
     */
    facta_filing_requirement?: string | null;
    /**
     * Checked if 2nd TIN exists.
     * @type {string}
     * @memberof Credit1099Recipient
     */
    second_tin_exists?: string | null;
}
/**
 * Specifies the use case of the transfer. Required for transfers on an ACH network.  `\"ccd\"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts  `\"ppd\"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, eg. bill payment  `\"web\"` - A credit Entry initiated by or on behalf of a holder of a Consumer Account that is intended for a Consumer Account of a Receiver
 * @export
 * @enum {string}
 */
export enum CreditACHClass {
    Ccd = 'ccd',
    Ppd = 'ppd',
    Web = 'web'
}

/**
 * Valid account subtypes for credit accounts. For a list containing descriptions of each subtype, see [Account schemas](https://plaid.com/docs/api/accounts/#StandaloneAccountType-credit).
 * @export
 * @enum {string}
 */
export enum CreditAccountSubtype {
    CreditCard = 'credit card',
    Paypal = 'paypal',
    All = 'all'
}

/**
 * This contains an amount, denominated in the currency specified by either `iso_currency_code` or `unofficial_currency_code`
 * @export
 * @interface CreditAmountWithCurrency
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditAmountWithCurrency {
    [key: string]: object | unknown;

    /**
     * Value of amount with up to 2 decimal places.
     * @type {number}
     * @memberof CreditAmountWithCurrency
     */
    amount?: number;
    /**
     * The ISO 4217 currency code of the amount or balance.
     * @type {string}
     * @memberof CreditAmountWithCurrency
     */
    iso_currency_code?: string | null;
    /**
     * The unofficial currency code associated with the amount or balance. Always `null` if `iso_currency_code` is non-null. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
     * @type {string}
     * @memberof CreditAmountWithCurrency
     */
    unofficial_currency_code?: string | null;
}
/**
 * CreditAuditCopyTokenCreateRequest defines the request schema for `/credit/audit_copy_token/create`
 * @export
 * @interface CreditAuditCopyTokenCreateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditAuditCopyTokenCreateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof CreditAuditCopyTokenCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof CreditAuditCopyTokenCreateRequest
     */
    secret?: string;
    /**
     * List of report tokens; can include at most one VOA/standard Asset Report tokens and one VOE Asset Report Token.
     * @type {Array<string>}
     * @memberof CreditAuditCopyTokenCreateRequest
     */
    report_tokens: Array<string>;
}
/**
 * CreditAuditCopyTokenCreateResponse defines the response schema for `/credit/audit_copy_token/get`
 * @export
 * @interface CreditAuditCopyTokenCreateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditAuditCopyTokenCreateResponse {
    [key: string]: object | unknown;

    /**
     * A token that can be shared with a third party auditor, which allows them to fetch the Asset Reports attached to the token. This token should be stored securely.
     * @type {string}
     * @memberof CreditAuditCopyTokenCreateResponse
     */
    audit_copy_token: string;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof CreditAuditCopyTokenCreateResponse
     */
    request_id: string;
}
/**
 * CreditAuditCopyTokenRemoveRequest defines the request schema for `/credit/audit_copy_token/remove`
 * @export
 * @interface CreditAuditCopyTokenRemoveRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditAuditCopyTokenRemoveRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof CreditAuditCopyTokenRemoveRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof CreditAuditCopyTokenRemoveRequest
     */
    secret?: string;
    /**
     * The `audit_copy_token` granting access to the Audit Copy you would like to revoke.
     * @type {string}
     * @memberof CreditAuditCopyTokenRemoveRequest
     */
    audit_copy_token: string;
}
/**
 * CreditAuditCopyTokenRemoveResponse defines the response schema for `/credit/audit_copy_token/remove`
 * @export
 * @interface CreditAuditCopyTokenRemoveResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditAuditCopyTokenRemoveResponse {
    [key: string]: object | unknown;

    /**
     * `true` if the Audit Copy was successfully removed.
     * @type {boolean}
     * @memberof CreditAuditCopyTokenRemoveResponse
     */
    removed: boolean;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof CreditAuditCopyTokenRemoveResponse
     */
    request_id: string;
}
/**
 * CreditAuditCopyTokenUpdateRequest defines the request schema for `/credit/audit_copy_token/update`
 * @export
 * @interface CreditAuditCopyTokenUpdateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditAuditCopyTokenUpdateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof CreditAuditCopyTokenUpdateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof CreditAuditCopyTokenUpdateRequest
     */
    secret?: string;
    /**
     * The `audit_copy_token` you would like to update.
     * @type {string}
     * @memberof CreditAuditCopyTokenUpdateRequest
     */
    audit_copy_token: string;
    /**
     * Array of tokens which the specified Audit Copy Token will be updated with. The types of token supported are asset report token and employment report token. There can be at most 1 of each token type in the array.
     * @type {Array<string>}
     * @memberof CreditAuditCopyTokenUpdateRequest
     */
    report_tokens: Array<string>;
}
/**
 * CreditAuditCopyTokenUpdateResponse defines the response schema for `/credit/audit_copy_token/update`
 * @export
 * @interface CreditAuditCopyTokenUpdateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditAuditCopyTokenUpdateResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof CreditAuditCopyTokenUpdateResponse
     */
    request_id: string;
    /**
     * `true` if the Audit Copy Token was successfully updated.
     * @type {boolean}
     * @memberof CreditAuditCopyTokenUpdateResponse
     */
    updated: boolean;
}
/**
 * Object containing employer data.
 * @export
 * @interface CreditBankEmployer
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditBankEmployer {
    /**
     * Name of the employer.
     * @type {string}
     * @memberof CreditBankEmployer
     */
    name: string;
}
/**
 * Detailed information for the bank employment.
 * @export
 * @interface CreditBankEmployment
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditBankEmployment {
    /**
     * A unique identifier for the bank employment.
     * @type {string}
     * @memberof CreditBankEmployment
     */
    bank_employment_id: string;
    /**
     * Plaid\'s unique identifier for the account.
     * @type {string}
     * @memberof CreditBankEmployment
     */
    account_id: string;
    /**
     * 
     * @type {CreditBankEmployer}
     * @memberof CreditBankEmployment
     */
    employer: CreditBankEmployer;
    /**
     * The date of the most recent deposit from this employer.
     * @type {string}
     * @memberof CreditBankEmployment
     */
    latest_deposit_date: string;
    /**
     * The date of the earliest deposit from this employer from within the period of the days requested.
     * @type {string}
     * @memberof CreditBankEmployment
     */
    earliest_deposit_date: string;
}
/**
 * CreditBankEmploymentGetRequest defines the request schema for `/beta/credit/v1/bank_employment/get`.
 * @export
 * @interface CreditBankEmploymentGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditBankEmploymentGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof CreditBankEmploymentGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof CreditBankEmploymentGetRequest
     */
    secret?: string;
    /**
     * The user token associated with the User data is being requested for.
     * @type {string}
     * @memberof CreditBankEmploymentGetRequest
     */
    user_token: string;
}
/**
 * CreditBankEmploymentGetResponse defines the response schema for `/beta/credit/v1/bank_employment/get`.
 * @export
 * @interface CreditBankEmploymentGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditBankEmploymentGetResponse {
    [key: string]: object | unknown;

    /**
     * Bank Employment data. Each entry in the array will be a distinct bank employment report.
     * @type {Array<CreditBankEmploymentReport>}
     * @memberof CreditBankEmploymentGetResponse
     */
    bank_employment_reports: Array<CreditBankEmploymentReport>;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof CreditBankEmploymentGetResponse
     */
    request_id: string;
}
/**
 * The details and metadata for an end user\'s Item.
 * @export
 * @interface CreditBankEmploymentItem
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditBankEmploymentItem {
    /**
     * The unique identifier for the Item.
     * @type {string}
     * @memberof CreditBankEmploymentItem
     */
    item_id: string;
    /**
     * The time when this Item\'s data was last retrieved from the financial institution, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (e.g. \"2018-04-12T03:32:11Z\").
     * @type {string}
     * @memberof CreditBankEmploymentItem
     */
    last_updated_time: string;
    /**
     * The unique identifier of the institution associated with the Item.
     * @type {string}
     * @memberof CreditBankEmploymentItem
     */
    institution_id: string;
    /**
     * The name of the institution associated with the Item.
     * @type {string}
     * @memberof CreditBankEmploymentItem
     */
    institution_name: string;
    /**
     * The bank employment information for this Item. Each entry in the array is a different employer found.
     * @type {Array<CreditBankEmployment>}
     * @memberof CreditBankEmploymentItem
     */
    bank_employments: Array<CreditBankEmployment>;
    /**
     * The Item\'s accounts that have Bank Employment data.
     * @type {Array<CreditBankIncomeAccount>}
     * @memberof CreditBankEmploymentItem
     */
    bank_employment_accounts: Array<CreditBankIncomeAccount>;
}
/**
 * The report of the Bank Employment data for an end user.
 * @export
 * @interface CreditBankEmploymentReport
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditBankEmploymentReport {
    /**
     * The unique identifier associated with the Bank Employment Report.
     * @type {string}
     * @memberof CreditBankEmploymentReport
     */
    bank_employment_report_id: string;
    /**
     * The time when the Bank Employment Report was generated, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (e.g. \"2018-04-12T03:32:11Z\").
     * @type {string}
     * @memberof CreditBankEmploymentReport
     */
    generated_time: string;
    /**
     * The number of days requested by the customer for the Bank Employment Report.
     * @type {number}
     * @memberof CreditBankEmploymentReport
     */
    days_requested: number;
    /**
     * The list of Items in the report along with the associated metadata about the Item.
     * @type {Array<CreditBankEmploymentItem>}
     * @memberof CreditBankEmploymentReport
     */
    items: Array<CreditBankEmploymentItem>;
    /**
     * If data from the Bank Employment report was unable to be retrieved, the warnings will contain information about the error that caused the data to be incomplete.
     * @type {Array<CreditBankEmploymentWarning>}
     * @memberof CreditBankEmploymentReport
     */
    warnings: Array<CreditBankEmploymentWarning>;
}
/**
 * The warning associated with the data that was unavailable for the Bank Employment Report.
 * @export
 * @interface CreditBankEmploymentWarning
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditBankEmploymentWarning {
    /**
     * 
     * @type {CreditBankEmploymentWarningType}
     * @memberof CreditBankEmploymentWarning
     */
    warning_type: CreditBankEmploymentWarningType;
    /**
     * 
     * @type {CreditBankIncomeWarningCode}
     * @memberof CreditBankEmploymentWarning
     */
    warning_code: CreditBankIncomeWarningCode;
    /**
     * 
     * @type {CreditBankIncomeCause}
     * @memberof CreditBankEmploymentWarning
     */
    cause: CreditBankIncomeCause;
}
/**
 * The warning type which will always be `BANK_EMPLOYMENT_WARNING`.
 * @export
 * @enum {string}
 */
export enum CreditBankEmploymentWarningType {
    BankEmploymentWarning = 'BANK_EMPLOYMENT_WARNING'
}

/**
 * The report of the Bank Income data for an end user.
 * @export
 * @interface CreditBankIncome
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditBankIncome {
    /**
     * The unique identifier associated with the Bank Income Report.
     * @type {string}
     * @memberof CreditBankIncome
     */
    bank_income_id?: string;
    /**
     * The time when the Bank Income Report was generated.
     * @type {string}
     * @memberof CreditBankIncome
     */
    generated_time?: string;
    /**
     * The number of days requested by the customer for the Bank Income Report.
     * @type {number}
     * @memberof CreditBankIncome
     */
    days_requested?: number;
    /**
     * The list of Items in the report along with the associated metadata about the Item.
     * @type {Array<CreditBankIncomeItem>}
     * @memberof CreditBankIncome
     */
    items?: Array<CreditBankIncomeItem>;
    /**
     * 
     * @type {CreditBankIncomeSummary}
     * @memberof CreditBankIncome
     */
    bank_income_summary?: CreditBankIncomeSummary;
    /**
     * If data from the Bank Income report was unable to be retrieved, the warnings will contain information about the error that caused the data to be incomplete.
     * @type {Array<CreditBankIncomeWarning>}
     * @memberof CreditBankIncome
     */
    warnings?: Array<CreditBankIncomeWarning>;
}
/**
 * The Item\'s bank accounts that have the selected data.
 * @export
 * @interface CreditBankIncomeAccount
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditBankIncomeAccount {
    /**
     * Plaid\'s unique identifier for the account.
     * @type {string}
     * @memberof CreditBankIncomeAccount
     */
    account_id: string;
    /**
     * The last 2-4 alphanumeric characters of an account\'s official account number. Note that the mask may be non-unique between an Item\'s accounts, and it may also not match the mask that the bank displays to the user.
     * @type {string}
     * @memberof CreditBankIncomeAccount
     */
    mask: string | null;
    /**
     * The name of the bank account.
     * @type {string}
     * @memberof CreditBankIncomeAccount
     */
    name: string;
    /**
     * The official name of the bank account.
     * @type {string}
     * @memberof CreditBankIncomeAccount
     */
    official_name: string | null;
    /**
     * 
     * @type {DepositoryAccountSubtype}
     * @memberof CreditBankIncomeAccount
     */
    subtype: DepositoryAccountSubtype;
    /**
     * 
     * @type {CreditBankIncomeAccountType}
     * @memberof CreditBankIncomeAccount
     */
    type: CreditBankIncomeAccountType;
    /**
     * Data returned by the financial institution about the account owner or owners. Identity information is optional, so field may return an empty array.
     * @type {Array<Owner>}
     * @memberof CreditBankIncomeAccount
     */
    owners: Array<Owner>;
}
/**
 * The account type. This will always be `depository`.
 * @export
 * @enum {string}
 */
export enum CreditBankIncomeAccountType {
    Depository = 'depository'
}

/**
 * The income category. Note that the `CASH` value has been deprecated and is used only for existing legacy implementations. It has been replaced by the new categories `CASH_DEPOSIT` (representing cash or check deposits) and `TRANSFER_FROM_APPLICATION` (representing cash transfers originating from apps, such as Zelle or Venmo).
 * @export
 * @enum {string}
 */
export enum CreditBankIncomeCategory {
    Salary = 'SALARY',
    Unemployment = 'UNEMPLOYMENT',
    Cash = 'CASH',
    GigEconomy = 'GIG_ECONOMY',
    Rental = 'RENTAL',
    ChildSupport = 'CHILD_SUPPORT',
    Military = 'MILITARY',
    Retirement = 'RETIREMENT',
    LongTermDisability = 'LONG_TERM_DISABILITY',
    BankInterest = 'BANK_INTEREST',
    CashDeposit = 'CASH_DEPOSIT',
    TransferFromApplication = 'TRANSFER_FROM_APPLICATION',
    TaxRefund = 'TAX_REFUND',
    BenefitOther = 'BENEFIT_OTHER',
    Other = 'OTHER'
}

/**
 * An error object and associated `item_id` used to identify a specific Item and error when a batch operation operating on multiple Items has encountered an error in one of the Items.
 * @export
 * @interface CreditBankIncomeCause
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditBankIncomeCause {
    /**
     * 
     * @type {CreditBankIncomeErrorType}
     * @memberof CreditBankIncomeCause
     */
    error_type: CreditBankIncomeErrorType;
    /**
     * We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues. Error fields will be `null` if no error has occurred.
     * @type {string}
     * @memberof CreditBankIncomeCause
     */
    error_code: string;
    /**
     * A developer-friendly representation of the error code. This may change over time and is not safe for programmatic use.
     * @type {string}
     * @memberof CreditBankIncomeCause
     */
    error_message: string;
    /**
     * A user-friendly representation of the error code. null if the error is not related to user action. This may change over time and is not safe for programmatic use.
     * @type {string}
     * @memberof CreditBankIncomeCause
     */
    display_message: string;
    /**
     * The `item_id` of the Item associated with this warning.
     * @type {string}
     * @memberof CreditBankIncomeCause
     */
    item_id: string;
}
/**
 * A broad categorization of the error. Safe for programmatic use.
 * @export
 * @enum {string}
 */
export enum CreditBankIncomeErrorType {
    InternalServerError = 'INTERNAL_SERVER_ERROR',
    InsufficientCredentials = 'INSUFFICIENT_CREDENTIALS',
    ItemLocked = 'ITEM_LOCKED',
    UserSetupRequired = 'USER_SETUP_REQUIRED',
    CountryNotSupported = 'COUNTRY_NOT_SUPPORTED',
    InstitutionDown = 'INSTITUTION_DOWN',
    InstitutionNoLongerSupported = 'INSTITUTION_NO_LONGER_SUPPORTED',
    InstitutionNotResponding = 'INSTITUTION_NOT_RESPONDING',
    InvalidCredentials = 'INVALID_CREDENTIALS',
    InvalidMfa = 'INVALID_MFA',
    InvalidSendMethod = 'INVALID_SEND_METHOD',
    ItemLoginRequired = 'ITEM_LOGIN_REQUIRED',
    MfaNotSupported = 'MFA_NOT_SUPPORTED',
    NoAccounts = 'NO_ACCOUNTS',
    ItemNotSupported = 'ITEM_NOT_SUPPORTED',
    AccessNotGranted = 'ACCESS_NOT_GRANTED'
}

/**
 * CreditBankIncomeGetRequest defines the request schema for `/credit/bank_income/get`.
 * @export
 * @interface CreditBankIncomeGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditBankIncomeGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof CreditBankIncomeGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof CreditBankIncomeGetRequest
     */
    secret?: string;
    /**
     * The user token associated with the User data is being requested for.
     * @type {string}
     * @memberof CreditBankIncomeGetRequest
     */
    user_token?: string;
    /**
     * 
     * @type {CreditBankIncomeGetRequestOptions}
     * @memberof CreditBankIncomeGetRequest
     */
    options?: CreditBankIncomeGetRequestOptions;
}
/**
 * An optional object for `/credit/bank_income/get` request options.
 * @export
 * @interface CreditBankIncomeGetRequestOptions
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditBankIncomeGetRequestOptions {
    /**
     * How many Bank Income Reports should be fetched. Multiple reports may be available if the report has been re-created or refreshed. If more than one report is available, the most recent reports will be returned first.
     * @type {number}
     * @memberof CreditBankIncomeGetRequestOptions
     */
    count?: number;
}
/**
 * CreditBankIncomeGetResponse defines the response schema for `/credit/bank_income/get`
 * @export
 * @interface CreditBankIncomeGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditBankIncomeGetResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {Array<CreditBankIncome>}
     * @memberof CreditBankIncomeGetResponse
     */
    bank_income?: Array<CreditBankIncome>;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof CreditBankIncomeGetResponse
     */
    request_id: string;
}
/**
 * The end user\'s monthly summary for the income source(s).
 * @export
 * @interface CreditBankIncomeHistoricalSummary
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditBankIncomeHistoricalSummary {
    [key: string]: object | unknown;

    /**
     * Total amount of earnings for the income source(s) of the user for the month in the summary. This may return an incorrect value if the summary includes income sources in multiple currencies. Please use [`total_amounts`](https://plaid.com/docs/api/products/income/#credit-bank_income-get-response-bank-income-items-bank-income-sources-historical-summary-total-amounts) instead.
     * @type {number}
     * @memberof CreditBankIncomeHistoricalSummary
     * @deprecated
     */
    total_amount?: number;
    /**
     * The ISO 4217 currency code of the amount or balance. Please use [`total_amounts`](https://plaid.com/docs/api/products/income/#credit-bank_income-get-response-bank-income-items-bank-income-sources-historical-summary-total-amounts) instead.
     * @type {string}
     * @memberof CreditBankIncomeHistoricalSummary
     * @deprecated
     */
    iso_currency_code?: string | null;
    /**
     * The unofficial currency code associated with the amount or balance. Always `null` if `iso_currency_code` is non-null. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries. Please use [`total_amounts`](https://plaid.com/docs/api/products/income/#credit-bank_income-get-response-bank-income-items-bank-income-sources-historical-summary-total-amounts) instead.
     * @type {string}
     * @memberof CreditBankIncomeHistoricalSummary
     * @deprecated
     */
    unofficial_currency_code?: string | null;
    /**
     * Total amount of earnings for the income source(s) of the user for the month in the summary. This can contain multiple amounts, with each amount denominated in one unique currency.
     * @type {Array<CreditAmountWithCurrency>}
     * @memberof CreditBankIncomeHistoricalSummary
     */
    total_amounts?: Array<CreditAmountWithCurrency>;
    /**
     * The start date of the period covered in this monthly summary. This date will be the first day of the month, unless the month being covered is a partial month because it is the first month included in the summary and the date range being requested does not begin with the first day of the month. The date will be returned in an ISO 8601 format (YYYY-MM-DD).
     * @type {string}
     * @memberof CreditBankIncomeHistoricalSummary
     */
    start_date?: string;
    /**
     * The end date of the period included in this monthly summary. This date will be the last day of the month, unless the month being covered is a partial month because it is the last month included in the summary and the date range being requested does not end with the last day of the month. The date will be returned in an ISO 8601 format (YYYY-MM-DD).
     * @type {string}
     * @memberof CreditBankIncomeHistoricalSummary
     */
    end_date?: string;
    /**
     * 
     * @type {Array<CreditBankIncomeTransaction>}
     * @memberof CreditBankIncomeHistoricalSummary
     */
    transactions?: Array<CreditBankIncomeTransaction>;
}
/**
 * The details and metadata for an end user\'s Item.
 * @export
 * @interface CreditBankIncomeItem
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditBankIncomeItem {
    /**
     * The Item\'s accounts that have Bank Income data.
     * @type {Array<CreditBankIncomeAccount>}
     * @memberof CreditBankIncomeItem
     */
    bank_income_accounts?: Array<CreditBankIncomeAccount>;
    /**
     * The income sources for this Item. Each entry in the array is a single income source.
     * @type {Array<CreditBankIncomeSource>}
     * @memberof CreditBankIncomeItem
     */
    bank_income_sources?: Array<CreditBankIncomeSource>;
    /**
     * The time when this Item\'s data was last retrieved from the financial institution.
     * @type {string}
     * @memberof CreditBankIncomeItem
     */
    last_updated_time?: string;
    /**
     * The unique identifier of the institution associated with the Item.
     * @type {string}
     * @memberof CreditBankIncomeItem
     */
    institution_id?: string;
    /**
     * The name of the institution associated with the Item.
     * @type {string}
     * @memberof CreditBankIncomeItem
     */
    institution_name?: string;
    /**
     * The unique identifier for the Item.
     * @type {string}
     * @memberof CreditBankIncomeItem
     */
    item_id?: string;
}
/**
 * CreditBankIncomePDFGetRequest defines the request schema for `/credit/bank_income/pdf/get`
 * @export
 * @interface CreditBankIncomePDFGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditBankIncomePDFGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof CreditBankIncomePDFGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof CreditBankIncomePDFGetRequest
     */
    secret?: string;
    /**
     * The user token associated with the User data is being requested for.
     * @type {string}
     * @memberof CreditBankIncomePDFGetRequest
     */
    user_token: string;
}
/**
 * The income pay frequency.
 * @export
 * @enum {string}
 */
export enum CreditBankIncomePayFrequency {
    Weekly = 'WEEKLY',
    Biweekly = 'BIWEEKLY',
    SemiMonthly = 'SEMI_MONTHLY',
    Monthly = 'MONTHLY',
    Daily = 'DAILY',
    Unknown = 'UNKNOWN'
}

/**
 * CreditBankIncomeRefreshRequest defines the request schema for `/credit/bank_income/refresh`.
 * @export
 * @interface CreditBankIncomeRefreshRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditBankIncomeRefreshRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof CreditBankIncomeRefreshRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof CreditBankIncomeRefreshRequest
     */
    secret?: string;
    /**
     * The user token associated with the User data is being requested for.
     * @type {string}
     * @memberof CreditBankIncomeRefreshRequest
     */
    user_token: string;
    /**
     * 
     * @type {CreditBankIncomeRefreshRequestOptions}
     * @memberof CreditBankIncomeRefreshRequest
     */
    options?: CreditBankIncomeRefreshRequestOptions;
}
/**
 * An optional object for `/credit/bank_income/refresh` request options.
 * @export
 * @interface CreditBankIncomeRefreshRequestOptions
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditBankIncomeRefreshRequestOptions {
    /**
     * How many days of data to include in the refresh. If not specified, this will default to the days requested in the most recently generated bank income report for the user.
     * @type {number}
     * @memberof CreditBankIncomeRefreshRequestOptions
     */
    days_requested?: number;
}
/**
 * CreditBankIncomeRefreshResponse defines the response schema for `/credit/bank_income/refresh`.
 * @export
 * @interface CreditBankIncomeRefreshResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditBankIncomeRefreshResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof CreditBankIncomeRefreshResponse
     */
    request_id: string;
}
/**
 * Detailed information for the income source.
 * @export
 * @interface CreditBankIncomeSource
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditBankIncomeSource {
    /**
     * A unique identifier for an income source.
     * @type {string}
     * @memberof CreditBankIncomeSource
     */
    income_source_id?: string;
    /**
     * The most common name or original description for the underlying income transactions.
     * @type {string}
     * @memberof CreditBankIncomeSource
     */
    income_description?: string;
    /**
     * 
     * @type {CreditBankIncomeCategory}
     * @memberof CreditBankIncomeSource
     */
    income_category?: CreditBankIncomeCategory;
    /**
     * Plaid\'s unique identifier for the account.
     * @type {string}
     * @memberof CreditBankIncomeSource
     */
    account_id?: string;
    /**
     * Minimum of all dates within the specific income sources in the user\'s bank account for days requested by the client. The date will be returned in an ISO 8601 format (YYYY-MM-DD).
     * @type {string}
     * @memberof CreditBankIncomeSource
     */
    start_date?: string;
    /**
     * Maximum of all dates within the specific income sources in the user’s bank account for days requested by the client. The date will be returned in an ISO 8601 format (YYYY-MM-DD).
     * @type {string}
     * @memberof CreditBankIncomeSource
     */
    end_date?: string;
    /**
     * 
     * @type {CreditBankIncomePayFrequency}
     * @memberof CreditBankIncomeSource
     */
    pay_frequency?: CreditBankIncomePayFrequency;
    /**
     * Total amount of earnings in the user’s bank account for the specific income source for days requested by the client.
     * @type {number}
     * @memberof CreditBankIncomeSource
     */
    total_amount?: number;
    /**
     * Number of transactions for the income source within the start and end date.
     * @type {number}
     * @memberof CreditBankIncomeSource
     */
    transaction_count?: number;
    /**
     * 
     * @type {Array<CreditBankIncomeHistoricalSummary>}
     * @memberof CreditBankIncomeSource
     */
    historical_summary?: Array<CreditBankIncomeHistoricalSummary>;
}
/**
 * Summary for bank income across all income sources and items (max history of 730 days).
 * @export
 * @interface CreditBankIncomeSummary
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditBankIncomeSummary {
    [key: string]: object | unknown;

    /**
     * Total amount of earnings across all the income sources in the end user\'s Items for the days requested by the client. This may return an incorrect value if the summary includes income sources in multiple currencies. Please use [`total_amounts`](https://plaid.com/docs/api/products/income/#credit-bank_income-get-response-bank-income-bank-income-summary-total-amounts) instead.
     * @type {number}
     * @memberof CreditBankIncomeSummary
     * @deprecated
     */
    total_amount?: number;
    /**
     * The ISO 4217 currency code of the amount or balance. Please use [`total_amounts`](https://plaid.com/docs/api/products/income/#credit-bank_income-get-response-bank-income-bank-income-summary-total-amounts) instead.
     * @type {string}
     * @memberof CreditBankIncomeSummary
     * @deprecated
     */
    iso_currency_code?: string | null;
    /**
     * The unofficial currency code associated with the amount or balance. Always `null` if `iso_currency_code` is non-null. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries. Please use [`total_amounts`](https://plaid.com/docs/api/products/income/#credit-bank_income-get-response-bank-income-bank-income-summary-total-amounts) instead.
     * @type {string}
     * @memberof CreditBankIncomeSummary
     * @deprecated
     */
    unofficial_currency_code?: string | null;
    /**
     * Total amount of earnings across all the income sources in the end user\'s Items for the days requested by the client. This can contain multiple amounts, with each amount denominated in one unique currency.
     * @type {Array<CreditAmountWithCurrency>}
     * @memberof CreditBankIncomeSummary
     */
    total_amounts?: Array<CreditAmountWithCurrency>;
    /**
     * The earliest date within the days requested in which all income sources identified by Plaid appear in a user\'s account. The date will be returned in an ISO 8601 format (YYYY-MM-DD).
     * @type {string}
     * @memberof CreditBankIncomeSummary
     */
    start_date?: string;
    /**
     * The latest date in which all income sources identified by Plaid appear in the user\'s account. The date will be returned in an ISO 8601 format (YYYY-MM-DD).
     * @type {string}
     * @memberof CreditBankIncomeSummary
     */
    end_date?: string;
    /**
     * Number of income sources per end user.
     * @type {number}
     * @memberof CreditBankIncomeSummary
     */
    income_sources_count?: number;
    /**
     * Number of income categories per end user.
     * @type {number}
     * @memberof CreditBankIncomeSummary
     */
    income_categories_count?: number;
    /**
     * Number of income transactions per end user.
     * @type {number}
     * @memberof CreditBankIncomeSummary
     */
    income_transactions_count?: number;
    /**
     * 
     * @type {Array<CreditBankIncomeHistoricalSummary>}
     * @memberof CreditBankIncomeSummary
     */
    historical_summary?: Array<CreditBankIncomeHistoricalSummary>;
}
/**
 * The transactions data for the end user\'s income source(s).
 * @export
 * @interface CreditBankIncomeTransaction
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditBankIncomeTransaction {
    [key: string]: object | unknown;

    /**
     * The settled value of the transaction, denominated in the transactions\'s currency as stated in `iso_currency_code` or `unofficial_currency_code`. Positive values when money moves out of the account; negative values when money moves in. For example, credit card purchases are positive; credit card payment, direct deposits, and refunds are negative.
     * @type {number}
     * @memberof CreditBankIncomeTransaction
     */
    amount?: number;
    /**
     * For pending transactions, the date that the transaction occurred; for posted transactions, the date that the transaction posted. Both dates are returned in an ISO 8601 format (YYYY-MM-DD).
     * @type {string}
     * @memberof CreditBankIncomeTransaction
     */
    date?: string;
    /**
     * The merchant name or transaction description.
     * @type {string}
     * @memberof CreditBankIncomeTransaction
     */
    name?: string;
    /**
     * The string returned by the financial institution to describe the transaction.
     * @type {string}
     * @memberof CreditBankIncomeTransaction
     */
    original_description?: string | null;
    /**
     * When true, identifies the transaction as pending or unsettled. Pending transaction details (name, type, amount, category ID) may change before they are settled.
     * @type {boolean}
     * @memberof CreditBankIncomeTransaction
     */
    pending?: boolean;
    /**
     * The unique ID of the transaction. Like all Plaid identifiers, the `transaction_id` is case sensitive.
     * @type {string}
     * @memberof CreditBankIncomeTransaction
     */
    transaction_id?: string;
    /**
     * The check number of the transaction. This field is only populated for check transactions.
     * @type {string}
     * @memberof CreditBankIncomeTransaction
     */
    check_number?: string | null;
    /**
     * The ISO 4217 currency code of the amount or balance.
     * @type {string}
     * @memberof CreditBankIncomeTransaction
     */
    iso_currency_code?: string | null;
    /**
     * The unofficial currency code associated with the amount or balance. Always `null` if `iso_currency_code` is non-null. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
     * @type {string}
     * @memberof CreditBankIncomeTransaction
     */
    unofficial_currency_code?: string | null;
}
/**
 * The warning associated with the data that was unavailable for the Bank Income Report.
 * @export
 * @interface CreditBankIncomeWarning
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditBankIncomeWarning {
    /**
     * 
     * @type {CreditBankIncomeWarningType}
     * @memberof CreditBankIncomeWarning
     */
    warning_type?: CreditBankIncomeWarningType;
    /**
     * 
     * @type {CreditBankIncomeWarningCode}
     * @memberof CreditBankIncomeWarning
     */
    warning_code?: CreditBankIncomeWarningCode;
    /**
     * 
     * @type {CreditBankIncomeCause}
     * @memberof CreditBankIncomeWarning
     */
    cause?: CreditBankIncomeCause;
}
/**
 * The warning code identifies a specific kind of warning. `IDENTITY_UNAVAILABLE`: Unable to extract identity for the Item `TRANSACTIONS_UNAVAILABLE`: Unable to extract transactions for the Item `ITEM_UNAPPROVED`: User exited flow before giving permission to share data for the Item `REPORT_DELETED`: Report deleted due to customer or consumer request `DATA_UNAVAILABLE`: No relevant data was found for the Item
 * @export
 * @enum {string}
 */
export enum CreditBankIncomeWarningCode {
    IdentityUnavailable = 'IDENTITY_UNAVAILABLE',
    TransactionsUnavailable = 'TRANSACTIONS_UNAVAILABLE',
    ItemUnapproved = 'ITEM_UNAPPROVED',
    ReportDeleted = 'REPORT_DELETED',
    DataUnavailable = 'DATA_UNAVAILABLE'
}

/**
 * The warning type which will always be `BANK_INCOME_WARNING`.
 * @export
 * @enum {string}
 */
export enum CreditBankIncomeWarningType {
    BankIncomeWarning = 'BANK_INCOME_WARNING'
}

/**
 * CreditBankIncomeWebhookUpdateRequest defines the request schema for `/credit/bank_income/webhook/update`.
 * @export
 * @interface CreditBankIncomeWebhookUpdateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditBankIncomeWebhookUpdateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof CreditBankIncomeWebhookUpdateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof CreditBankIncomeWebhookUpdateRequest
     */
    secret?: string;
    /**
     * The user token associated with the User data is being requested for.
     * @type {string}
     * @memberof CreditBankIncomeWebhookUpdateRequest
     */
    user_token: string;
    /**
     * Whether the user should be enabled for proactive webhook notifications when their income changes
     * @type {boolean}
     * @memberof CreditBankIncomeWebhookUpdateRequest
     */
    enable_webhooks: boolean;
}
/**
 * An object containing data about the owner of the bank account for the uploaded bank statement.
 * @export
 * @interface CreditBankStatementUploadAccountOwner
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditBankStatementUploadAccountOwner {
    [key: string]: object | unknown;

    /**
     * The name of the account owner
     * @type {string}
     * @memberof CreditBankStatementUploadAccountOwner
     */
    name: string | null;
    /**
     * 
     * @type {CreditBankStatementUploadAccountOwnerAddress}
     * @memberof CreditBankStatementUploadAccountOwner
     */
    address: CreditBankStatementUploadAccountOwnerAddress;
}
/**
 * Address on the uploaded bank statement
 * @export
 * @interface CreditBankStatementUploadAccountOwnerAddress
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditBankStatementUploadAccountOwnerAddress {
    [key: string]: object | unknown;

    /**
     * The full city name.
     * @type {string}
     * @memberof CreditBankStatementUploadAccountOwnerAddress
     */
    city: string | null;
    /**
     * The ISO 3166-1 alpha-2 country code.
     * @type {string}
     * @memberof CreditBankStatementUploadAccountOwnerAddress
     */
    country: string | null;
    /**
     * The postal code of the address.
     * @type {string}
     * @memberof CreditBankStatementUploadAccountOwnerAddress
     */
    postal_code: string | null;
    /**
     * The region or state. Example: `\"NC\"`
     * @type {string}
     * @memberof CreditBankStatementUploadAccountOwnerAddress
     */
    region: string | null;
    /**
     * The full street address.
     * @type {string}
     * @memberof CreditBankStatementUploadAccountOwnerAddress
     */
    street: string | null;
}
/**
 * An object containing data about a user\'s bank account related to an uploaded bank statement.
 * @export
 * @interface CreditBankStatementUploadBankAccount
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditBankStatementUploadBankAccount {
    [key: string]: object | unknown;

    /**
     * The name of the bank account
     * @type {string}
     * @memberof CreditBankStatementUploadBankAccount
     */
    name: string | null;
    /**
     * The name of the bank institution.
     * @type {string}
     * @memberof CreditBankStatementUploadBankAccount
     */
    bank_name: string | null;
    /**
     * The type of the bank account.
     * @type {string}
     * @memberof CreditBankStatementUploadBankAccount
     */
    account_type: string | null;
    /**
     * The bank account number.
     * @type {string}
     * @memberof CreditBankStatementUploadBankAccount
     */
    account_number: string | null;
    /**
     * 
     * @type {CreditBankStatementUploadAccountOwner}
     * @memberof CreditBankStatementUploadBankAccount
     */
    owner: CreditBankStatementUploadAccountOwner;
    /**
     * An array of period objects, containing more data on the overall period of the statement.
     * @type {Array<CreditBankStatementUploadBankAccountPeriod>}
     * @memberof CreditBankStatementUploadBankAccount
     */
    periods: Array<CreditBankStatementUploadBankAccountPeriod>;
    /**
     * The unique id of the bank account
     * @type {string}
     * @memberof CreditBankStatementUploadBankAccount
     */
    account_id: string | null;
}
/**
 * An object containing data on the overall period of the statement.
 * @export
 * @interface CreditBankStatementUploadBankAccountPeriod
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditBankStatementUploadBankAccountPeriod {
    /**
     * The start date of the statement period in ISO 8601 format (YYYY-MM-DD).
     * @type {string}
     * @memberof CreditBankStatementUploadBankAccountPeriod
     */
    start_date: string | null;
    /**
     * The end date of the statement period in ISO 8601 format (YYYY-MM-DD).
     * @type {string}
     * @memberof CreditBankStatementUploadBankAccountPeriod
     */
    end_date: string | null;
    /**
     * The starting balance of the bank account for the period.
     * @type {number}
     * @memberof CreditBankStatementUploadBankAccountPeriod
     */
    starting_balance: number | null;
    /**
     * The ending balance of the bank account for the period.
     * @type {number}
     * @memberof CreditBankStatementUploadBankAccountPeriod
     */
    ending_balance: number | null;
}
/**
 * An object containing information about the bank statement upload Item.
 * @export
 * @interface CreditBankStatementUploadItem
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditBankStatementUploadItem {
    /**
     * The `item_id` of the Item associated with this webhook, warning, or error
     * @type {string}
     * @memberof CreditBankStatementUploadItem
     */
    item_id: string;
    /**
     * 
     * @type {Array<CreditBankStatementUploadObject>}
     * @memberof CreditBankStatementUploadItem
     */
    bank_statements: Array<CreditBankStatementUploadObject>;
    /**
     * 
     * @type {PayrollItemStatus}
     * @memberof CreditBankStatementUploadItem
     */
    status: PayrollItemStatus | null;
    /**
     * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DDTHH:mm:ssZ) indicating the last time that the Item was updated.
     * @type {string}
     * @memberof CreditBankStatementUploadItem
     */
    updated_at: string | null;
}
/**
 * An object containing data that has been parsed from a user-uploaded bank statement.
 * @export
 * @interface CreditBankStatementUploadObject
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditBankStatementUploadObject {
    [key: string]: object | unknown;

    /**
     * An array of transactions appearing on the bank statement.
     * @type {Array<CreditBankStatementUploadTransaction>}
     * @memberof CreditBankStatementUploadObject
     */
    transactions: Array<CreditBankStatementUploadTransaction>;
    /**
     * 
     * @type {CreditDocumentMetadata}
     * @memberof CreditBankStatementUploadObject
     */
    document_metadata: CreditDocumentMetadata;
    /**
     * An identifier of the document referenced by the document metadata.
     * @type {string}
     * @memberof CreditBankStatementUploadObject
     */
    document_id: string | null;
    /**
     * An array of bank accounts associated with the uploaded bank statement.
     * @type {Array<CreditBankStatementUploadBankAccount>}
     * @memberof CreditBankStatementUploadObject
     */
    bank_accounts: Array<CreditBankStatementUploadBankAccount>;
}
/**
 * An object containing data about a transaction appearing on a user-uploaded bank statement.
 * @export
 * @interface CreditBankStatementUploadTransaction
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditBankStatementUploadTransaction {
    /**
     * The value of the transaction. A negative amount indicates that money moved into the account (such as a paycheck being deposited).
     * @type {number}
     * @memberof CreditBankStatementUploadTransaction
     */
    amount: number | null;
    /**
     * The date of when the transaction was made, in ISO 8601 format (YYYY-MM-DD).
     * @type {string}
     * @memberof CreditBankStatementUploadTransaction
     */
    date: string | null;
    /**
     * The raw description of the transaction as it appears on the bank statement.
     * @type {string}
     * @memberof CreditBankStatementUploadTransaction
     */
    original_description: string | null;
    /**
     * The unique id of the bank account that this transaction occurs in
     * @type {string}
     * @memberof CreditBankStatementUploadTransaction
     */
    account_id: string | null;
}
/**
 * CreditBankStatementsUploadsGetRequest defines the request schema for `/credit/bank_statements/uploads/get`
 * @export
 * @interface CreditBankStatementsUploadsGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditBankStatementsUploadsGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof CreditBankStatementsUploadsGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof CreditBankStatementsUploadsGetRequest
     */
    secret?: string;
    /**
     * The user token associated with the User data is being requested for.
     * @type {string}
     * @memberof CreditBankStatementsUploadsGetRequest
     */
    user_token: string;
}
/**
 * CreditBankStatementsUploadsGetResponse defines the response schema for `/credit/bank_statements/uploads/get`
 * @export
 * @interface CreditBankStatementsUploadsGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditBankStatementsUploadsGetResponse {
    [key: string]: object | unknown;

    /**
     * Array of bank statement upload items.
     * @type {Array<CreditBankStatementUploadItem>}
     * @memberof CreditBankStatementsUploadsGetResponse
     */
    items: Array<CreditBankStatementUploadItem>;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof CreditBankStatementsUploadsGetResponse
     */
    request_id: string;
}
/**
 * An object representing a credit card account.
 * @export
 * @interface CreditCardLiability
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditCardLiability {
    [key: string]: object | unknown;

    /**
     * The ID of the account that this liability belongs to.
     * @type {string}
     * @memberof CreditCardLiability
     */
    account_id: string | null;
    /**
     * The various interest rates that apply to the account. APR information is not provided by all card issuers; if APR data is not available, this array will be empty.
     * @type {Array<APR>}
     * @memberof CreditCardLiability
     */
    aprs: Array<APR>;
    /**
     * true if a payment is currently overdue. Availability for this field is limited.
     * @type {boolean}
     * @memberof CreditCardLiability
     */
    is_overdue: boolean | null;
    /**
     * The amount of the last payment.
     * @type {number}
     * @memberof CreditCardLiability
     */
    last_payment_amount: number | null;
    /**
     * The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Availability for this field is limited.
     * @type {string}
     * @memberof CreditCardLiability
     */
    last_payment_date: string | null;
    /**
     * The date of the last statement. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
     * @type {string}
     * @memberof CreditCardLiability
     */
    last_statement_issue_date: string | null;
    /**
     * The total amount owed as of the last statement issued
     * @type {number}
     * @memberof CreditCardLiability
     */
    last_statement_balance: number | null;
    /**
     * The minimum payment due for the next billing cycle.
     * @type {number}
     * @memberof CreditCardLiability
     */
    minimum_payment_amount: number | null;
    /**
     * The due date for the next payment. The due date is `null` if a payment is not expected. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
     * @type {string}
     * @memberof CreditCardLiability
     */
    next_payment_due_date: string | null;
}
/**
 * Information describing the intent of the transaction. Most relevant for credit use cases, but not limited to such use cases. Please reach out to your account manager or sales representative if you would like to receive this field.  See the [`taxonomy csv file`](https://plaid.com/documents/credit-category-taxonomy.csv) for a full list of credit categories.
 * @export
 * @interface CreditCategory
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditCategory {
    [key: string]: object | unknown;

    /**
     * A high level category that communicates the broad category of the transaction.
     * @type {string}
     * @memberof CreditCategory
     */
    primary: string;
    /**
     * A granular category conveying the transaction\'s intent. This field can also be used as a unique identifier for the category.
     * @type {string}
     * @memberof CreditCategory
     */
    detailed: string;
}
/**
 * Object representing metadata pertaining to the document.
 * @export
 * @interface CreditDocumentMetadata
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditDocumentMetadata {
    [key: string]: object | unknown;

    /**
     * The name of the document.
     * @type {string}
     * @memberof CreditDocumentMetadata
     */
    name: string;
    /**
     * The type of document.  `PAYSTUB`: A paystub.  `BANK_STATEMENT`: A bank statement.  `US_TAX_W2`: A W-2 wage and tax statement provided by a US employer reflecting wages earned by the employee.  `US_MILITARY_ERAS`: An electronic Retirement Account Statement (eRAS) issued by the US military.  `US_MILITARY_LES`: A Leave and Earnings Statement (LES) issued by the US military.  `US_MILITARY_CLES`: A Civilian Leave and Earnings Statment (CLES) issued by the US military.  `GIG`: Used to indicate that the income is related to gig work. Does not necessarily correspond to a specific document type.  `PLAID_GENERATED_PAYSTUB_PDF`: Used to indicate that the PDF for the paystub was generated by Plaid.  `NONE`: Used to indicate that there is no underlying document for the data.  `UNKNOWN`: Document type could not be determined.
     * @type {string}
     * @memberof CreditDocumentMetadata
     */
    document_type: string | null;
    /**
     * Signed URL to retrieve the underlying file. This download URL can only be used once and expires after two minutes. To generate a new download URL, call `/credit/payroll_income/get` again.
     * @type {string}
     * @memberof CreditDocumentMetadata
     */
    download_url: string | null;
    /**
     * The processing status of the document.
     * @type {string}
     * @memberof CreditDocumentMetadata
     */
    status: string | null;
    /**
     * The number of pages of the uploaded document (if available).
     * @type {number}
     * @memberof CreditDocumentMetadata
     */
    page_count?: number | null;
}
/**
 * An object containing employer data.
 * @export
 * @interface CreditEmployerVerification
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditEmployerVerification {
    [key: string]: object | unknown;

    /**
     * Name of employer.
     * @type {string}
     * @memberof CreditEmployerVerification
     */
    name: string | null;
}
/**
 * CreditEmploymentGetRequest defines the request schema for `/credit/employment/get`.
 * @export
 * @interface CreditEmploymentGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditEmploymentGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof CreditEmploymentGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof CreditEmploymentGetRequest
     */
    secret?: string;
    /**
     * The user token associated with the User data is being requested for.
     * @type {string}
     * @memberof CreditEmploymentGetRequest
     */
    user_token: string;
}
/**
 * CreditEmploymentGetResponse defines the response schema for `/credit/employment/get`.
 * @export
 * @interface CreditEmploymentGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditEmploymentGetResponse {
    [key: string]: object | unknown;

    /**
     * Array of employment items.
     * @type {Array<CreditEmploymentItem>}
     * @memberof CreditEmploymentGetResponse
     */
    items: Array<CreditEmploymentItem>;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof CreditEmploymentGetResponse
     */
    request_id: string;
}
/**
 * The object containing employment items.
 * @export
 * @interface CreditEmploymentItem
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditEmploymentItem {
    [key: string]: object | unknown;

    /**
     * The `item_id` of the Item associated with this webhook, warning, or error
     * @type {string}
     * @memberof CreditEmploymentItem
     */
    item_id: string;
    /**
     * 
     * @type {Array<CreditEmploymentVerification>}
     * @memberof CreditEmploymentItem
     */
    employments: Array<CreditEmploymentVerification>;
    /**
     * Token to represent the underlying Employment data
     * @type {string}
     * @memberof CreditEmploymentItem
     */
    employment_report_token?: string;
}
/**
 * The object containing proof of employment data for an individual.
 * @export
 * @interface CreditEmploymentVerification
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditEmploymentVerification {
    [key: string]: object | unknown;

    /**
     * ID of the payroll provider account.
     * @type {string}
     * @memberof CreditEmploymentVerification
     */
    account_id: string | null;
    /**
     * Current employment status.
     * @type {string}
     * @memberof CreditEmploymentVerification
     */
    status: string | null;
    /**
     * Start of employment in ISO 8601 format (YYYY-MM-DD).
     * @type {string}
     * @memberof CreditEmploymentVerification
     */
    start_date: string | null;
    /**
     * End of employment, if applicable. Provided in ISO 8601 format (YYY-MM-DD).
     * @type {string}
     * @memberof CreditEmploymentVerification
     */
    end_date: string | null;
    /**
     * 
     * @type {CreditEmployerVerification}
     * @memberof CreditEmploymentVerification
     */
    employer: CreditEmployerVerification;
    /**
     * Current title of employee.
     * @type {string}
     * @memberof CreditEmploymentVerification
     */
    title: string | null;
    /**
     * 
     * @type {CreditPlatformIds}
     * @memberof CreditEmploymentVerification
     */
    platform_ids: CreditPlatformIds;
    /**
     * The type of employment for the individual. `\"FULL_TIME\"`: A full-time employee. `\"PART_TIME\"`: A part-time employee. `\"CONTRACTOR\"`: An employee typically hired externally through a contracting group. `\"TEMPORARY\"`: A temporary employee. `\"OTHER\"`: The employee type is not one of the above defined types.
     * @type {string}
     * @memberof CreditEmploymentVerification
     */
    employee_type: string | null;
    /**
     * The date of the employee\'s most recent paystub in ISO 8601 format (YYYY-MM-DD).
     * @type {string}
     * @memberof CreditEmploymentVerification
     */
    last_paystub_date: string | null;
}
/**
 * A filter to apply to `credit`-type accounts
 * @export
 * @interface CreditFilter
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditFilter {
    [key: string]: object | unknown;

    /**
     * An array of account subtypes to display in Link. If not specified, all account subtypes will be shown. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema). 
     * @type {Array<CreditAccountSubtype>}
     * @memberof CreditFilter
     */
    account_subtypes: Array<CreditAccountSubtype>;
}
/**
 * Details about an asset.
 * @export
 * @interface CreditFreddieMacAssetDetailVOE25
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditFreddieMacAssetDetailVOE25 {
    [key: string]: object | unknown;

    /**
     * A vendor created unique Identifier.
     * @type {string}
     * @memberof CreditFreddieMacAssetDetailVOE25
     */
    AssetUniqueIdentifier: string;
    /**
     * A unique alphanumeric string identifying an asset.
     * @type {string}
     * @memberof CreditFreddieMacAssetDetailVOE25
     */
    AssetAccountIdentifier: string;
    /**
     * Account Report As of Date / Create Date. Format YYYY-MM-DD
     * @type {string}
     * @memberof CreditFreddieMacAssetDetailVOE25
     */
    AssetAsOfDate: string;
    /**
     * A text description that further defines the Asset. This could be used to describe the shares associated with the stocks, bonds or mutual funds, retirement funds or business owned that the borrower has disclosed (named) as an asset.
     * @type {string}
     * @memberof CreditFreddieMacAssetDetailVOE25
     */
    AssetDescription: string | null;
    /**
     * 
     * @type {AssetType}
     * @memberof CreditFreddieMacAssetDetailVOE25
     */
    AssetType: AssetType;
    /**
     * Additional Asset Decription some examples are Investment Tax-Deferred , Loan, 401K, 403B, Checking, Money Market, Credit Card,ROTH,529,Biller,ROLLOVER,CD,Savings,Investment Taxable, IRA, Mortgage, Line Of Credit.
     * @type {string}
     * @memberof CreditFreddieMacAssetDetailVOE25
     */
    AssetTypeAdditionalDescription: string | null;
    /**
     * The Number of days requested made to the Financial Institution. Example When looking for 3 months of data from the FI, pass in 90 days.
     * @type {number}
     * @memberof CreditFreddieMacAssetDetailVOE25
     */
    AssetDaysRequestedCount: number;
    /**
     * Ownership type of the asset account.
     * @type {string}
     * @memberof CreditFreddieMacAssetDetailVOE25
     */
    AssetOwnershipType: string | null;
}
/**
 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
 * @export
 * @interface CreditFreddieMacAssetTransactionDetailVOE25
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditFreddieMacAssetTransactionDetailVOE25 {
    [key: string]: object | unknown;

    /**
     * A vendor created unique Identifier.
     * @type {string}
     * @memberof CreditFreddieMacAssetTransactionDetailVOE25
     */
    AssetTransactionUniqueIdentifier: string;
    /**
     * Asset Transaction Date.
     * @type {string}
     * @memberof CreditFreddieMacAssetTransactionDetailVOE25
     */
    AssetTransactionDate: string;
    /**
     * Asset Transaction Post Date.
     * @type {string}
     * @memberof CreditFreddieMacAssetTransactionDetailVOE25
     */
    AssetTransactionPostDate: string;
    /**
     * 
     * @type {AssetTransactionType}
     * @memberof CreditFreddieMacAssetTransactionDetailVOE25
     */
    AssetTransactionType: AssetTransactionType;
    /**
     * Populate with who did the transaction.
     * @type {string}
     * @memberof CreditFreddieMacAssetTransactionDetailVOE25
     */
    AssetTransactionPaidByName: string | null;
    /**
     * Populate with for whom the transaction is done.
     * @type {string}
     * @memberof CreditFreddieMacAssetTransactionDetailVOE25
     */
    AssetTransactionPaidToName: string | null;
    /**
     * FI Provided - examples are atm, cash, check, credit, debit, deposit, directDebit, directDeposit, dividend, fee, interest, other, payment, pointOfSale, repeatPayment, serviceCharge, transfer.
     * @type {string}
     * @memberof CreditFreddieMacAssetTransactionDetailVOE25
     */
    AssetTransactionTypeAdditionalDescription: string | null;
    /**
     * 
     * @type {AssetTransactionCategoryType}
     * @memberof CreditFreddieMacAssetTransactionDetailVOE25
     */
    AssetTransactionCategoryType: AssetTransactionCategoryType | null;
    /**
     * FI provided Transaction Identifier.
     * @type {string}
     * @memberof CreditFreddieMacAssetTransactionDetailVOE25
     */
    FinancialInstitutionTransactionIdentifier: string | null;
}
/**
 * An object representing...
 * @export
 * @interface CreditFreddieMacAssetTransactionVOA24
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditFreddieMacAssetTransactionVOA24 {
    [key: string]: object | unknown;

    /**
     * 
     * @type {AssetTransactionDetail}
     * @memberof CreditFreddieMacAssetTransactionVOA24
     */
    ASSET_TRANSACTION_DETAIL: AssetTransactionDetail;
    /**
     * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
     * @type {Array<AssetTransactionDescription>}
     * @memberof CreditFreddieMacAssetTransactionVOA24
     */
    ASSET_TRANSACTION_DESCRIPTION: Array<AssetTransactionDescription>;
}
/**
 * An object representing...
 * @export
 * @interface CreditFreddieMacAssetTransactionVOE25
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditFreddieMacAssetTransactionVOE25 {
    [key: string]: object | unknown;

    /**
     * 
     * @type {CreditFreddieMacAssetTransactionDetailVOE25}
     * @memberof CreditFreddieMacAssetTransactionVOE25
     */
    ASSET_TRANSACTION_DETAIL: CreditFreddieMacAssetTransactionDetailVOE25;
    /**
     * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
     * @type {Array<AssetTransactionDescription>}
     * @memberof CreditFreddieMacAssetTransactionVOE25
     */
    ASSET_TRANSACTION_DESCRIPTION: Array<AssetTransactionDescription>;
}
/**
 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
 * @export
 * @interface CreditFreddieMacAssetTransactionsVOA24
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditFreddieMacAssetTransactionsVOA24 {
    [key: string]: object | unknown;

    /**
     * 
     * @type {Array<CreditFreddieMacAssetTransactionVOA24>}
     * @memberof CreditFreddieMacAssetTransactionsVOA24
     */
    ASSET_TRANSACTION: Array<CreditFreddieMacAssetTransactionVOA24>;
}
/**
 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
 * @export
 * @interface CreditFreddieMacAssetTransactionsVOE25
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditFreddieMacAssetTransactionsVOE25 {
    [key: string]: object | unknown;

    /**
     * 
     * @type {Array<CreditFreddieMacAssetTransactionVOE25>}
     * @memberof CreditFreddieMacAssetTransactionsVOE25
     */
    ASSET_TRANSACTION: Array<CreditFreddieMacAssetTransactionVOE25>;
}
/**
 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
 * @export
 * @interface CreditFreddieMacAssetVOA24
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditFreddieMacAssetVOA24 {
    [key: string]: object | unknown;

    /**
     * 
     * @type {AssetDetail}
     * @memberof CreditFreddieMacAssetVOA24
     */
    ASSET_DETAIL: AssetDetail;
    /**
     * 
     * @type {AssetOwners}
     * @memberof CreditFreddieMacAssetVOA24
     */
    ASSET_OWNERS: AssetOwners;
    /**
     * 
     * @type {AssetHolder}
     * @memberof CreditFreddieMacAssetVOA24
     */
    ASSET_HOLDER: AssetHolder;
    /**
     * 
     * @type {CreditFreddieMacAssetTransactionsVOA24}
     * @memberof CreditFreddieMacAssetVOA24
     */
    ASSET_TRANSACTIONS: CreditFreddieMacAssetTransactionsVOA24;
    /**
     * 
     * @type {ValidationSources}
     * @memberof CreditFreddieMacAssetVOA24
     */
    VALIDATION_SOURCES: ValidationSources;
}
/**
 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
 * @export
 * @interface CreditFreddieMacAssetVOE25
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditFreddieMacAssetVOE25 {
    [key: string]: object | unknown;

    /**
     * 
     * @type {CreditFreddieMacAssetDetailVOE25}
     * @memberof CreditFreddieMacAssetVOE25
     */
    ASSET_DETAIL: CreditFreddieMacAssetDetailVOE25;
    /**
     * 
     * @type {AssetOwners}
     * @memberof CreditFreddieMacAssetVOE25
     */
    ASSET_OWNERS: AssetOwners;
    /**
     * 
     * @type {AssetHolder}
     * @memberof CreditFreddieMacAssetVOE25
     */
    ASSET_HOLDER: AssetHolder;
    /**
     * 
     * @type {CreditFreddieMacAssetTransactionsVOE25}
     * @memberof CreditFreddieMacAssetVOE25
     */
    ASSET_TRANSACTIONS: CreditFreddieMacAssetTransactionsVOE25;
}
/**
 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
 * @export
 * @interface CreditFreddieMacAssetsVOA24
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditFreddieMacAssetsVOA24 {
    [key: string]: object | unknown;

    /**
     * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
     * @type {Array<CreditFreddieMacAssetVOA24>}
     * @memberof CreditFreddieMacAssetsVOA24
     */
    ASSET: Array<CreditFreddieMacAssetVOA24>;
}
/**
 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
 * @export
 * @interface CreditFreddieMacAssetsVOE25
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditFreddieMacAssetsVOE25 {
    [key: string]: object | unknown;

    /**
     * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
     * @type {Array<CreditFreddieMacAssetVOE25>}
     * @memberof CreditFreddieMacAssetsVOE25
     */
    ASSET: Array<CreditFreddieMacAssetVOE25>;
}
/**
 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
 * @export
 * @interface CreditFreddieMacIndividualNameVOA24
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditFreddieMacIndividualNameVOA24 {
    [key: string]: object | unknown;

    /**
     * The first name of the individual represented by the parent object.
     * @type {string}
     * @memberof CreditFreddieMacIndividualNameVOA24
     */
    FirstName: string;
    /**
     * The last name of the individual represented by the parent object.
     * @type {string}
     * @memberof CreditFreddieMacIndividualNameVOA24
     */
    LastName: string;
    /**
     * The middle name of the individual represented by the parent object.
     * @type {string}
     * @memberof CreditFreddieMacIndividualNameVOA24
     */
    MiddleName: string;
}
/**
 * Collection of current and previous identifiers for this loan.
 * @export
 * @interface CreditFreddieMacLoanIdentifiersVOA24
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditFreddieMacLoanIdentifiersVOA24 {
    [key: string]: object | unknown;

    /**
     * 
     * @type {Array<LoanIdentifier>}
     * @memberof CreditFreddieMacLoanIdentifiersVOA24
     */
    LOAN_IDENTIFIER: Array<LoanIdentifier>;
}
/**
 * Information specific to a mortgage loan agreement between one or more borrowers and a mortgage lender.
 * @export
 * @interface CreditFreddieMacLoanVOA24
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditFreddieMacLoanVOA24 {
    [key: string]: object | unknown;

    /**
     * 
     * @type {CreditFreddieMacLoanIdentifiersVOA24}
     * @memberof CreditFreddieMacLoanVOA24
     */
    LOAN_IDENTIFIERS: CreditFreddieMacLoanIdentifiersVOA24;
    /**
     * Type of loan. The value can only be \"SubjectLoan\"
     * @type {string}
     * @memberof CreditFreddieMacLoanVOA24
     */
    LoanRoleType: string;
}
/**
 * A collection of loans that are part of a single deal.
 * @export
 * @interface CreditFreddieMacLoansVOA24
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditFreddieMacLoansVOA24 {
    [key: string]: object | unknown;

    /**
     * 
     * @type {CreditFreddieMacLoanVOA24}
     * @memberof CreditFreddieMacLoansVOA24
     */
    LOAN: CreditFreddieMacLoanVOA24;
}
/**
 * A collection of objects that define specific parties to a deal. This includes the direct participating parties, such as borrower and seller and the indirect parties such as the credit report provider.
 * @export
 * @interface CreditFreddieMacPartiesVOA24
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditFreddieMacPartiesVOA24 {
    [key: string]: object | unknown;

    /**
     * 
     * @type {Array<CreditFreddieMacPartyVOA24>}
     * @memberof CreditFreddieMacPartiesVOA24
     */
    PARTY: Array<CreditFreddieMacPartyVOA24>;
}
/**
 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
 * @export
 * @interface CreditFreddieMacPartyIndividualVOA24
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditFreddieMacPartyIndividualVOA24 {
    [key: string]: object | unknown;

    /**
     * 
     * @type {CreditFreddieMacIndividualNameVOA24}
     * @memberof CreditFreddieMacPartyIndividualVOA24
     */
    NAME: CreditFreddieMacIndividualNameVOA24;
}
/**
 * A collection of information about a single party to a transaction. Included direct participants like the borrower and seller as well as indirect participants such as the flood certificate provider.
 * @export
 * @interface CreditFreddieMacPartyVOA24
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditFreddieMacPartyVOA24 {
    [key: string]: object | unknown;

    /**
     * 
     * @type {CreditFreddieMacPartyIndividualVOA24}
     * @memberof CreditFreddieMacPartyVOA24
     */
    INDIVIDUAL: CreditFreddieMacPartyIndividualVOA24;
    /**
     * 
     * @type {Roles}
     * @memberof CreditFreddieMacPartyVOA24
     */
    ROLES: Roles;
    /**
     * 
     * @type {TaxpayerIdentifiers}
     * @memberof CreditFreddieMacPartyVOA24
     */
    TAXPAYER_IDENTIFIERS: TaxpayerIdentifiers;
}
/**
 * Information about an report identifier and a report name.
 * @export
 * @interface CreditFreddieMacReportingInformationVOA24
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditFreddieMacReportingInformationVOA24 {
    [key: string]: object | unknown;

    /**
     * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
     * @type {string}
     * @memberof CreditFreddieMacReportingInformationVOA24
     */
    ReportDateTime?: string;
    /**
     * Documentation not found in the MISMO model viewer and not provided by Freddie Mac. The value can only be \"ReportID\"
     * @type {string}
     * @memberof CreditFreddieMacReportingInformationVOA24
     */
    ReportIdentifierType?: string;
    /**
     * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
     * @type {string}
     * @memberof CreditFreddieMacReportingInformationVOA24
     */
    ReportingInformationIdentifier: string;
}
/**
 * CreditFreddieMacReportsGetRequest defines the request schema for `credit/asset_report/freddie_mac/get`
 * @export
 * @interface CreditFreddieMacReportsGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditFreddieMacReportsGetRequest {
    /**
     * A token that can be shared with a third party auditor to allow them to obtain access to the Asset Report. This token should be stored securely.
     * @type {string}
     * @memberof CreditFreddieMacReportsGetRequest
     */
    audit_copy_token: string;
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof CreditFreddieMacReportsGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof CreditFreddieMacReportsGetRequest
     */
    secret?: string;
}
/**
 * CreditFreddieMacReportsGetResponse defines the response schema for `/credit/freddie_mac/reports/get`
 * @export
 * @interface CreditFreddieMacReportsGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditFreddieMacReportsGetResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {CreditFreddieMacVerificationOfAssetsVOA24}
     * @memberof CreditFreddieMacReportsGetResponse
     */
    VOA?: CreditFreddieMacVerificationOfAssetsVOA24 | null;
    /**
     * 
     * @type {CreditFreddieVerificationOfEmploymentVOE25}
     * @memberof CreditFreddieMacReportsGetResponse
     */
    VOE?: CreditFreddieVerificationOfEmploymentVOE25 | null;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof CreditFreddieMacReportsGetResponse
     */
    request_id: string;
}
/**
 * A collection of details related to a fulfillment service or product in terms of request, process and result.
 * @export
 * @interface CreditFreddieMacServiceVOA24
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditFreddieMacServiceVOA24 {
    [key: string]: object | unknown;

    /**
     * 
     * @type {Array<CreditFreddieMacVerificationOfAssetVOA24>}
     * @memberof CreditFreddieMacServiceVOA24
     */
    VERIFICATION_OF_ASSET: Array<CreditFreddieMacVerificationOfAssetVOA24>;
    /**
     * 
     * @type {Statuses}
     * @memberof CreditFreddieMacServiceVOA24
     */
    STATUSES: Statuses;
}
/**
 * A collection of details related to a fulfillment service or product in terms of request, process and result.
 * @export
 * @interface CreditFreddieMacServiceVOE25
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditFreddieMacServiceVOE25 {
    [key: string]: object | unknown;

    /**
     * 
     * @type {Array<CreditFreddieMacVerificationOfAssetVOE25>}
     * @memberof CreditFreddieMacServiceVOE25
     */
    VERIFICATION_OF_ASSET: Array<CreditFreddieMacVerificationOfAssetVOE25>;
    /**
     * 
     * @type {Statuses}
     * @memberof CreditFreddieMacServiceVOE25
     */
    STATUSES: Statuses;
}
/**
 * A collection of objects that describe requests and responses for services.
 * @export
 * @interface CreditFreddieMacServicesVOA24
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditFreddieMacServicesVOA24 {
    [key: string]: object | unknown;

    /**
     * 
     * @type {CreditFreddieMacServiceVOA24}
     * @memberof CreditFreddieMacServicesVOA24
     */
    SERVICE: CreditFreddieMacServiceVOA24;
}
/**
 * A collection of objects that describe requests and responses for services.
 * @export
 * @interface CreditFreddieMacServicesVOE25
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditFreddieMacServicesVOE25 {
    [key: string]: object | unknown;

    /**
     * 
     * @type {CreditFreddieMacServiceVOE25}
     * @memberof CreditFreddieMacServicesVOE25
     */
    SERVICE: CreditFreddieMacServiceVOE25;
}
/**
 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
 * @export
 * @interface CreditFreddieMacVerificationOfAssetResponseVOA24
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditFreddieMacVerificationOfAssetResponseVOA24 {
    [key: string]: object | unknown;

    /**
     * 
     * @type {CreditFreddieMacAssetsVOA24}
     * @memberof CreditFreddieMacVerificationOfAssetResponseVOA24
     */
    ASSETS: CreditFreddieMacAssetsVOA24;
}
/**
 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
 * @export
 * @interface CreditFreddieMacVerificationOfAssetResponseVOE25
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditFreddieMacVerificationOfAssetResponseVOE25 {
    [key: string]: object | unknown;

    /**
     * 
     * @type {CreditFreddieMacAssetsVOE25}
     * @memberof CreditFreddieMacVerificationOfAssetResponseVOE25
     */
    ASSETS: CreditFreddieMacAssetsVOE25;
}
/**
 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
 * @export
 * @interface CreditFreddieMacVerificationOfAssetVOA24
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditFreddieMacVerificationOfAssetVOA24 {
    [key: string]: object | unknown;

    /**
     * 
     * @type {CreditFreddieMacReportingInformationVOA24}
     * @memberof CreditFreddieMacVerificationOfAssetVOA24
     */
    REPORTING_INFORMATION: CreditFreddieMacReportingInformationVOA24;
    /**
     * 
     * @type {ServiceProductFulfillment}
     * @memberof CreditFreddieMacVerificationOfAssetVOA24
     */
    SERVICE_PRODUCT_FULFILLMENT: ServiceProductFulfillment;
    /**
     * 
     * @type {CreditFreddieMacVerificationOfAssetResponseVOA24}
     * @memberof CreditFreddieMacVerificationOfAssetVOA24
     */
    VERIFICATION_OF_ASSET_RESPONSE: CreditFreddieMacVerificationOfAssetResponseVOA24;
}
/**
 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
 * @export
 * @interface CreditFreddieMacVerificationOfAssetVOE25
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditFreddieMacVerificationOfAssetVOE25 {
    [key: string]: object | unknown;

    /**
     * 
     * @type {CreditFreddieMacReportingInformationVOA24}
     * @memberof CreditFreddieMacVerificationOfAssetVOE25
     */
    REPORTING_INFORMATION: CreditFreddieMacReportingInformationVOA24;
    /**
     * 
     * @type {ServiceProductFulfillment}
     * @memberof CreditFreddieMacVerificationOfAssetVOE25
     */
    SERVICE_PRODUCT_FULFILLMENT: ServiceProductFulfillment;
    /**
     * 
     * @type {CreditFreddieMacVerificationOfAssetResponseVOE25}
     * @memberof CreditFreddieMacVerificationOfAssetVOE25
     */
    VERIFICATION_OF_ASSET_RESPONSE: CreditFreddieMacVerificationOfAssetResponseVOE25;
}
/**
 * An object representing an Asset Report with Freddie Mac schema.
 * @export
 * @interface CreditFreddieMacVerificationOfAssetsDealVOA24
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditFreddieMacVerificationOfAssetsDealVOA24 {
    [key: string]: object | unknown;

    /**
     * 
     * @type {CreditFreddieMacLoansVOA24}
     * @memberof CreditFreddieMacVerificationOfAssetsDealVOA24
     */
    LOANS: CreditFreddieMacLoansVOA24;
    /**
     * 
     * @type {CreditFreddieMacPartiesVOA24}
     * @memberof CreditFreddieMacVerificationOfAssetsDealVOA24
     */
    PARTIES: CreditFreddieMacPartiesVOA24;
    /**
     * 
     * @type {CreditFreddieMacServicesVOA24}
     * @memberof CreditFreddieMacVerificationOfAssetsDealVOA24
     */
    SERVICES: CreditFreddieMacServicesVOA24;
}
/**
 * Verification of Assets Report
 * @export
 * @interface CreditFreddieMacVerificationOfAssetsVOA24
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditFreddieMacVerificationOfAssetsVOA24 {
    [key: string]: object | unknown;

    /**
     * 
     * @type {CreditFreddieMacVerificationOfAssetsDealVOA24}
     * @memberof CreditFreddieMacVerificationOfAssetsVOA24
     */
    DEAL: CreditFreddieMacVerificationOfAssetsDealVOA24;
    /**
     * The Verification Of Assets (VOA) schema version.
     * @type {number}
     * @memberof CreditFreddieMacVerificationOfAssetsVOA24
     */
    SchemaVersion: number;
}
/**
 * An object representing a Verification of Employment report.
 * @export
 * @interface CreditFreddieVerificationOfEmploymentDealVOE25
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditFreddieVerificationOfEmploymentDealVOE25 {
    [key: string]: object | unknown;

    /**
     * 
     * @type {CreditFreddieMacLoansVOA24}
     * @memberof CreditFreddieVerificationOfEmploymentDealVOE25
     */
    LOANS: CreditFreddieMacLoansVOA24;
    /**
     * 
     * @type {CreditFreddieMacPartiesVOA24}
     * @memberof CreditFreddieVerificationOfEmploymentDealVOE25
     */
    PARTIES: CreditFreddieMacPartiesVOA24;
    /**
     * 
     * @type {CreditFreddieMacServicesVOE25}
     * @memberof CreditFreddieVerificationOfEmploymentDealVOE25
     */
    SERVICES: CreditFreddieMacServicesVOE25;
}
/**
 * Verification of Employment Report
 * @export
 * @interface CreditFreddieVerificationOfEmploymentVOE25
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditFreddieVerificationOfEmploymentVOE25 {
    [key: string]: object | unknown;

    /**
     * 
     * @type {CreditFreddieVerificationOfEmploymentDealVOE25}
     * @memberof CreditFreddieVerificationOfEmploymentVOE25
     */
    DEAL: CreditFreddieVerificationOfEmploymentDealVOE25;
    /**
     * The Verification Of Employment (VOE) schema version.
     * @type {number}
     * @memberof CreditFreddieVerificationOfEmploymentVOE25
     */
    SchemaVersion: number;
}
/**
 * An object representing an end user\'s pay stub.
 * @export
 * @interface CreditPayStub
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditPayStub {
    [key: string]: object | unknown;

    /**
     * 
     * @type {CreditPayStubDeductions}
     * @memberof CreditPayStub
     */
    deductions: CreditPayStubDeductions;
    /**
     * An identifier of the document referenced by the document metadata.
     * @type {string}
     * @memberof CreditPayStub
     */
    document_id: string | null;
    /**
     * 
     * @type {CreditDocumentMetadata}
     * @memberof CreditPayStub
     */
    document_metadata: CreditDocumentMetadata;
    /**
     * 
     * @type {CreditPayStubEarnings}
     * @memberof CreditPayStub
     */
    earnings: CreditPayStubEarnings;
    /**
     * 
     * @type {CreditPayStubEmployee}
     * @memberof CreditPayStub
     */
    employee: CreditPayStubEmployee;
    /**
     * 
     * @type {CreditPayStubEmployer}
     * @memberof CreditPayStub
     */
    employer: CreditPayStubEmployer;
    /**
     * 
     * @type {CreditPayStubNetPay}
     * @memberof CreditPayStub
     */
    net_pay: CreditPayStubNetPay;
    /**
     * 
     * @type {PayStubPayPeriodDetails}
     * @memberof CreditPayStub
     */
    pay_period_details: PayStubPayPeriodDetails;
}
/**
 * Address on the pay stub.
 * @export
 * @interface CreditPayStubAddress
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditPayStubAddress {
    [key: string]: object | unknown;

    /**
     * The full city name.
     * @type {string}
     * @memberof CreditPayStubAddress
     */
    city: string | null;
    /**
     * The ISO 3166-1 alpha-2 country code.
     * @type {string}
     * @memberof CreditPayStubAddress
     */
    country: string | null;
    /**
     * The postal code of the address.
     * @type {string}
     * @memberof CreditPayStubAddress
     */
    postal_code: string | null;
    /**
     * The region or state. Example: `\"NC\"`
     * @type {string}
     * @memberof CreditPayStubAddress
     */
    region: string | null;
    /**
     * The full street address.
     * @type {string}
     * @memberof CreditPayStubAddress
     */
    street: string | null;
}
/**
 * An object with the deduction information found on a pay stub.
 * @export
 * @interface CreditPayStubDeductions
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditPayStubDeductions {
    [key: string]: object | unknown;

    /**
     * 
     * @type {Array<PayStubDeductionsBreakdown>}
     * @memberof CreditPayStubDeductions
     */
    breakdown: Array<PayStubDeductionsBreakdown>;
    /**
     * 
     * @type {PayStubDeductionsTotal}
     * @memberof CreditPayStubDeductions
     */
    total: PayStubDeductionsTotal;
}
/**
 * An object representing both a breakdown of earnings on a pay stub and the total earnings.
 * @export
 * @interface CreditPayStubEarnings
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditPayStubEarnings {
    [key: string]: object | unknown;

    /**
     * 
     * @type {Array<PayStubEarningsBreakdown>}
     * @memberof CreditPayStubEarnings
     */
    breakdown: Array<PayStubEarningsBreakdown>;
    /**
     * 
     * @type {PayStubEarningsTotal}
     * @memberof CreditPayStubEarnings
     */
    total: PayStubEarningsTotal;
}
/**
 * Data about the employee.
 * @export
 * @interface CreditPayStubEmployee
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditPayStubEmployee {
    [key: string]: object | unknown;

    /**
     * 
     * @type {CreditPayStubAddress}
     * @memberof CreditPayStubEmployee
     */
    address: CreditPayStubAddress;
    /**
     * The name of the employee.
     * @type {string}
     * @memberof CreditPayStubEmployee
     */
    name: string | null;
    /**
     * Marital status of the employee - either `SINGLE` or `MARRIED`.
     * @type {string}
     * @memberof CreditPayStubEmployee
     */
    marital_status: string | null;
    /**
     * 
     * @type {PayStubTaxpayerID}
     * @memberof CreditPayStubEmployee
     */
    taxpayer_id: PayStubTaxpayerID;
}
/**
 * Information about the employer on the pay stub.
 * @export
 * @interface CreditPayStubEmployer
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditPayStubEmployer {
    [key: string]: object | unknown;

    /**
     * 
     * @type {CreditPayStubAddress}
     * @memberof CreditPayStubEmployer
     */
    address: CreditPayStubAddress;
    /**
     * The name of the employer on the pay stub.
     * @type {string}
     * @memberof CreditPayStubEmployer
     */
    name: string | null;
}
/**
 * An object representing information about the net pay amount on the pay stub.
 * @export
 * @interface CreditPayStubNetPay
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditPayStubNetPay {
    [key: string]: object | unknown;

    /**
     * Raw amount of the net pay for the pay period.
     * @type {number}
     * @memberof CreditPayStubNetPay
     */
    current_amount: number | null;
    /**
     * Description of the net pay.
     * @type {string}
     * @memberof CreditPayStubNetPay
     */
    description: string | null;
    /**
     * The ISO-4217 currency code of the net pay. Always `null` if `unofficial_currency_code` is non-null.
     * @type {string}
     * @memberof CreditPayStubNetPay
     */
    iso_currency_code: string | null;
    /**
     * The unofficial currency code associated with the net pay. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
     * @type {string}
     * @memberof CreditPayStubNetPay
     */
    unofficial_currency_code: string | null;
    /**
     * The year-to-date amount of the net pay.
     * @type {number}
     * @memberof CreditPayStubNetPay
     */
    ytd_amount: number | null;
}
/**
 * The explicit pay basis on the paystub (if present).
 * @export
 * @enum {string}
 */
export enum CreditPayStubPayBasisType {
    Salary = 'SALARY',
    Hourly = 'HOURLY',
    Commission = 'COMMISSION'
}

/**
 * CreditPayrollIncomeGetRequest defines the request schema for `/credit/payroll_income/get`.
 * @export
 * @interface CreditPayrollIncomeGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditPayrollIncomeGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof CreditPayrollIncomeGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof CreditPayrollIncomeGetRequest
     */
    secret?: string;
    /**
     * The user token associated with the User data is being requested for.
     * @type {string}
     * @memberof CreditPayrollIncomeGetRequest
     */
    user_token?: string;
}
/**
 * Defines the response body for `/credit/payroll_income/get`.
 * @export
 * @interface CreditPayrollIncomeGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditPayrollIncomeGetResponse {
    [key: string]: object | unknown;

    /**
     * Array of payroll items.
     * @type {Array<PayrollItem>}
     * @memberof CreditPayrollIncomeGetResponse
     */
    items: Array<PayrollItem>;
    /**
     * 
     * @type {PlaidError}
     * @memberof CreditPayrollIncomeGetResponse
     */
    error?: PlaidError | null;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof CreditPayrollIncomeGetResponse
     */
    request_id: string;
}
/**
 * Defines the request schema for `/credit/payroll_income/precheck`.
 * @export
 * @interface CreditPayrollIncomePrecheckRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditPayrollIncomePrecheckRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof CreditPayrollIncomePrecheckRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof CreditPayrollIncomePrecheckRequest
     */
    secret?: string;
    /**
     * The user token associated with the User data is being requested for.
     * @type {string}
     * @memberof CreditPayrollIncomePrecheckRequest
     */
    user_token?: string;
    /**
     * An array of access tokens corresponding to Items belonging to the user whose eligibility is being checked. Note that if the Items specified here are not already initialized with `transactions`, providing them in this field will cause these Items to be initialized with (and billed for) the Transactions product.
     * @type {Array<string>}
     * @memberof CreditPayrollIncomePrecheckRequest
     */
    access_tokens?: Array<string>;
    /**
     * 
     * @type {IncomeVerificationPrecheckEmployer}
     * @memberof CreditPayrollIncomePrecheckRequest
     */
    employer?: IncomeVerificationPrecheckEmployer | null;
    /**
     * 
     * @type {IncomeVerificationPrecheckMilitaryInfo}
     * @memberof CreditPayrollIncomePrecheckRequest
     */
    us_military_info?: IncomeVerificationPrecheckMilitaryInfo | null;
    /**
     * 
     * @type {IncomeVerificationPrecheckPayrollInstitution}
     * @memberof CreditPayrollIncomePrecheckRequest
     */
    payroll_institution?: IncomeVerificationPrecheckPayrollInstitution | null;
}
/**
 * Defines the response schema for `/credit/payroll_income/precheck`.
 * @export
 * @interface CreditPayrollIncomePrecheckResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditPayrollIncomePrecheckResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof CreditPayrollIncomePrecheckResponse
     */
    request_id: string;
    /**
     * 
     * @type {IncomeVerificationPrecheckConfidence}
     * @memberof CreditPayrollIncomePrecheckResponse
     */
    confidence: IncomeVerificationPrecheckConfidence;
}
/**
 * CreditPayrollIncomeRefreshRequest defines the request schema for `/credit/payroll_income/refresh`
 * @export
 * @interface CreditPayrollIncomeRefreshRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditPayrollIncomeRefreshRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof CreditPayrollIncomeRefreshRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof CreditPayrollIncomeRefreshRequest
     */
    secret?: string;
    /**
     * The user token associated with the User data is being requested for.
     * @type {string}
     * @memberof CreditPayrollIncomeRefreshRequest
     */
    user_token: string;
    /**
     * 
     * @type {CreditPayrollIncomeRefreshRequestOptions}
     * @memberof CreditPayrollIncomeRefreshRequest
     */
    options?: CreditPayrollIncomeRefreshRequestOptions;
}
/**
 * An optional object for `/credit/payroll_income/refresh` request options.
 * @export
 * @interface CreditPayrollIncomeRefreshRequestOptions
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditPayrollIncomeRefreshRequestOptions {
    /**
     * An array of `item_id`s to be refreshed. Each `item_id` should uniquely identify a payroll income item.
     * @type {Array<string>}
     * @memberof CreditPayrollIncomeRefreshRequestOptions
     */
    item_ids?: Array<string>;
    /**
     * The URL where Plaid will send the payroll income refresh webhook.
     * @type {string}
     * @memberof CreditPayrollIncomeRefreshRequestOptions
     */
    webhook?: string;
}
/**
 * CreditPayrollIncomeRefreshResponse defines the response schema for `/credit/payroll_income/refresh`
 * @export
 * @interface CreditPayrollIncomeRefreshResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditPayrollIncomeRefreshResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof CreditPayrollIncomeRefreshResponse
     */
    request_id: string;
    /**
     * The verification refresh status. One of the following:  `\"USER_PRESENCE_REQUIRED\"` User presence is required to refresh an income verification. `\"SUCCESSFUL\"` The income verification refresh was successful. `\"NOT_FOUND\"` No new data was found after the income verification refresh.
     * @type {string}
     * @memberof CreditPayrollIncomeRefreshResponse
     */
    verification_refresh_status: string;
}
/**
 * CreditPayrollIncomeRiskSignalsGetRequest defines the request schema for `/credit/payroll_income/risk_signals/get`
 * @export
 * @interface CreditPayrollIncomeRiskSignalsGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditPayrollIncomeRiskSignalsGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof CreditPayrollIncomeRiskSignalsGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof CreditPayrollIncomeRiskSignalsGetRequest
     */
    secret?: string;
    /**
     * The user token associated with the User data is being requested for.
     * @type {string}
     * @memberof CreditPayrollIncomeRiskSignalsGetRequest
     */
    user_token?: string;
}
/**
 * CreditPayrollIncomeRiskSignalsGetRequest defines the response schema for `/credit/payroll_income/risk_signals/get`
 * @export
 * @interface CreditPayrollIncomeRiskSignalsGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditPayrollIncomeRiskSignalsGetResponse {
    [key: string]: object | unknown;

    /**
     * Array of payroll items.
     * @type {Array<PayrollRiskSignalsItem>}
     * @memberof CreditPayrollIncomeRiskSignalsGetResponse
     */
    items: Array<PayrollRiskSignalsItem>;
    /**
     * 
     * @type {PlaidError}
     * @memberof CreditPayrollIncomeRiskSignalsGetResponse
     */
    error?: PlaidError | null;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof CreditPayrollIncomeRiskSignalsGetResponse
     */
    request_id: string;
}
/**
 * The object containing a set of ids related to an employee.
 * @export
 * @interface CreditPlatformIds
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditPlatformIds {
    [key: string]: object | unknown;

    /**
     * The ID of an employee as given by their employer.
     * @type {string}
     * @memberof CreditPlatformIds
     */
    employee_id: string | null;
    /**
     * The ID of an employee as given by their payroll.
     * @type {string}
     * @memberof CreditPlatformIds
     */
    payroll_id: string | null;
    /**
     * The ID of the position of the employee.
     * @type {string}
     * @memberof CreditPlatformIds
     */
    position_id: string | null;
}
/**
 * CreditRelayCreateRequest defines the request schema for `/credit/relay/create`
 * @export
 * @interface CreditRelayCreateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditRelayCreateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof CreditRelayCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof CreditRelayCreateRequest
     */
    secret?: string;
    /**
     * List of report token strings, with at most one token of each report type. Currently only Asset Report token is supported.
     * @type {Array<string>}
     * @memberof CreditRelayCreateRequest
     */
    report_tokens: Array<string>;
    /**
     * The `secondary_client_id` is the client id of the third party with whom you would like to share the relay token.
     * @type {string}
     * @memberof CreditRelayCreateRequest
     */
    secondary_client_id: string;
    /**
     * URL to which Plaid will send webhooks when the Secondary Client successfully retrieves an Asset Report by calling `/credit/relay/get`.
     * @type {string}
     * @memberof CreditRelayCreateRequest
     */
    webhook?: string | null;
}
/**
 * CreditRelayCreateResponse defines the response schema for `/credit/relay/create`
 * @export
 * @interface CreditRelayCreateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditRelayCreateResponse {
    [key: string]: object | unknown;

    /**
     * A token that can be shared with a third party to allow them to access the Asset Report. This token should be stored securely.
     * @type {string}
     * @memberof CreditRelayCreateResponse
     */
    relay_token: string;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof CreditRelayCreateResponse
     */
    request_id: string;
}
/**
 * CreditRelayGetRequest defines the request schema for `/credit/relay/get`
 * @export
 * @interface CreditRelayGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditRelayGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof CreditRelayGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof CreditRelayGetRequest
     */
    secret?: string;
    /**
     * The `relay_token` granting access to the report you would like to get.
     * @type {string}
     * @memberof CreditRelayGetRequest
     */
    relay_token: string;
    /**
     * 
     * @type {ReportType}
     * @memberof CreditRelayGetRequest
     */
    report_type: ReportType;
}
/**
 * CreditRelayRefreshRequest defines the request schema for `/credit/relay/refresh`
 * @export
 * @interface CreditRelayRefreshRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditRelayRefreshRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof CreditRelayRefreshRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof CreditRelayRefreshRequest
     */
    secret?: string;
    /**
     * The `relay_token` granting access to the report you would like to refresh.
     * @type {string}
     * @memberof CreditRelayRefreshRequest
     */
    relay_token: string;
    /**
     * 
     * @type {ReportType}
     * @memberof CreditRelayRefreshRequest
     */
    report_type: ReportType;
    /**
     * The URL registered to receive webhooks when the report of a relay token has been refreshed.
     * @type {string}
     * @memberof CreditRelayRefreshRequest
     */
    webhook?: string | null;
}
/**
 * CreditRelayRefreshResponse defines the response schema for `/credit/relay/refresh`
 * @export
 * @interface CreditRelayRefreshResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditRelayRefreshResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {string}
     * @memberof CreditRelayRefreshResponse
     */
    relay_token: string;
    /**
     * A unique ID identifying an Asset Report. Like all Plaid identifiers, this ID is case sensitive.
     * @type {string}
     * @memberof CreditRelayRefreshResponse
     */
    asset_report_id?: string;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof CreditRelayRefreshResponse
     */
    request_id: string;
}
/**
 * CreditRelayRemoveRequest defines the request schema for `/credit/relay/remove`
 * @export
 * @interface CreditRelayRemoveRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditRelayRemoveRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof CreditRelayRemoveRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof CreditRelayRemoveRequest
     */
    secret?: string;
    /**
     * The `relay_token` you would like to revoke.
     * @type {string}
     * @memberof CreditRelayRemoveRequest
     */
    relay_token: string;
}
/**
 * CreditRelayRemoveResponse defines the response schema for `/credit/relay/remove`
 * @export
 * @interface CreditRelayRemoveResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditRelayRemoveResponse {
    [key: string]: object | unknown;

    /**
     * `true` if the relay token was successfully removed.
     * @type {boolean}
     * @memberof CreditRelayRemoveResponse
     */
    removed: boolean;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof CreditRelayRemoveResponse
     */
    request_id: string;
}
/**
 * Metadata and results for a Link session
 * @export
 * @interface CreditSession
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditSession {
    /**
     * The unique identifier associated with the Link session. This identifier matches the `link_session_id` returned in the onSuccess/onExit callbacks.
     * @type {string}
     * @memberof CreditSession
     */
    link_session_id?: string;
    /**
     * The time when the Link session started
     * @type {string}
     * @memberof CreditSession
     */
    session_start_time?: string;
    /**
     * 
     * @type {CreditSessionResults}
     * @memberof CreditSession
     */
    results?: CreditSessionResults;
    /**
     * The set of errors that occurred during the Link session.
     * @type {Array<CreditSessionError>}
     * @memberof CreditSession
     */
    errors?: Array<CreditSessionError>;
}
/**
 * The details of a bank employment verification in Link.
 * @export
 * @interface CreditSessionBankEmploymentResult
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditSessionBankEmploymentResult {
    /**
     * 
     * @type {CreditSessionBankEmploymentStatus}
     * @memberof CreditSessionBankEmploymentResult
     */
    status?: CreditSessionBankEmploymentStatus;
    /**
     * The Plaid Item ID. The `item_id` is always unique; linking the same account at the same institution twice will result in two Items with different `item_id` values. Like all Plaid identifiers, the `item_id` is case-sensitive.
     * @type {string}
     * @memberof CreditSessionBankEmploymentResult
     */
    item_id?: string;
    /**
     * The Plaid Institution ID associated with the Item.
     * @type {string}
     * @memberof CreditSessionBankEmploymentResult
     */
    institution_id?: string;
}
/**
 * Status of the Bank Employment Link session.  `APPROVED`: User has approved and verified their employment.  `NO_EMPLOYMENTS_FOUND`: We attempted, but were unable to find any employment in the connected account.  `EMPLOYER_NOT_LISTED`: The user explicitly indicated that they did not see their current or previous employer in the list of employer names found.  `STARTED`: The user began the bank income portion of the link flow.  `INTERNAL_ERROR`: The user encountered an internal error.
 * @export
 * @enum {string}
 */
export enum CreditSessionBankEmploymentStatus {
    Approved = 'APPROVED',
    NoEmployersFound = 'NO_EMPLOYERS_FOUND',
    EmployerNotListed = 'EMPLOYER_NOT_LISTED'
}

/**
 * The details of a bank income verification in Link
 * @export
 * @interface CreditSessionBankIncomeResult
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditSessionBankIncomeResult {
    /**
     * 
     * @type {CreditSessionBankIncomeStatus}
     * @memberof CreditSessionBankIncomeResult
     */
    status?: CreditSessionBankIncomeStatus;
    /**
     * The Plaid Item ID. The `item_id` is always unique; linking the same account at the same institution twice will result in two Items with different `item_id` values. Like all Plaid identifiers, the `item_id` is case-sensitive.
     * @type {string}
     * @memberof CreditSessionBankIncomeResult
     */
    item_id?: string;
    /**
     * The Plaid Institution ID associated with the Item.
     * @type {string}
     * @memberof CreditSessionBankIncomeResult
     */
    institution_id?: string;
}
/**
 * Status of the Bank Income Link session.  `APPROVED`: User has approved and verified their income  `NO_DEPOSITS_FOUND`: We attempted, but were unable to find any income in the connected account.  `USER_REPORTED_NO_INCOME`: The user explicitly indicated that they don\'t receive income in the connected account.  `STARTED`: The user began the bank income portion of the link flow.  `INTERNAL_ERROR`: The user encountered an internal error.
 * @export
 * @enum {string}
 */
export enum CreditSessionBankIncomeStatus {
    Approved = 'APPROVED',
    NoDepositsFound = 'NO_DEPOSITS_FOUND',
    UserReportedNoIncome = 'USER_REPORTED_NO_INCOME'
}

/**
 * The details of a document income verification in Link
 * @export
 * @interface CreditSessionDocumentIncomeResult
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditSessionDocumentIncomeResult {
    /**
     * The number of paystubs uploaded by the user.
     * @type {number}
     * @memberof CreditSessionDocumentIncomeResult
     */
    num_paystubs_uploaded: number;
    /**
     * The number of w2s uploaded by the user.
     * @type {number}
     * @memberof CreditSessionDocumentIncomeResult
     */
    num_w2s_uploaded: number;
    /**
     * The number of bank statements uploaded by the user.
     * @type {number}
     * @memberof CreditSessionDocumentIncomeResult
     */
    num_bank_statements_uploaded: number;
}
/**
 * The details of a Link error.
 * @export
 * @interface CreditSessionError
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditSessionError {
    /**
     * A broad categorization of the error.
     * @type {string}
     * @memberof CreditSessionError
     */
    error_type?: string;
    /**
     * The particular error code.
     * @type {string}
     * @memberof CreditSessionError
     */
    error_code?: string;
    /**
     * A developer-friendly representation of the error code.
     * @type {string}
     * @memberof CreditSessionError
     */
    error_message?: string;
    /**
     * A user-friendly representation of the error code. `null` if the error is not related to user action.
     * @type {string}
     * @memberof CreditSessionError
     */
    display_message?: string | null;
}
/**
 * The details of an Item add in Link.
 * @export
 * @interface CreditSessionItemAddResult
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditSessionItemAddResult {
    /**
     * Returned once a user has successfully linked their Item.
     * @type {string}
     * @memberof CreditSessionItemAddResult
     */
    public_token?: string;
    /**
     * The Plaid Item ID. The `item_id` is always unique; linking the same account at the same institution twice will result in two Items with different `item_id` values. Like all Plaid identifiers, the `item_id` is case-sensitive.
     * @type {string}
     * @memberof CreditSessionItemAddResult
     */
    item_id?: string;
    /**
     * The Plaid Institution ID associated with the Item.
     * @type {string}
     * @memberof CreditSessionItemAddResult
     */
    institution_id?: string;
}
/**
 * The details of a digital payroll income verification in Link
 * @export
 * @interface CreditSessionPayrollIncomeResult
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditSessionPayrollIncomeResult {
    /**
     * The number of paystubs retrieved from a payroll provider.
     * @type {number}
     * @memberof CreditSessionPayrollIncomeResult
     */
    num_paystubs_retrieved?: number;
    /**
     * The number of w2s retrieved from a payroll provider.
     * @type {number}
     * @memberof CreditSessionPayrollIncomeResult
     */
    num_w2s_retrieved?: number;
    /**
     * The Plaid Institution ID associated with the Item.
     * @type {string}
     * @memberof CreditSessionPayrollIncomeResult
     */
    institution_id?: string;
    /**
     * The Institution Name associated with the Item.
     * @type {string}
     * @memberof CreditSessionPayrollIncomeResult
     */
    institution_name?: string;
}
/**
 * The set of results for a Link session.
 * @export
 * @interface CreditSessionResults
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditSessionResults {
    /**
     * The set of Item adds for the Link session.
     * @type {Array<CreditSessionItemAddResult>}
     * @memberof CreditSessionResults
     */
    item_add_results?: Array<CreditSessionItemAddResult>;
    /**
     * The set of bank income verifications for the Link session.
     * @type {Array<CreditSessionBankIncomeResult>}
     * @memberof CreditSessionResults
     */
    bank_income_results?: Array<CreditSessionBankIncomeResult>;
    /**
     * The set of bank employment verifications for the Link session.
     * @type {Array<CreditSessionBankEmploymentResult>}
     * @memberof CreditSessionResults
     */
    bank_employment_results?: Array<CreditSessionBankEmploymentResult>;
    /**
     * The set of payroll income verifications for the Link session.
     * @type {Array<CreditSessionPayrollIncomeResult>}
     * @memberof CreditSessionResults
     */
    payroll_income_results?: Array<CreditSessionPayrollIncomeResult>;
    /**
     * 
     * @type {CreditSessionDocumentIncomeResult}
     * @memberof CreditSessionResults
     */
    document_income_results?: CreditSessionDocumentIncomeResult | null;
}
/**
 * CreditSessionsGetRequest defines the request schema for `/credit/sessions/get`
 * @export
 * @interface CreditSessionsGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditSessionsGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof CreditSessionsGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof CreditSessionsGetRequest
     */
    secret?: string;
    /**
     * The user token associated with the User data is being requested for.
     * @type {string}
     * @memberof CreditSessionsGetRequest
     */
    user_token: string;
}
/**
 * CreditSessionsGetResponse defines the response schema for `/credit/sessions/get`
 * @export
 * @interface CreditSessionsGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditSessionsGetResponse {
    [key: string]: object | unknown;

    /**
     * A list of Link sessions for the user. Sessions will be sorted in reverse chronological order.
     * @type {Array<CreditSession>}
     * @memberof CreditSessionsGetResponse
     */
    sessions?: Array<CreditSession>;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof CreditSessionsGetResponse
     */
    request_id: string;
}
/**
 * W2 is an object that represents income data taken from a W2 tax document.
 * @export
 * @interface CreditW2
 */
// Edited by Plaid, line 9. any to unknown
export interface CreditW2 {
    [key: string]: object | unknown;

    /**
     * 
     * @type {CreditDocumentMetadata}
     * @memberof CreditW2
     */
    document_metadata: CreditDocumentMetadata;
    /**
     * An identifier of the document referenced by the document metadata.
     * @type {string}
     * @memberof CreditW2
     */
    document_id: string;
    /**
     * 
     * @type {CreditPayStubEmployer}
     * @memberof CreditW2
     */
    employer: CreditPayStubEmployer;
    /**
     * 
     * @type {CreditPayStubEmployee}
     * @memberof CreditW2
     */
    employee: CreditPayStubEmployee;
    /**
     * The tax year of the W2 document.
     * @type {string}
     * @memberof CreditW2
     */
    tax_year: string | null;
    /**
     * An employee identification number or EIN.
     * @type {string}
     * @memberof CreditW2
     */
    employer_id_number: string | null;
    /**
     * Wages from tips and other compensation.
     * @type {string}
     * @memberof CreditW2
     */
    wages_tips_other_comp: string | null;
    /**
     * Federal income tax withheld for the tax year.
     * @type {string}
     * @memberof CreditW2
     */
    federal_income_tax_withheld: string | null;
    /**
     * Wages from social security.
     * @type {string}
     * @memberof CreditW2
     */
    social_security_wages: string | null;
    /**
     * Social security tax withheld for the tax year.
     * @type {string}
     * @memberof CreditW2
     */
    social_security_tax_withheld: string | null;
    /**
     * Wages and tips from medicare.
     * @type {string}
     * @memberof CreditW2
     */
    medicare_wages_and_tips: string | null;
    /**
     * Medicare tax withheld for the tax year.
     * @type {string}
     * @memberof CreditW2
     */
    medicare_tax_withheld: string | null;
    /**
     * Tips from social security.
     * @type {string}
     * @memberof CreditW2
     */
    social_security_tips: string | null;
    /**
     * Allocated tips.
     * @type {string}
     * @memberof CreditW2
     */
    allocated_tips: string | null;
    /**
     * Contents from box 9 on the W2.
     * @type {string}
     * @memberof CreditW2
     */
    box_9: string | null;
    /**
     * Dependent care benefits.
     * @type {string}
     * @memberof CreditW2
     */
    dependent_care_benefits: string | null;
    /**
     * Nonqualified plans.
     * @type {string}
     * @memberof CreditW2
     */
    nonqualified_plans: string | null;
    /**
     * 
     * @type {Array<W2Box12>}
     * @memberof CreditW2
     */
    box_12: Array<W2Box12>;
    /**
     * Statutory employee.
     * @type {string}
     * @memberof CreditW2
     */
    statutory_employee: string | null;
    /**
     * Retirement plan.
     * @type {string}
     * @memberof CreditW2
     */
    retirement_plan: string | null;
    /**
     * Third party sick pay.
     * @type {string}
     * @memberof CreditW2
     */
    third_party_sick_pay: string | null;
    /**
     * Other.
     * @type {string}
     * @memberof CreditW2
     */
    other: string | null;
    /**
     * 
     * @type {Array<W2StateAndLocalWages>}
     * @memberof CreditW2
     */
    state_and_local_wages: Array<W2StateAndLocalWages>;
}
/**
 * The object contains a risk score and a risk tier that evaluate the transaction return risk of an unauthorized debit. Common return codes in this category include: \"R05\", \"R07\", \"R10\", \"R11\", \"R29\". These returns typically have a return time frame of up to 60 calendar days. During this period, the customer of financial institutions can dispute a transaction as unauthorized.
 * @export
 * @interface CustomerInitiatedReturnRisk
 */
// Edited by Plaid, line 9. any to unknown
export interface CustomerInitiatedReturnRisk {
    /**
     * A score from 1-99 that indicates the transaction return risk: a higher risk score suggests a higher return likelihood.
     * @type {number}
     * @memberof CustomerInitiatedReturnRisk
     */
    score: number;
    /**
     * A tier corresponding to the projected likelihood that the transaction, if initiated, will be subject to a return.  In the `customer_initiated_return_risk` object, there are five risk tiers corresponding to the scores:   1: Predicted customer-initiated return incidence rate between 0.00% - 0.02%   2: Predicted customer-initiated return incidence rate between 0.02% - 0.05%   3: Predicted customer-initiated return incidence rate between 0.05% - 0.1%   4: Predicted customer-initiated return incidence rate between 0.1% - 0.5%   5: Predicted customer-initiated return incidence rate greater than 0.5% 
     * @type {number}
     * @memberof CustomerInitiatedReturnRisk
     */
    risk_tier: number;
}
/**
 * Account information associated with a team member with access to the Plaid dashboard.
 * @export
 * @interface DashboardUser
 */
// Edited by Plaid, line 9. any to unknown
export interface DashboardUser {
    [key: string]: object | unknown;

    /**
     * ID of the associated user.
     * @type {string}
     * @memberof DashboardUser
     */
    id: string;
    /**
     * An ISO8601 formatted timestamp.
     * @type {string}
     * @memberof DashboardUser
     */
    created_at: string;
    /**
     * A valid email address.
     * @type {string}
     * @memberof DashboardUser
     */
    email_address: string;
    /**
     * 
     * @type {DashboardUserStatus}
     * @memberof DashboardUser
     */
    status: DashboardUserStatus;
}
/**
 * Request input for fetching a dashboard user
 * @export
 * @interface DashboardUserGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface DashboardUserGetRequest {
    /**
     * ID of the associated user.
     * @type {string}
     * @memberof DashboardUserGetRequest
     */
    dashboard_user_id: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof DashboardUserGetRequest
     */
    secret?: string;
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof DashboardUserGetRequest
     */
    client_id?: string;
}
/**
 * Account information associated with a team member with access to the Plaid dashboard.
 * @export
 * @interface DashboardUserGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface DashboardUserGetResponse {
    [key: string]: object | unknown;

    /**
     * ID of the associated user.
     * @type {string}
     * @memberof DashboardUserGetResponse
     */
    id: string;
    /**
     * An ISO8601 formatted timestamp.
     * @type {string}
     * @memberof DashboardUserGetResponse
     */
    created_at: string;
    /**
     * A valid email address.
     * @type {string}
     * @memberof DashboardUserGetResponse
     */
    email_address: string;
    /**
     * 
     * @type {DashboardUserStatus}
     * @memberof DashboardUserGetResponse
     */
    status: DashboardUserStatus;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof DashboardUserGetResponse
     */
    request_id: string;
}
/**
 * Request input for listing dashboard users
 * @export
 * @interface DashboardUserListRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface DashboardUserListRequest {
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof DashboardUserListRequest
     */
    secret?: string;
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof DashboardUserListRequest
     */
    client_id?: string;
    /**
     * An identifier that determines which page of results you receive.
     * @type {string}
     * @memberof DashboardUserListRequest
     */
    cursor?: string | null;
}
/**
 * Paginated list of dashboard users
 * @export
 * @interface DashboardUserListResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface DashboardUserListResponse {
    [key: string]: object | unknown;

    /**
     * List of dashboard users
     * @type {Array<DashboardUser>}
     * @memberof DashboardUserListResponse
     */
    dashboard_users: Array<DashboardUser>;
    /**
     * An identifier that determines which page of results you receive.
     * @type {string}
     * @memberof DashboardUserListResponse
     */
    next_cursor: string | null;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof DashboardUserListResponse
     */
    request_id: string;
}
/**
 * The current status of the user.
 * @export
 * @enum {string}
 */
export enum DashboardUserStatus {
    Invited = 'invited',
    Active = 'active',
    Deactivated = 'deactivated'
}

/**
 * A date range with a start and end date
 * @export
 * @interface DateRange
 */
// Edited by Plaid, line 9. any to unknown
export interface DateRange {
    [key: string]: object | unknown;

    /**
     * A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
     * @type {string}
     * @memberof DateRange
     */
    beginning: string;
    /**
     * A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
     * @type {string}
     * @memberof DateRange
     */
    ending: string;
}
/**
 * An object with the deduction information found on a paystub.
 * @export
 * @interface Deductions
 */
// Edited by Plaid, line 9. any to unknown
export interface Deductions {
    [key: string]: object | unknown;

    /**
     * 
     * @type {Array<Total>}
     * @memberof Deductions
     * @deprecated
     */
    subtotals?: Array<Total>;
    /**
     * 
     * @type {Array<DeductionsBreakdown>}
     * @memberof Deductions
     */
    breakdown: Array<DeductionsBreakdown>;
    /**
     * 
     * @type {Array<Total>}
     * @memberof Deductions
     * @deprecated
     */
    totals?: Array<Total>;
    /**
     * 
     * @type {DeductionsTotal}
     * @memberof Deductions
     */
    total: DeductionsTotal;
}
/**
 * An object representing the deduction line items for the pay period
 * @export
 * @interface DeductionsBreakdown
 */
// Edited by Plaid, line 9. any to unknown
export interface DeductionsBreakdown {
    [key: string]: object | unknown;

    /**
     * Raw amount of the deduction
     * @type {number}
     * @memberof DeductionsBreakdown
     */
    current_amount?: number | null;
    /**
     * Description of the deduction line item
     * @type {string}
     * @memberof DeductionsBreakdown
     */
    description?: string | null;
    /**
     * The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null.
     * @type {string}
     * @memberof DeductionsBreakdown
     */
    iso_currency_code?: string | null;
    /**
     * The unofficial currency code associated with the line item. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
     * @type {string}
     * @memberof DeductionsBreakdown
     */
    unofficial_currency_code?: string | null;
    /**
     * The year-to-date amount of the deduction
     * @type {number}
     * @memberof DeductionsBreakdown
     */
    ytd_amount?: number | null;
}
/**
 * An object representing the total deductions for the pay period
 * @export
 * @interface DeductionsTotal
 */
// Edited by Plaid, line 9. any to unknown
export interface DeductionsTotal {
    [key: string]: object | unknown;

    /**
     * Raw amount of the deduction
     * @type {number}
     * @memberof DeductionsTotal
     */
    current_amount?: number | null;
    /**
     * The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null.
     * @type {string}
     * @memberof DeductionsTotal
     */
    iso_currency_code?: string | null;
    /**
     * The unofficial currency code associated with the line item. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
     * @type {string}
     * @memberof DeductionsTotal
     */
    unofficial_currency_code?: string | null;
    /**
     * The year-to-date total amount of the deductions
     * @type {number}
     * @memberof DeductionsTotal
     */
    ytd_amount?: number | null;
}
/**
 * Fired when new transaction data is available for an Item. Plaid will typically check for new transaction data several times a day.  This webhook is intended for use with `/transactions/get`; if you are using the newer `/transactions/sync` endpoint, this webhook will still be fired to maintain backwards compatibility, but it is recommended to listen for and respond to the `SYNC_UPDATES_AVAILABLE` webhook instead. 
 * @export
 * @interface DefaultUpdateWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface DefaultUpdateWebhook {
    [key: string]: object | unknown;

    /**
     * `TRANSACTIONS`
     * @type {string}
     * @memberof DefaultUpdateWebhook
     */
    webhook_type: string;
    /**
     * `DEFAULT_UPDATE`
     * @type {string}
     * @memberof DefaultUpdateWebhook
     */
    webhook_code: string;
    /**
     * 
     * @type {PlaidError}
     * @memberof DefaultUpdateWebhook
     */
    error?: PlaidError | null;
    /**
     * The number of new transactions detected since the last time this webhook was fired.
     * @type {number}
     * @memberof DefaultUpdateWebhook
     */
    new_transactions: number;
    /**
     * The `item_id` of the Item the webhook relates to.
     * @type {string}
     * @memberof DefaultUpdateWebhook
     */
    item_id: string;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof DefaultUpdateWebhook
     */
    environment: WebhookEnvironmentValues;
}
/**
 * The user\'s address.
 * @export
 * @interface DepositSwitchAddressData
 */
// Edited by Plaid, line 9. any to unknown
export interface DepositSwitchAddressData {
    [key: string]: object | unknown;

    /**
     * The full city name
     * @type {string}
     * @memberof DepositSwitchAddressData
     */
    city: string;
    /**
     * The region or state Example: `\"NC\"`
     * @type {string}
     * @memberof DepositSwitchAddressData
     */
    region: string;
    /**
     * The full street address Example: `\"564 Main Street, APT 15\"`
     * @type {string}
     * @memberof DepositSwitchAddressData
     */
    street: string;
    /**
     * The postal code
     * @type {string}
     * @memberof DepositSwitchAddressData
     */
    postal_code: string;
    /**
     * The ISO 3166-1 alpha-2 country code
     * @type {string}
     * @memberof DepositSwitchAddressData
     */
    country: string;
}
/**
 * DepositSwitchAltCreateRequest defines the request schema for `/deposit_switch/alt/create`
 * @export
 * @interface DepositSwitchAltCreateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface DepositSwitchAltCreateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof DepositSwitchAltCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof DepositSwitchAltCreateRequest
     */
    secret?: string;
    /**
     * 
     * @type {DepositSwitchTargetAccount}
     * @memberof DepositSwitchAltCreateRequest
     */
    target_account: DepositSwitchTargetAccount;
    /**
     * 
     * @type {DepositSwitchTargetUser}
     * @memberof DepositSwitchAltCreateRequest
     */
    target_user: DepositSwitchTargetUser;
    /**
     * 
     * @type {DepositSwitchCreateRequestOptions}
     * @memberof DepositSwitchAltCreateRequest
     */
    options?: DepositSwitchCreateRequestOptions;
    /**
     * ISO-3166-1 alpha-2 country code standard.
     * @type {string}
     * @memberof DepositSwitchAltCreateRequest
     */
    country_code?: DepositSwitchAltCreateRequestCountryCodeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum DepositSwitchAltCreateRequestCountryCodeEnum {
    Us = 'US',
    Ca = 'CA'
}

/**
 * DepositSwitchAltCreateResponse defines the response schema for `/deposit_switch/alt/create`
 * @export
 * @interface DepositSwitchAltCreateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface DepositSwitchAltCreateResponse {
    [key: string]: object | unknown;

    /**
     * ID of the deposit switch. This ID is persisted throughout the lifetime of the deposit switch.
     * @type {string}
     * @memberof DepositSwitchAltCreateResponse
     */
    deposit_switch_id: string;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof DepositSwitchAltCreateResponse
     */
    request_id: string;
}
/**
 * DepositSwitchCreateRequest defines the request schema for `/deposit_switch/create`
 * @export
 * @interface DepositSwitchCreateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface DepositSwitchCreateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof DepositSwitchCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof DepositSwitchCreateRequest
     */
    secret?: string;
    /**
     * Access token for the target Item, typically provided in the Import Item response. 
     * @type {string}
     * @memberof DepositSwitchCreateRequest
     */
    target_access_token: string;
    /**
     * Plaid Account ID that specifies the target bank account. This account will become the recipient for a user\'s direct deposit.
     * @type {string}
     * @memberof DepositSwitchCreateRequest
     */
    target_account_id: string;
    /**
     * ISO-3166-1 alpha-2 country code standard.
     * @type {string}
     * @memberof DepositSwitchCreateRequest
     */
    country_code?: DepositSwitchCreateRequestCountryCodeEnum;
    /**
     * 
     * @type {DepositSwitchCreateRequestOptions}
     * @memberof DepositSwitchCreateRequest
     */
    options?: DepositSwitchCreateRequestOptions;
}

/**
    * @export
    * @enum {string}
    */
export enum DepositSwitchCreateRequestCountryCodeEnum {
    Us = 'US',
    Ca = 'CA'
}

/**
 * Options to configure the `/deposit_switch/create` request. If provided, cannot be `null`.
 * @export
 * @interface DepositSwitchCreateRequestOptions
 */
// Edited by Plaid, line 9. any to unknown
export interface DepositSwitchCreateRequestOptions {
    /**
     * The URL registered to receive webhooks when the status of a deposit switch request has changed. 
     * @type {string}
     * @memberof DepositSwitchCreateRequestOptions
     */
    webhook?: string | null;
    /**
     * An array of access tokens corresponding to transaction items to use when attempting to match the user to their Payroll Provider. These tokens must be created by the same client id as the one creating the switch, and have access to the transactions product.
     * @type {Array<string>}
     * @memberof DepositSwitchCreateRequestOptions
     */
    transaction_item_access_tokens?: Array<string>;
}
/**
 * DepositSwitchCreateResponse defines the response schema for `/deposit_switch/create`
 * @export
 * @interface DepositSwitchCreateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface DepositSwitchCreateResponse {
    [key: string]: object | unknown;

    /**
     * ID of the deposit switch. This ID is persisted throughout the lifetime of the deposit switch.
     * @type {string}
     * @memberof DepositSwitchCreateResponse
     */
    deposit_switch_id: string;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof DepositSwitchCreateResponse
     */
    request_id: string;
}
/**
 * DepositSwitchGetRequest defines the request schema for `/deposit_switch/get`
 * @export
 * @interface DepositSwitchGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface DepositSwitchGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof DepositSwitchGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof DepositSwitchGetRequest
     */
    secret?: string;
    /**
     * The ID of the deposit switch
     * @type {string}
     * @memberof DepositSwitchGetRequest
     */
    deposit_switch_id: string;
}
/**
 * DepositSwitchGetResponse defines the response schema for `/deposit_switch/get`
 * @export
 * @interface DepositSwitchGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface DepositSwitchGetResponse {
    [key: string]: object | unknown;

    /**
     * The ID of the deposit switch.
     * @type {string}
     * @memberof DepositSwitchGetResponse
     */
    deposit_switch_id: string;
    /**
     * The ID of the bank account the direct deposit was switched to.
     * @type {string}
     * @memberof DepositSwitchGetResponse
     */
    target_account_id: string | null;
    /**
     * The ID of the Item the direct deposit was switched to.
     * @type {string}
     * @memberof DepositSwitchGetResponse
     */
    target_item_id: string | null;
    /**
     *  The state, or status, of the deposit switch.  - `initialized` – The deposit switch has been initialized with the user entering the information required to submit the deposit switch request.  - `processing` – The deposit switch request has been submitted and is being processed.  - `completed` – The user\'s employer has fulfilled the deposit switch request.  - `error` – There was an error processing the deposit switch request.
     * @type {string}
     * @memberof DepositSwitchGetResponse
     */
    state: DepositSwitchGetResponseStateEnum;
    /**
     * The method used to make the deposit switch.  - `instant` – User instantly switched their direct deposit to a new or existing bank account by connecting their payroll or employer account.  - `mail` – User requested that Plaid contact their employer by mail to make the direct deposit switch.  - `pdf` – User generated a PDF or email to be sent to their employer with the information necessary to make the deposit switch.\'
     * @type {string}
     * @memberof DepositSwitchGetResponse
     */
    switch_method?: DepositSwitchGetResponseSwitchMethodEnum;
    /**
     * When `true`, user’s direct deposit goes to multiple banks. When false, user’s direct deposit only goes to the target account. Always `null` if the deposit switch has not been completed.
     * @type {boolean}
     * @memberof DepositSwitchGetResponse
     */
    account_has_multiple_allocations: boolean | null;
    /**
     * When `true`, the target account is allocated the remainder of direct deposit after all other allocations have been deducted. When `false`, user’s direct deposit is allocated as a percent or amount. Always `null` if the deposit switch has not been completed.
     * @type {boolean}
     * @memberof DepositSwitchGetResponse
     */
    is_allocated_remainder: boolean | null;
    /**
     * The percentage of direct deposit allocated to the target account. Always `null` if the target account is not allocated a percentage or if the deposit switch has not been completed or if `is_allocated_remainder` is true.
     * @type {number}
     * @memberof DepositSwitchGetResponse
     */
    percent_allocated: number | null;
    /**
     * The dollar amount of direct deposit allocated to the target account. Always `null` if the target account is not allocated an amount or if the deposit switch has not been completed.
     * @type {number}
     * @memberof DepositSwitchGetResponse
     */
    amount_allocated: number | null;
    /**
     * The name of the employer selected by the user. If the user did not select an employer, the value returned is `null`.
     * @type {string}
     * @memberof DepositSwitchGetResponse
     */
    employer_name?: string | null;
    /**
     * The ID of the employer selected by the user. If the user did not select an employer, the value returned is `null`.
     * @type {string}
     * @memberof DepositSwitchGetResponse
     */
    employer_id?: string | null;
    /**
     * The name of the institution selected by the user. If the user did not select an institution, the value returned is `null`.
     * @type {string}
     * @memberof DepositSwitchGetResponse
     */
    institution_name?: string | null;
    /**
     * The ID of the institution selected by the user. If the user did not select an institution, the value returned is `null`.
     * @type {string}
     * @memberof DepositSwitchGetResponse
     */
    institution_id?: string | null;
    /**
     * [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date the deposit switch was created. 
     * @type {string}
     * @memberof DepositSwitchGetResponse
     */
    date_created: string;
    /**
     * [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date the deposit switch was completed. Always `null` if the deposit switch has not been completed. 
     * @type {string}
     * @memberof DepositSwitchGetResponse
     */
    date_completed: string | null;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof DepositSwitchGetResponse
     */
    request_id: string;
}

/**
    * @export
    * @enum {string}
    */
export enum DepositSwitchGetResponseStateEnum {
    Initialized = 'initialized',
    Processing = 'processing',
    Completed = 'completed',
    Error = 'error'
}
/**
    * @export
    * @enum {string}
    */
export enum DepositSwitchGetResponseSwitchMethodEnum {
    Instant = 'instant',
    Mail = 'mail',
    Pdf = 'pdf',
    Null = 'null'
}

/**
 * Fired when the status of a deposit switch request has changed.
 * @export
 * @interface DepositSwitchStateUpdateWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface DepositSwitchStateUpdateWebhook {
    /**
     * `\"DEPOSIT_SWITCH\"`
     * @type {string}
     * @memberof DepositSwitchStateUpdateWebhook
     */
    webhook_type?: string;
    /**
     * `\"SWITCH_STATE_UPDATE\"`
     * @type {string}
     * @memberof DepositSwitchStateUpdateWebhook
     */
    webhook_code?: string;
    /**
     *  The state, or status, of the deposit switch.  `initialized`: The deposit switch has been initialized with the user entering the information required to submit the deposit switch request.  `processing`: The deposit switch request has been submitted and is being processed.  `completed`: The user\'s employer has fulfilled and completed the deposit switch request.  `error`: There was an error processing the deposit switch request.  For more information, see the [Deposit Switch API reference](/docs/deposit-switch/reference#deposit_switchget).
     * @type {string}
     * @memberof DepositSwitchStateUpdateWebhook
     */
    state?: string;
    /**
     * The ID of the deposit switch.
     * @type {string}
     * @memberof DepositSwitchStateUpdateWebhook
     */
    deposit_switch_id?: string;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof DepositSwitchStateUpdateWebhook
     */
    environment?: WebhookEnvironmentValues;
}
/**
 * The deposit switch destination account
 * @export
 * @interface DepositSwitchTargetAccount
 */
// Edited by Plaid, line 9. any to unknown
export interface DepositSwitchTargetAccount {
    [key: string]: object | unknown;

    /**
     * Account number for deposit switch destination
     * @type {string}
     * @memberof DepositSwitchTargetAccount
     */
    account_number: string;
    /**
     * Routing number for deposit switch destination
     * @type {string}
     * @memberof DepositSwitchTargetAccount
     */
    routing_number: string;
    /**
     * The name of the deposit switch destination account, as it will be displayed to the end user in the Deposit Switch interface. It is not required to match the name used in online banking.
     * @type {string}
     * @memberof DepositSwitchTargetAccount
     */
    account_name: string;
    /**
     * The account subtype of the account, either `checking` or `savings`.
     * @type {string}
     * @memberof DepositSwitchTargetAccount
     */
    account_subtype: DepositSwitchTargetAccountAccountSubtypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum DepositSwitchTargetAccountAccountSubtypeEnum {
    Checking = 'checking',
    Savings = 'savings'
}

/**
 * The deposit switch target user
 * @export
 * @interface DepositSwitchTargetUser
 */
// Edited by Plaid, line 9. any to unknown
export interface DepositSwitchTargetUser {
    [key: string]: object | unknown;

    /**
     * The given name (first name) of the user.
     * @type {string}
     * @memberof DepositSwitchTargetUser
     */
    given_name: string;
    /**
     * The family name (last name) of the user.
     * @type {string}
     * @memberof DepositSwitchTargetUser
     */
    family_name: string;
    /**
     * The phone number of the user. The endpoint can accept a variety of phone number formats, including E.164.
     * @type {string}
     * @memberof DepositSwitchTargetUser
     */
    phone: string;
    /**
     * The email address of the user.
     * @type {string}
     * @memberof DepositSwitchTargetUser
     */
    email: string;
    /**
     * 
     * @type {DepositSwitchAddressData}
     * @memberof DepositSwitchTargetUser
     */
    address?: DepositSwitchAddressData;
    /**
     * The taxpayer ID of the user, generally their SSN, EIN, or TIN.
     * @type {string}
     * @memberof DepositSwitchTargetUser
     */
    tax_payer_id?: string;
}
/**
 * DepositSwitchTokenCreateRequest defines the request schema for `/deposit_switch/token/create`
 * @export
 * @interface DepositSwitchTokenCreateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface DepositSwitchTokenCreateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof DepositSwitchTokenCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof DepositSwitchTokenCreateRequest
     */
    secret?: string;
    /**
     * The ID of the deposit switch
     * @type {string}
     * @memberof DepositSwitchTokenCreateRequest
     */
    deposit_switch_id: string;
}
/**
 * DepositSwitchTokenCreateResponse defines the response schema for `/deposit_switch/token/create`
 * @export
 * @interface DepositSwitchTokenCreateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface DepositSwitchTokenCreateResponse {
    [key: string]: object | unknown;

    /**
     * Deposit switch token, used to initialize Link for the Deposit Switch product
     * @type {string}
     * @memberof DepositSwitchTokenCreateResponse
     */
    deposit_switch_token: string;
    /**
     * Expiration time of the token, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format
     * @type {string}
     * @memberof DepositSwitchTokenCreateResponse
     */
    deposit_switch_token_expiration_time: string;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof DepositSwitchTokenCreateResponse
     */
    request_id: string;
}
/**
 * Valid account subtypes for depository accounts. For a list containing descriptions of each subtype, see [Account schemas](https://plaid.com/docs/api/accounts/#StandaloneAccountType-depository).
 * @export
 * @enum {string}
 */
export enum DepositoryAccountSubtype {
    Checking = 'checking',
    Savings = 'savings',
    Hsa = 'hsa',
    Cd = 'cd',
    MoneyMarket = 'money market',
    Paypal = 'paypal',
    Prepaid = 'prepaid',
    CashManagement = 'cash management',
    Ebt = 'ebt',
    All = 'all'
}

/**
 * A filter to apply to `depository`-type accounts
 * @export
 * @interface DepositoryFilter
 */
// Edited by Plaid, line 9. any to unknown
export interface DepositoryFilter {
    [key: string]: object | unknown;

    /**
     * An array of account subtypes to display in Link. If not specified, all account subtypes will be shown. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema). 
     * @type {Array<DepositoryAccountSubtype>}
     * @memberof DepositoryFilter
     */
    account_subtypes: Array<DepositoryAccountSubtype>;
}
/**
 * Originator and their status.
 * @export
 * @interface DetailedOriginator
 */
// Edited by Plaid, line 9. any to unknown
export interface DetailedOriginator {
    [key: string]: object | unknown;

    /**
     * Originator’s client ID.
     * @type {string}
     * @memberof DetailedOriginator
     */
    client_id: string;
    /**
     * 
     * @type {TransferDiligenceStatus}
     * @memberof DetailedOriginator
     */
    transfer_diligence_status: TransferDiligenceStatus;
    /**
     * 
     * @type {string}
     * @memberof DetailedOriginator
     */
    company_name: string;
}
/**
 * Information about the accounts that the payment was distributed to.
 * @export
 * @interface DistributionBreakdown
 */
// Edited by Plaid, line 9. any to unknown
export interface DistributionBreakdown {
    [key: string]: object | unknown;

    /**
     * Name of the account for the given distribution.
     * @type {string}
     * @memberof DistributionBreakdown
     */
    account_name?: string | null;
    /**
     * The name of the bank that the payment is being deposited to.
     * @type {string}
     * @memberof DistributionBreakdown
     */
    bank_name?: string | null;
    /**
     * The amount distributed to this account.
     * @type {number}
     * @memberof DistributionBreakdown
     */
    current_amount?: number | null;
    /**
     * The ISO-4217 currency code of the net pay. Always `null` if `unofficial_currency_code` is non-null.
     * @type {string}
     * @memberof DistributionBreakdown
     */
    iso_currency_code?: string | null;
    /**
     * The last 2-4 alphanumeric characters of an account\'s official account number.
     * @type {string}
     * @memberof DistributionBreakdown
     */
    mask?: string | null;
    /**
     * Type of the account that the paystub was sent to (e.g. \'checking\').
     * @type {string}
     * @memberof DistributionBreakdown
     */
    type?: string | null;
    /**
     * The unofficial currency code associated with the net pay. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
     * @type {string}
     * @memberof DistributionBreakdown
     */
    unofficial_currency_code?: string | null;
    /**
     * 
     * @type {Pay}
     * @memberof DistributionBreakdown
     * @deprecated
     */
    current_pay?: Pay;
}
/**
 * The type of document.  `DOCUMENT_TYPE_PAYSTUB`: A paystub.  `DOCUMENT_TYPE_BANK_STATEMENT`: A bank statement.  `DOCUMENT_TYPE_US_TAX_W2`: A W-2 wage and tax statement provided by a US employer reflecting wages earned by the employee.  `DOCUMENT_TYPE_US_MILITARY_ERAS`: An electronic Retirement Account Statement (eRAS) issued by the US military.  `DOCUMENT_TYPE_US_MILITARY_LES`: A Leave and Earnings Statement (LES) issued by the US military.  `DOCUMENT_TYPE_US_MILITARY_CLES`: A Civilian Leave and Earnings Statement (CLES) issued by the US military.  `DOCUMENT_TYPE_GIG`: Used to indicate that the income is related to gig work. Does not necessarily correspond to a specific document type.  `DOCUMENT_TYPE_NONE`: Used to indicate that there is no underlying document for the data.  `DOCUMENT_TYPE_PLAID_GENERATED_PAYSTUB_PDF`: Used to indicate that the PDF for the paystub was generated by Plaid.  `UNKNOWN`: Document type could not be determined.
 * @export
 * @enum {string}
 */
export enum DocType {
    Unknown = 'UNKNOWN',
    DocumentTypePaystub = 'DOCUMENT_TYPE_PAYSTUB',
    DocumentTypeBankStatement = 'DOCUMENT_TYPE_BANK_STATEMENT',
    DocumentTypeUsTaxW2 = 'DOCUMENT_TYPE_US_TAX_W2',
    DocumentTypeUsMilitaryEras = 'DOCUMENT_TYPE_US_MILITARY_ERAS',
    DocumentTypeUsMilitaryLes = 'DOCUMENT_TYPE_US_MILITARY_LES',
    DocumentTypeUsMilitaryCles = 'DOCUMENT_TYPE_US_MILITARY_CLES',
    DocumentTypeGig = 'DOCUMENT_TYPE_GIG',
    DocumentTypeNone = 'DOCUMENT_TYPE_NONE',
    DocumentTypeUsTax1099Misc = 'DOCUMENT_TYPE_US_TAX_1099_MISC',
    DocumentTypeUsTax1099K = 'DOCUMENT_TYPE_US_TAX_1099_K',
    DocumentTypePlaidGeneratedPaystubPdf = 'DOCUMENT_TYPE_PLAID_GENERATED_PAYSTUB_PDF'
}

/**
 * High level descriptions of how the associated document was processed. If a document fails verification, the details in the `analysis` object should help clarify why the document was rejected.
 * @export
 * @interface DocumentAnalysis
 */
// Edited by Plaid, line 9. any to unknown
export interface DocumentAnalysis {
    [key: string]: object | unknown;

    /**
     * 
     * @type {DocumentAuthenticityMatchCode}
     * @memberof DocumentAnalysis
     */
    authenticity: DocumentAuthenticityMatchCode;
    /**
     * 
     * @type {ImageQuality}
     * @memberof DocumentAnalysis
     */
    image_quality: ImageQuality;
    /**
     * 
     * @type {PhysicalDocumentExtractedDataAnalysis}
     * @memberof DocumentAnalysis
     */
    extracted_data: PhysicalDocumentExtractedDataAnalysis | null;
}
/**
 * High level summary of whether the document in the provided image matches the formatting rules and security checks for the associated jurisdiction.  For example, most identity documents have formatting rules like the following:   The image of the person\'s face must have a certain contrast in order to highlight skin tone   The subject in the document\'s image must remove eye glasses and pose in a certain way   The informational fields (name, date of birth, ID number, etc.) must be colored and aligned according to specific rules   Security features like watermarks and background patterns must be present  So a `match` status for this field indicates that the document in the provided image seems to conform to the various formatting and security rules associated with the detected document.
 * @export
 * @enum {string}
 */
export enum DocumentAuthenticityMatchCode {
    Match = 'match',
    PartialMatch = 'partial_match',
    NoMatch = 'no_match',
    NoData = 'no_data'
}

/**
 * A match summary describing the cross comparison between the subject\'s date of birth, extracted from the document image, and the date of birth they separately provided to the identity verification attempt.
 * @export
 * @enum {string}
 */
export enum DocumentDateOfBirthMatchCode {
    Match = 'match',
    PartialMatch = 'partial_match',
    NoMatch = 'no_match'
}

/**
 * An object representing metadata from the end user\'s uploaded document.
 * @export
 * @interface DocumentMetadata
 */
// Edited by Plaid, line 9. any to unknown
export interface DocumentMetadata {
    [key: string]: object | unknown;

    /**
     * The name of the document.
     * @type {string}
     * @memberof DocumentMetadata
     */
    name?: string;
    /**
     * The processing status of the document.  `PROCESSING_COMPLETE`: The document was successfully processed.  `DOCUMENT_ERROR`: The document could not be processed. Possible causes include: The document was an unacceptable document type such as an offer letter or bank statement, the document image was cropped or blurry, or the document was corrupted.  `UNKNOWN` or `null`: An internal error occurred. If this happens repeatedly, contact support or your Plaid account manager.
     * @type {string}
     * @memberof DocumentMetadata
     */
    status?: string | null;
    /**
     * An identifier of the document that is also present in the paystub response.
     * @type {string}
     * @memberof DocumentMetadata
     */
    doc_id?: string;
    /**
     * 
     * @type {DocType}
     * @memberof DocumentMetadata
     */
    doc_type?: DocType;
}
/**
 * A match summary describing the cross comparison between the subject\'s name, extracted from the document image, and the name they separately provided to identity verification attempt.
 * @export
 * @enum {string}
 */
export enum DocumentNameMatchCode {
    Match = 'match',
    PartialMatch = 'partial_match',
    NoMatch = 'no_match'
}

/**
 * Details about a certain reason as to why a document could potentially be fraudulent.
 * @export
 * @interface DocumentRiskSignal
 */
// Edited by Plaid, line 9. any to unknown
export interface DocumentRiskSignal {
    [key: string]: object | unknown;

    /**
     * The result from the risk signal check.
     * @type {string}
     * @memberof DocumentRiskSignal
     */
    type: string | null;
    /**
     * The field which the risk signal was computed for
     * @type {string}
     * @memberof DocumentRiskSignal
     */
    field: string | null;
    /**
     * A flag used to quickly identify if the signal indicates that this field is authentic or fraudulent
     * @type {boolean}
     * @memberof DocumentRiskSignal
     */
    has_fraud_risk: boolean | null;
    /**
     * 
     * @type {DocumentRiskSignalInstitutionMetadata}
     * @memberof DocumentRiskSignal
     */
    institution_metadata: DocumentRiskSignalInstitutionMetadata | null;
    /**
     * The expected value of the field, as seen on the document
     * @type {string}
     * @memberof DocumentRiskSignal
     */
    expected_value: string | null;
    /**
     * The derived value obtained in the risk signal calculation process for this field
     * @type {string}
     * @memberof DocumentRiskSignal
     */
    actual_value: string | null;
    /**
     * A human-readable explanation providing more detail into the particular risk signal
     * @type {string}
     * @memberof DocumentRiskSignal
     */
    signal_description: string | null;
    /**
     * The relevant page associated with the risk signal
     * @type {number}
     * @memberof DocumentRiskSignal
     */
    page_number: number | null;
}
/**
 * An object which contains additional metadata about the institution used to compute the verification attribute
 * @export
 * @interface DocumentRiskSignalInstitutionMetadata
 */
// Edited by Plaid, line 9. any to unknown
export interface DocumentRiskSignalInstitutionMetadata {
    [key: string]: object | unknown;

    /**
     * The `item_id` of the Item associated with this webhook, warning, or error
     * @type {string}
     * @memberof DocumentRiskSignalInstitutionMetadata
     */
    item_id: string;
}
/**
 * Object containing fraud risk data for a set of income documents.
 * @export
 * @interface DocumentRiskSignalsObject
 */
// Edited by Plaid, line 9. any to unknown
export interface DocumentRiskSignalsObject {
    [key: string]: object | unknown;

    /**
     * ID of the payroll provider account.
     * @type {string}
     * @memberof DocumentRiskSignalsObject
     */
    account_id: string | null;
    /**
     * Array of document metadata and associated risk signals per document
     * @type {Array<SingleDocumentRiskSignal>}
     * @memberof DocumentRiskSignalsObject
     */
    single_document_risk_signals: Array<SingleDocumentRiskSignal>;
    /**
     * Array of risk signals computed from a set of uploaded documents and the associated documents\' metadata
     * @type {Array<MultiDocumentRiskSignal>}
     * @memberof DocumentRiskSignalsObject
     */
    multi_document_risk_signals: Array<MultiDocumentRiskSignal>;
}
/**
 * A summary across all risk signals associated with a document
 * @export
 * @interface DocumentRiskSummary
 */
// Edited by Plaid, line 9. any to unknown
export interface DocumentRiskSummary {
    [key: string]: object | unknown;

    /**
     * A number between 0 and 100, inclusive, where a score closer to 0 indicates a document is likely to be trustworthy and a score closer to 100 indicates a document is likely to be fraudulent
     * @type {number}
     * @memberof DocumentRiskSummary
     */
    risk_score: number | null;
}
/**
 * An outcome status for this specific document submission. Distinct from the overall `documentary_verification.status` that summarizes the verification outcome from one or more documents.
 * @export
 * @enum {string}
 */
export enum DocumentStatus {
    Success = 'success',
    Failed = 'failed',
    ManuallyApproved = 'manually_approved'
}

/**
 * Data, images, analysis, and results from the `documentary_verification` step. This field will be `null` unless `steps.documentary_verification` has reached a terminal state of either `success` or `failed`.
 * @export
 * @interface DocumentaryVerification
 */
// Edited by Plaid, line 9. any to unknown
export interface DocumentaryVerification {
    [key: string]: object | unknown;

    /**
     * The outcome status for the associated Identity Verification attempt\'s `documentary_verification` step. This field will always have the same value as `steps.documentary_verification`.
     * @type {string}
     * @memberof DocumentaryVerification
     */
    status: string;
    /**
     * An array of documents submitted to the `documentary_verification` step. Each entry represents one user submission, where each submission will contain both a front and back image, or just a front image, depending on the document type.  Note: Plaid will automatically let a user submit a new set of document images up to three times if we detect that a previous attempt might have failed due to user error. For example, if the first set of document images are blurry or obscured by glare, the user will be asked to capture their documents again, resulting in at least two separate entries within `documents`. If the overall `documentary_verification` is `failed`, the user has exhausted their retry attempts.
     * @type {Array<DocumentaryVerificationDocument>}
     * @memberof DocumentaryVerification
     */
    documents: Array<DocumentaryVerificationDocument>;
}
/**
 * Images, extracted data, and analysis from a user\'s identity document
 * @export
 * @interface DocumentaryVerificationDocument
 */
// Edited by Plaid, line 9. any to unknown
export interface DocumentaryVerificationDocument {
    [key: string]: object | unknown;

    /**
     * 
     * @type {DocumentStatus}
     * @memberof DocumentaryVerificationDocument
     */
    status: DocumentStatus;
    /**
     * The `attempt` field begins with 1 and increments with each subsequent document upload.
     * @type {number}
     * @memberof DocumentaryVerificationDocument
     */
    attempt: number;
    /**
     * 
     * @type {PhysicalDocumentImages}
     * @memberof DocumentaryVerificationDocument
     */
    images: PhysicalDocumentImages;
    /**
     * 
     * @type {PhysicalDocumentExtractedData}
     * @memberof DocumentaryVerificationDocument
     */
    extracted_data: PhysicalDocumentExtractedData | null;
    /**
     * 
     * @type {DocumentAnalysis}
     * @memberof DocumentaryVerificationDocument
     */
    analysis: DocumentAnalysis;
    /**
     * An ISO8601 formatted timestamp.
     * @type {string}
     * @memberof DocumentaryVerificationDocument
     */
    redacted_at: string | null;
}
/**
 * An object representing both a breakdown of earnings on a paystub and the total earnings.
 * @export
 * @interface Earnings
 */
// Edited by Plaid, line 9. any to unknown
export interface Earnings {
    [key: string]: object | unknown;

    /**
     * 
     * @type {Array<EarningsTotal>}
     * @memberof Earnings
     * @deprecated
     */
    subtotals?: Array<EarningsTotal>;
    /**
     * 
     * @type {Array<EarningsTotal>}
     * @memberof Earnings
     * @deprecated
     */
    totals?: Array<EarningsTotal>;
    /**
     * 
     * @type {Array<EarningsBreakdown>}
     * @memberof Earnings
     */
    breakdown?: Array<EarningsBreakdown>;
    /**
     * 
     * @type {EarningsTotal}
     * @memberof Earnings
     */
    total?: EarningsTotal;
}
/**
 * An object representing the earnings line items for the pay period.
 * @export
 * @interface EarningsBreakdown
 */
// Edited by Plaid, line 9. any to unknown
export interface EarningsBreakdown {
    [key: string]: object | unknown;

    /**
     * 
     * @type {EarningsBreakdownCanonicalDescription}
     * @memberof EarningsBreakdown
     */
    canonical_description?: EarningsBreakdownCanonicalDescription | null;
    /**
     * Raw amount of the earning line item.
     * @type {number}
     * @memberof EarningsBreakdown
     */
    current_amount?: number | null;
    /**
     * Description of the earning line item.
     * @type {string}
     * @memberof EarningsBreakdown
     */
    description?: string | null;
    /**
     * Number of hours applicable for this earning.
     * @type {number}
     * @memberof EarningsBreakdown
     */
    hours?: number | null;
    /**
     * The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null.
     * @type {string}
     * @memberof EarningsBreakdown
     */
    iso_currency_code?: string | null;
    /**
     * Hourly rate applicable for this earning.
     * @type {number}
     * @memberof EarningsBreakdown
     */
    rate?: number | null;
    /**
     * The unofficial currency code associated with the line item. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
     * @type {string}
     * @memberof EarningsBreakdown
     */
    unofficial_currency_code?: string | null;
    /**
     * The year-to-date amount of the deduction.
     * @type {number}
     * @memberof EarningsBreakdown
     */
    ytd_amount?: number | null;
}
/**
 * Commonly used term to describe the earning line item.
 * @export
 * @enum {string}
 */
export enum EarningsBreakdownCanonicalDescription {
    Bonus = 'BONUS',
    Commission = 'COMMISSION',
    Overtime = 'OVERTIME',
    PaidTimeOff = 'PAID TIME OFF',
    RegularPay = 'REGULAR PAY',
    Vacation = 'VACATION',
    BasicAllowanceHousing = 'BASIC ALLOWANCE HOUSING',
    BasicAllowanceSubsistence = 'BASIC ALLOWANCE SUBSISTENCE',
    Other = 'OTHER',
    Null = 'null'
}

/**
 * An object representing both the current pay period and year to date amount for an earning category.
 * @export
 * @interface EarningsTotal
 */
// Edited by Plaid, line 9. any to unknown
export interface EarningsTotal {
    [key: string]: object | unknown;

    /**
     * Total amount of the earnings for this pay period
     * @type {number}
     * @memberof EarningsTotal
     */
    current_amount?: number | null;
    /**
     * 
     * @type {Pay}
     * @memberof EarningsTotal
     * @deprecated
     */
    current_pay?: Pay;
    /**
     * 
     * @type {Pay}
     * @memberof EarningsTotal
     * @deprecated
     */
    ytd_pay?: Pay;
    /**
     * Total number of hours worked for this pay period
     * @type {number}
     * @memberof EarningsTotal
     */
    hours?: number | null;
    /**
     * The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null.
     * @type {string}
     * @memberof EarningsTotal
     */
    iso_currency_code?: string | null;
    /**
     * The unofficial currency code associated with the security. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
     * @type {string}
     * @memberof EarningsTotal
     */
    unofficial_currency_code?: string | null;
    /**
     * The total year-to-date amount of the earnings
     * @type {number}
     * @memberof EarningsTotal
     */
    ytd_amount?: number | null;
}
/**
 * An object representing an email address
 * @export
 * @interface Email
 */
// Edited by Plaid, line 9. any to unknown
export interface Email {
    [key: string]: object | unknown;

    /**
     * The email address.
     * @type {string}
     * @memberof Email
     */
    data: string;
    /**
     * When `true`, identifies the email address as the primary email on an account.
     * @type {boolean}
     * @memberof Email
     */
    primary: boolean;
    /**
     * The type of email account as described by the financial institution.
     * @type {string}
     * @memberof Email
     */
    type: EmailTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum EmailTypeEnum {
    Primary = 'primary',
    Secondary = 'secondary',
    Other = 'other'
}

/**
 * Score found by matching email provided by the API with the email on the account at the financial institution. 100 is a perfect match and 0 is a no match. If the account contains multiple owners, the maximum match score is filled.
 * @export
 * @interface EmailAddressMatchScore
 */
// Edited by Plaid, line 9. any to unknown
export interface EmailAddressMatchScore {
    [key: string]: object | unknown;

    /**
     * Match score for normalized email. 100 is a perfect match and 0 is a no match. If the email is missing from either the API or financial institution, this is null.
     * @type {number}
     * @memberof EmailAddressMatchScore
     */
    score?: number | null;
}
/**
 * Data about the employee.
 * @export
 * @interface Employee
 */
// Edited by Plaid, line 9. any to unknown
export interface Employee {
    [key: string]: object | unknown;

    /**
     * 
     * @type {PaystubAddress}
     * @memberof Employee
     */
    address: PaystubAddress;
    /**
     * The name of the employee.
     * @type {string}
     * @memberof Employee
     */
    name: string | null;
    /**
     * Marital status of the employee - either `single` or `married`.
     * @type {string}
     * @memberof Employee
     */
    marital_status?: string | null;
    /**
     * 
     * @type {TaxpayerID}
     * @memberof Employee
     */
    taxpayer_id?: TaxpayerID;
}
/**
 * The name of the employee, as reported on the paystub.
 * @export
 * @interface EmployeeIncomeSummaryFieldString
 */
// Edited by Plaid, line 9. any to unknown
export interface EmployeeIncomeSummaryFieldString {
    /**
     * The value of the field.
     * @type {string}
     * @memberof EmployeeIncomeSummaryFieldString
     */
    value: string;
    /**
     * 
     * @type {VerificationStatus}
     * @memberof EmployeeIncomeSummaryFieldString
     */
    verification_status: VerificationStatus;
}
/**
 * Data about the employer.
 * @export
 * @interface Employer
 */
// Edited by Plaid, line 9. any to unknown
export interface Employer {
    [key: string]: object | unknown;

    /**
     * Plaid\'s unique identifier for the employer.
     * @type {string}
     * @memberof Employer
     */
    employer_id: string;
    /**
     * The name of the employer
     * @type {string}
     * @memberof Employer
     */
    name: string;
    /**
     * 
     * @type {AddressDataNullable}
     * @memberof Employer
     */
    address: AddressDataNullable | null;
    /**
     * A number from 0 to 1 indicating Plaid\'s level of confidence in the pairing between the employer and the institution (not yet implemented).
     * @type {number}
     * @memberof Employer
     */
    confidence_score: number;
}
/**
 * The name of the employer, as reported on the paystub.
 * @export
 * @interface EmployerIncomeSummaryFieldString
 */
// Edited by Plaid, line 9. any to unknown
export interface EmployerIncomeSummaryFieldString {
    /**
     * The value of the field.
     * @type {string}
     * @memberof EmployerIncomeSummaryFieldString
     */
    value: string;
    /**
     * 
     * @type {VerificationStatus}
     * @memberof EmployerIncomeSummaryFieldString
     */
    verification_status: VerificationStatus;
}
/**
 * An object containing employer data.
 * @export
 * @interface EmployerVerification
 */
// Edited by Plaid, line 9. any to unknown
export interface EmployerVerification {
    [key: string]: object | unknown;

    /**
     * Name of employer.
     * @type {string}
     * @memberof EmployerVerification
     */
    name?: string | null;
}
/**
 * EmployersSearchRequest defines the request schema for `/employers/search`.
 * @export
 * @interface EmployersSearchRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface EmployersSearchRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof EmployersSearchRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof EmployersSearchRequest
     */
    secret?: string;
    /**
     * The employer name to be searched for.
     * @type {string}
     * @memberof EmployersSearchRequest
     */
    query: string;
    /**
     * The Plaid products the returned employers should support. Currently, this field must be set to `\"deposit_switch\"`.
     * @type {Array<string>}
     * @memberof EmployersSearchRequest
     */
    products: Array<string>;
}
/**
 * EmployersSearchResponse defines the response schema for `/employers/search`.
 * @export
 * @interface EmployersSearchResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface EmployersSearchResponse {
    [key: string]: object | unknown;

    /**
     * A list of employers matching the search criteria.
     * @type {Array<Employer>}
     * @memberof EmployersSearchResponse
     */
    employers: Array<Employer>;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof EmployersSearchResponse
     */
    request_id: string;
}
/**
 * An object representing employment details found on a paystub.
 * @export
 * @interface EmploymentDetails
 */
// Edited by Plaid, line 9. any to unknown
export interface EmploymentDetails {
    [key: string]: object | unknown;

    /**
     * 
     * @type {Pay}
     * @memberof EmploymentDetails
     * @deprecated
     */
    annual_salary?: Pay;
    /**
     * Date on which the employee was hired, in the YYYY-MM-DD format.
     * @type {string}
     * @memberof EmploymentDetails
     */
    hire_date?: string | null;
}
/**
 * The types of source employment data that users should be able to share
 * @export
 * @enum {string}
 */
export enum EmploymentSourceType {
    Bank = 'bank',
    Payroll = 'payroll'
}

/**
 * An object containing proof of employment data for an individual
 * @export
 * @interface EmploymentVerification
 */
// Edited by Plaid, line 9. any to unknown
export interface EmploymentVerification {
    [key: string]: object | unknown;

    /**
     * 
     * @type {EmploymentVerificationStatus}
     * @memberof EmploymentVerification
     */
    status?: EmploymentVerificationStatus | null;
    /**
     * Start of employment in ISO 8601 format (YYYY-MM-DD).
     * @type {string}
     * @memberof EmploymentVerification
     */
    start_date?: string | null;
    /**
     * End of employment, if applicable. Provided in ISO 8601 format (YYY-MM-DD).
     * @type {string}
     * @memberof EmploymentVerification
     */
    end_date?: string | null;
    /**
     * 
     * @type {EmployerVerification}
     * @memberof EmploymentVerification
     */
    employer?: EmployerVerification;
    /**
     * Current title of employee.
     * @type {string}
     * @memberof EmploymentVerification
     */
    title?: string | null;
    /**
     * 
     * @type {PlatformIds}
     * @memberof EmploymentVerification
     */
    platform_ids?: PlatformIds;
}
/**
 * EmploymentVerificationGetRequest defines the request schema for `/employment/verification/get`.
 * @export
 * @interface EmploymentVerificationGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface EmploymentVerificationGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof EmploymentVerificationGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof EmploymentVerificationGetRequest
     */
    secret?: string;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof EmploymentVerificationGetRequest
     */
    access_token: string;
}
/**
 * EmploymentVerificationGetResponse defines the response schema for `/employment/verification/get`.
 * @export
 * @interface EmploymentVerificationGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface EmploymentVerificationGetResponse {
    [key: string]: object | unknown;

    /**
     * A list of employment verification summaries.
     * @type {Array<EmploymentVerification>}
     * @memberof EmploymentVerificationGetResponse
     */
    employments: Array<EmploymentVerification>;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof EmploymentVerificationGetResponse
     */
    request_id: string;
}
/**
 * Current employment status.
 * @export
 * @enum {string}
 */
export enum EmploymentVerificationStatus {
    EmploymentStatusActive = 'EMPLOYMENT_STATUS_ACTIVE',
    EmploymentStatusInactive = 'EMPLOYMENT_STATUS_INACTIVE',
    Null = 'null'
}

/**
 * A grouping of the Plaid produced transaction enhancement fields.
 * @export
 * @interface Enhancements
 */
// Edited by Plaid, line 9. any to unknown
export interface Enhancements {
    [key: string]: object | unknown;

    /**
     * The name of the primary counterparty, such as the merchant or the financial institution, as extracted by Plaid from the raw description.
     * @type {string}
     * @memberof Enhancements
     */
    merchant_name?: string | null;
    /**
     * The website associated with this transaction, if available.
     * @type {string}
     * @memberof Enhancements
     */
    website?: string | null;
    /**
     * The URL of a logo associated with this transaction, if available. The logo is formatted as a 100x100 pixel PNG file.
     * @type {string}
     * @memberof Enhancements
     */
    logo_url?: string | null;
    /**
     * The check number of the transaction. This field is only populated for check transactions.
     * @type {string}
     * @memberof Enhancements
     */
    check_number?: string | null;
    /**
     * 
     * @type {PaymentChannel}
     * @memberof Enhancements
     */
    payment_channel: PaymentChannel;
    /**
     * The ID of the category to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).
     * @type {string}
     * @memberof Enhancements
     */
    category_id: string | null;
    /**
     * A hierarchical array of the categories to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).
     * @type {Array<string>}
     * @memberof Enhancements
     */
    category: Array<string>;
    /**
     * 
     * @type {Location}
     * @memberof Enhancements
     */
    location: Location;
    /**
     * 
     * @type {PersonalFinanceCategory}
     * @memberof Enhancements
     */
    personal_finance_category?: PersonalFinanceCategory | null;
    /**
     * A link to the icon associated with the primary personal finance category. The logo will always be 100x100 pixels.
     * @type {string}
     * @memberof Enhancements
     */
    personal_finance_category_icon_url?: string;
    /**
     * The counterparties present in the transaction. Counterparties, such as the merchant or the financial institution, are extracted by Plaid from the raw description.
     * @type {Array<Counterparty>}
     * @memberof Enhancements
     */
    counterparties?: Array<Counterparty>;
}
/**
 * The direction of the transaction from the perspective of the account holder:  `OUTFLOW` - Includes outgoing transfers, purchases, and fees. (Typically represented as a negative value on checking accounts and debit cards and a positive value on credit cards.)  `INFLOW` - Includes incoming transfers, refunds, and income. (Typically represented as a positive value on checking accounts and debit cards and a negative value on credit cards.)
 * @export
 * @enum {string}
 */
export enum EnrichTransactionDirection {
    Inflow = 'INFLOW',
    Outflow = 'OUTFLOW'
}

/**
 * A grouping of the Plaid produced transaction enrichment fields.
 * @export
 * @interface Enrichments
 */
// Edited by Plaid, line 9. any to unknown
export interface Enrichments {
    [key: string]: object | unknown;

    /**
     * The check number of the transaction. This field is only populated for check transactions.
     * @type {string}
     * @memberof Enrichments
     */
    check_number?: string | null;
    /**
     * The counterparties present in the transaction. Counterparties, such as the merchant or the financial institution, are extracted by Plaid from the raw description.
     * @type {Array<Counterparty>}
     * @memberof Enrichments
     */
    counterparties: Array<Counterparty>;
    /**
     * A unique, stable, Plaid-generated id that maps to the primary counterparty.
     * @type {string}
     * @memberof Enrichments
     */
    entity_id?: string | null;
    /**
     * The ID of the legacy category to which this transaction belongs. For a full list of legacy categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).  We recommend using the `personal_finance_category` for transaction categorization to obtain the best results.
     * @type {string}
     * @memberof Enrichments
     * @deprecated
     */
    legacy_category_id?: string | null;
    /**
     * A hierarchical array of the legacy categories to which this transaction belongs. For a full list of legacy categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).  We recommend using the `personal_finance_category` for transaction categorization to obtain the best results.
     * @type {Array<string>}
     * @memberof Enrichments
     * @deprecated
     */
    legacy_category?: Array<string>;
    /**
     * 
     * @type {Location}
     * @memberof Enrichments
     */
    location: Location;
    /**
     * The URL of a logo associated with this transaction, if available. The logo is formatted as a 100x100 pixel PNG file.
     * @type {string}
     * @memberof Enrichments
     */
    logo_url: string | null;
    /**
     * The name of the primary counterparty, such as the merchant or the financial institution, as extracted by Plaid from the raw description.
     * @type {string}
     * @memberof Enrichments
     */
    merchant_name: string | null;
    /**
     * 
     * @type {PaymentChannel}
     * @memberof Enrichments
     */
    payment_channel: PaymentChannel;
    /**
     * 
     * @type {PersonalFinanceCategory}
     * @memberof Enrichments
     */
    personal_finance_category: PersonalFinanceCategory | null;
    /**
     * A link to the icon associated with the primary personal finance category. The logo will always be 100x100 pixels.
     * @type {string}
     * @memberof Enrichments
     */
    personal_finance_category_icon_url: string;
    /**
     * 
     * @type {Recurrence}
     * @memberof Enrichments
     */
    recurrence?: Recurrence | null;
    /**
     * The website associated with this transaction.
     * @type {string}
     * @memberof Enrichments
     */
    website: string | null;
}
/**
 * An official document, usually issued by a governing body or institution, with an associated identifier.
 * @export
 * @interface EntityDocument
 */
// Edited by Plaid, line 9. any to unknown
export interface EntityDocument {
    [key: string]: object | unknown;

    /**
     * 
     * @type {EntityDocumentType}
     * @memberof EntityDocument
     */
    type: EntityDocumentType;
    /**
     * The numeric or alphanumeric identifier associated with this document.
     * @type {string}
     * @memberof EntityDocument
     */
    number: string;
}
/**
 * The kind of official document represented by this object.  `bik` - Russian bank code  `business_number` - A number that uniquely identifies the business within a category of businesses  `imo` - Number assigned to the entity by the International Maritime Organization  `other` - Any document not covered by other categories  `swift` - Number identifying a bank and branch.  `tax_id` - Identification issued for the purpose of collecting taxes
 * @export
 * @enum {string}
 */
export enum EntityDocumentType {
    Bik = 'bik',
    BusinessNumber = 'business_number',
    Imo = 'imo',
    Other = 'other',
    Swift = 'swift',
    TaxId = 'tax_id'
}

/**
 * Analysis information describing why a screening hit matched the provided entity information
 * @export
 * @interface EntityScreeningHitAnalysis
 */
// Edited by Plaid, line 9. any to unknown
export interface EntityScreeningHitAnalysis {
    [key: string]: object | unknown;

    /**
     * 
     * @type {MatchSummaryCode}
     * @memberof EntityScreeningHitAnalysis
     */
    documents?: MatchSummaryCode;
    /**
     * 
     * @type {MatchSummaryCode}
     * @memberof EntityScreeningHitAnalysis
     */
    email_addresses?: MatchSummaryCode;
    /**
     * 
     * @type {MatchSummaryCode}
     * @memberof EntityScreeningHitAnalysis
     */
    locations?: MatchSummaryCode;
    /**
     * 
     * @type {MatchSummaryCode}
     * @memberof EntityScreeningHitAnalysis
     */
    names?: MatchSummaryCode;
    /**
     * 
     * @type {MatchSummaryCode}
     * @memberof EntityScreeningHitAnalysis
     */
    phone_numbers?: MatchSummaryCode;
    /**
     * 
     * @type {MatchSummaryCode}
     * @memberof EntityScreeningHitAnalysis
     */
    urls?: MatchSummaryCode;
    /**
     * The version of the entity screening\'s `search_terms` that were compared when the entity screening hit was added. entity screening hits are immutable once they have been reviewed. If changes are detected due to updates to the entity screening\'s `search_terms`, the associated entity program, or the list\'s source data prior to review, the entity screening hit will be updated to reflect those changes.
     * @type {number}
     * @memberof EntityScreeningHitAnalysis
     */
    search_terms_version: number;
}
/**
 * Information associated with the entity watchlist hit
 * @export
 * @interface EntityScreeningHitData
 */
// Edited by Plaid, line 9. any to unknown
export interface EntityScreeningHitData {
    [key: string]: object | unknown;

    /**
     * Documents associated with the watchlist hit
     * @type {Array<EntityScreeningHitDocumentsItems>}
     * @memberof EntityScreeningHitData
     */
    documents?: Array<EntityScreeningHitDocumentsItems>;
    /**
     * Email addresses associated with the watchlist hit
     * @type {Array<EntityScreeningHitEmailsItems>}
     * @memberof EntityScreeningHitData
     */
    email_addresses?: Array<EntityScreeningHitEmailsItems>;
    /**
     * Locations associated with the watchlist hit
     * @type {Array<GenericScreeningHitLocationItems>}
     * @memberof EntityScreeningHitData
     */
    locations?: Array<GenericScreeningHitLocationItems>;
    /**
     * Names associated with the watchlist hit
     * @type {Array<EntityScreeningHitNamesItems>}
     * @memberof EntityScreeningHitData
     */
    names?: Array<EntityScreeningHitNamesItems>;
    /**
     * Phone numbers associated with the watchlist hit
     * @type {Array<EntityScreeningHitsPhoneNumberItems>}
     * @memberof EntityScreeningHitData
     */
    phone_numbers?: Array<EntityScreeningHitsPhoneNumberItems>;
    /**
     * URLs associated with the watchlist hit
     * @type {Array<EntityScreeningHitUrlsItems>}
     * @memberof EntityScreeningHitData
     */
    urls?: Array<EntityScreeningHitUrlsItems>;
}
/**
 * Analyzed documents for the associated hit
 * @export
 * @interface EntityScreeningHitDocumentsItems
 */
// Edited by Plaid, line 9. any to unknown
export interface EntityScreeningHitDocumentsItems {
    [key: string]: object | unknown;

    /**
     * 
     * @type {MatchSummary}
     * @memberof EntityScreeningHitDocumentsItems
     */
    analysis?: MatchSummary;
    /**
     * 
     * @type {EntityDocument}
     * @memberof EntityScreeningHitDocumentsItems
     */
    data?: EntityDocument;
}
/**
 * Email address information for the associated entity watchlist hit
 * @export
 * @interface EntityScreeningHitEmails
 */
// Edited by Plaid, line 9. any to unknown
export interface EntityScreeningHitEmails {
    [key: string]: object | unknown;

    /**
     * A valid email address.
     * @type {string}
     * @memberof EntityScreeningHitEmails
     */
    email_address: string;
}
/**
 * Analyzed emails for the associated hit
 * @export
 * @interface EntityScreeningHitEmailsItems
 */
// Edited by Plaid, line 9. any to unknown
export interface EntityScreeningHitEmailsItems {
    [key: string]: object | unknown;

    /**
     * 
     * @type {MatchSummary}
     * @memberof EntityScreeningHitEmailsItems
     */
    analysis?: MatchSummary;
    /**
     * 
     * @type {EntityScreeningHitEmails}
     * @memberof EntityScreeningHitEmailsItems
     */
    data?: EntityScreeningHitEmails;
}
/**
 * Name information for the associated entity watchlist hit
 * @export
 * @interface EntityScreeningHitNames
 */
// Edited by Plaid, line 9. any to unknown
export interface EntityScreeningHitNames {
    [key: string]: object | unknown;

    /**
     * The full name of the entity.
     * @type {string}
     * @memberof EntityScreeningHitNames
     */
    full: string;
    /**
     * Primary names are those most commonly used to refer to this entity. Only one name will ever be marked as primary.
     * @type {boolean}
     * @memberof EntityScreeningHitNames
     */
    is_primary: boolean;
    /**
     * 
     * @type {WeakAliasDetermination}
     * @memberof EntityScreeningHitNames
     */
    weak_alias_determination: WeakAliasDetermination;
}
/**
 * Analyzed names for the associated hit
 * @export
 * @interface EntityScreeningHitNamesItems
 */
// Edited by Plaid, line 9. any to unknown
export interface EntityScreeningHitNamesItems {
    [key: string]: object | unknown;

    /**
     * 
     * @type {MatchSummary}
     * @memberof EntityScreeningHitNamesItems
     */
    analysis?: MatchSummary;
    /**
     * 
     * @type {EntityScreeningHitNames}
     * @memberof EntityScreeningHitNamesItems
     */
    data?: EntityScreeningHitNames;
}
/**
 * Phone number information associated with the entity screening hit
 * @export
 * @interface EntityScreeningHitPhoneNumbers
 */
// Edited by Plaid, line 9. any to unknown
export interface EntityScreeningHitPhoneNumbers {
    [key: string]: object | unknown;

    /**
     * 
     * @type {PhoneType}
     * @memberof EntityScreeningHitPhoneNumbers
     */
    type: PhoneType;
    /**
     * A phone number in E.164 format.
     * @type {string}
     * @memberof EntityScreeningHitPhoneNumbers
     */
    phone_number: string;
}
/**
 * URLs associated with the entity screening hit
 * @export
 * @interface EntityScreeningHitUrls
 */
// Edited by Plaid, line 9. any to unknown
export interface EntityScreeningHitUrls {
    [key: string]: object | unknown;

    /**
     * An \'http\' or \'https\' URL (must begin with either of those).
     * @type {string}
     * @memberof EntityScreeningHitUrls
     */
    url: string;
}
/**
 * Analyzed URLs for the associated hit
 * @export
 * @interface EntityScreeningHitUrlsItems
 */
// Edited by Plaid, line 9. any to unknown
export interface EntityScreeningHitUrlsItems {
    [key: string]: object | unknown;

    /**
     * 
     * @type {MatchSummary}
     * @memberof EntityScreeningHitUrlsItems
     */
    analysis?: MatchSummary;
    /**
     * 
     * @type {EntityScreeningHitUrls}
     * @memberof EntityScreeningHitUrlsItems
     */
    data?: EntityScreeningHitUrls;
}
/**
 * Analyzed phone numbers for the associated hit
 * @export
 * @interface EntityScreeningHitsPhoneNumberItems
 */
// Edited by Plaid, line 9. any to unknown
export interface EntityScreeningHitsPhoneNumberItems {
    [key: string]: object | unknown;

    /**
     * 
     * @type {MatchSummary}
     * @memberof EntityScreeningHitsPhoneNumberItems
     */
    analysis?: MatchSummary;
    /**
     * 
     * @type {EntityScreeningHitPhoneNumbers}
     * @memberof EntityScreeningHitsPhoneNumberItems
     */
    data?: EntityScreeningHitPhoneNumbers;
}
/**
 * Fired when an entity screening status has changed, which can occur manually via the dashboard or during ongoing monitoring.
 * @export
 * @interface EntityScreeningStatusUpdatedWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface EntityScreeningStatusUpdatedWebhook {
    [key: string]: object | unknown;

    /**
     * `ENTITY_SCREENING`
     * @type {string}
     * @memberof EntityScreeningStatusUpdatedWebhook
     */
    webhook_type: string;
    /**
     * `STATUS_UPDATED`
     * @type {string}
     * @memberof EntityScreeningStatusUpdatedWebhook
     */
    webhook_code: string;
    /**
     * The ID of the associated screening.
     * @type {string}
     * @memberof EntityScreeningStatusUpdatedWebhook
     */
    screening_id: string;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof EntityScreeningStatusUpdatedWebhook
     */
    environment: WebhookEnvironmentValues;
}
/**
 * Shorthand identifier for a specific screening list for entities.
 * @export
 * @enum {string}
 */
export enum EntityWatchlistCode {
    CaCon = 'CA_CON',
    EuCon = 'EU_CON',
    IzSoe = 'IZ_SOE',
    IzUnc = 'IZ_UNC',
    IzWbk = 'IZ_WBK',
    UsCap = 'US_CAP',
    UsFse = 'US_FSE',
    UsMbs = 'US_MBS',
    UsSdn = 'US_SDN',
    UsSsi = 'US_SSI',
    UsCmc = 'US_CMC',
    UsUvl = 'US_UVL',
    AuCon = 'AU_CON',
    UkHmc = 'UK_HMC'
}

/**
 * A program that configures the active lists, search parameters, and other behavior for initial and ongoing screening of entities.
 * @export
 * @interface EntityWatchlistProgram
 */
// Edited by Plaid, line 9. any to unknown
export interface EntityWatchlistProgram {
    [key: string]: object | unknown;

    /**
     * ID of the associated entity program.
     * @type {string}
     * @memberof EntityWatchlistProgram
     */
    id: string;
    /**
     * An ISO8601 formatted timestamp.
     * @type {string}
     * @memberof EntityWatchlistProgram
     */
    created_at: string;
    /**
     * Indicator specifying whether the program is enabled and will perform daily rescans.
     * @type {boolean}
     * @memberof EntityWatchlistProgram
     */
    is_rescanning_enabled: boolean;
    /**
     * Watchlists enabled for the associated program
     * @type {Set<EntityWatchlistCode>}
     * @memberof EntityWatchlistProgram
     */
    lists_enabled: Set<EntityWatchlistCode>;
    /**
     * A name for the entity program to define its purpose. For example, \"High Risk Organizations\" or \"Applicants\".
     * @type {string}
     * @memberof EntityWatchlistProgram
     */
    name: string;
    /**
     * 
     * @type {ProgramNameSensitivity}
     * @memberof EntityWatchlistProgram
     */
    name_sensitivity: ProgramNameSensitivity;
    /**
     * 
     * @type {WatchlistScreeningAuditTrail}
     * @memberof EntityWatchlistProgram
     */
    audit_trail: WatchlistScreeningAuditTrail;
    /**
     * Archived programs are read-only and cannot screen new customers nor participate in ongoing monitoring.
     * @type {boolean}
     * @memberof EntityWatchlistProgram
     */
    is_archived: boolean;
}
/**
 * The entity screening object allows you to represent an entity in your system, update its profile, and search for it on various watchlists. Note: Rejected entity screenings will not receive new hits, regardless of entity program configuration.
 * @export
 * @interface EntityWatchlistScreening
 */
// Edited by Plaid, line 9. any to unknown
export interface EntityWatchlistScreening {
    [key: string]: object | unknown;

    /**
     * ID of the associated entity screening.
     * @type {string}
     * @memberof EntityWatchlistScreening
     */
    id: string;
    /**
     * 
     * @type {EntityWatchlistScreeningSearchTerms}
     * @memberof EntityWatchlistScreening
     */
    search_terms: EntityWatchlistScreeningSearchTerms;
    /**
     * ID of the associated user.
     * @type {string}
     * @memberof EntityWatchlistScreening
     */
    assignee: string | null;
    /**
     * 
     * @type {WatchlistScreeningStatus}
     * @memberof EntityWatchlistScreening
     */
    status: WatchlistScreeningStatus;
    /**
     * A unique ID that identifies the end user in your system. This ID can also be used to associate user-specific data from other Plaid products. Financial Account Matching requires this field and the Link Token Create `client_user_id` to be consistent. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`.
     * @type {string}
     * @memberof EntityWatchlistScreening
     */
    client_user_id: string | null;
    /**
     * 
     * @type {WatchlistScreeningAuditTrail}
     * @memberof EntityWatchlistScreening
     */
    audit_trail: WatchlistScreeningAuditTrail;
}
/**
 * Data from a government watchlist that has been attached to the screening.
 * @export
 * @interface EntityWatchlistScreeningHit
 */
// Edited by Plaid, line 9. any to unknown
export interface EntityWatchlistScreeningHit {
    [key: string]: object | unknown;

    /**
     * ID of the associated entity screening hit.
     * @type {string}
     * @memberof EntityWatchlistScreeningHit
     */
    id: string;
    /**
     * 
     * @type {WatchlistScreeningHitStatus}
     * @memberof EntityWatchlistScreeningHit
     */
    review_status: WatchlistScreeningHitStatus;
    /**
     * An ISO8601 formatted timestamp.
     * @type {string}
     * @memberof EntityWatchlistScreeningHit
     */
    first_active: string;
    /**
     * An ISO8601 formatted timestamp.
     * @type {string}
     * @memberof EntityWatchlistScreeningHit
     */
    inactive_since: string | null;
    /**
     * An ISO8601 formatted timestamp.
     * @type {string}
     * @memberof EntityWatchlistScreeningHit
     */
    historical_since: string | null;
    /**
     * 
     * @type {EntityWatchlistCode}
     * @memberof EntityWatchlistScreeningHit
     */
    list_code: EntityWatchlistCode;
    /**
     * A universal identifier for a watchlist individual that is stable across searches and updates.
     * @type {string}
     * @memberof EntityWatchlistScreeningHit
     */
    plaid_uid: string;
    /**
     * The identifier provided by the source sanction or watchlist. When one is not provided by the source, this is `null`.
     * @type {string}
     * @memberof EntityWatchlistScreeningHit
     */
    source_uid: string | null;
    /**
     * 
     * @type {EntityScreeningHitAnalysis}
     * @memberof EntityWatchlistScreeningHit
     */
    analysis?: EntityScreeningHitAnalysis;
    /**
     * 
     * @type {EntityScreeningHitData}
     * @memberof EntityWatchlistScreeningHit
     */
    data?: EntityScreeningHitData;
}
/**
 * A review submitted by a team member for an entity watchlist screening. A review can be either a comment on the current screening state, actions taken against hits attached to the watchlist screening, or both.
 * @export
 * @interface EntityWatchlistScreeningReview
 */
// Edited by Plaid, line 9. any to unknown
export interface EntityWatchlistScreeningReview {
    [key: string]: object | unknown;

    /**
     * ID of the associated entity review.
     * @type {string}
     * @memberof EntityWatchlistScreeningReview
     */
    id: string;
    /**
     * Hits marked as a true positive after thorough manual review. These hits will never recur or be updated once dismissed. In most cases, confirmed hits indicate that the customer should be rejected.
     * @type {Array<string>}
     * @memberof EntityWatchlistScreeningReview
     */
    confirmed_hits: Array<string>;
    /**
     * Hits marked as a false positive after thorough manual review. These hits will never recur or be updated once dismissed.
     * @type {Array<string>}
     * @memberof EntityWatchlistScreeningReview
     */
    dismissed_hits: Array<string>;
    /**
     * A comment submitted by a team member as part of reviewing a watchlist screening.
     * @type {string}
     * @memberof EntityWatchlistScreeningReview
     */
    comment: string | null;
    /**
     * 
     * @type {WatchlistScreeningAuditTrail}
     * @memberof EntityWatchlistScreeningReview
     */
    audit_trail: WatchlistScreeningAuditTrail;
}
/**
 * Search terms associated with an entity used for searching against watchlists
 * @export
 * @interface EntityWatchlistScreeningSearchTerms
 */
// Edited by Plaid, line 9. any to unknown
export interface EntityWatchlistScreeningSearchTerms {
    [key: string]: object | unknown;

    /**
     * ID of the associated entity program.
     * @type {string}
     * @memberof EntityWatchlistScreeningSearchTerms
     */
    entity_watchlist_program_id: string;
    /**
     * The name of the organization being screened.
     * @type {string}
     * @memberof EntityWatchlistScreeningSearchTerms
     */
    legal_name: string;
    /**
     * The numeric or alphanumeric identifier associated with this document.
     * @type {string}
     * @memberof EntityWatchlistScreeningSearchTerms
     */
    document_number: string | null;
    /**
     * A valid email address.
     * @type {string}
     * @memberof EntityWatchlistScreeningSearchTerms
     */
    email_address: string | null;
    /**
     * Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form.
     * @type {string}
     * @memberof EntityWatchlistScreeningSearchTerms
     */
    country: string | null;
    /**
     * A phone number in E.164 format.
     * @type {string}
     * @memberof EntityWatchlistScreeningSearchTerms
     */
    phone_number: string | null;
    /**
     * An \'http\' or \'https\' URL (must begin with either of those).
     * @type {string}
     * @memberof EntityWatchlistScreeningSearchTerms
     */
    url: string | null;
    /**
     * The current version of the search terms. Starts at `1` and increments with each edit to `search_terms`.
     * @type {number}
     * @memberof EntityWatchlistScreeningSearchTerms
     */
    version: number;
}
/**
 * Search inputs for creating an entity watchlist screening
 * @export
 * @interface EntityWatchlistSearchTerms
 */
// Edited by Plaid, line 9. any to unknown
export interface EntityWatchlistSearchTerms {
    /**
     * ID of the associated entity program.
     * @type {string}
     * @memberof EntityWatchlistSearchTerms
     */
    entity_watchlist_program_id: string;
    /**
     * The name of the organization being screened.
     * @type {string}
     * @memberof EntityWatchlistSearchTerms
     */
    legal_name: string;
    /**
     * The numeric or alphanumeric identifier associated with this document.
     * @type {string}
     * @memberof EntityWatchlistSearchTerms
     */
    document_number?: string | null;
    /**
     * A valid email address.
     * @type {string}
     * @memberof EntityWatchlistSearchTerms
     */
    email_address?: string | null;
    /**
     * Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form.
     * @type {string}
     * @memberof EntityWatchlistSearchTerms
     */
    country?: string | null;
    /**
     * A phone number in E.164 format.
     * @type {string}
     * @memberof EntityWatchlistSearchTerms
     */
    phone_number?: string | null;
    /**
     * An \'http\' or \'https\' URL (must begin with either of those).
     * @type {string}
     * @memberof EntityWatchlistSearchTerms
     */
    url?: string | null;
}
/**
 * A description of whether the associated document was expired when the verification was performed.  Note: In the case where an expiration date is not present on the document or failed to be extracted, this value will be `no_data`.
 * @export
 * @enum {string}
 */
export enum ExpirationDate {
    NotExpired = 'not_expired',
    Expired = 'expired',
    NoData = 'no_data'
}

/**
 * Additional payment consent options
 * @export
 * @interface ExternalPaymentInitiationConsentOptions
 */
// Edited by Plaid, line 9. any to unknown
export interface ExternalPaymentInitiationConsentOptions {
    /**
     * When `true`, Plaid will attempt to request refund details from the payee\'s financial institution.  Support varies between financial institutions and will not always be available.  If refund details could be retrieved, they will be available in the `/payment_initiation/payment/get` response.
     * @type {boolean}
     * @memberof ExternalPaymentInitiationConsentOptions
     */
    request_refund_details?: boolean | null;
    /**
     * The International Bank Account Number (IBAN) for the payer\'s account. Where possible, the end user will be able to set up payment consent using only the specified bank account if provided.
     * @type {string}
     * @memberof ExternalPaymentInitiationConsentOptions
     */
    iban?: string | null;
    /**
     * 
     * @type {PaymentInitiationOptionalRestrictionBacs}
     * @memberof ExternalPaymentInitiationConsentOptions
     */
    bacs?: PaymentInitiationOptionalRestrictionBacs | null;
}
/**
 * Additional payment options
 * @export
 * @interface ExternalPaymentOptions
 */
// Edited by Plaid, line 9. any to unknown
export interface ExternalPaymentOptions {
    /**
     * When `true`, Plaid will attempt to request refund details from the payee\'s financial institution.  Support varies between financial institutions and will not always be available.  If refund details could be retrieved, they will be available in the `/payment_initiation/payment/get` response.
     * @type {boolean}
     * @memberof ExternalPaymentOptions
     */
    request_refund_details?: boolean | null;
    /**
     * The International Bank Account Number (IBAN) for the payer\'s account. Where possible, the end user will be able to send payments only from the specified bank account if provided.
     * @type {string}
     * @memberof ExternalPaymentOptions
     */
    iban?: string | null;
    /**
     * 
     * @type {PaymentInitiationOptionalRestrictionBacs}
     * @memberof ExternalPaymentOptions
     */
    bacs?: PaymentInitiationOptionalRestrictionBacs | null;
    /**
     * 
     * @type {PaymentScheme}
     * @memberof ExternalPaymentOptions
     */
    scheme?: PaymentScheme | null;
}
/**
 * Details about external payment refund
 * @export
 * @interface ExternalPaymentRefundDetails
 */
// Edited by Plaid, line 9. any to unknown
export interface ExternalPaymentRefundDetails {
    /**
     * The name of the account holder.
     * @type {string}
     * @memberof ExternalPaymentRefundDetails
     */
    name: string;
    /**
     * The International Bank Account Number (IBAN) for the account.
     * @type {string}
     * @memberof ExternalPaymentRefundDetails
     */
    iban: string | null;
    /**
     * 
     * @type {RecipientBACSNullable}
     * @memberof ExternalPaymentRefundDetails
     */
    bacs: RecipientBACSNullable | null;
}
/**
 * The schedule that the payment will be executed on. If a schedule is provided, the payment is automatically set up as a standing order. If no schedule is specified, the payment will be executed only once.
 * @export
 * @interface ExternalPaymentScheduleBase
 */
// Edited by Plaid, line 9. any to unknown
export interface ExternalPaymentScheduleBase {
    [key: string]: object | unknown;

    /**
     * 
     * @type {PaymentScheduleInterval}
     * @memberof ExternalPaymentScheduleBase
     */
    interval?: PaymentScheduleInterval;
    /**
     * The day of the interval on which to schedule the payment.  If the payment interval is weekly, `interval_execution_day` should be an integer from 1 (Monday) to 7 (Sunday).  If the payment interval is monthly, `interval_execution_day` should be an integer indicating which day of the month to make the payment on. Integers from 1 to 28 can be used to make a payment on that day of the month. Negative integers from -1 to -5 can be used to make a payment relative to the end of the month. To make a payment on the last day of the month, use -1; to make the payment on the second-to-last day, use -2, and so on.
     * @type {number}
     * @memberof ExternalPaymentScheduleBase
     */
    interval_execution_day?: number;
    /**
     * A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Standing order payments will begin on the first `interval_execution_day` on or after the `start_date`.  If the first `interval_execution_day` on or after the start date is also the same day that `/payment_initiation/payment/create` was called, the bank *may* make the first payment on that day, but it is not guaranteed to do so.
     * @type {string}
     * @memberof ExternalPaymentScheduleBase
     */
    start_date?: string;
    /**
     * A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Standing order payments will end on the last `interval_execution_day` on or before the `end_date`. If the only `interval_execution_day` between the start date and the end date (inclusive) is also the same day that `/payment_initiation/payment/create` was called, the bank *may* make a payment on that day, but it is not guaranteed to do so.
     * @type {string}
     * @memberof ExternalPaymentScheduleBase
     */
    end_date?: string | null;
    /**
     * The start date sent to the bank after adjusting for holidays or weekends.  Will be provided in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). If the start date did not require adjustment, this field will be `null`.
     * @type {string}
     * @memberof ExternalPaymentScheduleBase
     */
    adjusted_start_date?: string | null;
}
/**
 * The schedule that the payment will be executed on. If a schedule is provided, the payment is automatically set up as a standing order. If no schedule is specified, the payment will be executed only once.
 * @export
 * @interface ExternalPaymentScheduleGet
 */
// Edited by Plaid, line 9. any to unknown
export interface ExternalPaymentScheduleGet {
    /**
     * 
     * @type {PaymentScheduleInterval}
     * @memberof ExternalPaymentScheduleGet
     */
    interval: PaymentScheduleInterval;
    /**
     * The day of the interval on which to schedule the payment.  If the payment interval is weekly, `interval_execution_day` should be an integer from 1 (Monday) to 7 (Sunday).  If the payment interval is monthly, `interval_execution_day` should be an integer indicating which day of the month to make the payment on. Integers from 1 to 28 can be used to make a payment on that day of the month. Negative integers from -1 to -5 can be used to make a payment relative to the end of the month. To make a payment on the last day of the month, use -1; to make the payment on the second-to-last day, use -2, and so on.
     * @type {number}
     * @memberof ExternalPaymentScheduleGet
     */
    interval_execution_day: number;
    /**
     * A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Standing order payments will begin on the first `interval_execution_day` on or after the `start_date`.  If the first `interval_execution_day` on or after the start date is also the same day that `/payment_initiation/payment/create` was called, the bank *may* make the first payment on that day, but it is not guaranteed to do so.
     * @type {string}
     * @memberof ExternalPaymentScheduleGet
     */
    start_date: string;
    /**
     * A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Standing order payments will end on the last `interval_execution_day` on or before the `end_date`. If the only `interval_execution_day` between the start date and the end date (inclusive) is also the same day that `/payment_initiation/payment/create` was called, the bank *may* make a payment on that day, but it is not guaranteed to do so.
     * @type {string}
     * @memberof ExternalPaymentScheduleGet
     */
    end_date: string | null;
    /**
     * The start date sent to the bank after adjusting for holidays or weekends.  Will be provided in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). If the start date did not require adjustment, this field will be `null`.
     * @type {string}
     * @memberof ExternalPaymentScheduleGet
     */
    adjusted_start_date: string | null;
}
/**
 * The schedule that the payment will be executed on. If a schedule is provided, the payment is automatically set up as a standing order. If no schedule is specified, the payment will be executed only once.
 * @export
 * @interface ExternalPaymentScheduleRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface ExternalPaymentScheduleRequest {
    /**
     * 
     * @type {PaymentScheduleInterval}
     * @memberof ExternalPaymentScheduleRequest
     */
    interval: PaymentScheduleInterval;
    /**
     * The day of the interval on which to schedule the payment.  If the payment interval is weekly, `interval_execution_day` should be an integer from 1 (Monday) to 7 (Sunday).  If the payment interval is monthly, `interval_execution_day` should be an integer indicating which day of the month to make the payment on. Integers from 1 to 28 can be used to make a payment on that day of the month. Negative integers from -1 to -5 can be used to make a payment relative to the end of the month. To make a payment on the last day of the month, use -1; to make the payment on the second-to-last day, use -2, and so on.
     * @type {number}
     * @memberof ExternalPaymentScheduleRequest
     */
    interval_execution_day: number;
    /**
     * A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Standing order payments will begin on the first `interval_execution_day` on or after the `start_date`.  If the first `interval_execution_day` on or after the start date is also the same day that `/payment_initiation/payment/create` was called, the bank *may* make the first payment on that day, but it is not guaranteed to do so.
     * @type {string}
     * @memberof ExternalPaymentScheduleRequest
     */
    start_date: string;
    /**
     * A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Standing order payments will end on the last `interval_execution_day` on or before the `end_date`. If the only `interval_execution_day` between the start date and the end date (inclusive) is also the same day that `/payment_initiation/payment/create` was called, the bank *may* make a payment on that day, but it is not guaranteed to do so.
     * @type {string}
     * @memberof ExternalPaymentScheduleRequest
     */
    end_date?: string | null;
    /**
     * The start date sent to the bank after adjusting for holidays or weekends.  Will be provided in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). If the start date did not require adjustment, this field will be `null`.
     * @type {string}
     * @memberof ExternalPaymentScheduleRequest
     */
    adjusted_start_date?: string | null;
}
/**
 * Types of document formats. (Suggested values)
 * @export
 * @enum {string}
 */
export enum FDXContentTypes {
    ApplicationPdf = 'application/pdf',
    ImageGif = 'image/gif',
    ImageJpeg = 'image/jpeg',
    ImageTiff = 'image/tiff',
    ImagePng = 'image/png',
    ApplicationJson = 'application/json'
}

/**
 * Financial Institution provider-specific attribute
 * @export
 * @interface FDXFiAttribute
 */
// Edited by Plaid, line 9. any to unknown
export interface FDXFiAttribute {
    /**
     * Name of attribute
     * @type {string}
     * @memberof FDXFiAttribute
     */
    name: string;
    /**
     * Value of attribute
     * @type {string}
     * @memberof FDXFiAttribute
     */
    value: string;
}
/**
 * REST application constraint (Hypermedia As The Engine Of Application State)
 * @export
 * @interface FDXHateoasLink
 */
// Edited by Plaid, line 9. any to unknown
export interface FDXHateoasLink {
    /**
     * URL to invoke the action on the resource
     * @type {string}
     * @memberof FDXHateoasLink
     */
    href: string;
    /**
     * 
     * @type {FDXHateoasLinkAction}
     * @memberof FDXHateoasLink
     */
    action?: FDXHateoasLinkAction;
    /**
     * Relation of this link to its containing entity, as defined by and with many example relation values at [IETF RFC5988](https://datatracker.ietf.org/doc/html/rfc5988)
     * @type {string}
     * @memberof FDXHateoasLink
     */
    rel?: string;
    /**
     * Content-types that can be used in the Accept header
     * @type {Array<FDXContentTypes>}
     * @memberof FDXHateoasLink
     */
    types?: Array<FDXContentTypes>;
}
/**
 * HTTP Method to use for the request
 * @export
 * @enum {string}
 */
export enum FDXHateoasLinkAction {
    Get = 'GET',
    Post = 'POST',
    Patch = 'PATCH',
    Delete = 'DELETE',
    Put = 'PUT'
}

/**
 * Initiator Fi Attribute
 * @export
 * @interface FDXInitiatorFiAttribute
 */
// Edited by Plaid, line 9. any to unknown
export interface FDXInitiatorFiAttribute {
    /**
     * 
     * @type {string}
     * @memberof FDXInitiatorFiAttribute
     */
    name?: string;
    /**
     * 
     * @type {FDXPartyType}
     * @memberof FDXInitiatorFiAttribute
     */
    value?: FDXPartyType;
}
/**
 * Provides the base fields of a notification. Clients will read the `type` property to determine the expected notification payload
 * @export
 * @interface FDXNotification
 */
// Edited by Plaid, line 9. any to unknown
export interface FDXNotification {
    /**
     * Id of notification
     * @type {string}
     * @memberof FDXNotification
     */
    notificationId: string;
    /**
     * 
     * @type {FDXNotificationType}
     * @memberof FDXNotification
     */
    type: FDXNotificationType;
    /**
     * ISO 8601 date-time in format \'YYYY-MM-DDThh:mm:ss.nnn[Z|[+|-]hh:mm]\' according to [IETF RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)
     * @type {string}
     * @memberof FDXNotification
     */
    sentOn: string;
    /**
     * 
     * @type {FDXNotificationCategory}
     * @memberof FDXNotification
     */
    category: FDXNotificationCategory;
    /**
     * 
     * @type {FDXNotificationSeverity}
     * @memberof FDXNotification
     */
    severity?: FDXNotificationSeverity;
    /**
     * 
     * @type {FDXNotificationPriority}
     * @memberof FDXNotification
     */
    priority?: FDXNotificationPriority;
    /**
     * 
     * @type {FDXParty}
     * @memberof FDXNotification
     */
    publisher: FDXParty;
    /**
     * 
     * @type {FDXParty}
     * @memberof FDXNotification
     */
    subscriber?: FDXParty;
    /**
     * 
     * @type {FDXNotificationPayload}
     * @memberof FDXNotification
     */
    notificationPayload: FDXNotificationPayload;
    /**
     * 
     * @type {FDXHateoasLink}
     * @memberof FDXNotification
     */
    url?: FDXHateoasLink;
}
/**
 * Category of Notification
 * @export
 * @enum {string}
 */
export enum FDXNotificationCategory {
    Security = 'SECURITY',
    Maintenance = 'MAINTENANCE',
    Fraud = 'FRAUD',
    Consent = 'CONSENT',
    NewData = 'NEW_DATA'
}

/**
 * Custom key-value pairs payload for a notification
 * @export
 * @interface FDXNotificationPayload
 */
// Edited by Plaid, line 9. any to unknown
export interface FDXNotificationPayload {
    /**
     * ID for the origination entity related to the notification
     * @type {string}
     * @memberof FDXNotificationPayload
     */
    id?: string;
    /**
     * 
     * @type {FDXNotificationPayloadIdType}
     * @memberof FDXNotificationPayload
     */
    idType?: FDXNotificationPayloadIdType;
    /**
     * 
     * @type {Array<FDXFiAttribute>}
     * @memberof FDXNotificationPayload
     */
    customFields?: Array<FDXFiAttribute>;
}
/**
 * Type of entity causing origination of a notification
 * @export
 * @enum {string}
 */
export enum FDXNotificationPayloadIdType {
    Account = 'ACCOUNT',
    Customer = 'CUSTOMER',
    Party = 'PARTY',
    Maintenance = 'MAINTENANCE',
    Consent = 'CONSENT'
}

/**
 * Priority of notification
 * @export
 * @enum {string}
 */
export enum FDXNotificationPriority {
    High = 'HIGH',
    Medium = 'MEDIUM',
    Low = 'LOW'
}

/**
 * Severity level of notification
 * @export
 * @enum {string}
 */
export enum FDXNotificationSeverity {
    Emergency = 'EMERGENCY',
    Alert = 'ALERT',
    Warning = 'WARNING',
    Notice = 'NOTICE',
    Info = 'INFO'
}

/**
 * Type of Notification
 * @export
 * @enum {string}
 */
export enum FDXNotificationType {
    ConsentRevoked = 'CONSENT_REVOKED',
    ConsentUpdated = 'CONSENT_UPDATED',
    Custom = 'CUSTOM',
    Service = 'SERVICE',
    Balance = 'BALANCE',
    PlannedOutage = 'PLANNED_OUTAGE'
}

/**
 * FDX Participant - an entity or person that is a part of a FDX API transaction
 * @export
 * @interface FDXParty
 */
// Edited by Plaid, line 9. any to unknown
export interface FDXParty {
    /**
     * Human recognizable common name
     * @type {string}
     * @memberof FDXParty
     */
    name: string;
    /**
     * 
     * @type {FDXPartyType}
     * @memberof FDXParty
     */
    type: FDXPartyType;
    /**
     * URI for party, where an end user could learn more about the company or application involved in the data sharing chain
     * @type {string}
     * @memberof FDXParty
     */
    homeUri?: string;
    /**
     * URI for a logo asset to be displayed to the end user
     * @type {string}
     * @memberof FDXParty
     */
    logoUri?: string;
    /**
     * 
     * @type {FDXPartyRegistry}
     * @memberof FDXParty
     */
    registry?: FDXPartyRegistry;
    /**
     * Registered name of party
     * @type {string}
     * @memberof FDXParty
     */
    registeredEntityName?: string;
    /**
     * Registered id of party
     * @type {string}
     * @memberof FDXParty
     */
    registeredEntityId?: string;
}
/**
 * The registry containing the party’s registration with name and id
 * @export
 * @enum {string}
 */
export enum FDXPartyRegistry {
    Fdx = 'FDX',
    Gleif = 'GLEIF',
    Icann = 'ICANN',
    Private = 'PRIVATE'
}

/**
 * Identifies the type of a party
 * @export
 * @enum {string}
 */
export enum FDXPartyType {
    DataAccessPlatform = 'DATA_ACCESS_PLATFORM',
    DataProvider = 'DATA_PROVIDER',
    DataRecipient = 'DATA_RECIPIENT',
    Individual = 'INDIVIDUAL',
    Merchant = 'MERCHANT',
    Vendor = 'VENDOR'
}

/**
 * Fires when an account is automatically verified using micro-deposits
 * @export
 * @interface FallbackAuthMicrodepositAutoVerifiedWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface FallbackAuthMicrodepositAutoVerifiedWebhook {
    [key: string]: object | unknown;

    /**
     * `AUTH`
     * @type {string}
     * @memberof FallbackAuthMicrodepositAutoVerifiedWebhook
     */
    webhook_type: string;
    /**
     * `AUTOMATICALLY_VERIFIED`
     * @type {string}
     * @memberof FallbackAuthMicrodepositAutoVerifiedWebhook
     */
    webhook_code: string;
    /**
     * The error code associated with the webhook.
     * @type {string}
     * @memberof FallbackAuthMicrodepositAutoVerifiedWebhook
     */
    error?: string | null;
    /**
     * The external account ID associated with the micro-deposit
     * @type {string}
     * @memberof FallbackAuthMicrodepositAutoVerifiedWebhook
     */
    account_id: string;
    /**
     * The `item_id` of the Item associated with this webhook, warning, or error
     * @type {string}
     * @memberof FallbackAuthMicrodepositAutoVerifiedWebhook
     */
    item_id: string;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof FallbackAuthMicrodepositAutoVerifiedWebhook
     */
    environment: WebhookEnvironmentValues;
}
/**
 * Fires when an account has an expired verification when using micro-deposits
 * @export
 * @interface FallbackAuthMicrodepositVerificationExpiredWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface FallbackAuthMicrodepositVerificationExpiredWebhook {
    [key: string]: object | unknown;

    /**
     * `AUTH`
     * @type {string}
     * @memberof FallbackAuthMicrodepositVerificationExpiredWebhook
     */
    webhook_type: string;
    /**
     * `VERIFICATION_EXPIRED`
     * @type {string}
     * @memberof FallbackAuthMicrodepositVerificationExpiredWebhook
     */
    webhook_code: string;
    /**
     * The error code associated with the webhook.
     * @type {string}
     * @memberof FallbackAuthMicrodepositVerificationExpiredWebhook
     */
    error?: string | null;
    /**
     * The external account ID associated with the micro-deposit
     * @type {string}
     * @memberof FallbackAuthMicrodepositVerificationExpiredWebhook
     */
    account_id: string;
    /**
     * The `item_id` of the Item associated with this webhook, warning, or error
     * @type {string}
     * @memberof FallbackAuthMicrodepositVerificationExpiredWebhook
     */
    item_id: string;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof FallbackAuthMicrodepositVerificationExpiredWebhook
     */
    environment: WebhookEnvironmentValues;
}
/**
 * Form 1099 Type
 * @export
 * @enum {string}
 */
export enum Form1099Type {
    Unknown = 'FORM_1099_TYPE_UNKNOWN',
    Misc = 'FORM_1099_TYPE_MISC',
    K = 'FORM_1099_TYPE_K'
}

/**
 * Analyzed location information for the associated hit
 * @export
 * @interface GenericScreeningHitLocationItems
 */
// Edited by Plaid, line 9. any to unknown
export interface GenericScreeningHitLocationItems {
    [key: string]: object | unknown;

    /**
     * 
     * @type {MatchSummary}
     * @memberof GenericScreeningHitLocationItems
     */
    analysis?: MatchSummary;
    /**
     * 
     * @type {WatchlistScreeningHitLocations}
     * @memberof GenericScreeningHitLocationItems
     */
    data?: WatchlistScreeningHitLocations;
}
/**
 * A status health incident
 * @export
 * @interface HealthIncident
 */
// Edited by Plaid, line 9. any to unknown
export interface HealthIncident {
    [key: string]: object | unknown;

    /**
     * The start date of the incident, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format, e.g. `\"2020-10-30T15:26:48Z\"`.
     * @type {string}
     * @memberof HealthIncident
     */
    start_date: string;
    /**
     * The end date of the incident, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format, e.g. `\"2020-10-30T15:26:48Z\"`.
     * @type {string}
     * @memberof HealthIncident
     */
    end_date?: string | null;
    /**
     * The title of the incident
     * @type {string}
     * @memberof HealthIncident
     */
    title: string;
    /**
     * Updates on the health incident.
     * @type {Array<IncidentUpdate>}
     * @memberof HealthIncident
     */
    incident_updates: Array<IncidentUpdate>;
}
/**
 * An object representing a balance held by an account in the past
 * @export
 * @interface HistoricalBalance
 */
// Edited by Plaid, line 9. any to unknown
export interface HistoricalBalance {
    [key: string]: object | unknown;

    /**
     * The date of the calculated historical balance, in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD)
     * @type {string}
     * @memberof HistoricalBalance
     */
    date: string;
    /**
     * The total amount of funds in the account, calculated from the `current` balance in the `balance` object by subtracting inflows and adding back outflows according to the posted date of each transaction.  If the account has any pending transactions, historical balance amounts on or after the date of the earliest pending transaction may differ if retrieved in subsequent Asset Reports as a result of those pending transactions posting.
     * @type {number}
     * @memberof HistoricalBalance
     */
    current: number;
    /**
     * The ISO-4217 currency code of the balance. Always `null` if `unofficial_currency_code` is non-`null`.
     * @type {string}
     * @memberof HistoricalBalance
     */
    iso_currency_code: string | null;
    /**
     * The unofficial currency code associated with the balance. Always `null` if `iso_currency_code` is non-`null`.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
     * @type {string}
     * @memberof HistoricalBalance
     */
    unofficial_currency_code: string | null;
}
/**
 * Fired when an Item\'s historical transaction pull is completed and Plaid has prepared as much historical transaction data as possible for the Item. Once this webhook has been fired, transaction data beyond the most recent 30 days can be fetched for the Item. If [Account Select v2](https://plaid.com/docs/link/customization/#account-select) is enabled, this webhook will also be fired if account selections for the Item are updated, with `new_transactions` set to the number of net new transactions pulled after the account selection update.  This webhook is intended for use with `/transactions/get`; if you are using the newer `/transactions/sync` endpoint, this webhook will still be fired to maintain backwards compatibility, but it is recommended to listen for and respond to the `SYNC_UPDATES_AVAILABLE` webhook instead.
 * @export
 * @interface HistoricalUpdateWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface HistoricalUpdateWebhook {
    [key: string]: object | unknown;

    /**
     * `TRANSACTIONS`
     * @type {string}
     * @memberof HistoricalUpdateWebhook
     */
    webhook_type: string;
    /**
     * `HISTORICAL_UPDATE`
     * @type {string}
     * @memberof HistoricalUpdateWebhook
     */
    webhook_code: string;
    /**
     * 
     * @type {PlaidError}
     * @memberof HistoricalUpdateWebhook
     */
    error?: PlaidError | null;
    /**
     * The number of new, unfetched transactions available
     * @type {number}
     * @memberof HistoricalUpdateWebhook
     */
    new_transactions: number;
    /**
     * The `item_id` of the Item associated with this webhook, warning, or error
     * @type {string}
     * @memberof HistoricalUpdateWebhook
     */
    item_id: string;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof HistoricalUpdateWebhook
     */
    environment: WebhookEnvironmentValues;
}
/**
 * A securities holding at an institution.
 * @export
 * @interface Holding
 */
// Edited by Plaid, line 9. any to unknown
export interface Holding {
    [key: string]: object | unknown;

    /**
     * The Plaid `account_id` associated with the holding.
     * @type {string}
     * @memberof Holding
     */
    account_id: string;
    /**
     * The Plaid `security_id` associated with the holding. Security data is not specific to a user\'s account; any user who held the same security at the same financial institution at the same time would have identical security data. The `security_id` for the same security will typically be the same across different institutions, but this is not guaranteed. The `security_id` does not typically change, but may change if inherent details of the security change due to a corporate action, for example, in the event of a ticker symbol change or CUSIP change.
     * @type {string}
     * @memberof Holding
     */
    security_id: string;
    /**
     * The last price given by the institution for this security.
     * @type {number}
     * @memberof Holding
     */
    institution_price: number;
    /**
     * The date at which `institution_price` was current.
     * @type {string}
     * @memberof Holding
     */
    institution_price_as_of?: string | null;
    /**
     * Date and time at which `institution_price` was current, in ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ).  This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00). 
     * @type {string}
     * @memberof Holding
     */
    institution_price_datetime?: string | null;
    /**
     * The value of the holding, as reported by the institution.
     * @type {number}
     * @memberof Holding
     */
    institution_value: number;
    /**
     * The original total value of the holding. This field is calculated by Plaid as the sum of the purchase price of all of the shares in the holding.
     * @type {number}
     * @memberof Holding
     */
    cost_basis: number | null;
    /**
     * The total quantity of the asset held, as reported by the financial institution. If the security is an option, `quantity` will reflect the total number of options (typically the number of contracts multiplied by 100), not the number of contracts.
     * @type {number}
     * @memberof Holding
     */
    quantity: number;
    /**
     * The ISO-4217 currency code of the holding. Always `null` if `unofficial_currency_code` is non-`null`.
     * @type {string}
     * @memberof Holding
     */
    iso_currency_code: string | null;
    /**
     * The unofficial currency code associated with the holding. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s. 
     * @type {string}
     * @memberof Holding
     */
    unofficial_currency_code: string | null;
}
/**
 * Fired when new or updated holdings have been detected on an investment account. The webhook typically fires in response to any newly added holdings or price changes to existing holdings, most commonly after market close.
 * @export
 * @interface HoldingsDefaultUpdateWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface HoldingsDefaultUpdateWebhook {
    [key: string]: object | unknown;

    /**
     * `HOLDINGS`
     * @type {string}
     * @memberof HoldingsDefaultUpdateWebhook
     */
    webhook_type: string;
    /**
     * `DEFAULT_UPDATE`
     * @type {string}
     * @memberof HoldingsDefaultUpdateWebhook
     */
    webhook_code: string;
    /**
     * The `item_id` of the Item associated with this webhook, warning, or error
     * @type {string}
     * @memberof HoldingsDefaultUpdateWebhook
     */
    item_id: string;
    /**
     * 
     * @type {PlaidError}
     * @memberof HoldingsDefaultUpdateWebhook
     */
    error?: PlaidError | null;
    /**
     * The number of new holdings reported since the last time this webhook was fired.
     * @type {number}
     * @memberof HoldingsDefaultUpdateWebhook
     */
    new_holdings: number;
    /**
     * The number of updated holdings reported since the last time this webhook was fired.
     * @type {number}
     * @memberof HoldingsDefaultUpdateWebhook
     */
    updated_holdings: number;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof HoldingsDefaultUpdateWebhook
     */
    environment: WebhookEnvironmentValues;
}
/**
 * Specify the holdings on the account.
 * @export
 * @interface HoldingsOverride
 */
// Edited by Plaid, line 9. any to unknown
export interface HoldingsOverride {
    /**
     * The last price given by the institution for this security
     * @type {number}
     * @memberof HoldingsOverride
     */
    institution_price: number;
    /**
     * The date at which `institution_price` was current. Must be formatted as an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date.
     * @type {string}
     * @memberof HoldingsOverride
     */
    institution_price_as_of?: string;
    /**
     * The average original value of the holding. Multiple cost basis values for the same security purchased at different prices are not supported.
     * @type {number}
     * @memberof HoldingsOverride
     */
    cost_basis?: number;
    /**
     * The total quantity of the asset held, as reported by the financial institution.
     * @type {number}
     * @memberof HoldingsOverride
     */
    quantity: number;
    /**
     * Either a valid `iso_currency_code` or `unofficial_currency_code`
     * @type {string}
     * @memberof HoldingsOverride
     */
    currency: string;
    /**
     * 
     * @type {SecurityOverride}
     * @memberof HoldingsOverride
     */
    security: SecurityOverride;
}
/**
 * A globally unique and human readable ID type, specific to the country and document category. For more context on this field, see [Hybrid Input Validation](https://plaid.com/docs/identity-verification/hybrid-input-validation).
 * @export
 * @enum {string}
 */
export enum IDNumberType {
    ArDni = 'ar_dni',
    AuDriversLicense = 'au_drivers_license',
    AuPassport = 'au_passport',
    BrCpf = 'br_cpf',
    CaSin = 'ca_sin',
    ClRun = 'cl_run',
    CnResidentCard = 'cn_resident_card',
    CoNit = 'co_nit',
    DkCpr = 'dk_cpr',
    EgNationalId = 'eg_national_id',
    EsDni = 'es_dni',
    EsNie = 'es_nie',
    HkHkid = 'hk_hkid',
    InPan = 'in_pan',
    ItCf = 'it_cf',
    JoCivilId = 'jo_civil_id',
    JpMyNumber = 'jp_my_number',
    KeHudumaNamba = 'ke_huduma_namba',
    KwCivilId = 'kw_civil_id',
    MxCurp = 'mx_curp',
    MxRfc = 'mx_rfc',
    MyNric = 'my_nric',
    NgNin = 'ng_nin',
    NzDriversLicense = 'nz_drivers_license',
    OmCivilId = 'om_civil_id',
    PhPsn = 'ph_psn',
    PlPesel = 'pl_pesel',
    RoCnp = 'ro_cnp',
    SaNationalId = 'sa_national_id',
    SePin = 'se_pin',
    SgNric = 'sg_nric',
    TrTcKimlik = 'tr_tc_kimlik',
    UsSsn = 'us_ssn',
    UsSsnLast4 = 'us_ssn_last_4',
    ZaSmartId = 'za_smart_id'
}

/**
 * Fired when a change to identity data has been detected on an Item. Items are checked for identity updates every 30-90 days. We recommend that upon receiving this webhook you make another call to `/identity/get` to fetch the user\'s latest identity data.
 * @export
 * @interface IdentityDefaultUpdateWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface IdentityDefaultUpdateWebhook {
    [key: string]: object | unknown;

    /**
     * `IDENTITY`
     * @type {string}
     * @memberof IdentityDefaultUpdateWebhook
     */
    webhook_type: string;
    /**
     * `DEFAULT_UPDATE`
     * @type {string}
     * @memberof IdentityDefaultUpdateWebhook
     */
    webhook_code: string;
    /**
     * The `item_id` of the Item associated with this webhook, warning, or error
     * @type {string}
     * @memberof IdentityDefaultUpdateWebhook
     */
    item_id: string;
    /**
     * An object with keys of `account_id`\'s that are mapped to their respective identity attributes that changed.  Example: `{ \"XMBvvyMGQ1UoLbKByoMqH3nXMj84ALSdE5B58\": [\"PHONES\"] }` 
     * @type {{ [key: string]: Array<IdentityUpdateTypes>; }}
     * @memberof IdentityDefaultUpdateWebhook
     */
    account_ids_with_updated_identity: { [key: string]: Array<IdentityUpdateTypes>; };
    /**
     * 
     * @type {PlaidError}
     * @memberof IdentityDefaultUpdateWebhook
     */
    error: PlaidError | null;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof IdentityDefaultUpdateWebhook
     */
    environment: WebhookEnvironmentValues;
}
/**
 * IdentityGetRequest defines the request schema for `/identity/get`
 * @export
 * @interface IdentityGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface IdentityGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof IdentityGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof IdentityGetRequest
     */
    secret?: string;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof IdentityGetRequest
     */
    access_token: string;
    /**
     * 
     * @type {IdentityGetRequestOptions}
     * @memberof IdentityGetRequest
     */
    options?: IdentityGetRequestOptions;
}
/**
 * An optional object to filter `/identity/get` results.
 * @export
 * @interface IdentityGetRequestOptions
 */
// Edited by Plaid, line 9. any to unknown
export interface IdentityGetRequestOptions {
    /**
     * A list of `account_ids` to retrieve for the Item. Note: An error will be returned if a provided `account_id` is not associated with the Item.
     * @type {Array<string>}
     * @memberof IdentityGetRequestOptions
     */
    account_ids?: Array<string>;
}
/**
 * IdentityGetResponse defines the response schema for `/identity/get`
 * @export
 * @interface IdentityGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface IdentityGetResponse {
    [key: string]: object | unknown;

    /**
     * The accounts for which Identity data has been requested
     * @type {Array<AccountIdentity>}
     * @memberof IdentityGetResponse
     */
    accounts: Array<AccountIdentity>;
    /**
     * 
     * @type {Item}
     * @memberof IdentityGetResponse
     */
    item: Item;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof IdentityGetResponse
     */
    request_id: string;
}
/**
 * IdentityMatchRequest defines the request schema for `/identity/match`
 * @export
 * @interface IdentityMatchRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface IdentityMatchRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof IdentityMatchRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof IdentityMatchRequest
     */
    secret?: string;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof IdentityMatchRequest
     */
    access_token: string;
    /**
     * 
     * @type {IdentityMatchUser}
     * @memberof IdentityMatchRequest
     */
    user?: IdentityMatchUser;
    /**
     * 
     * @type {IdentityMatchRequestOptions}
     * @memberof IdentityMatchRequest
     */
    options?: IdentityMatchRequestOptions;
}
/**
 * An optional object to filter /identity/match results
 * @export
 * @interface IdentityMatchRequestOptions
 */
// Edited by Plaid, line 9. any to unknown
export interface IdentityMatchRequestOptions {
    /**
     * An array of `account_ids` to perform fuzzy match
     * @type {Array<string>}
     * @memberof IdentityMatchRequestOptions
     */
    account_ids?: Array<string>;
}
/**
 * IdentityMatchResponse defines the response schema for `/identity/match`
 * @export
 * @interface IdentityMatchResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface IdentityMatchResponse {
    [key: string]: object | unknown;

    /**
     * The accounts for which Identity match has been requested
     * @type {Array<AccountIdentityMatchScore>}
     * @memberof IdentityMatchResponse
     */
    accounts: Array<AccountIdentityMatchScore>;
    /**
     * 
     * @type {Item}
     * @memberof IdentityMatchResponse
     */
    item: Item;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof IdentityMatchResponse
     */
    request_id: string;
}
/**
 * The user\'s legal name, phone number, email address and address used to perform fuzzy match. If Financial Account Matching is enabled in the Identity Verification product, leave this field empty to automatically match against PII collected from the Identity Verification checks.
 * @export
 * @interface IdentityMatchUser
 */
// Edited by Plaid, line 9. any to unknown
export interface IdentityMatchUser {
    [key: string]: object | unknown;

    /**
     * The user\'s full legal name.
     * @type {string}
     * @memberof IdentityMatchUser
     */
    legal_name?: string | null;
    /**
     * The user\'s phone number, in E.164 format: +{countrycode}{number}. For example: \"+14151234567\". Phone numbers provided in other formats will be parsed on a best-effort basis.
     * @type {string}
     * @memberof IdentityMatchUser
     */
    phone_number?: string | null;
    /**
     * The user\'s email address.
     * @type {string}
     * @memberof IdentityMatchUser
     */
    email_address?: string | null;
    /**
     * 
     * @type {AddressDataNullable}
     * @memberof IdentityMatchUser
     */
    address?: AddressDataNullable | null;
}
/**
 * IdentityRefreshRequest defines the request schema for `/identity/refresh`
 * @export
 * @interface IdentityRefreshRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface IdentityRefreshRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof IdentityRefreshRequest
     */
    client_id?: string;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof IdentityRefreshRequest
     */
    access_token: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof IdentityRefreshRequest
     */
    secret?: string;
}
/**
 * IdentityRefreshResponse defines the response schema for `/identity/refresh`
 * @export
 * @interface IdentityRefreshResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface IdentityRefreshResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof IdentityRefreshResponse
     */
    request_id: string;
}
/**
 * The possible types of identity data that may have changed.
 * @export
 * @enum {string}
 */
export enum IdentityUpdateTypes {
    Phones = 'PHONES',
    Addresses = 'ADDRESSES',
    Emails = 'EMAILS',
    Names = 'NAMES'
}

/**
 * A identity verification attempt represents a customer\'s attempt to verify their identity, reflecting the required steps for completing the session, the results for each step, and information collected in the process.
 * @export
 * @interface IdentityVerification
 */
// Edited by Plaid, line 9. any to unknown
export interface IdentityVerification {
    [key: string]: object | unknown;

    /**
     * ID of the associated Identity Verification attempt.
     * @type {string}
     * @memberof IdentityVerification
     */
    id: string;
    /**
     * A unique ID that identifies the end user in your system. This ID can also be used to associate user-specific data from other Plaid products. Financial Account Matching requires this field and the Link Token Create `client_user_id` to be consistent. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`.
     * @type {string}
     * @memberof IdentityVerification
     */
    client_user_id: string;
    /**
     * An ISO8601 formatted timestamp.
     * @type {string}
     * @memberof IdentityVerification
     */
    created_at: string;
    /**
     * An ISO8601 formatted timestamp.
     * @type {string}
     * @memberof IdentityVerification
     */
    completed_at: string | null;
    /**
     * The ID for the Identity Verification preceding this session. This field will only be filled if the current Identity Verification is a retry of a previous attempt.
     * @type {string}
     * @memberof IdentityVerification
     */
    previous_attempt_id: string | null;
    /**
     * A shareable URL that can be sent directly to the user to complete verification
     * @type {string}
     * @memberof IdentityVerification
     */
    shareable_url: string | null;
    /**
     * 
     * @type {IdentityVerificationTemplateReference}
     * @memberof IdentityVerification
     */
    template: IdentityVerificationTemplateReference;
    /**
     * 
     * @type {IdentityVerificationUserData}
     * @memberof IdentityVerification
     */
    user: IdentityVerificationUserData;
    /**
     * 
     * @type {IdentityVerificationStatus}
     * @memberof IdentityVerification
     */
    status: IdentityVerificationStatus;
    /**
     * 
     * @type {IdentityVerificationStepSummary}
     * @memberof IdentityVerification
     */
    steps: IdentityVerificationStepSummary;
    /**
     * 
     * @type {DocumentaryVerification}
     * @memberof IdentityVerification
     */
    documentary_verification: DocumentaryVerification | null;
    /**
     * 
     * @type {SelfieCheck}
     * @memberof IdentityVerification
     */
    selfie_check: SelfieCheck | null;
    /**
     * 
     * @type {KYCCheckDetails}
     * @memberof IdentityVerification
     */
    kyc_check: KYCCheckDetails | null;
    /**
     * 
     * @type {RiskCheckDetails}
     * @memberof IdentityVerification
     */
    risk_check: RiskCheckDetails | null;
    /**
     * ID of the associated screening.
     * @type {string}
     * @memberof IdentityVerification
     */
    watchlist_screening_id: string | null;
    /**
     * An ISO8601 formatted timestamp.
     * @type {string}
     * @memberof IdentityVerification
     */
    redacted_at: string | null;
}
/**
 * Request schema for \'/identity_verification/create\'
 * @export
 * @interface IdentityVerificationCreateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface IdentityVerificationCreateRequest {
    /**
     * A unique ID that identifies the end user in your system. This ID can also be used to associate user-specific data from other Plaid products. Financial Account Matching requires this field and the Link Token Create `client_user_id` to be consistent. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`.
     * @type {string}
     * @memberof IdentityVerificationCreateRequest
     */
    client_user_id?: string;
    /**
     * A flag specifying whether you would like Plaid to expose a shareable URL for the verification being created.
     * @type {boolean}
     * @memberof IdentityVerificationCreateRequest
     */
    is_shareable: boolean;
    /**
     * ID of the associated Identity Verification template.
     * @type {string}
     * @memberof IdentityVerificationCreateRequest
     */
    template_id: string;
    /**
     * A flag specifying whether the end user has already agreed to a privacy policy specifying that their data will be shared with Plaid for verification purposes.  If `gave_consent` is set to `true`, the `accept_tos` step will be marked as `skipped` and the end user\'s session will start at the next step requirement.
     * @type {boolean}
     * @memberof IdentityVerificationCreateRequest
     */
    gave_consent: boolean;
    /**
     * 
     * @type {IdentityVerificationCreateRequestUser}
     * @memberof IdentityVerificationCreateRequest
     */
    user?: IdentityVerificationCreateRequestUser | null;
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof IdentityVerificationCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof IdentityVerificationCreateRequest
     */
    secret?: string;
    /**
     * An optional flag specifying how you would like Plaid to handle attempts to create an Identity Verification when an Identity Verification already exists for the provided `client_user_id` and `template_id`. If idempotency is enabled, Plaid will return the existing Identity Verification. If idempotency is disabled, Plaid will reject the request with a `400 Bad Request` status code if an Identity Verification already exists for the supplied `client_user_id` and `template_id`.
     * @type {boolean}
     * @memberof IdentityVerificationCreateRequest
     */
    is_idempotent?: boolean | null;
}
/**
 * User information collected outside of Link, most likely via your own onboarding process.  Each of the following identity fields are optional:  `email_address`  `phone_number`  `date_of_birth`  `name`  `address`  `id_number`  Specifically, these fields are optional in that they can either be fully provided (satisfying every required field in their subschema) or omitted from the request entirely by not providing the key or value. Providing these fields via the API will result in Link skipping the data collection process for the associated user. All verification steps enabled in the associated Identity Verification Template will still be run. Verification steps will either be run immediately, or once the user completes the `accept_tos` step, depending on the value provided to the `gave_consent` field. If you are not using the shareable URL feature, you can optionally provide these fields via `/link/token/create` instead; both `/identity_verification/create` and `/link/token/create` are valid ways to provide this information. Note that if you provide a non-`null` user data object via `/identity_verification/create`, any user data fields entered via `/link/token/create` for the same `client_user_id` will be ignored when prefilling Link.
 * @export
 * @interface IdentityVerificationCreateRequestUser
 */
// Edited by Plaid, line 9. any to unknown
export interface IdentityVerificationCreateRequestUser {
    /**
     * A valid email address.
     * @type {string}
     * @memberof IdentityVerificationCreateRequestUser
     */
    email_address?: string;
    /**
     * A phone number in E.164 format.
     * @type {string}
     * @memberof IdentityVerificationCreateRequestUser
     */
    phone_number?: string | null;
    /**
     * A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
     * @type {string}
     * @memberof IdentityVerificationCreateRequestUser
     */
    date_of_birth?: string;
    /**
     * 
     * @type {IdentityVerificationRequestUserName}
     * @memberof IdentityVerificationCreateRequestUser
     */
    name?: IdentityVerificationRequestUserName | null;
    /**
     * 
     * @type {UserAddress}
     * @memberof IdentityVerificationCreateRequestUser
     */
    address?: UserAddress | null;
    /**
     * 
     * @type {UserIDNumber}
     * @memberof IdentityVerificationCreateRequestUser
     */
    id_number?: UserIDNumber | null;
    /**
     * Specifying `user.client_user_id` is deprecated. Please provide `client_user_id` at the root level instead.
     * @type {string}
     * @memberof IdentityVerificationCreateRequestUser
     * @deprecated
     */
    client_user_id?: string | null;
}
/**
 * A identity verification attempt represents a customer\'s attempt to verify their identity, reflecting the required steps for completing the session, the results for each step, and information collected in the process.
 * @export
 * @interface IdentityVerificationCreateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface IdentityVerificationCreateResponse {
    [key: string]: object | unknown;

    /**
     * ID of the associated Identity Verification attempt.
     * @type {string}
     * @memberof IdentityVerificationCreateResponse
     */
    id: string;
    /**
     * A unique ID that identifies the end user in your system. This ID can also be used to associate user-specific data from other Plaid products. Financial Account Matching requires this field and the Link Token Create `client_user_id` to be consistent. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`.
     * @type {string}
     * @memberof IdentityVerificationCreateResponse
     */
    client_user_id: string;
    /**
     * An ISO8601 formatted timestamp.
     * @type {string}
     * @memberof IdentityVerificationCreateResponse
     */
    created_at: string;
    /**
     * An ISO8601 formatted timestamp.
     * @type {string}
     * @memberof IdentityVerificationCreateResponse
     */
    completed_at: string | null;
    /**
     * The ID for the Identity Verification preceding this session. This field will only be filled if the current Identity Verification is a retry of a previous attempt.
     * @type {string}
     * @memberof IdentityVerificationCreateResponse
     */
    previous_attempt_id: string | null;
    /**
     * A shareable URL that can be sent directly to the user to complete verification
     * @type {string}
     * @memberof IdentityVerificationCreateResponse
     */
    shareable_url: string | null;
    /**
     * 
     * @type {IdentityVerificationTemplateReference}
     * @memberof IdentityVerificationCreateResponse
     */
    template: IdentityVerificationTemplateReference;
    /**
     * 
     * @type {IdentityVerificationUserData}
     * @memberof IdentityVerificationCreateResponse
     */
    user: IdentityVerificationUserData;
    /**
     * 
     * @type {IdentityVerificationStatus}
     * @memberof IdentityVerificationCreateResponse
     */
    status: IdentityVerificationStatus;
    /**
     * 
     * @type {IdentityVerificationStepSummary}
     * @memberof IdentityVerificationCreateResponse
     */
    steps: IdentityVerificationStepSummary;
    /**
     * 
     * @type {DocumentaryVerification}
     * @memberof IdentityVerificationCreateResponse
     */
    documentary_verification: DocumentaryVerification | null;
    /**
     * 
     * @type {SelfieCheck}
     * @memberof IdentityVerificationCreateResponse
     */
    selfie_check: SelfieCheck | null;
    /**
     * 
     * @type {KYCCheckDetails}
     * @memberof IdentityVerificationCreateResponse
     */
    kyc_check: KYCCheckDetails | null;
    /**
     * 
     * @type {RiskCheckDetails}
     * @memberof IdentityVerificationCreateResponse
     */
    risk_check: RiskCheckDetails | null;
    /**
     * ID of the associated screening.
     * @type {string}
     * @memberof IdentityVerificationCreateResponse
     */
    watchlist_screening_id: string | null;
    /**
     * An ISO8601 formatted timestamp.
     * @type {string}
     * @memberof IdentityVerificationCreateResponse
     */
    redacted_at: string | null;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof IdentityVerificationCreateResponse
     */
    request_id: string;
}
/**
 * Request input for fetching an identity verification
 * @export
 * @interface IdentityVerificationGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface IdentityVerificationGetRequest {
    /**
     * ID of the associated Identity Verification attempt.
     * @type {string}
     * @memberof IdentityVerificationGetRequest
     */
    identity_verification_id: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof IdentityVerificationGetRequest
     */
    secret?: string;
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof IdentityVerificationGetRequest
     */
    client_id?: string;
}
/**
 * A identity verification attempt represents a customer\'s attempt to verify their identity, reflecting the required steps for completing the session, the results for each step, and information collected in the process.
 * @export
 * @interface IdentityVerificationGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface IdentityVerificationGetResponse {
    [key: string]: object | unknown;

    /**
     * ID of the associated Identity Verification attempt.
     * @type {string}
     * @memberof IdentityVerificationGetResponse
     */
    id: string;
    /**
     * A unique ID that identifies the end user in your system. This ID can also be used to associate user-specific data from other Plaid products. Financial Account Matching requires this field and the Link Token Create `client_user_id` to be consistent. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`.
     * @type {string}
     * @memberof IdentityVerificationGetResponse
     */
    client_user_id: string;
    /**
     * An ISO8601 formatted timestamp.
     * @type {string}
     * @memberof IdentityVerificationGetResponse
     */
    created_at: string;
    /**
     * An ISO8601 formatted timestamp.
     * @type {string}
     * @memberof IdentityVerificationGetResponse
     */
    completed_at: string | null;
    /**
     * The ID for the Identity Verification preceding this session. This field will only be filled if the current Identity Verification is a retry of a previous attempt.
     * @type {string}
     * @memberof IdentityVerificationGetResponse
     */
    previous_attempt_id: string | null;
    /**
     * A shareable URL that can be sent directly to the user to complete verification
     * @type {string}
     * @memberof IdentityVerificationGetResponse
     */
    shareable_url: string | null;
    /**
     * 
     * @type {IdentityVerificationTemplateReference}
     * @memberof IdentityVerificationGetResponse
     */
    template: IdentityVerificationTemplateReference;
    /**
     * 
     * @type {IdentityVerificationUserData}
     * @memberof IdentityVerificationGetResponse
     */
    user: IdentityVerificationUserData;
    /**
     * 
     * @type {IdentityVerificationStatus}
     * @memberof IdentityVerificationGetResponse
     */
    status: IdentityVerificationStatus;
    /**
     * 
     * @type {IdentityVerificationStepSummary}
     * @memberof IdentityVerificationGetResponse
     */
    steps: IdentityVerificationStepSummary;
    /**
     * 
     * @type {DocumentaryVerification}
     * @memberof IdentityVerificationGetResponse
     */
    documentary_verification: DocumentaryVerification | null;
    /**
     * 
     * @type {SelfieCheck}
     * @memberof IdentityVerificationGetResponse
     */
    selfie_check: SelfieCheck | null;
    /**
     * 
     * @type {KYCCheckDetails}
     * @memberof IdentityVerificationGetResponse
     */
    kyc_check: KYCCheckDetails | null;
    /**
     * 
     * @type {RiskCheckDetails}
     * @memberof IdentityVerificationGetResponse
     */
    risk_check: RiskCheckDetails | null;
    /**
     * ID of the associated screening.
     * @type {string}
     * @memberof IdentityVerificationGetResponse
     */
    watchlist_screening_id: string | null;
    /**
     * An ISO8601 formatted timestamp.
     * @type {string}
     * @memberof IdentityVerificationGetResponse
     */
    redacted_at: string | null;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof IdentityVerificationGetResponse
     */
    request_id: string;
}
/**
 * Request input for listing identity verifications
 * @export
 * @interface IdentityVerificationListRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface IdentityVerificationListRequest {
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof IdentityVerificationListRequest
     */
    secret?: string;
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof IdentityVerificationListRequest
     */
    client_id?: string;
    /**
     * ID of the associated Identity Verification template.
     * @type {string}
     * @memberof IdentityVerificationListRequest
     */
    template_id: string;
    /**
     * A unique ID that identifies the end user in your system. This ID can also be used to associate user-specific data from other Plaid products. Financial Account Matching requires this field and the Link Token Create `client_user_id` to be consistent. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`.
     * @type {string}
     * @memberof IdentityVerificationListRequest
     */
    client_user_id: string;
    /**
     * An identifier that determines which page of results you receive.
     * @type {string}
     * @memberof IdentityVerificationListRequest
     */
    cursor?: string | null;
}
/**
 * Paginated list of Plaid sessions.
 * @export
 * @interface IdentityVerificationListResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface IdentityVerificationListResponse {
    [key: string]: object | unknown;

    /**
     * List of Plaid sessions
     * @type {Array<IdentityVerification>}
     * @memberof IdentityVerificationListResponse
     */
    identity_verifications: Array<IdentityVerification>;
    /**
     * An identifier that determines which page of results you receive.
     * @type {string}
     * @memberof IdentityVerificationListResponse
     */
    next_cursor: string | null;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof IdentityVerificationListResponse
     */
    request_id: string;
}
/**
 * User information collected outside of Link, most likely via your own onboarding process.  Each of the following identity fields are optional:  `email_address`  `phone_number`  `date_of_birth`  `name`  `address`  `id_number`  Specifically, these fields are optional in that they can either be fully provided (satisfying every required field in their subschema) or omitted from the request entirely by not providing the key or value. Providing these fields via the API will result in Link skipping the data collection process for the associated user. All verification steps enabled in the associated Identity Verification Template will still be run. Verification steps will either be run immediately, or once the user completes the `accept_tos` step, depending on the value provided to the `gave_consent` field.
 * @export
 * @interface IdentityVerificationRequestUser
 */
// Edited by Plaid, line 9. any to unknown
export interface IdentityVerificationRequestUser {
    [key: string]: object | unknown;

    /**
     * A valid email address.
     * @type {string}
     * @memberof IdentityVerificationRequestUser
     */
    email_address?: string;
    /**
     * A phone number in E.164 format.
     * @type {string}
     * @memberof IdentityVerificationRequestUser
     */
    phone_number?: string | null;
    /**
     * A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
     * @type {string}
     * @memberof IdentityVerificationRequestUser
     */
    date_of_birth?: string;
    /**
     * 
     * @type {IdentityVerificationRequestUserName}
     * @memberof IdentityVerificationRequestUser
     */
    name?: IdentityVerificationRequestUserName | null;
    /**
     * 
     * @type {UserAddress}
     * @memberof IdentityVerificationRequestUser
     */
    address?: UserAddress | null;
    /**
     * 
     * @type {UserIDNumber}
     * @memberof IdentityVerificationRequestUser
     */
    id_number?: UserIDNumber | null;
}
/**
 * You can use this field to pre-populate the user\'s legal name; if it is provided here, they will not be prompted to enter their name in the identity verification attempt.
 * @export
 * @interface IdentityVerificationRequestUserName
 */
// Edited by Plaid, line 9. any to unknown
export interface IdentityVerificationRequestUserName {
    /**
     * A string with at least one non-whitespace character, with a max length of 100 characters.
     * @type {string}
     * @memberof IdentityVerificationRequestUserName
     */
    given_name: string;
    /**
     * A string with at least one non-whitespace character, with a max length of 100 characters.
     * @type {string}
     * @memberof IdentityVerificationRequestUserName
     */
    family_name: string;
}
/**
 * The full name provided by the user. If the user has not submitted their name, this field will be null. Otherwise, both fields are guaranteed to be filled.
 * @export
 * @interface IdentityVerificationResponseUserName
 */
// Edited by Plaid, line 9. any to unknown
export interface IdentityVerificationResponseUserName {
    [key: string]: object | unknown;

    /**
     * A string with at least one non-whitespace character, with a max length of 100 characters.
     * @type {string}
     * @memberof IdentityVerificationResponseUserName
     */
    given_name: string;
    /**
     * A string with at least one non-whitespace character, with a max length of 100 characters.
     * @type {string}
     * @memberof IdentityVerificationResponseUserName
     */
    family_name: string;
}
/**
 * Fired when identity verification has been retried, which can be triggered via the dashboard or the API.
 * @export
 * @interface IdentityVerificationRetriedWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface IdentityVerificationRetriedWebhook {
    [key: string]: object | unknown;

    /**
     * `IDENTITY_VERIFICATION`
     * @type {string}
     * @memberof IdentityVerificationRetriedWebhook
     */
    webhook_type: string;
    /**
     * `RETRIED`
     * @type {string}
     * @memberof IdentityVerificationRetriedWebhook
     */
    webhook_code: string;
    /**
     * The ID of the associated Identity Verification attempt.
     * @type {string}
     * @memberof IdentityVerificationRetriedWebhook
     */
    identity_verification_id: string;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof IdentityVerificationRetriedWebhook
     */
    environment: WebhookEnvironmentValues;
}
/**
 * Request input for retrying an identity verification attempt
 * @export
 * @interface IdentityVerificationRetryRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface IdentityVerificationRetryRequest {
    /**
     * A unique ID that identifies the end user in your system. This ID can also be used to associate user-specific data from other Plaid products. Financial Account Matching requires this field and the Link Token Create `client_user_id` to be consistent. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`.
     * @type {string}
     * @memberof IdentityVerificationRetryRequest
     */
    client_user_id: string;
    /**
     * ID of the associated Identity Verification template.
     * @type {string}
     * @memberof IdentityVerificationRetryRequest
     */
    template_id: string;
    /**
     * 
     * @type {Strategy}
     * @memberof IdentityVerificationRetryRequest
     */
    strategy: Strategy;
    /**
     * 
     * @type {IdentityVerificationRequestUser}
     * @memberof IdentityVerificationRetryRequest
     */
    user?: IdentityVerificationRequestUser | null;
    /**
     * 
     * @type {IdentityVerificationRetryRequestStepsObject}
     * @memberof IdentityVerificationRetryRequest
     */
    steps?: IdentityVerificationRetryRequestStepsObject | null;
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof IdentityVerificationRetryRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof IdentityVerificationRetryRequest
     */
    secret?: string;
}
/**
 * Instructions for the `custom` retry strategy specifying which steps should be required or skipped.   Note:   This field must be provided when the retry strategy is `custom` and must be omitted otherwise.  Custom retries override settings in your Plaid Template. For example, if your Plaid Template has `verify_sms` disabled, a custom retry with `verify_sms` enabled will still require the step.  The `selfie_check` step is currently not supported on the sandbox server. Sandbox requests will silently disable the `selfie_check` step when provided.
 * @export
 * @interface IdentityVerificationRetryRequestStepsObject
 */
// Edited by Plaid, line 9. any to unknown
export interface IdentityVerificationRetryRequestStepsObject {
    /**
     * A boolean field specifying whether the new session should require or skip the `verify_sms` step.
     * @type {boolean}
     * @memberof IdentityVerificationRetryRequestStepsObject
     */
    verify_sms: boolean;
    /**
     * A boolean field specifying whether the new session should require or skip the `kyc_check` step.
     * @type {boolean}
     * @memberof IdentityVerificationRetryRequestStepsObject
     */
    kyc_check: boolean;
    /**
     * A boolean field specifying whether the new session should require or skip the `documentary_verification` step.
     * @type {boolean}
     * @memberof IdentityVerificationRetryRequestStepsObject
     */
    documentary_verification: boolean;
    /**
     * A boolean field specifying whether the new session should require or skip the `selfie_check` step.
     * @type {boolean}
     * @memberof IdentityVerificationRetryRequestStepsObject
     */
    selfie_check: boolean;
}
/**
 * A identity verification attempt represents a customer\'s attempt to verify their identity, reflecting the required steps for completing the session, the results for each step, and information collected in the process.
 * @export
 * @interface IdentityVerificationRetryResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface IdentityVerificationRetryResponse {
    [key: string]: object | unknown;

    /**
     * ID of the associated Identity Verification attempt.
     * @type {string}
     * @memberof IdentityVerificationRetryResponse
     */
    id: string;
    /**
     * A unique ID that identifies the end user in your system. This ID can also be used to associate user-specific data from other Plaid products. Financial Account Matching requires this field and the Link Token Create `client_user_id` to be consistent. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`.
     * @type {string}
     * @memberof IdentityVerificationRetryResponse
     */
    client_user_id: string;
    /**
     * An ISO8601 formatted timestamp.
     * @type {string}
     * @memberof IdentityVerificationRetryResponse
     */
    created_at: string;
    /**
     * An ISO8601 formatted timestamp.
     * @type {string}
     * @memberof IdentityVerificationRetryResponse
     */
    completed_at: string | null;
    /**
     * The ID for the Identity Verification preceding this session. This field will only be filled if the current Identity Verification is a retry of a previous attempt.
     * @type {string}
     * @memberof IdentityVerificationRetryResponse
     */
    previous_attempt_id: string | null;
    /**
     * A shareable URL that can be sent directly to the user to complete verification
     * @type {string}
     * @memberof IdentityVerificationRetryResponse
     */
    shareable_url: string | null;
    /**
     * 
     * @type {IdentityVerificationTemplateReference}
     * @memberof IdentityVerificationRetryResponse
     */
    template: IdentityVerificationTemplateReference;
    /**
     * 
     * @type {IdentityVerificationUserData}
     * @memberof IdentityVerificationRetryResponse
     */
    user: IdentityVerificationUserData;
    /**
     * 
     * @type {IdentityVerificationStatus}
     * @memberof IdentityVerificationRetryResponse
     */
    status: IdentityVerificationStatus;
    /**
     * 
     * @type {IdentityVerificationStepSummary}
     * @memberof IdentityVerificationRetryResponse
     */
    steps: IdentityVerificationStepSummary;
    /**
     * 
     * @type {DocumentaryVerification}
     * @memberof IdentityVerificationRetryResponse
     */
    documentary_verification: DocumentaryVerification | null;
    /**
     * 
     * @type {SelfieCheck}
     * @memberof IdentityVerificationRetryResponse
     */
    selfie_check: SelfieCheck | null;
    /**
     * 
     * @type {KYCCheckDetails}
     * @memberof IdentityVerificationRetryResponse
     */
    kyc_check: KYCCheckDetails | null;
    /**
     * 
     * @type {RiskCheckDetails}
     * @memberof IdentityVerificationRetryResponse
     */
    risk_check: RiskCheckDetails | null;
    /**
     * ID of the associated screening.
     * @type {string}
     * @memberof IdentityVerificationRetryResponse
     */
    watchlist_screening_id: string | null;
    /**
     * An ISO8601 formatted timestamp.
     * @type {string}
     * @memberof IdentityVerificationRetryResponse
     */
    redacted_at: string | null;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof IdentityVerificationRetryResponse
     */
    request_id: string;
}
/**
 * The status of this Identity Verification attempt.   `active` - The Identity Verification attempt is incomplete. The user may have completed part of the session, but has neither failed or passed.  `success` - The Identity Verification attempt has completed, passing all steps defined to the associated Identity Verification template  `failed` - The user failed one or more steps in the session and was told to contact support.  `expired` - The Identity Verification attempt was active for a long period of time without being completed and was automatically marked as expired. Note that sessions currently do not expire. Automatic expiration is expected to be enabled in the future.  `canceled` - The Identity Verification attempt was canceled, either via the dashboard by a user, or via API. The user may have completed part of the session, but has neither failed or passed.  `pending_review` - The Identity Verification attempt template was configured to perform a screening that had one or more hits needing review.
 * @export
 * @enum {string}
 */
export enum IdentityVerificationStatus {
    Active = 'active',
    Success = 'success',
    Failed = 'failed',
    Expired = 'expired',
    Canceled = 'canceled',
    PendingReview = 'pending_review'
}

/**
 * Fired when the status of an identity verification has been updated, which can be triggered via the dashboard or the API.
 * @export
 * @interface IdentityVerificationStatusUpdatedWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface IdentityVerificationStatusUpdatedWebhook {
    [key: string]: object | unknown;

    /**
     * `IDENTITY_VERIFICATION`
     * @type {string}
     * @memberof IdentityVerificationStatusUpdatedWebhook
     */
    webhook_type: string;
    /**
     * `STATUS_UPDATED`
     * @type {string}
     * @memberof IdentityVerificationStatusUpdatedWebhook
     */
    webhook_code: string;
    /**
     * The ID of the associated Identity Verification attempt.
     * @type {string}
     * @memberof IdentityVerificationStatusUpdatedWebhook
     */
    identity_verification_id: string;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof IdentityVerificationStatusUpdatedWebhook
     */
    environment: WebhookEnvironmentValues;
}
/**
 * The status of a step in the identity verification process.
 * @export
 * @enum {string}
 */
export enum IdentityVerificationStepStatus {
    Success = 'success',
    Active = 'active',
    Failed = 'failed',
    WaitingForPrerequisite = 'waiting_for_prerequisite',
    NotApplicable = 'not_applicable',
    Skipped = 'skipped',
    Expired = 'expired',
    Canceled = 'canceled',
    PendingReview = 'pending_review',
    ManuallyApproved = 'manually_approved',
    ManuallyRejected = 'manually_rejected'
}

/**
 * Each step will be one of the following values:   `active` - This step is the user\'s current step. They are either in the process of completing this step, or they recently closed their Identity Verification attempt while in the middle of this step. Only one step will be marked as `active` at any given point.  `success` - The Identity Verification attempt has completed this step.  `failed` - The user failed this step. This can either call the user to fail the session as a whole, or cause them to fallback to another step depending on how the Identity Verification template is configured. A failed step does not imply a failed session.  `waiting_for_prerequisite` - The user needs to complete another step first, before they progress to this step. This step may never run, depending on if the user fails an earlier step or if the step is only run as a fallback.  `not_applicable` - This step will not be run for this session.  `skipped` - The retry instructions that created this Identity Verification attempt specified that this step should be skipped.  `expired` - This step had not yet been completed when the Identity Verification attempt as a whole expired.  `canceled` - The Identity Verification attempt was canceled before the user completed this step.  `pending_review` - The Identity Verification attempt template was configured to perform a screening that had one or more hits needing review.  `manually_approved` - The step was manually overridden to pass by a team member in the dashboard.  `manually_rejected` - The step was manually overridden to fail by a team member in the dashboard.
 * @export
 * @interface IdentityVerificationStepSummary
 */
// Edited by Plaid, line 9. any to unknown
export interface IdentityVerificationStepSummary {
    [key: string]: object | unknown;

    /**
     * 
     * @type {IdentityVerificationStepStatus}
     * @memberof IdentityVerificationStepSummary
     */
    accept_tos: IdentityVerificationStepStatus;
    /**
     * 
     * @type {IdentityVerificationStepStatus}
     * @memberof IdentityVerificationStepSummary
     */
    verify_sms: IdentityVerificationStepStatus;
    /**
     * 
     * @type {IdentityVerificationStepStatus}
     * @memberof IdentityVerificationStepSummary
     */
    kyc_check: IdentityVerificationStepStatus;
    /**
     * 
     * @type {IdentityVerificationStepStatus}
     * @memberof IdentityVerificationStepSummary
     */
    documentary_verification: IdentityVerificationStepStatus;
    /**
     * 
     * @type {IdentityVerificationStepStatus}
     * @memberof IdentityVerificationStepSummary
     */
    selfie_check: IdentityVerificationStepStatus;
    /**
     * 
     * @type {IdentityVerificationStepStatus}
     * @memberof IdentityVerificationStepSummary
     */
    watchlist_screening: IdentityVerificationStepStatus;
    /**
     * 
     * @type {IdentityVerificationStepStatus}
     * @memberof IdentityVerificationStepSummary
     */
    risk_check: IdentityVerificationStepStatus;
}
/**
 * Fired when an end user has completed a step of the Identity Verification process.
 * @export
 * @interface IdentityVerificationStepUpdatedWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface IdentityVerificationStepUpdatedWebhook {
    [key: string]: object | unknown;

    /**
     * `IDENTITY_VERIFICATION`
     * @type {string}
     * @memberof IdentityVerificationStepUpdatedWebhook
     */
    webhook_type: string;
    /**
     * `STEP_UPDATED`
     * @type {string}
     * @memberof IdentityVerificationStepUpdatedWebhook
     */
    webhook_code: string;
    /**
     * The ID of the associated Identity Verification attempt.
     * @type {string}
     * @memberof IdentityVerificationStepUpdatedWebhook
     */
    identity_verification_id: string;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof IdentityVerificationStepUpdatedWebhook
     */
    environment: WebhookEnvironmentValues;
}
/**
 * The resource ID and version number of the template configuring the behavior of a given identity verification.
 * @export
 * @interface IdentityVerificationTemplateReference
 */
// Edited by Plaid, line 9. any to unknown
export interface IdentityVerificationTemplateReference {
    [key: string]: object | unknown;

    /**
     * ID of the associated Identity Verification template.
     * @type {string}
     * @memberof IdentityVerificationTemplateReference
     */
    id: string;
    /**
     * Version of the associated Identity Verification template.
     * @type {number}
     * @memberof IdentityVerificationTemplateReference
     */
    version: number;
}
/**
 * Even if an address has been collected, some fields may be null depending on the region\'s addressing system. For example:  Addresses from the United Kingdom will not include a region  Addresses from Hong Kong will not include postal code
 * @export
 * @interface IdentityVerificationUserAddress
 */
// Edited by Plaid, line 9. any to unknown
export interface IdentityVerificationUserAddress {
    [key: string]: object | unknown;

    /**
     * The primary street portion of an address. If the user has submitted their address, this field will always be filled.
     * @type {string}
     * @memberof IdentityVerificationUserAddress
     */
    street: string | null;
    /**
     * Extra street information, like an apartment or suite number.
     * @type {string}
     * @memberof IdentityVerificationUserAddress
     */
    street2: string | null;
    /**
     * City from the end user\'s address
     * @type {string}
     * @memberof IdentityVerificationUserAddress
     */
    city: string | null;
    /**
     * An ISO 3166-2 subdivision code. Related terms would be \"state\", \"province\", \"prefecture\", \"zone\", \"subdivision\", etc.
     * @type {string}
     * @memberof IdentityVerificationUserAddress
     */
    region: string | null;
    /**
     * The postal code for the associated address. Between 2 and 10 alphanumeric characters. For US-based addresses this must be 5 numeric digits.
     * @type {string}
     * @memberof IdentityVerificationUserAddress
     */
    postal_code: string | null;
    /**
     * Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form.
     * @type {string}
     * @memberof IdentityVerificationUserAddress
     */
    country: string;
}
/**
 * The identity data that was either collected from the user or provided via API in order to perform an identity verification.
 * @export
 * @interface IdentityVerificationUserData
 */
// Edited by Plaid, line 9. any to unknown
export interface IdentityVerificationUserData {
    [key: string]: object | unknown;

    /**
     * A phone number in E.164 format.
     * @type {string}
     * @memberof IdentityVerificationUserData
     */
    phone_number?: string | null;
    /**
     * A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
     * @type {string}
     * @memberof IdentityVerificationUserData
     */
    date_of_birth: string | null;
    /**
     * An IPv4 or IPV6 address.
     * @type {string}
     * @memberof IdentityVerificationUserData
     */
    ip_address: string | null;
    /**
     * A valid email address.
     * @type {string}
     * @memberof IdentityVerificationUserData
     */
    email_address: string | null;
    /**
     * 
     * @type {IdentityVerificationResponseUserName}
     * @memberof IdentityVerificationUserData
     */
    name: IdentityVerificationResponseUserName | null;
    /**
     * 
     * @type {IdentityVerificationUserAddress}
     * @memberof IdentityVerificationUserData
     */
    address: IdentityVerificationUserAddress | null;
    /**
     * 
     * @type {UserIDNumber}
     * @memberof IdentityVerificationUserData
     */
    id_number: UserIDNumber | null;
}
/**
 * A high level description of the quality of the image the user submitted.  For example, an image that is blurry, distorted by glare from a nearby light source, or improperly framed might be marked as low or medium quality. Poor quality images are more likely to fail OCR and/or template conformity checks.  Note: By default, Plaid will let a user recapture document images twice before failing the entire session if we attribute the failure to low image quality.
 * @export
 * @enum {string}
 */
export enum ImageQuality {
    High = 'high',
    Medium = 'medium',
    Low = 'low'
}

/**
 * An update on the health incident
 * @export
 * @interface IncidentUpdate
 */
// Edited by Plaid, line 9. any to unknown
export interface IncidentUpdate {
    [key: string]: object | unknown;

    /**
     * The content of the update.
     * @type {string}
     * @memberof IncidentUpdate
     */
    description?: string;
    /**
     * The status of the incident.
     * @type {string}
     * @memberof IncidentUpdate
     */
    status?: IncidentUpdateStatusEnum;
    /**
     * The date when the update was published, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format, e.g. `\"2020-10-30T15:26:48Z\"`.
     * @type {string}
     * @memberof IncidentUpdate
     */
    updated_date?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum IncidentUpdateStatusEnum {
    Investigating = 'INVESTIGATING',
    Identified = 'IDENTIFIED',
    Scheduled = 'SCHEDULED',
    Resolved = 'RESOLVED',
    Unknown = 'UNKNOWN'
}

/**
 * An object representing a breakdown of the different income types on the paystub.
 * @export
 * @interface IncomeBreakdown
 */
// Edited by Plaid, line 9. any to unknown
export interface IncomeBreakdown {
    [key: string]: object | unknown;

    /**
     * 
     * @type {IncomeBreakdownType}
     * @memberof IncomeBreakdown
     */
    type: IncomeBreakdownType | null;
    /**
     * The hourly rate at which the income is paid.
     * @type {number}
     * @memberof IncomeBreakdown
     */
    rate: number | null;
    /**
     * The number of hours logged for this income for this pay period.
     * @type {number}
     * @memberof IncomeBreakdown
     */
    hours: number | null;
    /**
     * The total pay for this pay period.
     * @type {number}
     * @memberof IncomeBreakdown
     */
    total: number | null;
}
/**
 * The type of income. Possible values include:   `\"regular\"`: regular income   `\"overtime\"`: overtime income   `\"bonus\"`: bonus income
 * @export
 * @enum {string}
 */
export enum IncomeBreakdownType {
    Bonus = 'bonus',
    Overtime = 'overtime',
    Regular = 'regular',
    Null = 'null'
}

/**
 * Specify payroll data on the account.
 * @export
 * @interface IncomeOverride
 */
// Edited by Plaid, line 9. any to unknown
export interface IncomeOverride {
    /**
     * A list of paystubs associated with the account.
     * @type {Array<PaystubOverride>}
     * @memberof IncomeOverride
     */
    paystubs?: Array<PaystubOverride>;
}
/**
 * The verified fields from a paystub verification. All fields are provided as reported on the paystub.
 * @export
 * @interface IncomeSummary
 */
// Edited by Plaid, line 9. any to unknown
export interface IncomeSummary {
    [key: string]: object | unknown;

    /**
     * 
     * @type {EmployerIncomeSummaryFieldString}
     * @memberof IncomeSummary
     */
    employer_name: EmployerIncomeSummaryFieldString;
    /**
     * 
     * @type {EmployeeIncomeSummaryFieldString}
     * @memberof IncomeSummary
     */
    employee_name: EmployeeIncomeSummaryFieldString;
    /**
     * 
     * @type {YTDGrossIncomeSummaryFieldNumber}
     * @memberof IncomeSummary
     */
    ytd_gross_income: YTDGrossIncomeSummaryFieldNumber;
    /**
     * 
     * @type {YTDNetIncomeSummaryFieldNumber}
     * @memberof IncomeSummary
     */
    ytd_net_income: YTDNetIncomeSummaryFieldNumber;
    /**
     * 
     * @type {PayFrequency}
     * @memberof IncomeSummary
     */
    pay_frequency: PayFrequency | null;
    /**
     * 
     * @type {ProjectedIncomeSummaryFieldNumber}
     * @memberof IncomeSummary
     */
    projected_wage: ProjectedIncomeSummaryFieldNumber;
    /**
     * 
     * @type {TransactionData}
     * @memberof IncomeSummary
     */
    verified_transaction: TransactionData | null;
}
/**
 * Field number for income summary
 * @export
 * @interface IncomeSummaryFieldNumber
 */
// Edited by Plaid, line 9. any to unknown
export interface IncomeSummaryFieldNumber {
    [key: string]: object | unknown;

    /**
     * The value of the field.
     * @type {number}
     * @memberof IncomeSummaryFieldNumber
     */
    value: number;
    /**
     * 
     * @type {VerificationStatus}
     * @memberof IncomeSummaryFieldNumber
     */
    verification_status: VerificationStatus;
}
/**
 * Data about the income summary
 * @export
 * @interface IncomeSummaryFieldString
 */
// Edited by Plaid, line 9. any to unknown
export interface IncomeSummaryFieldString {
    [key: string]: object | unknown;

    /**
     * The value of the field.
     * @type {string}
     * @memberof IncomeSummaryFieldString
     */
    value: string;
    /**
     * 
     * @type {VerificationStatus}
     * @memberof IncomeSummaryFieldString
     */
    verification_status: VerificationStatus;
}
/**
 * IncomeVerificationCreateRequest defines the request schema for `/income/verification/create`
 * @export
 * @interface IncomeVerificationCreateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface IncomeVerificationCreateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof IncomeVerificationCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof IncomeVerificationCreateRequest
     */
    secret?: string;
    /**
     * The URL endpoint to which Plaid should send webhooks related to the progress of the income verification process.
     * @type {string}
     * @memberof IncomeVerificationCreateRequest
     */
    webhook: string;
    /**
     * The ID of a precheck created with `/income/verification/precheck`. Will be used to improve conversion of the income verification flow.
     * @type {string}
     * @memberof IncomeVerificationCreateRequest
     */
    precheck_id?: string;
    /**
     * 
     * @type {IncomeVerificationCreateRequestOptions}
     * @memberof IncomeVerificationCreateRequest
     */
    options?: IncomeVerificationCreateRequestOptions;
}
/**
 * Optional arguments for `/income/verification/create`
 * @export
 * @interface IncomeVerificationCreateRequestOptions
 */
// Edited by Plaid, line 9. any to unknown
export interface IncomeVerificationCreateRequestOptions {
    /**
     * An array of access tokens corresponding to the Items that will be cross-referenced with the product data. Plaid will attempt to correlate transaction history from these Items with data from the user\'s paystub, such as date and amount. The `verification` status of the paystub as returned by `/income/verification/paystubs/get` will indicate if the verification status was successful, or, if not, why it failed. If the `transactions` product was not initialized for the Items during Link, it will be initialized after this Link session.
     * @type {Array<string>}
     * @memberof IncomeVerificationCreateRequestOptions
     */
    access_tokens?: Array<string>;
}
/**
 * IncomeVerificationCreateResponse defines the response schema for `/income/verification/create`.
 * @export
 * @interface IncomeVerificationCreateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface IncomeVerificationCreateResponse {
    [key: string]: object | unknown;

    /**
     * ID of the verification. This ID is persisted throughout the lifetime of the verification.
     * @type {string}
     * @memberof IncomeVerificationCreateResponse
     */
    income_verification_id: string;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof IncomeVerificationCreateResponse
     */
    request_id: string;
}
/**
 * IncomeVerificationDocumentsDownloadRequest defines the request schema for `/income/verification/documents/download`.
 * @export
 * @interface IncomeVerificationDocumentsDownloadRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface IncomeVerificationDocumentsDownloadRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof IncomeVerificationDocumentsDownloadRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof IncomeVerificationDocumentsDownloadRequest
     */
    secret?: string;
    /**
     * The ID of the verification.
     * @type {string}
     * @memberof IncomeVerificationDocumentsDownloadRequest
     * @deprecated
     */
    income_verification_id?: string | null;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof IncomeVerificationDocumentsDownloadRequest
     */
    access_token?: string | null;
    /**
     * The document ID to download. If passed, a single document will be returned in the resulting zip file, rather than all document
     * @type {string}
     * @memberof IncomeVerificationDocumentsDownloadRequest
     */
    document_id?: string | null;
}
/**
 * Flow types to retrieve payroll income data
 * @export
 * @enum {string}
 */
export enum IncomeVerificationPayrollFlowType {
    DigitalIncome = 'payroll_digital_income',
    DocumentIncome = 'payroll_document_income'
}

/**
 * IncomeVerificationPaystubsGetRequest defines the request schema for `/income/verification/paystubs/get`.
 * @export
 * @interface IncomeVerificationPaystubsGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface IncomeVerificationPaystubsGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof IncomeVerificationPaystubsGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof IncomeVerificationPaystubsGetRequest
     */
    secret?: string;
    /**
     * The ID of the verification for which to get paystub information.
     * @type {string}
     * @memberof IncomeVerificationPaystubsGetRequest
     * @deprecated
     */
    income_verification_id?: string | null;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof IncomeVerificationPaystubsGetRequest
     */
    access_token?: string | null;
}
/**
 * IncomeVerificationPaystubsGetResponse defines the response schema for `/income/verification/paystubs/get`.
 * @export
 * @interface IncomeVerificationPaystubsGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface IncomeVerificationPaystubsGetResponse {
    [key: string]: object | unknown;

    /**
     * Metadata for an income document.
     * @type {Array<DocumentMetadata>}
     * @memberof IncomeVerificationPaystubsGetResponse
     */
    document_metadata?: Array<DocumentMetadata>;
    /**
     * 
     * @type {Array<Paystub>}
     * @memberof IncomeVerificationPaystubsGetResponse
     */
    paystubs: Array<Paystub>;
    /**
     * 
     * @type {PlaidError}
     * @memberof IncomeVerificationPaystubsGetResponse
     */
    error?: PlaidError | null;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof IncomeVerificationPaystubsGetResponse
     */
    request_id: string;
}
/**
 * The confidence that Plaid can support the user in the digital income verification flow instead of requiring a manual paystub upload. One of the following:  `\"HIGH\"`: It is very likely that this user can use the digital income verification flow.  \"`LOW`\": It is unlikely that this user can use the digital income verification flow.  `\"UNKNOWN\"`: It was not possible to determine if the user is supportable with the information passed.
 * @export
 * @enum {string}
 */
export enum IncomeVerificationPrecheckConfidence {
    High = 'HIGH',
    Low = 'LOW',
    Unknown = 'UNKNOWN'
}

/**
 * Information about the end user\'s employer
 * @export
 * @interface IncomeVerificationPrecheckEmployer
 */
// Edited by Plaid, line 9. any to unknown
export interface IncomeVerificationPrecheckEmployer {
    /**
     * The employer\'s name
     * @type {string}
     * @memberof IncomeVerificationPrecheckEmployer
     */
    name?: string | null;
    /**
     * 
     * @type {IncomeVerificationPrecheckEmployerAddress}
     * @memberof IncomeVerificationPrecheckEmployer
     */
    address?: IncomeVerificationPrecheckEmployerAddress | null;
    /**
     * The employer\'s tax id
     * @type {string}
     * @memberof IncomeVerificationPrecheckEmployer
     */
    tax_id?: string | null;
    /**
     * The URL for the employer\'s public website
     * @type {string}
     * @memberof IncomeVerificationPrecheckEmployer
     */
    url?: string | null;
}
/**
 * The address of the employer
 * @export
 * @interface IncomeVerificationPrecheckEmployerAddress
 */
// Edited by Plaid, line 9. any to unknown
export interface IncomeVerificationPrecheckEmployerAddress {
    /**
     * The full city name
     * @type {string}
     * @memberof IncomeVerificationPrecheckEmployerAddress
     */
    city?: string;
    /**
     * The ISO 3166-1 alpha-2 country code
     * @type {string}
     * @memberof IncomeVerificationPrecheckEmployerAddress
     */
    country?: string;
    /**
     * The postal code. In API versions 2018-05-22 and earlier, this field is called `zip`.
     * @type {string}
     * @memberof IncomeVerificationPrecheckEmployerAddress
     */
    postal_code?: string;
    /**
     * The region or state. In API versions 2018-05-22 and earlier, this field is called `state`. Example: `\"NC\"`
     * @type {string}
     * @memberof IncomeVerificationPrecheckEmployerAddress
     */
    region?: string;
    /**
     * The full street address Example: `\"564 Main Street, APT 15\"`
     * @type {string}
     * @memberof IncomeVerificationPrecheckEmployerAddress
     */
    street?: string;
}
/**
 * Data about the components comprising an address.
 * @export
 * @interface IncomeVerificationPrecheckEmployerAddressData
 */
// Edited by Plaid, line 9. any to unknown
export interface IncomeVerificationPrecheckEmployerAddressData {
    [key: string]: object | unknown;

    /**
     * The full city name
     * @type {string}
     * @memberof IncomeVerificationPrecheckEmployerAddressData
     */
    city?: string;
    /**
     * The ISO 3166-1 alpha-2 country code
     * @type {string}
     * @memberof IncomeVerificationPrecheckEmployerAddressData
     */
    country?: string;
    /**
     * The postal code. In API versions 2018-05-22 and earlier, this field is called `zip`.
     * @type {string}
     * @memberof IncomeVerificationPrecheckEmployerAddressData
     */
    postal_code?: string;
    /**
     * The region or state. In API versions 2018-05-22 and earlier, this field is called `state`. Example: `\"NC\"`
     * @type {string}
     * @memberof IncomeVerificationPrecheckEmployerAddressData
     */
    region?: string;
    /**
     * The full street address Example: `\"564 Main Street, APT 15\"`
     * @type {string}
     * @memberof IncomeVerificationPrecheckEmployerAddressData
     */
    street?: string;
}
/**
 * Data about military info in the income verification precheck.
 * @export
 * @interface IncomeVerificationPrecheckMilitaryInfo
 */
// Edited by Plaid, line 9. any to unknown
export interface IncomeVerificationPrecheckMilitaryInfo {
    /**
     * Is the user currently active duty in the US military
     * @type {boolean}
     * @memberof IncomeVerificationPrecheckMilitaryInfo
     */
    is_active_duty?: boolean | null;
    /**
     * If the user is currently serving in the US military, the branch of the military in which they are serving Valid values: \'AIR FORCE\', \'ARMY\', \'COAST GUARD\', \'MARINES\', \'NAVY\', \'UNKNOWN\'
     * @type {string}
     * @memberof IncomeVerificationPrecheckMilitaryInfo
     */
    branch?: string | null;
}
/**
 * Information about the end user\'s payroll institution
 * @export
 * @interface IncomeVerificationPrecheckPayrollInstitution
 */
// Edited by Plaid, line 9. any to unknown
export interface IncomeVerificationPrecheckPayrollInstitution {
    /**
     * The name of payroll institution
     * @type {string}
     * @memberof IncomeVerificationPrecheckPayrollInstitution
     */
    name?: string | null;
}
/**
 * IncomeVerificationPrecheckRequest defines the request schema for `/income/verification/precheck`
 * @export
 * @interface IncomeVerificationPrecheckRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface IncomeVerificationPrecheckRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof IncomeVerificationPrecheckRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof IncomeVerificationPrecheckRequest
     */
    secret?: string;
    /**
     * 
     * @type {IncomeVerificationPrecheckUser}
     * @memberof IncomeVerificationPrecheckRequest
     */
    user?: IncomeVerificationPrecheckUser | null;
    /**
     * 
     * @type {IncomeVerificationPrecheckEmployer}
     * @memberof IncomeVerificationPrecheckRequest
     */
    employer?: IncomeVerificationPrecheckEmployer | null;
    /**
     * 
     * @type {IncomeVerificationPrecheckPayrollInstitution}
     * @memberof IncomeVerificationPrecheckRequest
     */
    payroll_institution?: IncomeVerificationPrecheckPayrollInstitution | null;
    /**
     * 
     * @type {string}
     * @memberof IncomeVerificationPrecheckRequest
     * @deprecated
     */
    transactions_access_token?: string;
    /**
     * An array of access tokens corresponding to Items belonging to the user whose eligibility is being checked. Note that if the Items specified here are not already initialized with `transactions`, providing them in this field will cause these Items to be initialized with (and billed for) the Transactions product.
     * @type {Array<string>}
     * @memberof IncomeVerificationPrecheckRequest
     */
    transactions_access_tokens?: Array<string>;
    /**
     * 
     * @type {IncomeVerificationPrecheckMilitaryInfo}
     * @memberof IncomeVerificationPrecheckRequest
     */
    us_military_info?: IncomeVerificationPrecheckMilitaryInfo | null;
}
/**
 * IncomeVerificationPrecheckResponse defines the response schema for `/income/verification/precheck`.
 * @export
 * @interface IncomeVerificationPrecheckResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface IncomeVerificationPrecheckResponse {
    [key: string]: object | unknown;

    /**
     * ID of the precheck. Provide this value when calling `/link/token/create` in order to optimize Link conversion.
     * @type {string}
     * @memberof IncomeVerificationPrecheckResponse
     */
    precheck_id: string;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof IncomeVerificationPrecheckResponse
     */
    request_id: string;
    /**
     * 
     * @type {IncomeVerificationPrecheckConfidence}
     * @memberof IncomeVerificationPrecheckResponse
     */
    confidence: IncomeVerificationPrecheckConfidence;
}
/**
 * Information about the user whose eligibility is being evaluated.
 * @export
 * @interface IncomeVerificationPrecheckUser
 */
// Edited by Plaid, line 9. any to unknown
export interface IncomeVerificationPrecheckUser {
    /**
     * The user\'s first name
     * @type {string}
     * @memberof IncomeVerificationPrecheckUser
     */
    first_name?: string | null;
    /**
     * The user\'s last name
     * @type {string}
     * @memberof IncomeVerificationPrecheckUser
     */
    last_name?: string | null;
    /**
     * The user\'s email address
     * @type {string}
     * @memberof IncomeVerificationPrecheckUser
     */
    email_address?: string | null;
    /**
     * 
     * @type {SignalAddressData}
     * @memberof IncomeVerificationPrecheckUser
     */
    home_address?: SignalAddressData | null;
}
/**
 * Fired when a risk signal is available for documents uploaded via Document Income. It will typically take a minute or two for this webhook to fire after the end user has uploaded their documents in the Document Income flow. Once this webhook has fired, `/credit/payroll_income/risk_signals/get` may then be called to retrieve risk data.
 * @export
 * @interface IncomeVerificationRiskSignalsStatusWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface IncomeVerificationRiskSignalsStatusWebhook {
    [key: string]: object | unknown;

    /**
     * `\"INCOME\"`
     * @type {string}
     * @memberof IncomeVerificationRiskSignalsStatusWebhook
     */
    webhook_type: string;
    /**
     * `INCOME_VERIFICATION_RISK_SIGNALS`
     * @type {string}
     * @memberof IncomeVerificationRiskSignalsStatusWebhook
     */
    webhook_code: string;
    /**
     * The Item ID associated with the verification.
     * @type {string}
     * @memberof IncomeVerificationRiskSignalsStatusWebhook
     */
    item_id: string;
    /**
     * The Plaid `user_id` of the User associated with this webhook, warning, or error.
     * @type {string}
     * @memberof IncomeVerificationRiskSignalsStatusWebhook
     */
    user_id?: string;
    /**
     * `RISK_SIGNALS_PROCESSING_COMPLETE`: The income verification fraud detection processing has completed. If the user uploaded multiple documents, this webhook will fire when all documents have finished processing. Call the `/credit/payroll_income/risk_signals/get` endpoint to get all risk signal data.
     * @type {string}
     * @memberof IncomeVerificationRiskSignalsStatusWebhook
     */
    risk_signals_status?: string;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof IncomeVerificationRiskSignalsStatusWebhook
     */
    environment: WebhookEnvironmentValues;
}
/**
 * The types of source income data that users should be able to share
 * @export
 * @enum {string}
 */
export enum IncomeVerificationSourceType {
    Bank = 'bank',
    Payroll = 'payroll'
}

/**
 * Fired when the status of an income verification instance has changed. It will typically take several minutes for this webhook to fire after the end user has uploaded their documents in the Document Income flow.
 * @export
 * @interface IncomeVerificationStatusWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface IncomeVerificationStatusWebhook {
    [key: string]: object | unknown;

    /**
     * `\"INCOME\"`
     * @type {string}
     * @memberof IncomeVerificationStatusWebhook
     */
    webhook_type: string;
    /**
     * `INCOME_VERIFICATION`
     * @type {string}
     * @memberof IncomeVerificationStatusWebhook
     */
    webhook_code: string;
    /**
     * The Item ID associated with the verification.
     * @type {string}
     * @memberof IncomeVerificationStatusWebhook
     */
    item_id: string;
    /**
     * The Plaid `user_id` of the User associated with this webhook, warning, or error.
     * @type {string}
     * @memberof IncomeVerificationStatusWebhook
     */
    user_id?: string;
    /**
     * `VERIFICATION_STATUS_PROCESSING_COMPLETE`: The income verification status processing has completed. If the user uploaded multiple documents, this webhook will fire when all documents have finished processing. Call the `/income/verification/paystubs/get` endpoint and check the document metadata to see which documents were successfully parsed.  `VERIFICATION_STATUS_PROCESSING_FAILED`: A failure occurred when attempting to process the verification documentation.  `VERIFICATION_STATUS_PENDING_APPROVAL`: (deprecated) The income verification has been sent to the user for review.
     * @type {string}
     * @memberof IncomeVerificationStatusWebhook
     */
    verification_status: string;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof IncomeVerificationStatusWebhook
     */
    environment: WebhookEnvironmentValues;
}
/**
 * IncomeVerificationTaxformsGetRequest defines the request schema for `/income/verification/taxforms/get`
 * @export
 * @interface IncomeVerificationTaxformsGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface IncomeVerificationTaxformsGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof IncomeVerificationTaxformsGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof IncomeVerificationTaxformsGetRequest
     */
    secret?: string;
    /**
     * The ID of the verification.
     * @type {string}
     * @memberof IncomeVerificationTaxformsGetRequest
     * @deprecated
     */
    income_verification_id?: string | null;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof IncomeVerificationTaxformsGetRequest
     */
    access_token?: string | null;
}
/**
 * IncomeVerificationTaxformsGetResponse defines the response schema for `/income/verification/taxforms/get`
 * @export
 * @interface IncomeVerificationTaxformsGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface IncomeVerificationTaxformsGetResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof IncomeVerificationTaxformsGetResponse
     */
    request_id?: string;
    /**
     * 
     * @type {Array<DocumentMetadata>}
     * @memberof IncomeVerificationTaxformsGetResponse
     */
    document_metadata: Array<DocumentMetadata>;
    /**
     * A list of forms.
     * @type {Array<Taxform>}
     * @memberof IncomeVerificationTaxformsGetResponse
     */
    taxforms: Array<Taxform>;
    /**
     * 
     * @type {PlaidError}
     * @memberof IncomeVerificationTaxformsGetResponse
     */
    error?: PlaidError | null;
}
/**
 * Status of the income verification webhook
 * @export
 * @interface IncomeVerificationWebhookStatus
 */
// Edited by Plaid, line 9. any to unknown
export interface IncomeVerificationWebhookStatus {
    [key: string]: object | unknown;

    /**
     * 
     * @type {string}
     * @memberof IncomeVerificationWebhookStatus
     */
    id: string;
}
/**
 * Parent container for name that allows for choice group between parsed and unparsed containers.Parent container for name that allows for choice group between parsed and unparsed containers.
 * @export
 * @interface IndividualName
 */
// Edited by Plaid, line 9. any to unknown
export interface IndividualName {
    [key: string]: object | unknown;

    /**
     * The first name of the individual represented by the parent object.
     * @type {string}
     * @memberof IndividualName
     */
    FirstName: string;
    /**
     * The last name of the individual represented by the parent object.
     * @type {string}
     * @memberof IndividualName
     */
    LastName: string;
}
/**
 * Name information for the associated individual watchlist hit
 * @export
 * @interface IndividualScreeningHitNames
 */
// Edited by Plaid, line 9. any to unknown
export interface IndividualScreeningHitNames {
    [key: string]: object | unknown;

    /**
     * The full name of the individual, including all parts.
     * @type {string}
     * @memberof IndividualScreeningHitNames
     */
    full: string;
    /**
     * Primary names are those most commonly used to refer to this person. Only one name will ever be marked as primary.
     * @type {boolean}
     * @memberof IndividualScreeningHitNames
     */
    is_primary: boolean;
    /**
     * 
     * @type {WeakAliasDetermination}
     * @memberof IndividualScreeningHitNames
     */
    weak_alias_determination: WeakAliasDetermination;
}
/**
 * Shorthand identifier for a specific screening list for individuals.
 * @export
 * @enum {string}
 */
export enum IndividualWatchlistCode {
    AuCon = 'AU_CON',
    CaCon = 'CA_CON',
    EuCon = 'EU_CON',
    IzCia = 'IZ_CIA',
    IzIpl = 'IZ_IPL',
    IzPep = 'IZ_PEP',
    IzUnc = 'IZ_UNC',
    IzWbk = 'IZ_WBK',
    UkHmc = 'UK_HMC',
    UsDpl = 'US_DPL',
    UsDtc = 'US_DTC',
    UsFbi = 'US_FBI',
    UsFse = 'US_FSE',
    UsIsn = 'US_ISN',
    UsMbs = 'US_MBS',
    UsPlc = 'US_PLC',
    UsSdn = 'US_SDN',
    UsSsi = 'US_SSI',
    SgSof = 'SG_SOF',
    TrTwl = 'TR_TWL',
    TrDfd = 'TR_DFD',
    TrFor = 'TR_FOR',
    TrWmd = 'TR_WMD',
    TrCmb = 'TR_CMB'
}

/**
 * A program that configures the active lists, search parameters, and other behavior for initial and ongoing screening of individuals.
 * @export
 * @interface IndividualWatchlistProgram
 */
// Edited by Plaid, line 9. any to unknown
export interface IndividualWatchlistProgram {
    [key: string]: object | unknown;

    /**
     * ID of the associated program.
     * @type {string}
     * @memberof IndividualWatchlistProgram
     */
    id: string;
    /**
     * An ISO8601 formatted timestamp.
     * @type {string}
     * @memberof IndividualWatchlistProgram
     */
    created_at: string;
    /**
     * Indicator specifying whether the program is enabled and will perform daily rescans.
     * @type {boolean}
     * @memberof IndividualWatchlistProgram
     */
    is_rescanning_enabled: boolean;
    /**
     * Watchlists enabled for the associated program
     * @type {Set<IndividualWatchlistCode>}
     * @memberof IndividualWatchlistProgram
     */
    lists_enabled: Set<IndividualWatchlistCode>;
    /**
     * A name for the program to define its purpose. For example, \"High Risk Individuals\", \"US Cardholders\", or \"Applicants\".
     * @type {string}
     * @memberof IndividualWatchlistProgram
     */
    name: string;
    /**
     * 
     * @type {ProgramNameSensitivity}
     * @memberof IndividualWatchlistProgram
     */
    name_sensitivity: ProgramNameSensitivity;
    /**
     * 
     * @type {WatchlistScreeningAuditTrail}
     * @memberof IndividualWatchlistProgram
     */
    audit_trail: WatchlistScreeningAuditTrail;
    /**
     * Archived programs are read-only and cannot screen new customers nor participate in ongoing monitoring.
     * @type {boolean}
     * @memberof IndividualWatchlistProgram
     */
    is_archived: boolean;
}
/**
 * The `inflow_model` allows you to model a test account that receives regular income or make regular payments on a loan. Any transactions generated by the `inflow_model` will appear in addition to randomly generated test data or transactions specified by `override_accounts`.
 * @export
 * @interface InflowModel
 */
// Edited by Plaid, line 9. any to unknown
export interface InflowModel {
    [key: string]: object | unknown;

    /**
     * Inflow model. One of the following:  `none`: No income  `monthly-income`: Income occurs once per month `monthly-balance-payment`: Pays off the balance on a liability account at the given statement day of month.  `monthly-interest-only-payment`: Makes an interest-only payment on a liability account at the given statement day of month.  Note that account types supported by Liabilities will accrue interest in the Sandbox. The types impacted are account type `credit` with subtype `credit` or `paypal`, and account type `loan` with subtype `student` or `mortgage`.
     * @type {string}
     * @memberof InflowModel
     */
    type: string;
    /**
     * Amount of income per month. This value is required if `type` is `monthly-income`.
     * @type {number}
     * @memberof InflowModel
     */
    income_amount: number;
    /**
     * Number between 1 and 28, or `last` meaning the last day of the month. The day of the month on which the income transaction will appear. The name of the income transaction. This field is required if `type` is `monthly-income`, `monthly-balance-payment` or `monthly-interest-only-payment`.
     * @type {number}
     * @memberof InflowModel
     */
    payment_day_of_month: number;
    /**
     * The name of the income transaction. This field is required if `type` is `monthly-income`, `monthly-balance-payment` or `monthly-interest-only-payment`.
     * @type {string}
     * @memberof InflowModel
     */
    transaction_name: string;
    /**
     * Number between 1 and 28, or `last` meaning the last day of the month. The day of the month on which the balance is calculated for the next payment. The name of the income transaction. This field is required if `type` is `monthly-balance-payment` or `monthly-interest-only-payment`.
     * @type {string}
     * @memberof InflowModel
     */
    statement_day_of_month: string;
}
/**
 * Fired when an Item\'s initial transaction pull is completed. Once this webhook has been fired, transaction data for the most recent 30 days can be fetched for the Item. If [Account Select v2](https://plaid.com/docs/link/customization/#account-select) is enabled, this webhook will also be fired if account selections for the Item are updated, with `new_transactions` set to the number of net new transactions pulled after the account selection update.  This webhook is intended for use with `/transactions/get`; if you are using the newer `/transactions/sync` endpoint, this webhook will still be fired to maintain backwards compatibility, but it is recommended to listen for and respond to the `SYNC_UPDATES_AVAILABLE` webhook instead.
 * @export
 * @interface InitialUpdateWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface InitialUpdateWebhook {
    [key: string]: object | unknown;

    /**
     * `TRANSACTIONS`
     * @type {string}
     * @memberof InitialUpdateWebhook
     */
    webhook_type: string;
    /**
     * `INITIAL_UPDATE`
     * @type {string}
     * @memberof InitialUpdateWebhook
     */
    webhook_code: string;
    /**
     * The error code associated with the webhook.
     * @type {string}
     * @memberof InitialUpdateWebhook
     */
    error?: string | null;
    /**
     * The number of new, unfetched transactions available.
     * @type {number}
     * @memberof InitialUpdateWebhook
     */
    new_transactions: number;
    /**
     * The `item_id` of the Item associated with this webhook, warning, or error
     * @type {string}
     * @memberof InitialUpdateWebhook
     */
    item_id: string;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof InitialUpdateWebhook
     */
    environment: WebhookEnvironmentValues;
}
/**
 * Details relating to a specific financial institution
 * @export
 * @interface Institution
 */
// Edited by Plaid, line 9. any to unknown
export interface Institution {
    [key: string]: object | unknown;

    /**
     * Unique identifier for the institution
     * @type {string}
     * @memberof Institution
     */
    institution_id: string;
    /**
     * The official name of the institution
     * @type {string}
     * @memberof Institution
     */
    name: string;
    /**
     * A list of the Plaid products supported by the institution. Note that only institutions that support Instant Auth will return `auth` in the product array; institutions that do not list `auth` may still support other Auth methods such as Instant Match or Automated Micro-deposit Verification. To identify institutions that support those methods, use the `auth_metadata` object. For more details, see [Full Auth coverage](https://plaid.com/docs/auth/coverage/).
     * @type {Array<Products>}
     * @memberof Institution
     */
    products: Array<Products>;
    /**
     * A list of the country codes supported by the institution.
     * @type {Array<CountryCode>}
     * @memberof Institution
     */
    country_codes: Array<CountryCode>;
    /**
     * The URL for the institution\'s website
     * @type {string}
     * @memberof Institution
     */
    url?: string | null;
    /**
     * Hexadecimal representation of the primary color used by the institution
     * @type {string}
     * @memberof Institution
     */
    primary_color?: string | null;
    /**
     * Base64 encoded representation of the institution\'s logo, returned as a base64 encoded 152x152 PNG. Not all institutions\' logos are available.
     * @type {string}
     * @memberof Institution
     */
    logo?: string | null;
    /**
     * A partial list of routing numbers associated with the institution. This list is provided for the purpose of looking up institutions by routing number. It is not comprehensive and should never be used as a complete list of routing numbers for an institution.
     * @type {Array<string>}
     * @memberof Institution
     */
    routing_numbers: Array<string>;
    /**
     * A partial list of DTC numbers associated with the institution.
     * @type {Array<string>}
     * @memberof Institution
     */
    dtc_numbers?: Array<string>;
    /**
     * Indicates that the institution has an OAuth login flow. This will be `true` if OAuth is supported for any Items associated with the institution, even if the institution also supports non-OAuth connections.
     * @type {boolean}
     * @memberof Institution
     */
    oauth: boolean;
    /**
     * 
     * @type {InstitutionStatus}
     * @memberof Institution
     */
    status?: InstitutionStatus | null;
    /**
     * 
     * @type {PaymentInitiationMetadata}
     * @memberof Institution
     */
    payment_initiation_metadata?: PaymentInitiationMetadata | null;
    /**
     * 
     * @type {AuthMetadata}
     * @memberof Institution
     */
    auth_metadata?: AuthMetadata | null;
}
/**
 * The status of an institution is determined by the health of its Item logins, Transactions updates, Investments updates, Liabilities updates, Auth requests, Balance requests, Identity requests, Investments requests, and Liabilities requests. A login attempt is conducted during the initial Item add in Link. If there is not enough traffic to accurately calculate an institution\'s status, Plaid will return null rather than potentially inaccurate data.  Institution status is accessible in the Dashboard and via the API using the `/institutions/get_by_id` endpoint with the `include_status` option set to true. Note that institution status is not available in the Sandbox environment. 
 * @export
 * @interface InstitutionStatus
 */
// Edited by Plaid, line 9. any to unknown
export interface InstitutionStatus {
    [key: string]: object | unknown;

    /**
     * 
     * @type {ProductStatus}
     * @memberof InstitutionStatus
     */
    item_logins?: ProductStatus | null;
    /**
     * 
     * @type {ProductStatus}
     * @memberof InstitutionStatus
     */
    transactions_updates?: ProductStatus | null;
    /**
     * 
     * @type {ProductStatus}
     * @memberof InstitutionStatus
     */
    auth?: ProductStatus | null;
    /**
     * 
     * @type {ProductStatus}
     * @memberof InstitutionStatus
     */
    identity?: ProductStatus | null;
    /**
     * 
     * @type {ProductStatus}
     * @memberof InstitutionStatus
     */
    investments_updates?: ProductStatus | null;
    /**
     * 
     * @type {ProductStatus}
     * @memberof InstitutionStatus
     */
    liabilities_updates?: ProductStatus | null;
    /**
     * 
     * @type {ProductStatus}
     * @memberof InstitutionStatus
     */
    liabilities?: ProductStatus | null;
    /**
     * 
     * @type {ProductStatus}
     * @memberof InstitutionStatus
     */
    investments?: ProductStatus | null;
    /**
     * Details of recent health incidents associated with the institution.
     * @type {Array<HealthIncident>}
     * @memberof InstitutionStatus
     */
    health_incidents?: Array<HealthIncident> | null;
}
/**
 * Contains the RTP network and types supported by the linked Item\'s institution.
 * @export
 * @interface InstitutionSupportedNetworks
 */
// Edited by Plaid, line 9. any to unknown
export interface InstitutionSupportedNetworks {
    [key: string]: object | unknown;

    /**
     * 
     * @type {TransferCapabilitiesGetRTP}
     * @memberof InstitutionSupportedNetworks
     */
    rtp: TransferCapabilitiesGetRTP;
}
/**
 * InstitutionsGetByIdRequest defines the request schema for `/institutions/get_by_id`
 * @export
 * @interface InstitutionsGetByIdRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface InstitutionsGetByIdRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof InstitutionsGetByIdRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof InstitutionsGetByIdRequest
     */
    secret?: string;
    /**
     * The ID of the institution to get details about
     * @type {string}
     * @memberof InstitutionsGetByIdRequest
     */
    institution_id: string;
    /**
     * Specify an array of Plaid-supported country codes this institution supports, using the ISO-3166-1 alpha-2 country code standard. In API versions 2019-05-29 and earlier, the `country_codes` parameter is an optional parameter within the `options` object and will default to `[US]` if it is not supplied. 
     * @type {Array<CountryCode>}
     * @memberof InstitutionsGetByIdRequest
     */
    country_codes: Array<CountryCode>;
    /**
     * 
     * @type {InstitutionsGetByIdRequestOptions}
     * @memberof InstitutionsGetByIdRequest
     */
    options?: InstitutionsGetByIdRequestOptions;
}
/**
 * Specifies optional parameters for `/institutions/get_by_id`. If provided, must not be `null`.
 * @export
 * @interface InstitutionsGetByIdRequestOptions
 */
// Edited by Plaid, line 9. any to unknown
export interface InstitutionsGetByIdRequestOptions {
    /**
     * When `true`, return an institution\'s logo, brand color, and URL. When available, the bank\'s logo is returned as a base64 encoded 152x152 PNG, the brand color is in hexadecimal format. The default value is `false`.  Note that Plaid does not own any of the logos shared by the API and that by accessing or using these logos, you agree that you are doing so at your own risk and will, if necessary, obtain all required permissions from the appropriate rights holders and adhere to any applicable usage guidelines. Plaid disclaims all express or implied warranties with respect to the logos.
     * @type {boolean}
     * @memberof InstitutionsGetByIdRequestOptions
     */
    include_optional_metadata?: boolean;
    /**
     * If `true`, the response will include status information about the institution. Default value is `false`.
     * @type {boolean}
     * @memberof InstitutionsGetByIdRequestOptions
     */
    include_status?: boolean;
    /**
     * When `true`, returns metadata related to the Auth product indicating which auth methods are supported.
     * @type {boolean}
     * @memberof InstitutionsGetByIdRequestOptions
     */
    include_auth_metadata?: boolean;
    /**
     * When `true`, returns metadata related to the Payment Initiation product indicating which payment configurations are supported.
     * @type {boolean}
     * @memberof InstitutionsGetByIdRequestOptions
     */
    include_payment_initiation_metadata?: boolean;
}
/**
 * InstitutionsGetByIdResponse defines the response schema for `/institutions/get_by_id`
 * @export
 * @interface InstitutionsGetByIdResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface InstitutionsGetByIdResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {Institution}
     * @memberof InstitutionsGetByIdResponse
     */
    institution: Institution;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof InstitutionsGetByIdResponse
     */
    request_id: string;
}
/**
 * InstitutionsGetRequest defines the request schema for `/institutions/get`
 * @export
 * @interface InstitutionsGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface InstitutionsGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof InstitutionsGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof InstitutionsGetRequest
     */
    secret?: string;
    /**
     * The total number of Institutions to return.
     * @type {number}
     * @memberof InstitutionsGetRequest
     */
    count: number;
    /**
     * The number of Institutions to skip.
     * @type {number}
     * @memberof InstitutionsGetRequest
     */
    offset: number;
    /**
     * Specify an array of Plaid-supported country codes this institution supports, using the ISO-3166-1 alpha-2 country code standard.  In API versions 2019-05-29 and earlier, the `country_codes` parameter is an optional parameter within the `options` object and will default to `[US]` if it is not supplied. 
     * @type {Array<CountryCode>}
     * @memberof InstitutionsGetRequest
     */
    country_codes: Array<CountryCode>;
    /**
     * 
     * @type {InstitutionsGetRequestOptions}
     * @memberof InstitutionsGetRequest
     */
    options?: InstitutionsGetRequestOptions;
}
/**
 * An optional object to filter `/institutions/get` results.
 * @export
 * @interface InstitutionsGetRequestOptions
 */
// Edited by Plaid, line 9. any to unknown
export interface InstitutionsGetRequestOptions {
    /**
     * Filter the Institutions based on which products they support. 
     * @type {Array<Products>}
     * @memberof InstitutionsGetRequestOptions
     */
    products?: Array<Products> | null;
    /**
     * Specify an array of routing numbers to filter institutions. The response will only return institutions that match all of the routing numbers in the array. Routing number records used for this matching are not comprehensive; failure to match a given routing number to an institution does not mean that the institution is unsupported by Plaid.
     * @type {Array<string>}
     * @memberof InstitutionsGetRequestOptions
     */
    routing_numbers?: Array<string> | null;
    /**
     * Limit results to institutions with or without OAuth login flows. Note that institutions will have `oauth` set to `true` if some Items associated with that institution are required to use OAuth flows; institutions in a state of migration to OAuth will have the `oauth` attribute set to `true`.
     * @type {boolean}
     * @memberof InstitutionsGetRequestOptions
     */
    oauth?: boolean | null;
    /**
     * When `true`, return the institution\'s homepage URL, logo and primary brand color.  Note that Plaid does not own any of the logos shared by the API, and that by accessing or using these logos, you agree that you are doing so at your own risk and will, if necessary, obtain all required permissions from the appropriate rights holders and adhere to any applicable usage guidelines. Plaid disclaims all express or implied warranties with respect to the logos.
     * @type {boolean}
     * @memberof InstitutionsGetRequestOptions
     */
    include_optional_metadata?: boolean;
    /**
     * When `true`, returns metadata related to the Auth product indicating which auth methods are supported.
     * @type {boolean}
     * @memberof InstitutionsGetRequestOptions
     */
    include_auth_metadata?: boolean;
    /**
     * When `true`, returns metadata related to the Payment Initiation product indicating which payment configurations are supported.
     * @type {boolean}
     * @memberof InstitutionsGetRequestOptions
     */
    include_payment_initiation_metadata?: boolean;
}
/**
 * InstitutionsGetResponse defines the response schema for `/institutions/get`
 * @export
 * @interface InstitutionsGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface InstitutionsGetResponse {
    [key: string]: object | unknown;

    /**
     * A list of Plaid institutions
     * @type {Array<Institution>}
     * @memberof InstitutionsGetResponse
     */
    institutions: Array<Institution>;
    /**
     * The total number of institutions available via this endpoint
     * @type {number}
     * @memberof InstitutionsGetResponse
     */
    total: number;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof InstitutionsGetResponse
     */
    request_id: string;
}
/**
 * An account filter to apply to institutions search requests
 * @export
 * @interface InstitutionsSearchAccountFilter
 */
// Edited by Plaid, line 9. any to unknown
export interface InstitutionsSearchAccountFilter {
    [key: string]: object | unknown;

    /**
     * 
     * @type {Array<AccountSubtype>}
     * @memberof InstitutionsSearchAccountFilter
     */
    loan?: Array<AccountSubtype>;
    /**
     * 
     * @type {Array<AccountSubtype>}
     * @memberof InstitutionsSearchAccountFilter
     */
    depository?: Array<AccountSubtype>;
    /**
     * 
     * @type {Array<AccountSubtype>}
     * @memberof InstitutionsSearchAccountFilter
     */
    credit?: Array<AccountSubtype>;
    /**
     * 
     * @type {Array<AccountSubtype>}
     * @memberof InstitutionsSearchAccountFilter
     */
    investment?: Array<AccountSubtype>;
}
/**
 * Additional options that will be used to filter institutions by various Payment Initiation configurations.
 * @export
 * @interface InstitutionsSearchPaymentInitiationOptions
 */
// Edited by Plaid, line 9. any to unknown
export interface InstitutionsSearchPaymentInitiationOptions {
    /**
     * A unique ID identifying the payment
     * @type {string}
     * @memberof InstitutionsSearchPaymentInitiationOptions
     */
    payment_id?: string | null;
    /**
     * A unique ID identifying the payment consent
     * @type {string}
     * @memberof InstitutionsSearchPaymentInitiationOptions
     */
    consent_id?: string | null;
}
/**
 * InstitutionsSearchRequest defines the request schema for `/institutions/search`
 * @export
 * @interface InstitutionsSearchRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface InstitutionsSearchRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof InstitutionsSearchRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof InstitutionsSearchRequest
     */
    secret?: string;
    /**
     * The search query. Institutions with names matching the query are returned
     * @type {string}
     * @memberof InstitutionsSearchRequest
     */
    query: string;
    /**
     * Filter the Institutions based on whether they support all products listed in `products`. Provide `null` to get institutions regardless of supported products. Note that when `auth` is specified as a product, if you are enabled for Instant Match or Automated Micro-deposits, institutions that support those products will be returned even if `auth` is not present in their product array.
     * @type {Array<Products>}
     * @memberof InstitutionsSearchRequest
     */
    products: Array<Products> | null;
    /**
     * Specify an array of Plaid-supported country codes this institution supports, using the ISO-3166-1 alpha-2 country code standard. In API versions 2019-05-29 and earlier, the `country_codes` parameter is an optional parameter within the `options` object and will default to `[US]` if it is not supplied. 
     * @type {Array<CountryCode>}
     * @memberof InstitutionsSearchRequest
     */
    country_codes: Array<CountryCode>;
    /**
     * 
     * @type {InstitutionsSearchRequestOptions}
     * @memberof InstitutionsSearchRequest
     */
    options?: InstitutionsSearchRequestOptions;
}
/**
 * An optional object to filter `/institutions/search` results.
 * @export
 * @interface InstitutionsSearchRequestOptions
 */
// Edited by Plaid, line 9. any to unknown
export interface InstitutionsSearchRequestOptions {
    /**
     * Limit results to institutions with or without OAuth login flows. Note that institutions will have `oauth` set to `true` if some Items associated with that institution are required to use OAuth flows; institutions in a state of migration to OAuth will have the `oauth` attribute set to `true`.
     * @type {boolean}
     * @memberof InstitutionsSearchRequestOptions
     */
    oauth?: boolean | null;
    /**
     * When true, return the institution\'s homepage URL, logo and primary brand color.
     * @type {boolean}
     * @memberof InstitutionsSearchRequestOptions
     */
    include_optional_metadata?: boolean;
    /**
     * When `true`, returns metadata related to the Auth product indicating which auth methods are supported.
     * @type {boolean}
     * @memberof InstitutionsSearchRequestOptions
     */
    include_auth_metadata?: boolean | null;
    /**
     * When `true`, returns metadata related to the Payment Initiation product indicating which payment configurations are supported.
     * @type {boolean}
     * @memberof InstitutionsSearchRequestOptions
     */
    include_payment_initiation_metadata?: boolean | null;
    /**
     * 
     * @type {InstitutionsSearchPaymentInitiationOptions}
     * @memberof InstitutionsSearchRequestOptions
     */
    payment_initiation?: InstitutionsSearchPaymentInitiationOptions | null;
}
/**
 * InstitutionsSearchResponse defines the response schema for `/institutions/search`
 * @export
 * @interface InstitutionsSearchResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface InstitutionsSearchResponse {
    [key: string]: object | unknown;

    /**
     * An array of institutions matching the search criteria
     * @type {Array<Institution>}
     * @memberof InstitutionsSearchResponse
     */
    institutions: Array<Institution>;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof InstitutionsSearchResponse
     */
    request_id: string;
}
/**
 * Valid account subtypes for investment accounts. For a list containing descriptions of each subtype, see [Account schemas](https://plaid.com/docs/api/accounts/#StandaloneAccountType-investment).
 * @export
 * @enum {string}
 */
export enum InvestmentAccountSubtype {
    _529 = '529',
    _401a = '401a',
    _401k = '401k',
    _403B = '403B',
    _457b = '457b',
    Brokerage = 'brokerage',
    CashIsa = 'cash isa',
    CryptoExchange = 'crypto exchange',
    EducationSavingsAccount = 'education savings account',
    FixedAnnuity = 'fixed annuity',
    Gic = 'gic',
    HealthReimbursementArrangement = 'health reimbursement arrangement',
    Hsa = 'hsa',
    Ira = 'ira',
    Isa = 'isa',
    Keogh = 'keogh',
    Lif = 'lif',
    LifeInsurance = 'life insurance',
    Lira = 'lira',
    Lrif = 'lrif',
    Lrsp = 'lrsp',
    MutualFund = 'mutual fund',
    NonCustodialWallet = 'non-custodial wallet',
    NonTaxableBrokerageAccount = 'non-taxable brokerage account',
    Other = 'other',
    OtherAnnuity = 'other annuity',
    OtherInsurance = 'other insurance',
    Pension = 'pension',
    Prif = 'prif',
    ProfitSharingPlan = 'profit sharing plan',
    Qshr = 'qshr',
    Rdsp = 'rdsp',
    Resp = 'resp',
    Retirement = 'retirement',
    Rlif = 'rlif',
    Roth = 'roth',
    Roth401k = 'roth 401k',
    Rrif = 'rrif',
    Rrsp = 'rrsp',
    Sarsep = 'sarsep',
    SepIra = 'sep ira',
    SimpleIra = 'simple ira',
    Sipp = 'sipp',
    StockPlan = 'stock plan',
    Tfsa = 'tfsa',
    Trust = 'trust',
    Ugma = 'ugma',
    Utma = 'utma',
    VariableAnnuity = 'variable annuity',
    All = 'all'
}

/**
 * A filter to apply to `investment`-type accounts (or `brokerage`-type accounts for API versions 2018-05-22 and earlier).
 * @export
 * @interface InvestmentFilter
 */
// Edited by Plaid, line 9. any to unknown
export interface InvestmentFilter {
    [key: string]: object | unknown;

    /**
     * An array of account subtypes to display in Link. If not specified, all account subtypes will be shown. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema). 
     * @type {Array<InvestmentAccountSubtype>}
     * @memberof InvestmentFilter
     */
    account_subtypes: Array<InvestmentAccountSubtype>;
}
/**
 * An optional object to filter `/investments/holdings/get` results. If provided, must not be `null`.
 * @export
 * @interface InvestmentHoldingsGetRequestOptions
 */
// Edited by Plaid, line 9. any to unknown
export interface InvestmentHoldingsGetRequestOptions {
    /**
     * An array of `account_id`s to retrieve for the Item. An error will be returned if a provided `account_id` is not associated with the Item.
     * @type {Array<string>}
     * @memberof InvestmentHoldingsGetRequestOptions
     */
    account_ids?: Array<string>;
}
/**
 * A transaction within an investment account.
 * @export
 * @interface InvestmentTransaction
 */
// Edited by Plaid, line 9. any to unknown
export interface InvestmentTransaction {
    [key: string]: object | unknown;

    /**
     * The ID of the Investment transaction, unique across all Plaid transactions. Like all Plaid identifiers, the `investment_transaction_id` is case sensitive.
     * @type {string}
     * @memberof InvestmentTransaction
     */
    investment_transaction_id: string;
    /**
     * A legacy field formerly used internally by Plaid to identify certain canceled transactions.
     * @type {string}
     * @memberof InvestmentTransaction
     * @deprecated
     */
    cancel_transaction_id?: string | null;
    /**
     * The `account_id` of the account against which this transaction posted.
     * @type {string}
     * @memberof InvestmentTransaction
     */
    account_id: string;
    /**
     * The `security_id` to which this transaction is related.
     * @type {string}
     * @memberof InvestmentTransaction
     */
    security_id: string | null;
    /**
     * The [ISO 8601](https://wikipedia.org/wiki/ISO_8601) posting date for the transaction.
     * @type {string}
     * @memberof InvestmentTransaction
     */
    date: string;
    /**
     * The institution’s description of the transaction.
     * @type {string}
     * @memberof InvestmentTransaction
     */
    name: string;
    /**
     * The number of units of the security involved in this transaction. Positive for buy transactions; negative for sell transactions.
     * @type {number}
     * @memberof InvestmentTransaction
     */
    quantity: number;
    /**
     * The complete value of the transaction. Positive values when cash is debited, e.g. purchases of stock; negative values when cash is credited, e.g. sales of stock. Treatment remains the same for cash-only movements unassociated with securities.
     * @type {number}
     * @memberof InvestmentTransaction
     */
    amount: number;
    /**
     * The price of the security at which this transaction occurred.
     * @type {number}
     * @memberof InvestmentTransaction
     */
    price: number;
    /**
     * The combined value of all fees applied to this transaction
     * @type {number}
     * @memberof InvestmentTransaction
     */
    fees: number | null;
    /**
     * 
     * @type {InvestmentTransactionType}
     * @memberof InvestmentTransaction
     */
    type: InvestmentTransactionType;
    /**
     * 
     * @type {InvestmentTransactionSubtype}
     * @memberof InvestmentTransaction
     */
    subtype: InvestmentTransactionSubtype;
    /**
     * The ISO-4217 currency code of the transaction. Always `null` if `unofficial_currency_code` is non-`null`.
     * @type {string}
     * @memberof InvestmentTransaction
     */
    iso_currency_code: string | null;
    /**
     * The unofficial currency code associated with the holding. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
     * @type {string}
     * @memberof InvestmentTransaction
     */
    unofficial_currency_code: string | null;
}
/**
 * For descriptions of possible transaction types and subtypes, see the [Investment transaction types schema](https://plaid.com/docs/api/accounts/#investment-transaction-types-schema).
 * @export
 * @enum {string}
 */
export enum InvestmentTransactionSubtype {
    AccountFee = 'account fee',
    Adjustment = 'adjustment',
    Assignment = 'assignment',
    Buy = 'buy',
    BuyToCover = 'buy to cover',
    Contribution = 'contribution',
    Deposit = 'deposit',
    Distribution = 'distribution',
    Dividend = 'dividend',
    DividendReinvestment = 'dividend reinvestment',
    Exercise = 'exercise',
    Expire = 'expire',
    FundFee = 'fund fee',
    Interest = 'interest',
    InterestReceivable = 'interest receivable',
    InterestReinvestment = 'interest reinvestment',
    LegalFee = 'legal fee',
    LoanPayment = 'loan payment',
    LongTermCapitalGain = 'long-term capital gain',
    LongTermCapitalGainReinvestment = 'long-term capital gain reinvestment',
    ManagementFee = 'management fee',
    MarginExpense = 'margin expense',
    Merger = 'merger',
    MiscellaneousFee = 'miscellaneous fee',
    NonQualifiedDividend = 'non-qualified dividend',
    NonResidentTax = 'non-resident tax',
    PendingCredit = 'pending credit',
    PendingDebit = 'pending debit',
    QualifiedDividend = 'qualified dividend',
    Rebalance = 'rebalance',
    ReturnOfPrincipal = 'return of principal',
    Request = 'request',
    Sell = 'sell',
    SellShort = 'sell short',
    Send = 'send',
    ShortTermCapitalGain = 'short-term capital gain',
    ShortTermCapitalGainReinvestment = 'short-term capital gain reinvestment',
    SpinOff = 'spin off',
    Split = 'split',
    StockDistribution = 'stock distribution',
    Tax = 'tax',
    TaxWithheld = 'tax withheld',
    Trade = 'trade',
    Transfer = 'transfer',
    TransferFee = 'transfer fee',
    TrustFee = 'trust fee',
    UnqualifiedGain = 'unqualified gain',
    Withdrawal = 'withdrawal'
}

/**
 * Value is one of the following: `buy`: Buying an investment `sell`: Selling an investment `cancel`: A cancellation of a pending transaction `cash`: Activity that modifies a cash position `fee`: A fee on the account `transfer`: Activity which modifies a position, but not through buy/sell activity e.g. options exercise, portfolio transfer  For descriptions of possible transaction types and subtypes, see the [Investment transaction types schema](https://plaid.com/docs/api/accounts/#investment-transaction-types-schema).
 * @export
 * @enum {string}
 */
export enum InvestmentTransactionType {
    Buy = 'buy',
    Sell = 'sell',
    Cancel = 'cancel',
    Cash = 'cash',
    Fee = 'fee',
    Transfer = 'transfer'
}

/**
 * Identifying information for transferring holdings to an investments account.
 * @export
 * @interface InvestmentsAuthGetNumbers
 */
// Edited by Plaid, line 9. any to unknown
export interface InvestmentsAuthGetNumbers {
    [key: string]: object | unknown;

    /**
     * 
     * @type {Array<NumbersACATS>}
     * @memberof InvestmentsAuthGetNumbers
     */
    acats?: Array<NumbersACATS>;
}
/**
 * InvestmentsAuthGetRequest defines the request schema for `/investments/auth/get`
 * @export
 * @interface InvestmentsAuthGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface InvestmentsAuthGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof InvestmentsAuthGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof InvestmentsAuthGetRequest
     */
    secret?: string;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof InvestmentsAuthGetRequest
     */
    access_token: string;
    /**
     * 
     * @type {InvestmentsAuthGetRequestOptions}
     * @memberof InvestmentsAuthGetRequest
     */
    options?: InvestmentsAuthGetRequestOptions;
}
/**
 * An optional object to filter `/investments/auth/get` results.
 * @export
 * @interface InvestmentsAuthGetRequestOptions
 */
// Edited by Plaid, line 9. any to unknown
export interface InvestmentsAuthGetRequestOptions {
    /**
     * An array of `account_id`s to retrieve for the Item. An error will be returned if a provided `account_id` is not associated with the Item.
     * @type {Array<string>}
     * @memberof InvestmentsAuthGetRequestOptions
     */
    account_ids?: Array<string>;
}
/**
 * InvestmentsAuthGetResponse defines the response schema for `/investments/auth/get`
 * @export
 * @interface InvestmentsAuthGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface InvestmentsAuthGetResponse {
    [key: string]: object | unknown;

    /**
     * The accounts for which data is being retrieved
     * @type {Array<AccountBase>}
     * @memberof InvestmentsAuthGetResponse
     */
    accounts: Array<AccountBase>;
    /**
     * The holdings belonging to investment accounts associated with the Item. Details of the securities in the holdings are provided in the `securities` field. 
     * @type {Array<Holding>}
     * @memberof InvestmentsAuthGetResponse
     */
    holdings: Array<Holding>;
    /**
     * Objects describing the securities held in the accounts associated with the Item. 
     * @type {Array<Security>}
     * @memberof InvestmentsAuthGetResponse
     */
    securities: Array<Security>;
    /**
     * Information about the account owners for the accounts associated with the Item. 
     * @type {Array<InvestmentsAuthOwner>}
     * @memberof InvestmentsAuthGetResponse
     */
    owners: Array<InvestmentsAuthOwner>;
    /**
     * 
     * @type {InvestmentsAuthGetNumbers}
     * @memberof InvestmentsAuthGetResponse
     */
    numbers: InvestmentsAuthGetNumbers;
    /**
     * 
     * @type {Item}
     * @memberof InvestmentsAuthGetResponse
     */
    item: Item;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof InvestmentsAuthGetResponse
     */
    request_id: string;
}
/**
 * Information on the ownership of an investments account
 * @export
 * @interface InvestmentsAuthOwner
 */
// Edited by Plaid, line 9. any to unknown
export interface InvestmentsAuthOwner {
    [key: string]: object | unknown;

    /**
     * The ID of the account that this identity information pertains to
     * @type {string}
     * @memberof InvestmentsAuthOwner
     */
    account_id?: string;
    /**
     * A list of names associated with the account by the financial institution. In the case of a joint account, Plaid will make a best effort to report the names of all account holders.  If an Item contains multiple accounts with different owner names, some institutions will report all names associated with the Item in each account\'s `names` array.
     * @type {Array<string>}
     * @memberof InvestmentsAuthOwner
     */
    names?: Array<string>;
}
/**
 * Fired when new transactions have been detected on an investment account.
 * @export
 * @interface InvestmentsDefaultUpdateWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface InvestmentsDefaultUpdateWebhook {
    [key: string]: object | unknown;

    /**
     * `INVESTMENTS_TRANSACTIONS`
     * @type {string}
     * @memberof InvestmentsDefaultUpdateWebhook
     */
    webhook_type: string;
    /**
     * `DEFAULT_UPDATE`
     * @type {string}
     * @memberof InvestmentsDefaultUpdateWebhook
     */
    webhook_code: string;
    /**
     * The `item_id` of the Item associated with this webhook, warning, or error
     * @type {string}
     * @memberof InvestmentsDefaultUpdateWebhook
     */
    item_id: string;
    /**
     * 
     * @type {PlaidError}
     * @memberof InvestmentsDefaultUpdateWebhook
     */
    error?: PlaidError | null;
    /**
     * The number of new transactions reported since the last time this webhook was fired.
     * @type {number}
     * @memberof InvestmentsDefaultUpdateWebhook
     */
    new_investments_transactions: number;
    /**
     * The number of canceled transactions reported since the last time this webhook was fired.
     * @type {number}
     * @memberof InvestmentsDefaultUpdateWebhook
     */
    canceled_investments_transactions: number;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof InvestmentsDefaultUpdateWebhook
     */
    environment: WebhookEnvironmentValues;
}
/**
 * InvestmentsHoldingsGetRequest defines the request schema for `/investments/holdings/get`
 * @export
 * @interface InvestmentsHoldingsGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface InvestmentsHoldingsGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof InvestmentsHoldingsGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof InvestmentsHoldingsGetRequest
     */
    secret?: string;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof InvestmentsHoldingsGetRequest
     */
    access_token: string;
    /**
     * 
     * @type {InvestmentHoldingsGetRequestOptions}
     * @memberof InvestmentsHoldingsGetRequest
     */
    options?: InvestmentHoldingsGetRequestOptions;
}
/**
 * InvestmentsHoldingsGetResponse defines the response schema for `/investments/holdings/get`
 * @export
 * @interface InvestmentsHoldingsGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface InvestmentsHoldingsGetResponse {
    [key: string]: object | unknown;

    /**
     * The accounts associated with the Item
     * @type {Array<AccountBase>}
     * @memberof InvestmentsHoldingsGetResponse
     */
    accounts: Array<AccountBase>;
    /**
     * The holdings belonging to investment accounts associated with the Item. Details of the securities in the holdings are provided in the `securities` field. 
     * @type {Array<Holding>}
     * @memberof InvestmentsHoldingsGetResponse
     */
    holdings: Array<Holding>;
    /**
     * Objects describing the securities held in the accounts associated with the Item. 
     * @type {Array<Security>}
     * @memberof InvestmentsHoldingsGetResponse
     */
    securities: Array<Security>;
    /**
     * 
     * @type {Item}
     * @memberof InvestmentsHoldingsGetResponse
     */
    item: Item;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof InvestmentsHoldingsGetResponse
     */
    request_id: string;
}
/**
 * InvestmentsRefreshRequest defines the request schema for `/investments/refresh`
 * @export
 * @interface InvestmentsRefreshRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface InvestmentsRefreshRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof InvestmentsRefreshRequest
     */
    client_id?: string;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof InvestmentsRefreshRequest
     */
    access_token: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof InvestmentsRefreshRequest
     */
    secret?: string;
}
/**
 * InvestmentsRefreshResponse defines the response schema for `/investments/refresh`
 * @export
 * @interface InvestmentsRefreshResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface InvestmentsRefreshResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof InvestmentsRefreshResponse
     */
    request_id: string;
}
/**
 * InvestmentsTransactionsGetRequest defines the request schema for `/investments/transactions/get`
 * @export
 * @interface InvestmentsTransactionsGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface InvestmentsTransactionsGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof InvestmentsTransactionsGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof InvestmentsTransactionsGetRequest
     */
    secret?: string;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof InvestmentsTransactionsGetRequest
     */
    access_token: string;
    /**
     * The earliest date for which to fetch transaction history. Dates should be formatted as YYYY-MM-DD.
     * @type {string}
     * @memberof InvestmentsTransactionsGetRequest
     */
    start_date: string;
    /**
     * The most recent date for which to fetch transaction history. Dates should be formatted as YYYY-MM-DD.
     * @type {string}
     * @memberof InvestmentsTransactionsGetRequest
     */
    end_date: string;
    /**
     * 
     * @type {InvestmentsTransactionsGetRequestOptions}
     * @memberof InvestmentsTransactionsGetRequest
     */
    options?: InvestmentsTransactionsGetRequestOptions;
}
/**
 * An optional object to filter `/investments/transactions/get` results. If provided, must be non-`null`.
 * @export
 * @interface InvestmentsTransactionsGetRequestOptions
 */
// Edited by Plaid, line 9. any to unknown
export interface InvestmentsTransactionsGetRequestOptions {
    /**
     * An array of `account_ids` to retrieve for the Item.
     * @type {Array<string>}
     * @memberof InvestmentsTransactionsGetRequestOptions
     */
    account_ids?: Array<string>;
    /**
     * The number of transactions to fetch. 
     * @type {number}
     * @memberof InvestmentsTransactionsGetRequestOptions
     */
    count?: number;
    /**
     * The number of transactions to skip when fetching transaction history
     * @type {number}
     * @memberof InvestmentsTransactionsGetRequestOptions
     */
    offset?: number;
}
/**
 * InvestmentsTransactionsGetResponse defines the response schema for `/investments/transactions/get`
 * @export
 * @interface InvestmentsTransactionsGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface InvestmentsTransactionsGetResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {Item}
     * @memberof InvestmentsTransactionsGetResponse
     */
    item: Item;
    /**
     * The accounts for which transaction history is being fetched.
     * @type {Array<AccountBase>}
     * @memberof InvestmentsTransactionsGetResponse
     */
    accounts: Array<AccountBase>;
    /**
     * All securities for which there is a corresponding transaction being fetched.
     * @type {Array<Security>}
     * @memberof InvestmentsTransactionsGetResponse
     */
    securities: Array<Security>;
    /**
     * The transactions being fetched
     * @type {Array<InvestmentTransaction>}
     * @memberof InvestmentsTransactionsGetResponse
     */
    investment_transactions: Array<InvestmentTransaction>;
    /**
     * The total number of transactions available within the date range specified. If `total_investment_transactions` is larger than the size of the `transactions` array, more transactions are available and can be fetched via manipulating the `offset` parameter.
     * @type {number}
     * @memberof InvestmentsTransactionsGetResponse
     */
    total_investment_transactions: number;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof InvestmentsTransactionsGetResponse
     */
    request_id: string;
}
/**
 * Specify the list of investments transactions on the account.
 * @export
 * @interface InvestmentsTransactionsOverride
 */
// Edited by Plaid, line 9. any to unknown
export interface InvestmentsTransactionsOverride {
    /**
     * Posting date for the transaction. Must be formatted as an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date.
     * @type {string}
     * @memberof InvestmentsTransactionsOverride
     */
    date: string;
    /**
     * The institution\'s description of the transaction.
     * @type {string}
     * @memberof InvestmentsTransactionsOverride
     */
    name: string;
    /**
     * The number of units of the security involved in this transaction. Must be positive if the type is a buy and negative if the type is a sell.
     * @type {number}
     * @memberof InvestmentsTransactionsOverride
     */
    quantity: number;
    /**
     * The price of the security at which this transaction occurred.
     * @type {number}
     * @memberof InvestmentsTransactionsOverride
     */
    price: number;
    /**
     * The combined value of all fees applied to this transaction.
     * @type {number}
     * @memberof InvestmentsTransactionsOverride
     */
    fees?: number;
    /**
     * The type of the investment transaction. Possible values are: `buy`: Buying an investment `sell`: Selling an investment `cash`: Activity that modifies a cash position `fee`: A fee on the account `transfer`: Activity that modifies a position, but not through buy/sell activity e.g. options exercise, portfolio transfer
     * @type {string}
     * @memberof InvestmentsTransactionsOverride
     */
    type: string;
    /**
     * Either a valid `iso_currency_code` or `unofficial_currency_code`
     * @type {string}
     * @memberof InvestmentsTransactionsOverride
     */
    currency: string;
    /**
     * 
     * @type {SecurityOverride}
     * @memberof InvestmentsTransactionsOverride
     */
    security?: SecurityOverride;
}
/**
 * A binary match indicator specifying whether the country that issued the provided document matches the country that the user separately provided to Plaid.  Note: You can configure whether a `no_match` on `issuing_country` fails the `documentary_verification` by editing your Plaid Template.
 * @export
 * @enum {string}
 */
export enum IssuingCountry {
    Match = 'match',
    NoMatch = 'no_match'
}

/**
 * Metadata about the Item.
 * @export
 * @interface Item
 */
// Edited by Plaid, line 9. any to unknown
export interface Item {
    [key: string]: object | unknown;

    /**
     * The Plaid Item ID. The `item_id` is always unique; linking the same account at the same institution twice will result in two Items with different `item_id` values. Like all Plaid identifiers, the `item_id` is case-sensitive.
     * @type {string}
     * @memberof Item
     */
    item_id: string;
    /**
     * The Plaid Institution ID associated with the Item. Field is `null` for Items created via Same Day Micro-deposits.
     * @type {string}
     * @memberof Item
     */
    institution_id?: string | null;
    /**
     * The URL registered to receive webhooks for the Item.
     * @type {string}
     * @memberof Item
     */
    webhook: string | null;
    /**
     * 
     * @type {PlaidError}
     * @memberof Item
     */
    error: PlaidError | null;
    /**
     * A list of products available for the Item that have not yet been accessed. The contents of this array will be mutually exclusive with `billed_products`.
     * @type {Array<Products>}
     * @memberof Item
     */
    available_products: Array<Products>;
    /**
     * A list of products that have been billed for the Item. The contents of this array will be mutually exclusive with `available_products`. Note - `billed_products` is populated in all environments but only requests in Production are billed. Also note that products that are billed on a pay-per-call basis rather than a pay-per-Item basis, such as `balance`, will not appear here. 
     * @type {Array<Products>}
     * @memberof Item
     */
    billed_products: Array<Products>;
    /**
     * A list of initialized products for the Item. In almost all cases, this will be the same as the `billed_products` field. For some products, it is possible for the product to be initialized on an Item but not yet billed (e.g. Assets, before `/asset_report/create` has been called), in which case the product may appear in `products` but not in `billed_products`. 
     * @type {Array<Products>}
     * @memberof Item
     */
    products?: Array<Products>;
    /**
     * A list of products that have gone through consent collection for the Item. Only present for those enabled in the [Data Transparency](https://plaid.com/docs/link/data-transparency-messaging-migration-guide) beta. If you are not enrolled in Data Transparency, this field is not used. 
     * @type {Array<Products>}
     * @memberof Item
     */
    consented_products?: Array<Products>;
    /**
     * The RFC 3339 timestamp after which the consent provided by the end user will expire. Upon consent expiration, the item will enter the `ITEM_LOGIN_REQUIRED` error state. To circumvent the `ITEM_LOGIN_REQUIRED` error and maintain continuous consent, the end user can reauthenticate via Link’s update mode in advance of the consent expiration time.  Note - This is only relevant for certain OAuth-based institutions. For all other institutions, this field will be null. 
     * @type {string}
     * @memberof Item
     */
    consent_expiration_time: string | null;
    /**
     * Indicates whether an Item requires user interaction to be updated, which can be the case for Items with some forms of two-factor authentication.  `background` - Item can be updated in the background  `user_present_required` - Item requires user interaction to be updated
     * @type {string}
     * @memberof Item
     */
    update_type: ItemUpdateTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ItemUpdateTypeEnum {
    Background = 'background',
    UserPresentRequired = 'user_present_required'
}

/**
 * ItemAccessTokenInvalidateRequest defines the request schema for `/item/access_token/invalidate`
 * @export
 * @interface ItemAccessTokenInvalidateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface ItemAccessTokenInvalidateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof ItemAccessTokenInvalidateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof ItemAccessTokenInvalidateRequest
     */
    secret?: string;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof ItemAccessTokenInvalidateRequest
     */
    access_token: string;
}
/**
 * ItemAccessTokenInvalidateResponse defines the response schema for `/item/access_token/invalidate`
 * @export
 * @interface ItemAccessTokenInvalidateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface ItemAccessTokenInvalidateResponse {
    [key: string]: object | unknown;

    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof ItemAccessTokenInvalidateResponse
     */
    new_access_token: string;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof ItemAccessTokenInvalidateResponse
     */
    request_id: string;
}
/**
 * Request to list a historical log of user consent events.
 * @export
 * @interface ItemActivityListRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface ItemActivityListRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof ItemActivityListRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof ItemActivityListRequest
     */
    secret?: string;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof ItemActivityListRequest
     */
    access_token?: string;
    /**
     * Cursor used for pagination.
     * @type {string}
     * @memberof ItemActivityListRequest
     */
    cursor?: string;
    /**
     * 
     * @type {number}
     * @memberof ItemActivityListRequest
     */
    count?: number;
}
/**
 * Describes a historical log of user consent events.
 * @export
 * @interface ItemActivityListResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface ItemActivityListResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof ItemActivityListResponse
     */
    request_id: string;
    /**
     * A list of activities.
     * @type {Array<Activity>}
     * @memberof ItemActivityListResponse
     */
    activities: Array<Activity>;
    /**
     * An array of objects containing timestamps for the last time each data type was accessed per application.
     * @type {Array<LastDataAccessTimes>}
     * @memberof ItemActivityListResponse
     */
    last_data_access_times: Array<LastDataAccessTimes>;
    /**
     * Cursor used for pagination.
     * @type {string}
     * @memberof ItemActivityListResponse
     */
    cursor?: string;
}
/**
 * Request to list connected applications for a user.
 * @export
 * @interface ItemApplicationListRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface ItemApplicationListRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof ItemApplicationListRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof ItemApplicationListRequest
     */
    secret?: string;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof ItemApplicationListRequest
     */
    access_token?: string | null;
}
/**
 * Describes the connected application for a particular end user.
 * @export
 * @interface ItemApplicationListResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface ItemApplicationListResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof ItemApplicationListResponse
     */
    request_id?: string;
    /**
     * A list of connected applications.
     * @type {Array<ConnectedApplication>}
     * @memberof ItemApplicationListResponse
     */
    applications: Array<ConnectedApplication>;
}
/**
 * User authentication parameters, for clients making a request without an `access_token`. This is only allowed for select clients and will not be supported in the future. Most clients should call /item/import to obtain an access token before making a request.
 * @export
 * @interface ItemApplicationListUserAuth
 */
// Edited by Plaid, line 9. any to unknown
export interface ItemApplicationListUserAuth {
    /**
     * Account username.
     * @type {string}
     * @memberof ItemApplicationListUserAuth
     */
    user_id?: string | null;
    /**
     * Account username hashed by FI.
     * @type {string}
     * @memberof ItemApplicationListUserAuth
     */
    fi_username_hash?: string | null;
}
/**
 * ItemApplicationScopesUpdateRequest defines the request schema for `/item/application/scopes/update`
 * @export
 * @interface ItemApplicationScopesUpdateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface ItemApplicationScopesUpdateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof ItemApplicationScopesUpdateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof ItemApplicationScopesUpdateRequest
     */
    secret?: string;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof ItemApplicationScopesUpdateRequest
     */
    access_token: string;
    /**
     * This field will map to the application ID that is returned from /item/applications/list, or provided to the institution in an oauth redirect.
     * @type {string}
     * @memberof ItemApplicationScopesUpdateRequest
     */
    application_id: string;
    /**
     * 
     * @type {Scopes}
     * @memberof ItemApplicationScopesUpdateRequest
     */
    scopes: Scopes;
    /**
     * When scopes are updated during enrollment, this field must be populated with the state sent to the partner in the OAuth Login URI. This field is required when the context is `ENROLLMENT`.
     * @type {string}
     * @memberof ItemApplicationScopesUpdateRequest
     */
    state?: string;
    /**
     * 
     * @type {ScopesContext}
     * @memberof ItemApplicationScopesUpdateRequest
     */
    context: ScopesContext;
}
/**
 * ItemApplicationScopesUpdateResponse defines the response schema for `/item/application/scopes/update`
 * @export
 * @interface ItemApplicationScopesUpdateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface ItemApplicationScopesUpdateResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof ItemApplicationScopesUpdateResponse
     */
    request_id: string;
}
/**
 * Fired when an error is encountered with an Item. The error can be resolved by having the user go through Link’s update mode.
 * @export
 * @interface ItemErrorWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface ItemErrorWebhook {
    [key: string]: object | unknown;

    /**
     * `ITEM`
     * @type {string}
     * @memberof ItemErrorWebhook
     */
    webhook_type: string;
    /**
     * `ERROR`
     * @type {string}
     * @memberof ItemErrorWebhook
     */
    webhook_code: string;
    /**
     * The `item_id` of the Item associated with this webhook, warning, or error
     * @type {string}
     * @memberof ItemErrorWebhook
     */
    item_id: string;
    /**
     * 
     * @type {PlaidError}
     * @memberof ItemErrorWebhook
     */
    error: PlaidError | null;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof ItemErrorWebhook
     */
    environment: WebhookEnvironmentValues;
}
/**
 * ItemGetRequest defines the request schema for `/item/get`
 * @export
 * @interface ItemGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface ItemGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof ItemGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof ItemGetRequest
     */
    secret?: string;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof ItemGetRequest
     */
    access_token: string;
}
/**
 * ItemGetResponse defines the response schema for `/item/get` and `/item/webhook/update`
 * @export
 * @interface ItemGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface ItemGetResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {Item}
     * @memberof ItemGetResponse
     */
    item: Item;
    /**
     * 
     * @type {ItemStatusNullable}
     * @memberof ItemGetResponse
     */
    status?: ItemStatusNullable | null;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof ItemGetResponse
     */
    request_id: string;
}
/**
 * ItemImportRequest defines the request schema for `/item/import`
 * @export
 * @interface ItemImportRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface ItemImportRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof ItemImportRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof ItemImportRequest
     */
    secret?: string;
    /**
     * Array of product strings
     * @type {Array<Products>}
     * @memberof ItemImportRequest
     */
    products: Array<Products>;
    /**
     * 
     * @type {ItemImportRequestUserAuth}
     * @memberof ItemImportRequest
     */
    user_auth: ItemImportRequestUserAuth;
    /**
     * 
     * @type {ItemImportRequestOptions}
     * @memberof ItemImportRequest
     */
    options?: ItemImportRequestOptions;
}
/**
 * An optional object to configure `/item/import` request.
 * @export
 * @interface ItemImportRequestOptions
 */
// Edited by Plaid, line 9. any to unknown
export interface ItemImportRequestOptions {
    /**
     * Specifies a webhook URL to associate with an Item. Plaid fires a webhook if credentials fail. 
     * @type {string}
     * @memberof ItemImportRequestOptions
     */
    webhook?: string;
}
/**
 * Object of user ID and auth token pair, permitting Plaid to aggregate a user’s accounts
 * @export
 * @interface ItemImportRequestUserAuth
 */
// Edited by Plaid, line 9. any to unknown
export interface ItemImportRequestUserAuth {
    /**
     * Opaque user identifier
     * @type {string}
     * @memberof ItemImportRequestUserAuth
     */
    user_id: string;
    /**
     * Authorization token Plaid will use to aggregate this user’s accounts
     * @type {string}
     * @memberof ItemImportRequestUserAuth
     */
    auth_token: string;
}
/**
 * ItemImportResponse defines the response schema for `/item/import`
 * @export
 * @interface ItemImportResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface ItemImportResponse {
    [key: string]: object | unknown;

    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof ItemImportResponse
     */
    access_token: string;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof ItemImportResponse
     */
    request_id: string;
}
/**
 * Fired when an Item login is repaired and the Item no longer needs to go through update mode. This will occur when the user completed the update mode flow for the Item, either in your application or in another Plaid-connected app. If you have messaging that tells the user to complete the update mode flow (such as in-app banners or out-of-band notifications) you should silence this messaging upon receiving the `LOGIN_REPAIRED` webhook.
 * @export
 * @interface ItemLoginRepairedWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface ItemLoginRepairedWebhook {
    [key: string]: object | unknown;

    /**
     * `ITEM`
     * @type {string}
     * @memberof ItemLoginRepairedWebhook
     */
    webhook_type: string;
    /**
     * `LOGIN_REPAIRED`
     * @type {string}
     * @memberof ItemLoginRepairedWebhook
     */
    webhook_code: string;
    /**
     * The `item_id` of the Item associated with this webhook, warning, or error
     * @type {string}
     * @memberof ItemLoginRepairedWebhook
     */
    item_id: string;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof ItemLoginRepairedWebhook
     */
    environment: WebhookEnvironmentValues;
}
/**
 * Fired once Plaid calculates income from an Item.
 * @export
 * @interface ItemProductReadyWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface ItemProductReadyWebhook {
    [key: string]: object | unknown;

    /**
     * `INCOME`
     * @type {string}
     * @memberof ItemProductReadyWebhook
     */
    webhook_type: string;
    /**
     * `PRODUCT_READY`
     * @type {string}
     * @memberof ItemProductReadyWebhook
     */
    webhook_code: string;
    /**
     * The `item_id` of the Item associated with this webhook, warning, or error
     * @type {string}
     * @memberof ItemProductReadyWebhook
     */
    item_id: string;
    /**
     * 
     * @type {PlaidError}
     * @memberof ItemProductReadyWebhook
     */
    error?: PlaidError | null;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof ItemProductReadyWebhook
     */
    environment: WebhookEnvironmentValues;
}
/**
 * ItemPublicTokenCreateRequest defines the request schema for `/item/public_token/create`
 * @export
 * @interface ItemPublicTokenCreateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface ItemPublicTokenCreateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof ItemPublicTokenCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof ItemPublicTokenCreateRequest
     */
    secret?: string;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof ItemPublicTokenCreateRequest
     */
    access_token: string;
}
/**
 * ItemPublicTokenCreateResponse defines the response schema for `/item/public_token/create`
 * @export
 * @interface ItemPublicTokenCreateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface ItemPublicTokenCreateResponse {
    [key: string]: object | unknown;

    /**
     * A `public_token` for the particular Item corresponding to the specified `access_token`
     * @type {string}
     * @memberof ItemPublicTokenCreateResponse
     */
    public_token: string;
    /**
     * 
     * @type {string}
     * @memberof ItemPublicTokenCreateResponse
     */
    expiration?: string;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof ItemPublicTokenCreateResponse
     */
    request_id: string;
}
/**
 * ItemPublicTokenExchangeRequest defines the request schema for `/item/public_token/exchange`
 * @export
 * @interface ItemPublicTokenExchangeRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface ItemPublicTokenExchangeRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof ItemPublicTokenExchangeRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof ItemPublicTokenExchangeRequest
     */
    secret?: string;
    /**
     * Your `public_token`, obtained from the Link `onSuccess` callback or `/sandbox/item/public_token/create`.
     * @type {string}
     * @memberof ItemPublicTokenExchangeRequest
     */
    public_token: string;
}
/**
 * ItemPublicTokenExchangeResponse defines the response schema for `/item/public_token/exchange`
 * @export
 * @interface ItemPublicTokenExchangeResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface ItemPublicTokenExchangeResponse {
    [key: string]: object | unknown;

    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof ItemPublicTokenExchangeResponse
     */
    access_token: string;
    /**
     * The `item_id` value of the Item associated with the returned `access_token`
     * @type {string}
     * @memberof ItemPublicTokenExchangeResponse
     */
    item_id: string;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof ItemPublicTokenExchangeResponse
     */
    request_id: string;
}
/**
 * ItemRemoveRequest defines the request schema for `/item/remove`
 * @export
 * @interface ItemRemoveRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface ItemRemoveRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof ItemRemoveRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof ItemRemoveRequest
     */
    secret?: string;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof ItemRemoveRequest
     */
    access_token: string;
}
/**
 * ItemRemoveResponse defines the response schema for `/item/remove`
 * @export
 * @interface ItemRemoveResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface ItemRemoveResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof ItemRemoveResponse
     */
    request_id: string;
}
/**
 * An object with information about the status of the Item.
 * @export
 * @interface ItemStatus
 */
// Edited by Plaid, line 9. any to unknown
export interface ItemStatus {
    [key: string]: object | unknown;

    /**
     * 
     * @type {ItemStatusInvestments}
     * @memberof ItemStatus
     */
    investments?: ItemStatusInvestments | null;
    /**
     * 
     * @type {ItemStatusTransactions}
     * @memberof ItemStatus
     */
    transactions?: ItemStatusTransactions | null;
    /**
     * 
     * @type {ItemStatusLastWebhook}
     * @memberof ItemStatus
     */
    last_webhook?: ItemStatusLastWebhook | null;
}
/**
 * Information about the last successful and failed investments update for the Item.
 * @export
 * @interface ItemStatusInvestments
 */
// Edited by Plaid, line 9. any to unknown
export interface ItemStatusInvestments {
    [key: string]: object | unknown;

    /**
     * [ISO 8601](https://wikipedia.org/wiki/ISO_8601) timestamp of the last successful investments update for the Item. The status will update each time Plaid successfully connects with the institution, regardless of whether any new data is available in the update.
     * @type {string}
     * @memberof ItemStatusInvestments
     */
    last_successful_update?: string | null;
    /**
     * [ISO 8601](https://wikipedia.org/wiki/ISO_8601) timestamp of the last failed investments update for the Item. The status will update each time Plaid fails an attempt to connect with the institution, regardless of whether any new data is available in the update.
     * @type {string}
     * @memberof ItemStatusInvestments
     */
    last_failed_update?: string | null;
}
/**
 * Information about the last webhook fired for the Item.
 * @export
 * @interface ItemStatusLastWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface ItemStatusLastWebhook {
    [key: string]: object | unknown;

    /**
     * [ISO 8601](https://wikipedia.org/wiki/ISO_8601) timestamp of when the webhook was fired. 
     * @type {string}
     * @memberof ItemStatusLastWebhook
     */
    sent_at?: string | null;
    /**
     * The last webhook code sent.
     * @type {string}
     * @memberof ItemStatusLastWebhook
     */
    code_sent?: string | null;
}
/**
 * Information about the last successful and failed transactions update for the Item.
 * @export
 * @interface ItemStatusNullable
 */
// Edited by Plaid, line 9. any to unknown
export interface ItemStatusNullable {
    /**
     * 
     * @type {ItemStatusInvestments}
     * @memberof ItemStatusNullable
     */
    investments?: ItemStatusInvestments | null;
    /**
     * 
     * @type {ItemStatusTransactions}
     * @memberof ItemStatusNullable
     */
    transactions?: ItemStatusTransactions | null;
    /**
     * 
     * @type {ItemStatusLastWebhook}
     * @memberof ItemStatusNullable
     */
    last_webhook?: ItemStatusLastWebhook | null;
}
/**
 * Information about the last successful and failed transactions update for the Item.
 * @export
 * @interface ItemStatusTransactions
 */
// Edited by Plaid, line 9. any to unknown
export interface ItemStatusTransactions {
    [key: string]: object | unknown;

    /**
     * [ISO 8601](https://wikipedia.org/wiki/ISO_8601) timestamp of the last successful transactions update for the Item. The status will update each time Plaid successfully connects with the institution, regardless of whether any new data is available in the update.
     * @type {string}
     * @memberof ItemStatusTransactions
     */
    last_successful_update?: string | null;
    /**
     * [ISO 8601](https://wikipedia.org/wiki/ISO_8601) timestamp of the last failed transactions update for the Item. The status will update each time Plaid fails an attempt to connect with the institution, regardless of whether any new data is available in the update.
     * @type {string}
     * @memberof ItemStatusTransactions
     */
    last_failed_update?: string | null;
}
/**
 * ItemWebhookUpdateRequest defines the request schema for `/item/webhook/update`
 * @export
 * @interface ItemWebhookUpdateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface ItemWebhookUpdateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof ItemWebhookUpdateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof ItemWebhookUpdateRequest
     */
    secret?: string;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof ItemWebhookUpdateRequest
     */
    access_token: string;
    /**
     * The new webhook URL to associate with the Item. To remove a webhook from an Item, set to `null`.
     * @type {string}
     * @memberof ItemWebhookUpdateRequest
     */
    webhook?: string | null;
}
/**
 * ItemWebhookUpdateResponse defines the response schema for `/item/webhook/update`
 * @export
 * @interface ItemWebhookUpdateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface ItemWebhookUpdateResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {Item}
     * @memberof ItemWebhookUpdateResponse
     */
    item: Item;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof ItemWebhookUpdateResponse
     */
    request_id: string;
}
/**
 * A JSON Web Key (JWK) that can be used in conjunction with [JWT libraries](https://jwt.io/#libraries-io) to verify Plaid webhooks
 * @export
 * @interface JWKPublicKey
 */
// Edited by Plaid, line 9. any to unknown
export interface JWKPublicKey {
    [key: string]: object | unknown;

    /**
     * The alg member identifies the cryptographic algorithm family used with the key.
     * @type {string}
     * @memberof JWKPublicKey
     */
    alg: string;
    /**
     * The crv member identifies the cryptographic curve used with the key.
     * @type {string}
     * @memberof JWKPublicKey
     */
    crv: string;
    /**
     * The kid (Key ID) member can be used to match a specific key. This can be used, for instance, to choose among a set of keys within the JWK during key rollover.
     * @type {string}
     * @memberof JWKPublicKey
     */
    kid: string;
    /**
     * The kty (key type) parameter identifies the cryptographic algorithm family used with the key, such as RSA or EC.
     * @type {string}
     * @memberof JWKPublicKey
     */
    kty: string;
    /**
     * The use (public key use) parameter identifies the intended use of the public key.
     * @type {string}
     * @memberof JWKPublicKey
     */
    use: string;
    /**
     * The x member contains the x coordinate for the elliptic curve point, provided as a base64url-encoded string of the coordinate\'s big endian representation.
     * @type {string}
     * @memberof JWKPublicKey
     */
    x: string;
    /**
     * The y member contains the y coordinate for the elliptic curve point, provided as a base64url-encoded string of the coordinate\'s big endian representation.
     * @type {string}
     * @memberof JWKPublicKey
     */
    y: string;
    /**
     * The timestamp when the key was created, in Unix time.
     * @type {number}
     * @memberof JWKPublicKey
     */
    created_at: number;
    /**
     * The timestamp when the key expired, in Unix time.
     * @type {number}
     * @memberof JWKPublicKey
     */
    expired_at: number | null;
}
/**
 * A JWT Header, used for webhook validation
 * @export
 * @interface JWTHeader
 */
// Edited by Plaid, line 9. any to unknown
export interface JWTHeader {
    [key: string]: object | unknown;

    /**
     * 
     * @type {string}
     * @memberof JWTHeader
     */
    id: string;
}
/**
 * Result summary object specifying how the `address` field matched.
 * @export
 * @interface KYCCheckAddressSummary
 */
// Edited by Plaid, line 9. any to unknown
export interface KYCCheckAddressSummary {
    [key: string]: object | unknown;

    /**
     * 
     * @type {MatchSummaryCode}
     * @memberof KYCCheckAddressSummary
     */
    summary: MatchSummaryCode;
    /**
     * 
     * @type {POBoxStatus}
     * @memberof KYCCheckAddressSummary
     */
    po_box: POBoxStatus;
    /**
     * 
     * @type {AddressPurposeLabel}
     * @memberof KYCCheckAddressSummary
     */
    type: AddressPurposeLabel;
}
/**
 * Result summary object specifying how the `date_of_birth` field matched.
 * @export
 * @interface KYCCheckDateOfBirthSummary
 */
// Edited by Plaid, line 9. any to unknown
export interface KYCCheckDateOfBirthSummary {
    [key: string]: object | unknown;

    /**
     * 
     * @type {MatchSummaryCode}
     * @memberof KYCCheckDateOfBirthSummary
     */
    summary: MatchSummaryCode;
}
/**
 * Additional information for the `kyc_check` step. This field will be `null` unless `steps.kyc_check` has reached a terminal state of either `success` or `failed`.
 * @export
 * @interface KYCCheckDetails
 */
// Edited by Plaid, line 9. any to unknown
export interface KYCCheckDetails {
    [key: string]: object | unknown;

    /**
     * The outcome status for the associated Identity Verification attempt\'s `kyc_check` step. This field will always have the same value as `steps.kyc_check`.
     * @type {string}
     * @memberof KYCCheckDetails
     */
    status: string;
    /**
     * 
     * @type {KYCCheckAddressSummary}
     * @memberof KYCCheckDetails
     */
    address: KYCCheckAddressSummary;
    /**
     * 
     * @type {KYCCheckNameSummary}
     * @memberof KYCCheckDetails
     */
    name: KYCCheckNameSummary;
    /**
     * 
     * @type {KYCCheckDateOfBirthSummary}
     * @memberof KYCCheckDetails
     */
    date_of_birth: KYCCheckDateOfBirthSummary;
    /**
     * 
     * @type {KYCCheckIDNumberSummary}
     * @memberof KYCCheckDetails
     */
    id_number: KYCCheckIDNumberSummary;
    /**
     * 
     * @type {KYCCheckPhoneSummary}
     * @memberof KYCCheckDetails
     */
    phone_number: KYCCheckPhoneSummary;
}
/**
 * Result summary object specifying how the `id_number` field matched.
 * @export
 * @interface KYCCheckIDNumberSummary
 */
// Edited by Plaid, line 9. any to unknown
export interface KYCCheckIDNumberSummary {
    [key: string]: object | unknown;

    /**
     * 
     * @type {MatchSummaryCode}
     * @memberof KYCCheckIDNumberSummary
     */
    summary: MatchSummaryCode;
}
/**
 * Result summary object specifying how the `name` field matched.
 * @export
 * @interface KYCCheckNameSummary
 */
// Edited by Plaid, line 9. any to unknown
export interface KYCCheckNameSummary {
    [key: string]: object | unknown;

    /**
     * 
     * @type {MatchSummaryCode}
     * @memberof KYCCheckNameSummary
     */
    summary: MatchSummaryCode;
}
/**
 * Result summary object specifying how the `phone` field matched.
 * @export
 * @interface KYCCheckPhoneSummary
 */
// Edited by Plaid, line 9. any to unknown
export interface KYCCheckPhoneSummary {
    [key: string]: object | unknown;

    /**
     * 
     * @type {MatchSummaryCode}
     * @memberof KYCCheckPhoneSummary
     */
    summary: MatchSummaryCode;
}
/**
 * Describes the last time each datatype was accessed by an application.
 * @export
 * @interface LastDataAccessTimes
 */
// Edited by Plaid, line 9. any to unknown
export interface LastDataAccessTimes {
    [key: string]: object | unknown;

    /**
     * ID of the application accessing data.
     * @type {string}
     * @memberof LastDataAccessTimes
     */
    application_id: string;
    /**
     * The last time account_balance_info was accessed by this application in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format in UTC. null if never accessed.
     * @type {string}
     * @memberof LastDataAccessTimes
     */
    account_balance_info: string | null;
    /**
     * The last time account_routing_number was accessed by this application in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format in UTC. null if never accessed.
     * @type {string}
     * @memberof LastDataAccessTimes
     */
    account_routing_number: string | null;
    /**
     * The last time contact_details was accessed by this application in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format in UTC. null if never accessed.
     * @type {string}
     * @memberof LastDataAccessTimes
     */
    contact_details: string | null;
    /**
     * The last time transactions was accessed by this application in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format in UTC. null if never accessed.
     * @type {string}
     * @memberof LastDataAccessTimes
     */
    transactions: string | null;
    /**
     * The last time credit_and_loans was accessed by this application in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format in UTC. null if never accessed.
     * @type {string}
     * @memberof LastDataAccessTimes
     */
    credit_and_loans: string | null;
    /**
     * The last time investments was accessed by this application in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format in UTC. null if never accessed.
     * @type {string}
     * @memberof LastDataAccessTimes
     */
    investments: string | null;
    /**
     * The last time payroll_info was accessed by this application in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format in UTC. null if never accessed.
     * @type {string}
     * @memberof LastDataAccessTimes
     */
    payroll_info: string | null;
    /**
     * The last time transaction_risk_info was accessed by this application in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format in UTC. null if never accessed.
     * @type {string}
     * @memberof LastDataAccessTimes
     */
    transaction_risk_info: string | null;
}
/**
 * The webhook of type `LIABILITIES` and code `DEFAULT_UPDATE` will be fired when new or updated liabilities have been detected on a liabilities item.
 * @export
 * @interface LiabilitiesDefaultUpdateWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface LiabilitiesDefaultUpdateWebhook {
    /**
     * `LIABILITIES`
     * @type {string}
     * @memberof LiabilitiesDefaultUpdateWebhook
     */
    webhook_type: string;
    /**
     * `DEFAULT_UPDATE`
     * @type {string}
     * @memberof LiabilitiesDefaultUpdateWebhook
     */
    webhook_code: string;
    /**
     * The `item_id` of the Item associated with this webhook, warning, or error
     * @type {string}
     * @memberof LiabilitiesDefaultUpdateWebhook
     */
    item_id: string;
    /**
     * 
     * @type {PlaidError}
     * @memberof LiabilitiesDefaultUpdateWebhook
     */
    error: PlaidError | null;
    /**
     * An array of `account_id`\'s for accounts that contain new liabilities.\'
     * @type {Array<string>}
     * @memberof LiabilitiesDefaultUpdateWebhook
     */
    account_ids_with_new_liabilities: Array<string>;
    /**
     * An object with keys of `account_id`\'s that are mapped to their respective liabilities fields that changed.  Example: `{ \"XMBvvyMGQ1UoLbKByoMqH3nXMj84ALSdE5B58\": [\"past_amount_due\"] }` 
     * @type {{ [key: string]: Array<string>; }}
     * @memberof LiabilitiesDefaultUpdateWebhook
     */
    account_ids_with_updated_liabilities: { [key: string]: Array<string>; };
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof LiabilitiesDefaultUpdateWebhook
     */
    environment: WebhookEnvironmentValues;
}
/**
 * LiabilitiesGetRequest defines the request schema for `/liabilities/get`
 * @export
 * @interface LiabilitiesGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface LiabilitiesGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof LiabilitiesGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof LiabilitiesGetRequest
     */
    secret?: string;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof LiabilitiesGetRequest
     */
    access_token: string;
    /**
     * 
     * @type {LiabilitiesGetRequestOptions}
     * @memberof LiabilitiesGetRequest
     */
    options?: LiabilitiesGetRequestOptions;
}
/**
 * An optional object to filter `/liabilities/get` results. If provided, `options` cannot be null.
 * @export
 * @interface LiabilitiesGetRequestOptions
 */
// Edited by Plaid, line 9. any to unknown
export interface LiabilitiesGetRequestOptions {
    /**
     * A list of accounts to retrieve for the Item.  An error will be returned if a provided `account_id` is not associated with the Item
     * @type {Array<string>}
     * @memberof LiabilitiesGetRequestOptions
     */
    account_ids?: Array<string>;
}
/**
 * LiabilitiesGetResponse defines the response schema for `/liabilities/get`
 * @export
 * @interface LiabilitiesGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface LiabilitiesGetResponse {
    [key: string]: object | unknown;

    /**
     * An array of accounts associated with the Item
     * @type {Array<AccountBase>}
     * @memberof LiabilitiesGetResponse
     */
    accounts: Array<AccountBase>;
    /**
     * 
     * @type {Item}
     * @memberof LiabilitiesGetResponse
     */
    item: Item;
    /**
     * 
     * @type {LiabilitiesObject}
     * @memberof LiabilitiesGetResponse
     */
    liabilities: LiabilitiesObject;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof LiabilitiesGetResponse
     */
    request_id: string;
}
/**
 * An object containing liability accounts
 * @export
 * @interface LiabilitiesObject
 */
// Edited by Plaid, line 9. any to unknown
export interface LiabilitiesObject {
    [key: string]: object | unknown;

    /**
     * The credit accounts returned.
     * @type {Array<CreditCardLiability>}
     * @memberof LiabilitiesObject
     */
    credit: Array<CreditCardLiability> | null;
    /**
     * The mortgage accounts returned.
     * @type {Array<MortgageLiability>}
     * @memberof LiabilitiesObject
     */
    mortgage: Array<MortgageLiability> | null;
    /**
     * The student loan accounts returned.
     * @type {Array<StudentLoan>}
     * @memberof LiabilitiesObject
     */
    student: Array<StudentLoan> | null;
}
/**
 * Used to configure Sandbox test data for the Liabilities product
 * @export
 * @interface LiabilityOverride
 */
// Edited by Plaid, line 9. any to unknown
export interface LiabilityOverride {
    [key: string]: object | unknown;

    /**
     * The type of the liability object, either `credit` or `student`. Mortgages are not currently supported in the custom Sandbox.
     * @type {string}
     * @memberof LiabilityOverride
     */
    type: string;
    /**
     * The purchase APR percentage value. For simplicity, this is the only interest rate used to calculate interest charges. Can only be set if `type` is `credit`.
     * @type {number}
     * @memberof LiabilityOverride
     */
    purchase_apr: number;
    /**
     * The cash APR percentage value. Can only be set if `type` is `credit`.
     * @type {number}
     * @memberof LiabilityOverride
     */
    cash_apr: number;
    /**
     * The balance transfer APR percentage value. Can only be set if `type` is `credit`.
     * @type {number}
     * @memberof LiabilityOverride
     */
    balance_transfer_apr: number;
    /**
     * The special APR percentage value. Can only be set if `type` is `credit`.
     * @type {number}
     * @memberof LiabilityOverride
     */
    special_apr: number;
    /**
     * Override the `last_payment_amount` field. Can only be set if `type` is `credit`.
     * @type {number}
     * @memberof LiabilityOverride
     */
    last_payment_amount: number;
    /**
     * Override the `minimum_payment_amount` field. Can only be set if `type` is `credit` or `student`.
     * @type {number}
     * @memberof LiabilityOverride
     */
    minimum_payment_amount: number;
    /**
     * Override the `is_overdue` field
     * @type {boolean}
     * @memberof LiabilityOverride
     */
    is_overdue: boolean;
    /**
     * The date on which the loan was initially lent, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format. Can only be set if `type` is `student`.
     * @type {string}
     * @memberof LiabilityOverride
     */
    origination_date: string;
    /**
     * The original loan principal. Can only be set if `type` is `student`.
     * @type {number}
     * @memberof LiabilityOverride
     */
    principal: number;
    /**
     * The interest rate on the loan as a percentage. Can only be set if `type` is `student`.
     * @type {number}
     * @memberof LiabilityOverride
     */
    nominal_apr: number;
    /**
     * If set, interest capitalization begins at the given number of months after loan origination. By default interest is never capitalized. Can only be set if `type` is `student`.
     * @type {number}
     * @memberof LiabilityOverride
     */
    interest_capitalization_grace_period_months: number;
    /**
     * 
     * @type {StudentLoanRepaymentModel}
     * @memberof LiabilityOverride
     */
    repayment_model: StudentLoanRepaymentModel;
    /**
     * Override the `expected_payoff_date` field. Can only be set if `type` is `student`.
     * @type {string}
     * @memberof LiabilityOverride
     */
    expected_payoff_date: string;
    /**
     * Override the `guarantor` field. Can only be set if `type` is `student`.
     * @type {string}
     * @memberof LiabilityOverride
     */
    guarantor: string;
    /**
     * Override the `is_federal` field. Can only be set if `type` is `student`.
     * @type {boolean}
     * @memberof LiabilityOverride
     */
    is_federal: boolean;
    /**
     * Override the `loan_name` field. Can only be set if `type` is `student`.
     * @type {string}
     * @memberof LiabilityOverride
     */
    loan_name: string;
    /**
     * 
     * @type {StudentLoanStatus}
     * @memberof LiabilityOverride
     */
    loan_status: StudentLoanStatus;
    /**
     * Override the `payment_reference_number` field. Can only be set if `type` is `student`.
     * @type {string}
     * @memberof LiabilityOverride
     */
    payment_reference_number: string;
    /**
     * 
     * @type {PSLFStatus}
     * @memberof LiabilityOverride
     */
    pslf_status: PSLFStatus;
    /**
     * Override the `repayment_plan.description` field. Can only be set if `type` is `student`.
     * @type {string}
     * @memberof LiabilityOverride
     */
    repayment_plan_description: string;
    /**
     * Override the `repayment_plan.type` field. Can only be set if `type` is `student`. Possible values are: `\"extended graduated\"`, `\"extended standard\"`, `\"graduated\"`, `\"income-contingent repayment\"`, `\"income-based repayment\"`, `\"interest only\"`, `\"other\"`, `\"pay as you earn\"`, `\"revised pay as you earn\"`, or `\"standard\"`.
     * @type {string}
     * @memberof LiabilityOverride
     */
    repayment_plan_type: string;
    /**
     * Override the `sequence_number` field. Can only be set if `type` is `student`.
     * @type {string}
     * @memberof LiabilityOverride
     */
    sequence_number: string;
    /**
     * 
     * @type {Address}
     * @memberof LiabilityOverride
     */
    servicer_address: Address;
}
/**
 * Information related to the callback from the hosted Link session.
 * @export
 * @interface LinkCallbackMetadata
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkCallbackMetadata {
    [key: string]: object | unknown;

    /**
     * 
     * @type {LinkDeliveryWebhookCallbackType}
     * @memberof LinkCallbackMetadata
     */
    callback_type?: LinkDeliveryWebhookCallbackType;
    /**
     * 
     * @type {LinkEventName}
     * @memberof LinkCallbackMetadata
     */
    event_name?: LinkEventName;
    /**
     * Indicates where in the flow the Link user exited
     * @type {string}
     * @memberof LinkCallbackMetadata
     */
    status?: string;
    /**
     * A unique identifier associated with a user\'s actions and events through the Link flow. Include this identifier when opening a support ticket for faster turnaround.
     * @type {string}
     * @memberof LinkCallbackMetadata
     */
    link_session_id?: string;
    /**
     * The request ID for the last request made by Link. This can be shared with Plaid Support to expedite investigation.
     * @type {string}
     * @memberof LinkCallbackMetadata
     */
    request_id?: string;
    /**
     * 
     * @type {LinkDeliveryInstitution}
     * @memberof LinkCallbackMetadata
     */
    institution?: LinkDeliveryInstitution;
    /**
     * A list of accounts attached to the connected Item. If Account Select is enabled via the developer dashboard, accounts will only include selected accounts.
     * @type {Array<LinkDeliveryAccount>}
     * @memberof LinkCallbackMetadata
     */
    accounts?: Array<LinkDeliveryAccount>;
}
/**
 * Information related to account attached to the connected Item
 * @export
 * @interface LinkDeliveryAccount
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkDeliveryAccount {
    [key: string]: object | unknown;

    /**
     * The Plaid `account_id`
     * @type {string}
     * @memberof LinkDeliveryAccount
     */
    id?: string;
    /**
     * The official account name
     * @type {string}
     * @memberof LinkDeliveryAccount
     */
    name?: string;
    /**
     * The last 2-4 alphanumeric characters of an account\'s official account number. Note that the mask may be non-unique between an Item\'s accounts. It may also not match the mask that the bank displays to the user.
     * @type {string}
     * @memberof LinkDeliveryAccount
     */
    mask?: string;
    /**
     * The account type. See the [Account schema](https://plaid.com/docs/api/accounts/#account-type-schema) for a full list of possible values
     * @type {string}
     * @memberof LinkDeliveryAccount
     */
    type?: string;
    /**
     * The account subtype. See the [Account schema](https://plaid.com/docs/api/accounts/#account-type-schema) for a full list of possible values
     * @type {string}
     * @memberof LinkDeliveryAccount
     */
    subtype?: string;
    /**
     * 
     * @type {LinkDeliveryVerificationStatus}
     * @memberof LinkDeliveryAccount
     */
    verification_status?: LinkDeliveryVerificationStatus;
    /**
     * If micro-deposit verification is being used, indicates whether the account being verified is a `business` or `personal` account.
     * @type {string}
     * @memberof LinkDeliveryAccount
     */
    class_type?: string;
}
/**
 * Webhook containing metadata proxied over from Link callback e.g `onEvent`, `onExit`, `onSuccess`.
 * @export
 * @interface LinkDeliveryCallbackWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkDeliveryCallbackWebhook {
    [key: string]: object | unknown;

    /**
     * `LINK_DELIVERY`
     * @type {string}
     * @memberof LinkDeliveryCallbackWebhook
     */
    webhook_type: string;
    /**
     * `LINK_CALLBACK`
     * @type {string}
     * @memberof LinkDeliveryCallbackWebhook
     */
    webhook_code: string;
    /**
     * The ID of the Hosted Link session.
     * @type {string}
     * @memberof LinkDeliveryCallbackWebhook
     */
    link_delivery_session_id: string;
    /**
     * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
     * @type {string}
     * @memberof LinkDeliveryCallbackWebhook
     */
    timestamp: string;
    /**
     * 
     * @type {PlaidError}
     * @memberof LinkDeliveryCallbackWebhook
     */
    error?: PlaidError | null;
    /**
     * 
     * @type {LinkCallbackMetadata}
     * @memberof LinkDeliveryCallbackWebhook
     */
    link_callback_metadata: LinkCallbackMetadata;
}
/**
 * The communication method containing both the type and address to send the URL.
 * @export
 * @interface LinkDeliveryCommunicationMethod
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkDeliveryCommunicationMethod {
    /**
     * 
     * @type {LinkDeliveryDeliveryMethod}
     * @memberof LinkDeliveryCommunicationMethod
     */
    method?: LinkDeliveryDeliveryMethod;
    /**
     * The phone number / email address that Hosted Link sessions are delivered to. Phone numbers must be in E.164 format.
     * @type {string}
     * @memberof LinkDeliveryCommunicationMethod
     */
    address?: string;
}
/**
 * LinkDeliveryCreateRequest defines the request schema for `/link_delivery/create`
 * @export
 * @interface LinkDeliveryCreateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkDeliveryCreateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof LinkDeliveryCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof LinkDeliveryCreateRequest
     */
    secret?: string;
    /**
     * A `link_token` from a previous invocation of `/link/token/create`.
     * @type {string}
     * @memberof LinkDeliveryCreateRequest
     */
    link_token: string;
    /**
     * 
     * @type {LinkDeliveryOptions}
     * @memberof LinkDeliveryCreateRequest
     */
    options?: LinkDeliveryOptions;
}
/**
 * LinkDeliveryCreateResponse defines the response schema for `/link_delivery/create`
 * @export
 * @interface LinkDeliveryCreateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkDeliveryCreateResponse {
    [key: string]: object | unknown;

    /**
     * The URL to the Hosted Link session, which will be delivered by the specified delivery method.
     * @type {string}
     * @memberof LinkDeliveryCreateResponse
     */
    link_delivery_url: string;
    /**
     * The ID for the Hosted Link session. Same as the `link_token` string excluding the \"link-{env}-\" prefix.
     * @type {string}
     * @memberof LinkDeliveryCreateResponse
     */
    link_delivery_session_id: string;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof LinkDeliveryCreateResponse
     */
    request_id: string;
}
/**
 * The delivery method to be used to deliver the Hosted Link session URL.  `SMS`: The URL will be delivered through SMS  `EMAIL`: The URL will be delivered through email
 * @export
 * @enum {string}
 */
export enum LinkDeliveryDeliveryMethod {
    Sms = 'SMS',
    Email = 'EMAIL'
}

/**
 * LinkDeliveryGetRequest defines the request schema for `/link_delivery/get`
 * @export
 * @interface LinkDeliveryGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkDeliveryGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof LinkDeliveryGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof LinkDeliveryGetRequest
     */
    secret?: string;
    /**
     * The ID for the Hosted Link session from a previous invocation of `/link_delivery/create`.
     * @type {string}
     * @memberof LinkDeliveryGetRequest
     */
    link_delivery_session_id: string;
}
/**
 * LinkDeliveryGetRequest defines the response schema for `/link_delivery/get`
 * @export
 * @interface LinkDeliveryGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkDeliveryGetResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {LinkDeliverySessionStatus}
     * @memberof LinkDeliveryGetResponse
     */
    status: LinkDeliverySessionStatus;
    /**
     * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the time the given Hosted Link session was created at.
     * @type {string}
     * @memberof LinkDeliveryGetResponse
     */
    created_at: string;
    /**
     * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the time the given Hosted Link session was completed at.
     * @type {string}
     * @memberof LinkDeliveryGetResponse
     */
    completed_at?: string | null;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof LinkDeliveryGetResponse
     */
    request_id: string;
    /**
     * An array of access tokens associated with the Hosted Link session.
     * @type {Array<string>}
     * @memberof LinkDeliveryGetResponse
     */
    access_tokens?: Array<string> | null;
    /**
     * An array of `item_id`s associated with the Hosted Link session.
     * @type {Array<string>}
     * @memberof LinkDeliveryGetResponse
     */
    item_ids?: Array<string> | null;
}
/**
 * Information related to the financial institution.
 * @export
 * @interface LinkDeliveryInstitution
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkDeliveryInstitution {
    [key: string]: object | unknown;

    /**
     * The full institution name, such as \'Wells Fargo\'
     * @type {string}
     * @memberof LinkDeliveryInstitution
     */
    name?: string;
    /**
     * The Plaid institution identifier
     * @type {string}
     * @memberof LinkDeliveryInstitution
     */
    institution_id?: string;
}
/**
 * Information related to the related to the delivery of the link session to users
 * @export
 * @interface LinkDeliveryMetadata
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkDeliveryMetadata {
    [key: string]: object | unknown;

    /**
     * 
     * @type {LinkDeliveryWebhookCommunicationMethod}
     * @memberof LinkDeliveryMetadata
     */
    communication_method?: LinkDeliveryWebhookCommunicationMethod;
    /**
     * 
     * @type {LinkDeliveryWebhookDeliveryStatus}
     * @memberof LinkDeliveryMetadata
     */
    delivery_status?: LinkDeliveryWebhookDeliveryStatus;
}
/**
 * Optional metadata related to the Hosted Link session
 * @export
 * @interface LinkDeliveryOptions
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkDeliveryOptions {
    /**
     * 
     * @type {LinkDeliveryRecipient}
     * @memberof LinkDeliveryOptions
     */
    recipient?: LinkDeliveryRecipient;
}
/**
 * Metadata related to the recipient. If the information required to populate this field is not available, leave it blank.
 * @export
 * @interface LinkDeliveryRecipient
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkDeliveryRecipient {
    /**
     * The list of communication methods to send the Hosted Link session URL to. If delivery is not required, leave this field blank.
     * @type {Array<LinkDeliveryCommunicationMethod>}
     * @memberof LinkDeliveryRecipient
     */
    communication_methods?: Array<LinkDeliveryCommunicationMethod>;
    /**
     * First name of the recipient. Will be used in the body of the email / text (if configured). If this information is not available, leave this field blank.
     * @type {string}
     * @memberof LinkDeliveryRecipient
     */
    first_name?: string;
}
/**
 * The status of the given Hosted Link session.  `CREATED`: The session is created but not yet accessed by the user  `OPENED`: The session is opened by the user but not yet completed  `COMPLETED`: The session has been completed by the user  `EXPIRED`: The session has expired
 * @export
 * @enum {string}
 */
export enum LinkDeliverySessionStatus {
    Created = 'CREATED',
    Opened = 'OPENED',
    Completed = 'COMPLETED',
    Expired = 'EXPIRED'
}

/**
 * Indicates an Item\'s micro-deposit-based verification status.
 * @export
 * @enum {string}
 */
export enum LinkDeliveryVerificationStatus {
    AutomaticallyVerified = 'automatically_verified',
    PendingAutomaticVerification = 'pending_automatic_verification',
    PendingManualVerification = 'pending_manual_verification',
    ManuallyVerified = 'manually_verified',
    VerificationExpired = 'verification_expired',
    VerificationFailed = 'verification_failed'
}

/**
 * The type of Link callback event
 * @export
 * @enum {string}
 */
export enum LinkDeliveryWebhookCallbackType {
    Success = 'ON_SUCCESS',
    Event = 'ON_EVENT',
    Exit = 'ON_EXIT'
}

/**
 * The communication method used to deliver the hosted link session
 * @export
 * @enum {string}
 */
export enum LinkDeliveryWebhookCommunicationMethod {
    Sms = 'SMS',
    Email = 'EMAIL'
}

/**
 * The status of the delivery of the hosted link to the user
 * @export
 * @enum {string}
 */
export enum LinkDeliveryWebhookDeliveryStatus {
    Success = 'SUCCESS',
    Failure = 'FAILURE'
}

/**
 * An event that occurred while the user was going through Link
 * @export
 * @interface LinkEvent
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkEvent {
    [key: string]: object | unknown;

    /**
     * Event name
     * @type {string}
     * @memberof LinkEvent
     */
    event_name: string;
    /**
     * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
     * @type {string}
     * @memberof LinkEvent
     */
    timestamp: string;
    /**
     * UUID that can be used to deduplicate events
     * @type {string}
     * @memberof LinkEvent
     */
    event_id: string;
}
/**
 * Metadata about an event that occured while the user was going through Link
 * @export
 * @interface LinkEventMetadata
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkEventMetadata {
    [key: string]: object | unknown;

    /**
     * The error code that the user encountered. Emitted by `ERROR`, `EXIT`.
     * @type {string}
     * @memberof LinkEventMetadata
     */
    error_code?: string;
    /**
     * The error message that the user encountered. Emitted by: `ERROR`, `EXIT`.
     * @type {string}
     * @memberof LinkEventMetadata
     */
    error_message?: string;
    /**
     * The error type that the user encountered. Emitted by: `ERROR`, `EXIT`.
     * @type {string}
     * @memberof LinkEventMetadata
     */
    error_type?: string;
    /**
     * The status key indicates the point at which the user exited the Link flow. Emitted by: `EXIT`.
     * @type {string}
     * @memberof LinkEventMetadata
     */
    exit_status?: string;
    /**
     * The ID of the selected institution. Emitted by: all events.
     * @type {string}
     * @memberof LinkEventMetadata
     */
    institution_id?: string;
    /**
     * The name of the selected institution. Emitted by: all events.
     * @type {string}
     * @memberof LinkEventMetadata
     */
    institution_name?: string;
    /**
     * The query used to search for institutions. Emitted by: `SEARCH_INSTITUTION`.
     * @type {string}
     * @memberof LinkEventMetadata
     */
    institution_search_query?: string;
    /**
     * The request ID for the last request made by Link. This can be shared with Plaid Support to expedite investigation. Emitted by: all events.
     * @type {string}
     * @memberof LinkEventMetadata
     */
    request_id: string;
    /**
     * If set, the user has encountered one of the following MFA types: code, device, questions, selections. Emitted by: `SUBMIT_MFA` and `TRANSITION_VIEW` when view_name is `MFA`.
     * @type {string}
     * @memberof LinkEventMetadata
     */
    mfa_type?: string;
    /**
     * The name of the view that is being transitioned to. Emitted by: `TRANSITION_VIEW`.
     * @type {string}
     * @memberof LinkEventMetadata
     */
    view_name?: string;
    /**
     * Either the verification method for a matched institution selected by the user or the Auth Type Select flow type selected by the user. If selection is used to describe selected verification method, then possible values are `phoneotp` or `password`;  if selection is used to describe the selected Auth Type Select flow, then possible values are `flow_type_manual` or `flow_type_instant`. Emitted by: `MATCHED_SELECT_VERIFY_METHOD` and `SELECT_AUTH_TYPE`.
     * @type {string}
     * @memberof LinkEventMetadata
     */
    selection?: string;
    /**
     * The name of the selected brand.
     * @type {string}
     * @memberof LinkEventMetadata
     */
    brand_name?: string;
    /**
     * The reason this institution was matched, which will be either `returning_user` or `routing_number`. Emitted by: `MATCHED_SELECT_INSTITUTION`.
     * @type {string}
     * @memberof LinkEventMetadata
     */
    match_reason?: string;
    /**
     * The routing number submitted by user at the micro-deposits routing number pane. Emitted by `SUBMIT_ROUTING_NUMBER`.
     * @type {string}
     * @memberof LinkEventMetadata
     */
    routing_number?: string;
    /**
     * The account number mask extracted from the user-provided account number. If the user-inputted account number is four digits long, `account_number_mask` is empty. Emitted by `SUBMIT_ACCOUNT_NUMBER`.
     * @type {string}
     * @memberof LinkEventMetadata
     */
    account_number_mask?: string;
}
/**
 * A string representing the event that has just occurred in the Link flow.
 * @export
 * @enum {string}
 */
export enum LinkEventName {
    BankIncomeInsightsCompleted = 'BANK_INCOME_INSIGHTS_COMPLETED',
    CloseOauth = 'CLOSE_OAUTH',
    Error = 'ERROR',
    Exit = 'EXIT',
    FailOauth = 'FAIL_OAUTH',
    Handoff = 'HANDOFF',
    Open = 'OPEN',
    OpenMyPlaid = 'OPEN_MY_PLAID',
    OpenOauth = 'OPEN_OAUTH',
    SearchInstitution = 'SEARCH_INSTITUTION',
    SelectAuthType = 'SELECT_AUTH_TYPE',
    SelectBrand = 'SELECT_BRAND',
    SelectDegradedInstitution = 'SELECT_DEGRADED_INSTITUTION',
    SelectDownInstitution = 'SELECT_DOWN_INSTITUTION',
    SelectInstitution = 'SELECT_INSTITUTION',
    SubmitAccountNumber = 'SUBMIT_ACCOUNT_NUMBER',
    SubmitCredentials = 'SUBMIT_CREDENTIALS',
    SubmitDocuments = 'SUBMIT_DOCUMENTS',
    SubmitDocumentsError = 'SUBMIT_DOCUMENTS_ERROR',
    SubmitDocumentsSuccess = 'SUBMIT_DOCUMENTS_SUCCESS',
    SubmitMfa = 'SUBMIT_MFA',
    SubmitRoutingNumber = 'SUBMIT_ROUTING_NUMBER',
    TransitionView = 'TRANSITION_VIEW',
    ViewDataTypes = 'VIEW_DATA_TYPES'
}

/**
 * Contains a summary of the events from a link session
 * @export
 * @interface LinkEventsWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkEventsWebhook {
    [key: string]: object | unknown;

    /**
     * `LINK`
     * @type {string}
     * @memberof LinkEventsWebhook
     */
    webhook_type: string;
    /**
     * `EVENTS`
     * @type {string}
     * @memberof LinkEventsWebhook
     */
    webhook_code: string;
    /**
     * The link events emitted during the link session
     * @type {Array<LinkEvent>}
     * @memberof LinkEventsWebhook
     */
    events: Array<LinkEvent>;
    /**
     * An identifier for the link session these events occurred in
     * @type {string}
     * @memberof LinkEventsWebhook
     */
    link_session_id: string;
    /**
     * The link token used to create the link session these events are from
     * @type {string}
     * @memberof LinkEventsWebhook
     */
    link_token: string;
}
/**
 * LinkOAuthCorrelationIdExchangeRequest defines the request schema for `/link/oauth/correlation_id/exchange`
 * @export
 * @interface LinkOAuthCorrelationIdExchangeRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkOAuthCorrelationIdExchangeRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof LinkOAuthCorrelationIdExchangeRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof LinkOAuthCorrelationIdExchangeRequest
     */
    secret?: string;
    /**
     * A `link_correlation_id` from a received OAuth redirect URI callback
     * @type {string}
     * @memberof LinkOAuthCorrelationIdExchangeRequest
     */
    link_correlation_id: string;
}
/**
 * LinkOAuthCorrelationIdExchangeResponse defines the response schema for `/link/oauth/correlation_id/exchange`
 * @export
 * @interface LinkOAuthCorrelationIdExchangeResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkOAuthCorrelationIdExchangeResponse {
    [key: string]: object | unknown;

    /**
     * The `link_token` associated to the given `link_correlation_id`, which can be used to re-initialize Link.
     * @type {string}
     * @memberof LinkOAuthCorrelationIdExchangeResponse
     */
    link_token: string;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof LinkOAuthCorrelationIdExchangeResponse
     */
    request_id: string;
}
/**
 * By default, Link will provide limited account filtering: it will only display Institutions that are compatible with all products supplied in the `products` parameter of `/link/token/create`, and, if `auth` is specified in the `products` array, will also filter out accounts other than `checking` and `savings` accounts on the Account Select pane. You can further limit the accounts shown in Link by using `account_filters` to specify the account subtypes to be shown in Link. Only the specified subtypes will be shown. This filtering applies to both the Account Select view (if enabled) and the Institution Select view. Institutions that do not support the selected subtypes will be omitted from Link. To indicate that all subtypes should be shown, use the value `\"all\"`. If the `account_filters` filter is used, any account type for which a filter is not specified will be entirely omitted from Link. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).  For institutions using OAuth, the filter will not affect the list of accounts shown by the bank in the OAuth window. 
 * @export
 * @interface LinkTokenAccountFilters
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkTokenAccountFilters {
    [key: string]: object | unknown;

    /**
     * 
     * @type {DepositoryFilter}
     * @memberof LinkTokenAccountFilters
     */
    depository?: DepositoryFilter;
    /**
     * 
     * @type {CreditFilter}
     * @memberof LinkTokenAccountFilters
     */
    credit?: CreditFilter;
    /**
     * 
     * @type {LoanFilter}
     * @memberof LinkTokenAccountFilters
     */
    loan?: LoanFilter;
    /**
     * 
     * @type {InvestmentFilter}
     * @memberof LinkTokenAccountFilters
     */
    investment?: InvestmentFilter;
}
/**
 * A filter to apply to `credit`-type accounts
 * @export
 * @interface LinkTokenCreateCreditFilter
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkTokenCreateCreditFilter {
    /**
     * An array of account subtypes to display in Link. If not specified, all account subtypes will be shown. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema). 
     * @type {Array<CreditAccountSubtype>}
     * @memberof LinkTokenCreateCreditFilter
     */
    account_subtypes?: Array<CreditAccountSubtype>;
}
/**
 * A filter to apply to `depository`-type accounts
 * @export
 * @interface LinkTokenCreateDepositoryFilter
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkTokenCreateDepositoryFilter {
    /**
     * An array of account subtypes to display in Link. If not specified, all account subtypes will be shown. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema). 
     * @type {Array<DepositoryAccountSubtype>}
     * @memberof LinkTokenCreateDepositoryFilter
     */
    account_subtypes?: Array<DepositoryAccountSubtype>;
}
/**
 * A map containing data used to highlight institutions in Link.
 * @export
 * @interface LinkTokenCreateInstitutionData
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkTokenCreateInstitutionData {
    /**
     * The routing number of the bank to highlight.
     * @type {string}
     * @memberof LinkTokenCreateInstitutionData
     */
    routing_number?: string;
}
/**
 * A filter to apply to `investment`-type accounts (or `brokerage`-type accounts for API versions 2018-05-22 and earlier).
 * @export
 * @interface LinkTokenCreateInvestmentFilter
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkTokenCreateInvestmentFilter {
    /**
     * An array of account subtypes to display in Link. If not specified, all account subtypes will be shown. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema). 
     * @type {Array<InvestmentAccountSubtype>}
     * @memberof LinkTokenCreateInvestmentFilter
     */
    account_subtypes?: Array<InvestmentAccountSubtype>;
}
/**
 * A filter to apply to `loan`-type accounts
 * @export
 * @interface LinkTokenCreateLoanFilter
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkTokenCreateLoanFilter {
    /**
     * An array of account subtypes to display in Link. If not specified, all account subtypes will be shown. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema). 
     * @type {Array<LoanAccountSubtype>}
     * @memberof LinkTokenCreateLoanFilter
     */
    account_subtypes?: Array<LoanAccountSubtype>;
}
/**
 * LinkTokenCreateRequest defines the request schema for `/link/token/create`
 * @export
 * @interface LinkTokenCreateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkTokenCreateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof LinkTokenCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof LinkTokenCreateRequest
     */
    secret?: string;
    /**
     * The name of your application, as it should be displayed in Link. Maximum length of 30 characters. If a value longer than 30 characters is provided, Link will display \"This Application\" instead.
     * @type {string}
     * @memberof LinkTokenCreateRequest
     */
    client_name: string;
    /**
     * The language that Link should be displayed in. When initializing with Identity Verification, this field is not used; for more details, see [Identity Verification supported languages](https://www.plaid.com/docs/identity-verification/#supported-languages).  Supported languages are: - Danish (`\'da\'`) - Dutch (`\'nl\'`) - English (`\'en\'`) - Estonian (`\'et\'`) - French (`\'fr\'`) - German (`\'de\'`) - Italian (`\'it\'`) - Latvian (`\'lv\'`) - Lithuanian (`\'lt\'`) - Norwegian (`\'no\'`) - Polish (`\'pl\'`) - Portuguese (`\'pt\'`) - Romanian (`\'ro\'`) - Spanish (`\'es\'`) - Swedish (`\'se\'`)  When using a Link customization, the language configured here must match the setting in the customization, or the customization will not be applied.
     * @type {string}
     * @memberof LinkTokenCreateRequest
     */
    language: string;
    /**
     * Specify an array of Plaid-supported country codes using the ISO-3166-1 alpha-2 country code standard. Institutions from all listed countries will be shown. For a complete mapping of supported products by country, see https://plaid.com/global/.  If Link is launched with multiple country codes, only products that you are enabled for in all countries will be used by Link. Note that while all countries are enabled by default in Sandbox and Development, in Production only US and Canada are enabled by default. Access to European institutions requires additional compliance steps. To request access to European institutions in the Production environment, [file a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access) via the Plaid dashboard. If you initialize with a European country code, your users will see the European consent panel during the Link flow.  If using a Link customization, make sure the country codes in the customization match those specified in `country_codes`, or the customization may not be applied.  If using the Auth features Instant Match, Same-day Micro-deposits, or Automated Micro-deposits, `country_codes` must be set to `[\'US\']`.
     * @type {Array<CountryCode>}
     * @memberof LinkTokenCreateRequest
     */
    country_codes: Array<CountryCode>;
    /**
     * 
     * @type {LinkTokenCreateRequestUser}
     * @memberof LinkTokenCreateRequest
     */
    user: LinkTokenCreateRequestUser;
    /**
     * List of Plaid product(s) you wish to use. If launching Link in update mode, should be omitted (unless you are using update mode to add Income or Assets to an Item); required otherwise.  `balance` is *not* a valid value, the Balance product does not require explicit initialization and will automatically be initialized when any other product is initialized.  The products specified here will determine which institutions will be available to your users in Link. Only institutions that support *all* requested products can be selected; a if a user attempts to select an institution that does not support a listed product, a \"Connectivity not supported\" error message will appear in Link. To maximize the number of institutions available, initialize Link with the minimal product set required for your use case. Additional products can be included via the [`required_if_supported_products`](https://plaid.com/docs/api/tokens/#link-token-create-request-required-if-supported-products) field, or can be initialized by calling the endpoint after obtaining an access token. For details and exceptions, see [Choosing when to initialize products](https://plaid.com/docs/link/initializing-products/).  Note that, unless you have opted to disable Instant Match support, institutions that support Instant Match will also be shown in Link if `auth` is specified as a product, even though these institutions do not contain `auth` in their product array.  In Production, you will be billed for each product that you specify when initializing Link. Note that a product cannot be removed from an Item once the Item has been initialized with that product. To stop billing on an Item for subscription-based products, such as Liabilities, Investments, and Transactions, remove the Item via `/item/remove`.
     * @type {Array<Products>}
     * @memberof LinkTokenCreateRequest
     */
    products?: Array<Products>;
    /**
     * (Beta) This field has no effect unless you are participating in the [Data Transparency](https://plaid.com/docs/link/data-transparency-messaging-migration-guide) beta program. List of additional Plaid product(s) you wish to collect consent for. These products will not be billed until you start using them by calling the relevant endpoints.  `balance` is *not* a valid value, the Balance product does not require explicit initialization and will automatically have consent collected.  Institutions that do not support these products will still be shown in Link
     * @type {Array<Products>}
     * @memberof LinkTokenCreateRequest
     */
    additional_consented_products?: Array<Products>;
    /**
     * List of Plaid product(s) you wish to use only if the institution and account(s) selected by the user support the product. Institutions that do not support these products will still be shown in Link. The products will only be extracted and billed if the user selects an institution and account type that supports them.  There should be no overlap between `products` and `required_if_supported_products`. The `products` array must have at least one product.  For more details on using this feature, see [Required if Supported Products](https://www.plaid.com/docs/link/initializing-products/#required-if-supported-products).
     * @type {Array<Products>}
     * @memberof LinkTokenCreateRequest
     */
    required_if_supported_products?: Array<Products>;
    /**
     * The destination URL to which any webhooks should be sent. Note that webhooks for Payment Initiation (e-wallet transactions only), Transfer, Bank Transfer (including Auth micro-deposit notification webhooks) and Identity Verification are configured via the Dashboard instead.
     * @type {string}
     * @memberof LinkTokenCreateRequest
     */
    webhook?: string;
    /**
     * The `access_token` associated with the Item to update or reference, used when updating, modifying, or accessing an existing `access_token`. Used when launching Link in update mode, when completing the Same-day (manual) Micro-deposit flow, or (optionally) when initializing Link for a returning user as part of the Transfer UI flow.
     * @type {string}
     * @memberof LinkTokenCreateRequest
     */
    access_token?: string;
    /**
     * The name of the Link customization from the Plaid Dashboard to be applied to Link. If not specified, the `default` customization will be used. When using a Link customization, the language in the customization must match the language selected via the `language` parameter, and the countries in the customization should match the country codes selected via `country_codes`.
     * @type {string}
     * @memberof LinkTokenCreateRequest
     */
    link_customization_name?: string;
    /**
     * A URI indicating the destination where a user should be forwarded after completing the Link flow; used to support OAuth authentication flows when launching Link in the browser or via a webview. The `redirect_uri` should not contain any query parameters. When used in Production or Development, must be an https URI. To specify any subdomain, use `*` as a wildcard character, e.g. `https://_*.example.com/oauth.html`. Note that any redirect URI must also be added to the Allowed redirect URIs list in the [developer dashboard](https://dashboard.plaid.com/team/api). If initializing on Android, `android_package_name` must be specified instead and `redirect_uri` should be left blank.
     * @type {string}
     * @memberof LinkTokenCreateRequest
     */
    redirect_uri?: string;
    /**
     * The name of your app\'s Android package. Required if using the `link_token` to initialize Link on Android. Any package name specified here must also be added to the Allowed Android package names setting on the [developer dashboard](https://dashboard.plaid.com/team/api). When creating a `link_token` for initializing Link on other platforms, `android_package_name` must be left blank and `redirect_uri` should be used instead.
     * @type {string}
     * @memberof LinkTokenCreateRequest
     */
    android_package_name?: string;
    /**
     * 
     * @type {LinkTokenCreateInstitutionData}
     * @memberof LinkTokenCreateRequest
     */
    institution_data?: LinkTokenCreateInstitutionData;
    /**
     * 
     * @type {LinkTokenAccountFilters}
     * @memberof LinkTokenCreateRequest
     */
    account_filters?: LinkTokenAccountFilters;
    /**
     * 
     * @type {LinkTokenEUConfig}
     * @memberof LinkTokenCreateRequest
     */
    eu_config?: LinkTokenEUConfig;
    /**
     * Used for certain Europe-only configurations, as well as certain legacy use cases in other regions.
     * @type {string}
     * @memberof LinkTokenCreateRequest
     */
    institution_id?: string;
    /**
     * 
     * @type {LinkTokenCreateRequestPaymentInitiation}
     * @memberof LinkTokenCreateRequest
     */
    payment_initiation?: LinkTokenCreateRequestPaymentInitiation;
    /**
     * 
     * @type {LinkTokenCreateRequestDepositSwitch}
     * @memberof LinkTokenCreateRequest
     */
    deposit_switch?: LinkTokenCreateRequestDepositSwitch;
    /**
     * 
     * @type {LinkTokenCreateRequestEmployment}
     * @memberof LinkTokenCreateRequest
     */
    employment?: LinkTokenCreateRequestEmployment;
    /**
     * 
     * @type {LinkTokenCreateRequestIncomeVerification}
     * @memberof LinkTokenCreateRequest
     */
    income_verification?: LinkTokenCreateRequestIncomeVerification;
    /**
     * 
     * @type {LinkTokenCreateRequestAuth}
     * @memberof LinkTokenCreateRequest
     */
    auth?: LinkTokenCreateRequestAuth;
    /**
     * 
     * @type {LinkTokenCreateRequestTransfer}
     * @memberof LinkTokenCreateRequest
     */
    transfer?: LinkTokenCreateRequestTransfer;
    /**
     * 
     * @type {LinkTokenCreateRequestUpdate}
     * @memberof LinkTokenCreateRequest
     */
    update?: LinkTokenCreateRequestUpdate;
    /**
     * 
     * @type {LinkTokenCreateRequestIdentityVerification}
     * @memberof LinkTokenCreateRequest
     */
    identity_verification?: LinkTokenCreateRequestIdentityVerification;
    /**
     * A user token generated using `/user/create`. Any Item created during the Link session will be associated with the user.
     * @type {string}
     * @memberof LinkTokenCreateRequest
     */
    user_token?: string;
    /**
     * 
     * @type {LinkTokenInvestments}
     * @memberof LinkTokenCreateRequest
     */
    investments?: LinkTokenInvestments;
    /**
     * 
     * @type {LinkTokenInvestmentsAuth}
     * @memberof LinkTokenCreateRequest
     */
    investments_auth?: LinkTokenInvestmentsAuth;
}
/**
 * By default, Link will only display account types that are compatible with all products supplied in the `products` parameter of `/link/token/create`. You can further limit the accounts shown in Link by using `account_filters` to specify the account subtypes to be shown in Link. Only the specified subtypes will be shown. This filtering applies to both the Account Select view (if enabled) and the Institution Select view. Institutions that do not support the selected subtypes will be omitted from Link. To indicate that all subtypes should be shown, use the value `\"all\"`. If the `account_filters` filter is used, any account type for which a filter is not specified will be entirely omitted from Link.  For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).  For institutions using OAuth, the filter will not affect the list of institutions or accounts shown by the bank in the OAuth window. 
 * @export
 * @interface LinkTokenCreateRequestAccountSubtypes
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkTokenCreateRequestAccountSubtypes {
    /**
     * 
     * @type {LinkTokenCreateDepositoryFilter}
     * @memberof LinkTokenCreateRequestAccountSubtypes
     */
    depository?: LinkTokenCreateDepositoryFilter;
    /**
     * 
     * @type {LinkTokenCreateCreditFilter}
     * @memberof LinkTokenCreateRequestAccountSubtypes
     */
    credit?: LinkTokenCreateCreditFilter;
    /**
     * 
     * @type {LinkTokenCreateLoanFilter}
     * @memberof LinkTokenCreateRequestAccountSubtypes
     */
    loan?: LinkTokenCreateLoanFilter;
    /**
     * 
     * @type {LinkTokenCreateInvestmentFilter}
     * @memberof LinkTokenCreateRequestAccountSubtypes
     */
    investment?: LinkTokenCreateInvestmentFilter;
}
/**
 * Specifies options for initializing Link for use with the Auth product. This field can be used to enable or disable extended Auth flows for the resulting Link session. Omitting any field will result in a default that can be configured by your account manager.
 * @export
 * @interface LinkTokenCreateRequestAuth
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkTokenCreateRequestAuth {
    /**
     * Specifies whether Auth Type Select is enabled for the Link session, allowing the end user to choose between linking instantly or manually prior to selecting their financial institution. Note that this can only be true if `same_day_microdeposits_enabled` is set to true.
     * @type {boolean}
     * @memberof LinkTokenCreateRequestAuth
     */
    auth_type_select_enabled?: boolean;
    /**
     * Specifies whether the Link session is enabled for the Automated Micro-deposits flow.
     * @type {boolean}
     * @memberof LinkTokenCreateRequestAuth
     */
    automated_microdeposits_enabled?: boolean;
    /**
     * Specifies whether the Link session is enabled for the Instant Match flow. As of November 2022, Instant Match will be enabled by default. Instant Match can be disabled by setting this field to `false`.
     * @type {boolean}
     * @memberof LinkTokenCreateRequestAuth
     */
    instant_match_enabled?: boolean;
    /**
     * Specifies whether the Link session is enabled for the Same Day Micro-deposits flow.
     * @type {boolean}
     * @memberof LinkTokenCreateRequestAuth
     */
    same_day_microdeposits_enabled?: boolean;
    /**
     * Specifies what type of Reroute to Credentials pane should be used in the Link session for the Same Day Micro-deposits flow.
     * @type {string}
     * @memberof LinkTokenCreateRequestAuth
     */
    reroute_to_credentials?: LinkTokenCreateRequestAuthRerouteToCredentialsEnum;
    /**
     * This field has been deprecated in favor of `auth_type_select_enabled`.
     * @type {string}
     * @memberof LinkTokenCreateRequestAuth
     * @deprecated
     */
    flow_type?: LinkTokenCreateRequestAuthFlowTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum LinkTokenCreateRequestAuthRerouteToCredentialsEnum {
    Off = 'OFF',
    Optional = 'OPTIONAL',
    Forced = 'FORCED'
}
/**
    * @export
    * @enum {string}
    */
export enum LinkTokenCreateRequestAuthFlowTypeEnum {
    FlexibleAuth = 'FLEXIBLE_AUTH'
}

/**
 * Specifies options for initializing Link for use with the Deposit Switch (beta) product. This field is required if `deposit_switch` is included in the `products` array.
 * @export
 * @interface LinkTokenCreateRequestDepositSwitch
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkTokenCreateRequestDepositSwitch {
    /**
     * The `deposit_switch_id` provided by the `/deposit_switch/create` endpoint.
     * @type {string}
     * @memberof LinkTokenCreateRequestDepositSwitch
     */
    deposit_switch_id: string;
}
/**
 * Specifies options for initializing Link for use with the Employment product. This field is required if `employment` is included in the `products` array.
 * @export
 * @interface LinkTokenCreateRequestEmployment
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkTokenCreateRequestEmployment {
    /**
     * The types of source employment data that users will be permitted to share. Options include `bank` and `payroll`. Currently you can only specify one of these options.
     * @type {Array<EmploymentSourceType>}
     * @memberof LinkTokenCreateRequestEmployment
     */
    employment_source_types?: Array<EmploymentSourceType>;
    /**
     * 
     * @type {LinkTokenCreateRequestEmploymentBankIncome}
     * @memberof LinkTokenCreateRequestEmployment
     */
    bank_employment?: LinkTokenCreateRequestEmploymentBankIncome;
}
/**
 * Specifies options for initializing Link for use with Bank Employment. This field is required if `employment` is included in the `products` array and `bank` is specified in `employment_source_types`.
 * @export
 * @interface LinkTokenCreateRequestEmploymentBankIncome
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkTokenCreateRequestEmploymentBankIncome {
    /**
     * The number of days of data to request for the Bank Employment product.
     * @type {number}
     * @memberof LinkTokenCreateRequestEmploymentBankIncome
     */
    days_requested: number;
}
/**
 * Specifies option for initializing Link for use with the Identity Verification product.
 * @export
 * @interface LinkTokenCreateRequestIdentityVerification
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkTokenCreateRequestIdentityVerification {
    /**
     * ID of the associated Identity Verification template.
     * @type {string}
     * @memberof LinkTokenCreateRequestIdentityVerification
     */
    template_id: string;
    /**
     * 
     * @type {boolean}
     * @memberof LinkTokenCreateRequestIdentityVerification
     */
    consent?: boolean;
    /**
     * A flag specifying whether the end user has already agreed to a privacy policy specifying that their data will be shared with Plaid for verification purposes.  If `gave_consent` is set to `true`, the `accept_tos` step will be marked as `skipped` and the end user\'s session will start at the next step requirement.
     * @type {boolean}
     * @memberof LinkTokenCreateRequestIdentityVerification
     */
    gave_consent?: boolean;
}
/**
 * Specifies options for initializing Link for use with the Income product. This field is required if `income_verification` is included in the `products` array.
 * @export
 * @interface LinkTokenCreateRequestIncomeVerification
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkTokenCreateRequestIncomeVerification {
    /**
     * The `income_verification_id` of the verification instance, as provided by `/income/verification/create`.
     * @type {string}
     * @memberof LinkTokenCreateRequestIncomeVerification
     * @deprecated
     */
    income_verification_id?: string;
    /**
     * The `asset_report_id` of an asset report associated with the user, as provided by `/asset_report/create`. Providing an `asset_report_id` is optional and can be used to verify the user through a streamlined flow. If provided, the bank linking flow will be skipped.
     * @type {string}
     * @memberof LinkTokenCreateRequestIncomeVerification
     */
    asset_report_id?: string;
    /**
     * The ID of a precheck created with `/income/verification/precheck`. Will be used to improve conversion of the income verification flow by streamlining the Link interface presented to the end user.
     * @type {string}
     * @memberof LinkTokenCreateRequestIncomeVerification
     */
    precheck_id?: string;
    /**
     * An array of access tokens corresponding to Items that a user has previously connected with. Data from these institutions will be cross-referenced with document data received during the Document Income flow to help verify that the uploaded documents are accurate. If the `transactions` product was not initialized for these Items during link, it will be initialized after this Link session.  This field should only be used with the `payroll` income source type.
     * @type {Array<string>}
     * @memberof LinkTokenCreateRequestIncomeVerification
     */
    access_tokens?: Array<string>;
    /**
     * The types of source income data that users will be permitted to share. Options include `bank` and `payroll`. Currently you can only specify one of these options.
     * @type {Array<IncomeVerificationSourceType>}
     * @memberof LinkTokenCreateRequestIncomeVerification
     */
    income_source_types?: Array<IncomeVerificationSourceType>;
    /**
     * 
     * @type {LinkTokenCreateRequestIncomeVerificationBankIncome}
     * @memberof LinkTokenCreateRequestIncomeVerification
     */
    bank_income?: LinkTokenCreateRequestIncomeVerificationBankIncome;
    /**
     * 
     * @type {LinkTokenCreateRequestIncomeVerificationPayrollIncome}
     * @memberof LinkTokenCreateRequestIncomeVerification
     */
    payroll_income?: LinkTokenCreateRequestIncomeVerificationPayrollIncome;
    /**
     * A list of user stated income sources
     * @type {Array<LinkTokenCreateRequestUserStatedIncomeSource>}
     * @memberof LinkTokenCreateRequestIncomeVerification
     */
    stated_income_sources?: Array<LinkTokenCreateRequestUserStatedIncomeSource>;
}
/**
 * Specifies options for initializing Link for use with Bank Income. This field is required if `income_verification` is included in the `products` array and `bank` is specified in `income_source_types`.
 * @export
 * @interface LinkTokenCreateRequestIncomeVerificationBankIncome
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkTokenCreateRequestIncomeVerificationBankIncome {
    /**
     * The number of days of data to request for the Bank Income product
     * @type {number}
     * @memberof LinkTokenCreateRequestIncomeVerificationBankIncome
     */
    days_requested: number;
    /**
     * Whether to enable multiple Items to be added in the Link session
     * @type {boolean}
     * @memberof LinkTokenCreateRequestIncomeVerificationBankIncome
     */
    enable_multiple_items?: boolean | null;
}
/**
 * Specifies options for initializing Link for use with Payroll Income.
 * @export
 * @interface LinkTokenCreateRequestIncomeVerificationPayrollIncome
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkTokenCreateRequestIncomeVerificationPayrollIncome {
    /**
     * The types of payroll income verification to enable for the Link session. If none are specified, then users will see both document and digital payroll income.
     * @type {Array<IncomeVerificationPayrollFlowType>}
     * @memberof LinkTokenCreateRequestIncomeVerificationPayrollIncome
     */
    flow_types?: Array<IncomeVerificationPayrollFlowType> | null;
    /**
     * An identifier to indicate whether the income verification Link token will be used for an update or not
     * @type {boolean}
     * @memberof LinkTokenCreateRequestIncomeVerificationPayrollIncome
     */
    is_update_mode?: boolean;
    /**
     * Uniquely identify a payroll income item to update with. It should only be used for update mode.
     * @type {string}
     * @memberof LinkTokenCreateRequestIncomeVerificationPayrollIncome
     */
    item_id_to_update?: string | null;
}
/**
 * Specifies options for initializing Link for use with the Payment Initiation (Europe) product. This field is required if `payment_initiation` is included in the `products` array. Either `payment_id` or `consent_id` must be provided.
 * @export
 * @interface LinkTokenCreateRequestPaymentInitiation
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkTokenCreateRequestPaymentInitiation {
    /**
     * The `payment_id` provided by the `/payment_initiation/payment/create` endpoint.
     * @type {string}
     * @memberof LinkTokenCreateRequestPaymentInitiation
     */
    payment_id?: string;
    /**
     * The `consent_id` provided by the `/payment_initiation/consent/create` endpoint.
     * @type {string}
     * @memberof LinkTokenCreateRequestPaymentInitiation
     */
    consent_id?: string;
}
/**
 * Specifies options for initializing Link for use with the Transfer product.
 * @export
 * @interface LinkTokenCreateRequestTransfer
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkTokenCreateRequestTransfer {
    /**
     * The `id` returned by the `/transfer/intent/create` endpoint.
     * @type {string}
     * @memberof LinkTokenCreateRequestTransfer
     */
    intent_id?: string;
    /**
     * The `payment_profile_token` returned by the `/payment_profile/create` endpoint.
     * @type {string}
     * @memberof LinkTokenCreateRequestTransfer
     */
    payment_profile_token?: string;
}
/**
 * Specifies options for initializing Link for [update mode](https://plaid.com/docs/link/update-mode).
 * @export
 * @interface LinkTokenCreateRequestUpdate
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkTokenCreateRequestUpdate {
    /**
     * If `true`, enables [update mode with Account Select](https://plaid.com/docs/link/update-mode/#using-update-mode-to-request-new-accounts).
     * @type {boolean}
     * @memberof LinkTokenCreateRequestUpdate
     */
    account_selection_enabled?: boolean;
}
/**
 * An object specifying information about the end user who will be linking their account.
 * @export
 * @interface LinkTokenCreateRequestUser
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkTokenCreateRequestUser {
    /**
     * A unique ID representing the end user. Typically this will be a user ID number from your application. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`. It is currently used as a means of searching logs for the given user in the Plaid Dashboard.
     * @type {string}
     * @memberof LinkTokenCreateRequestUser
     */
    client_user_id: string;
    /**
     * The user\'s full legal name, used for [micro-deposit based verification flows](https://plaid.com/docs/auth/coverage/). For a small number of customers on legacy flows, providing this field is required to enable micro-deposit-based flows. For all other customers, this field is optional, but providing the user\'s name in this field when using micro-deposit-based verification will enable certain risk checks and can reduce micro-deposit fraud.
     * @type {string}
     * @memberof LinkTokenCreateRequestUser
     */
    legal_name?: string;
    /**
     * 
     * @type {IdentityVerificationRequestUserName}
     * @memberof LinkTokenCreateRequestUser
     */
    name?: IdentityVerificationRequestUserName;
    /**
     * The user\'s phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. This field is optional, but required to enable the [returning user experience](https://plaid.com/docs/link/returning-user). Can also be used to prefill Link fields when used with Identity Verification.
     * @type {string}
     * @memberof LinkTokenCreateRequestUser
     */
    phone_number?: string;
    /**
     * The date and time the phone number was verified in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDThh:mm:ssZ`). This was previously an optional field used in the [returning user experience](https://plaid.com/docs/link/returning-user). This field is no longer required to enable the returning user experience.   Only pass a verification time for a phone number that you have verified. If you have performed verification but don’t have the time, you may supply a signal value of the start of the UNIX epoch.   Example: `2020-01-01T00:00:00Z` 
     * @type {string}
     * @memberof LinkTokenCreateRequestUser
     * @deprecated
     */
    phone_number_verified_time?: string | null;
    /**
     * The user\'s email address. This field is optional, but required to enable the [pre-authenticated returning user flow](https://plaid.com/docs/link/returning-user/#pre-authenticated-rux). Can also be used to prefill Link fields when used with Identity Verification.
     * @type {string}
     * @memberof LinkTokenCreateRequestUser
     */
    email_address?: string;
    /**
     * The date and time the email address was verified in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDThh:mm:ssZ`). This was previously an optional field used in the [returning user experience](https://plaid.com/docs/link/returning-user). This field is no longer required to enable the returning user experience.   Only pass a verification time for an email address that you have verified. If you have performed verification but don’t have the time, you may supply a signal value of the start of the UNIX epoch.   Example: `2020-01-01T00:00:00Z`
     * @type {string}
     * @memberof LinkTokenCreateRequestUser
     * @deprecated
     */
    email_address_verified_time?: string | null;
    /**
     * Deprecated and not currently used, use the `id_number` field instead.
     * @type {string}
     * @memberof LinkTokenCreateRequestUser
     * @deprecated
     */
    ssn?: string;
    /**
     * To be provided in the format \"yyyy-mm-dd\". Can be used to prefill Link fields when used with Identity Verification.
     * @type {string}
     * @memberof LinkTokenCreateRequestUser
     */
    date_of_birth?: string | null;
    /**
     * 
     * @type {UserAddress}
     * @memberof LinkTokenCreateRequestUser
     */
    address?: UserAddress;
    /**
     * 
     * @type {UserIDNumber}
     * @memberof LinkTokenCreateRequestUser
     */
    id_number?: UserIDNumber;
}
/**
 * Specifies user stated income sources for the Income product
 * @export
 * @interface LinkTokenCreateRequestUserStatedIncomeSource
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkTokenCreateRequestUserStatedIncomeSource {
    /**
     * The employer corresponding to an income source specified by the user
     * @type {string}
     * @memberof LinkTokenCreateRequestUserStatedIncomeSource
     */
    employer?: string;
    /**
     * 
     * @type {UserStatedIncomeSourceCategory}
     * @memberof LinkTokenCreateRequestUserStatedIncomeSource
     */
    category?: UserStatedIncomeSourceCategory;
    /**
     * The income amount paid per cycle for a specified income source
     * @type {number}
     * @memberof LinkTokenCreateRequestUserStatedIncomeSource
     */
    pay_per_cycle?: number;
    /**
     * The income amount paid annually for a specified income source
     * @type {number}
     * @memberof LinkTokenCreateRequestUserStatedIncomeSource
     */
    pay_annual?: number;
    /**
     * 
     * @type {UserStatedIncomeSourcePayType}
     * @memberof LinkTokenCreateRequestUserStatedIncomeSource
     */
    pay_type?: UserStatedIncomeSourcePayType;
    /**
     * 
     * @type {UserStatedIncomeSourceFrequency}
     * @memberof LinkTokenCreateRequestUserStatedIncomeSource
     */
    pay_frequency?: UserStatedIncomeSourceFrequency;
}
/**
 * LinkTokenCreateResponse defines the response schema for `/link/token/create`
 * @export
 * @interface LinkTokenCreateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkTokenCreateResponse {
    [key: string]: object | unknown;

    /**
     * A `link_token`, which can be supplied to Link in order to initialize it and receive a `public_token`, which can be exchanged for an `access_token`.
     * @type {string}
     * @memberof LinkTokenCreateResponse
     */
    link_token: string;
    /**
     * The expiration date for the `link_token`, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format. A `link_token` created to generate a `public_token` that will be exchanged for a new `access_token` expires after 4 hours. A `link_token` created for an existing Item (such as when updating an existing `access_token` by launching Link in update mode) expires after 30 minutes.
     * @type {string}
     * @memberof LinkTokenCreateResponse
     */
    expiration: string;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof LinkTokenCreateResponse
     */
    request_id: string;
}
/**
 * Configuration parameters for EU flows
 * @export
 * @interface LinkTokenEUConfig
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkTokenEUConfig {
    /**
     * If `true`, open Link without an initial UI. Defaults to `false`.
     * @type {boolean}
     * @memberof LinkTokenEUConfig
     */
    headless?: boolean;
}
/**
 * An object specifying the arguments originally provided to the `/link/token/create` call.
 * @export
 * @interface LinkTokenGetMetadataResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkTokenGetMetadataResponse {
    [key: string]: object | unknown;

    /**
     * The `products` specified in the `/link/token/create` call.
     * @type {Array<Products>}
     * @memberof LinkTokenGetMetadataResponse
     */
    initial_products: Array<Products>;
    /**
     * The `webhook` specified in the `/link/token/create` call.
     * @type {string}
     * @memberof LinkTokenGetMetadataResponse
     */
    webhook: string | null;
    /**
     * The `country_codes` specified in the `/link/token/create` call.
     * @type {Array<CountryCode>}
     * @memberof LinkTokenGetMetadataResponse
     */
    country_codes: Array<CountryCode>;
    /**
     * The `language` specified in the `/link/token/create` call.
     * @type {string}
     * @memberof LinkTokenGetMetadataResponse
     */
    language: string | null;
    /**
     * 
     * @type {LinkTokenCreateInstitutionData}
     * @memberof LinkTokenGetMetadataResponse
     */
    institution_data?: LinkTokenCreateInstitutionData;
    /**
     * 
     * @type {AccountFiltersResponse}
     * @memberof LinkTokenGetMetadataResponse
     */
    account_filters?: AccountFiltersResponse;
    /**
     * The `redirect_uri` specified in the `/link/token/create` call.
     * @type {string}
     * @memberof LinkTokenGetMetadataResponse
     */
    redirect_uri: string | null;
    /**
     * The `client_name` specified in the `/link/token/create` call.
     * @type {string}
     * @memberof LinkTokenGetMetadataResponse
     */
    client_name: string | null;
}
/**
 * LinkTokenGetRequest defines the request schema for `/link/token/get`
 * @export
 * @interface LinkTokenGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkTokenGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof LinkTokenGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof LinkTokenGetRequest
     */
    secret?: string;
    /**
     * A `link_token` from a previous invocation of `/link/token/create`
     * @type {string}
     * @memberof LinkTokenGetRequest
     */
    link_token: string;
}
/**
 * LinkTokenGetResponse defines the response schema for `/link/token/get`
 * @export
 * @interface LinkTokenGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkTokenGetResponse {
    [key: string]: object | unknown;

    /**
     * A `link_token`, which can be supplied to Link in order to initialize it and receive a `public_token`, which can be exchanged for an `access_token`.
     * @type {string}
     * @memberof LinkTokenGetResponse
     */
    link_token: string;
    /**
     * The creation timestamp for the `link_token`, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
     * @type {string}
     * @memberof LinkTokenGetResponse
     */
    created_at: string | null;
    /**
     * The expiration timestamp for the `link_token`, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
     * @type {string}
     * @memberof LinkTokenGetResponse
     */
    expiration: string | null;
    /**
     * 
     * @type {LinkTokenGetMetadataResponse}
     * @memberof LinkTokenGetResponse
     */
    metadata: LinkTokenGetMetadataResponse;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof LinkTokenGetResponse
     */
    request_id: string;
}
/**
 * Configuration parameters for the Investments product
 * @export
 * @interface LinkTokenInvestments
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkTokenInvestments {
    /**
     * If `true`, allow self-custody crypto wallets to be added without requiring signature verification. Defaults to `false`.
     * @type {boolean}
     * @memberof LinkTokenInvestments
     */
    allow_unverified_crypto_wallets?: boolean;
}
/**
 * Configuration parameters for the Investments Auth Product
 * @export
 * @interface LinkTokenInvestmentsAuth
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkTokenInvestmentsAuth {
    /**
     * If `true`, show institutions that use the manual entry fallback flow.
     * @type {boolean}
     * @memberof LinkTokenInvestmentsAuth
     */
    manual_entry_enabled?: boolean | null;
    /**
     * If `true`, show institutions that use the masked number match fallback flow.
     * @type {boolean}
     * @memberof LinkTokenInvestmentsAuth
     */
    masked_number_match_enabled?: boolean | null;
}
/**
 * Webhook indicating that the status of the delivery of the hosted link session to a user
 * @export
 * @interface LinkUserDeliveryStatusWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface LinkUserDeliveryStatusWebhook {
    [key: string]: object | unknown;

    /**
     * `LINK_DELIVERY`
     * @type {string}
     * @memberof LinkUserDeliveryStatusWebhook
     */
    webhook_type: string;
    /**
     * `DELIVERY_STATUS`
     * @type {string}
     * @memberof LinkUserDeliveryStatusWebhook
     */
    webhook_code: string;
    /**
     * The ID of the Hosted Link session.
     * @type {string}
     * @memberof LinkUserDeliveryStatusWebhook
     */
    link_delivery_session_id: string;
    /**
     * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
     * @type {string}
     * @memberof LinkUserDeliveryStatusWebhook
     */
    timestamp: string;
    /**
     * 
     * @type {LinkDeliveryMetadata}
     * @memberof LinkUserDeliveryStatusWebhook
     */
    link_delivery_metadata: LinkDeliveryMetadata;
}
/**
 * Information specific to a mortgage loan agreement between one or more borrowers and a mortgage lender.
 * @export
 * @interface Loan
 */
// Edited by Plaid, line 9. any to unknown
export interface Loan {
    [key: string]: object | unknown;

    /**
     * 
     * @type {LoanIdentifiers}
     * @memberof Loan
     */
    LOAN_IDENTIFIERS: LoanIdentifiers;
}
/**
 * Valid account subtypes for loan accounts. For a list containing descriptions of each subtype, see [Account schemas](https://plaid.com/docs/api/accounts/#StandaloneAccountType-loan).
 * @export
 * @enum {string}
 */
export enum LoanAccountSubtype {
    Auto = 'auto',
    Business = 'business',
    Commercial = 'commercial',
    Construction = 'construction',
    Consumer = 'consumer',
    HomeEquity = 'home equity',
    Loan = 'loan',
    Mortgage = 'mortgage',
    LineOfCredit = 'line of credit',
    Student = 'student',
    Other = 'other',
    All = 'all'
}

/**
 * A filter to apply to `loan`-type accounts
 * @export
 * @interface LoanFilter
 */
// Edited by Plaid, line 9. any to unknown
export interface LoanFilter {
    [key: string]: object | unknown;

    /**
     * An array of account subtypes to display in Link. If not specified, all account subtypes will be shown. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema). 
     * @type {Array<LoanAccountSubtype>}
     * @memberof LoanFilter
     */
    account_subtypes: Array<LoanAccountSubtype>;
}
/**
 * The information used to identify this loan by various parties to the transaction or other organizations.
 * @export
 * @interface LoanIdentifier
 */
// Edited by Plaid, line 9. any to unknown
export interface LoanIdentifier {
    [key: string]: object | unknown;

    /**
     * The value of the identifier for the specified type.
     * @type {string}
     * @memberof LoanIdentifier
     */
    LoanIdentifier: string | null;
    /**
     * 
     * @type {LoanIdentifierType}
     * @memberof LoanIdentifier
     */
    LoanIdentifierType: LoanIdentifierType | null;
}
/**
 * A value from a MISMO prescribed list that specifies the type of loan identifier.
 * @export
 * @enum {string}
 */
export enum LoanIdentifierType {
    LenderLoan = 'LenderLoan',
    UniversalLoan = 'UniversalLoan'
}

/**
 * Collection of current and previous identifiers for this loan.
 * @export
 * @interface LoanIdentifiers
 */
// Edited by Plaid, line 9. any to unknown
export interface LoanIdentifiers {
    [key: string]: object | unknown;

    /**
     * 
     * @type {LoanIdentifier}
     * @memberof LoanIdentifiers
     */
    LOAN_IDENTIFIER: LoanIdentifier;
}
/**
 * A collection of loans that are part of a single deal.
 * @export
 * @interface Loans
 */
// Edited by Plaid, line 9. any to unknown
export interface Loans {
    [key: string]: object | unknown;

    /**
     * 
     * @type {Loan}
     * @memberof Loans
     */
    LOAN: Loan;
}
/**
 * A representation of where a transaction took place
 * @export
 * @interface Location
 */
// Edited by Plaid, line 9. any to unknown
export interface Location {
    [key: string]: object | unknown;

    /**
     * The street address where the transaction occurred.
     * @type {string}
     * @memberof Location
     */
    address: string | null;
    /**
     * The city where the transaction occurred.
     * @type {string}
     * @memberof Location
     */
    city: string | null;
    /**
     * The region or state where the transaction occurred. In API versions 2018-05-22 and earlier, this field is called `state`.
     * @type {string}
     * @memberof Location
     */
    region: string | null;
    /**
     * The postal code where the transaction occurred. In API versions 2018-05-22 and earlier, this field is called `zip`.
     * @type {string}
     * @memberof Location
     */
    postal_code: string | null;
    /**
     * The ISO 3166-1 alpha-2 country code where the transaction occurred.
     * @type {string}
     * @memberof Location
     */
    country: string | null;
    /**
     * The latitude where the transaction occurred.
     * @type {number}
     * @memberof Location
     */
    lat: number | null;
    /**
     * The longitude where the transaction occurred.
     * @type {number}
     * @memberof Location
     */
    lon: number | null;
    /**
     * The merchant defined store number where the transaction occurred.
     * @type {string}
     * @memberof Location
     */
    store_number: string | null;
}
/**
 * Specifies the multi-factor authentication settings to use with this test account
 * @export
 * @interface MFA
 */
// Edited by Plaid, line 9. any to unknown
export interface MFA {
    [key: string]: object | unknown;

    /**
     * Possible values are `device`, `selections`, or `questions`.  If value is `device`, the MFA answer is `1234`.  If value is `selections`, the MFA answer is always the first option.  If value is `questions`, the MFA answer is  `answer_<i>_<j>` for the j-th question in the i-th round, starting from 0. For example, the answer to the first question in the second round is `answer_1_0`.
     * @type {string}
     * @memberof MFA
     */
    type: string;
    /**
     * Number of rounds of questions. Required if value of `type` is `questions`. 
     * @type {number}
     * @memberof MFA
     */
    question_rounds: number;
    /**
     * Number of questions per round. Required if value of `type` is `questions`. If value of type is `selections`, default value is 2.
     * @type {number}
     * @memberof MFA
     */
    questions_per_round: number;
    /**
     * Number of rounds of selections, used if `type` is `selections`. Defaults to 1.
     * @type {number}
     * @memberof MFA
     */
    selection_rounds: number;
    /**
     * Number of available answers per question, used if `type` is `selection`. Defaults to 2. 
     * @type {number}
     * @memberof MFA
     */
    selections_per_question: number;
}
/**
 * Summary object reflecting the match result of the associated data
 * @export
 * @interface MatchSummary
 */
// Edited by Plaid, line 9. any to unknown
export interface MatchSummary {
    [key: string]: object | unknown;

    /**
     * 
     * @type {MatchSummaryCode}
     * @memberof MatchSummary
     */
    summary: MatchSummaryCode;
}
/**
 * An enum indicating the match type between data provided by user and data checked against an external data source.   `match` indicates that the provided input data was a strong match against external data.  `partial_match` indicates the data approximately matched against external data. For example, \"Knope\" vs. \"Knope-Wyatt\" for last name.  `no_match` indicates that Plaid was able to perform a check against an external data source and it did not match the provided input data.  `no_data` indicates that Plaid was unable to find external data to compare against the provided input data.  `no_input` indicates that Plaid was unable to perform a check because no information was provided for this field by the end user.
 * @export
 * @enum {string}
 */
export enum MatchSummaryCode {
    Match = 'match',
    PartialMatch = 'partial_match',
    NoMatch = 'no_match',
    NoData = 'no_data',
    NoInput = 'no_input'
}

/**
 * Allows specifying the metadata of the test account
 * @export
 * @interface Meta
 */
// Edited by Plaid, line 9. any to unknown
export interface Meta {
    [key: string]: object | unknown;

    /**
     * The account\'s name
     * @type {string}
     * @memberof Meta
     */
    name: string;
    /**
     * The account\'s official name
     * @type {string}
     * @memberof Meta
     */
    official_name: string;
    /**
     * The account\'s limit
     * @type {number}
     * @memberof Meta
     */
    limit: number;
    /**
     * The account\'s mask. Should be a string of 2-4 alphanumeric characters. This allows you to model a mask which does not match the account number (such as with a virtual account number).
     * @type {string}
     * @memberof Meta
     */
    mask: string;
}
/**
 * Object containing metadata about the interest rate for the mortgage.
 * @export
 * @interface MortgageInterestRate
 */
// Edited by Plaid, line 9. any to unknown
export interface MortgageInterestRate {
    [key: string]: object | unknown;

    /**
     * Percentage value (interest rate of current mortgage, not APR) of interest payable on a loan.
     * @type {number}
     * @memberof MortgageInterestRate
     */
    percentage: number | null;
    /**
     * The type of interest charged (fixed or variable).
     * @type {string}
     * @memberof MortgageInterestRate
     */
    type: string | null;
}
/**
 * Contains details about a mortgage account.
 * @export
 * @interface MortgageLiability
 */
// Edited by Plaid, line 9. any to unknown
export interface MortgageLiability {
    [key: string]: object | unknown;

    /**
     * The ID of the account that this liability belongs to.
     * @type {string}
     * @memberof MortgageLiability
     */
    account_id: string;
    /**
     * The account number of the loan.
     * @type {string}
     * @memberof MortgageLiability
     */
    account_number: string;
    /**
     * The current outstanding amount charged for late payment.
     * @type {number}
     * @memberof MortgageLiability
     */
    current_late_fee: number | null;
    /**
     * Total amount held in escrow to pay taxes and insurance on behalf of the borrower.
     * @type {number}
     * @memberof MortgageLiability
     */
    escrow_balance: number | null;
    /**
     * Indicates whether the borrower has private mortgage insurance in effect.
     * @type {boolean}
     * @memberof MortgageLiability
     */
    has_pmi: boolean | null;
    /**
     * Indicates whether the borrower will pay a penalty for early payoff of mortgage.
     * @type {boolean}
     * @memberof MortgageLiability
     */
    has_prepayment_penalty: boolean | null;
    /**
     * 
     * @type {MortgageInterestRate}
     * @memberof MortgageLiability
     */
    interest_rate: MortgageInterestRate;
    /**
     * The amount of the last payment.
     * @type {number}
     * @memberof MortgageLiability
     */
    last_payment_amount: number | null;
    /**
     * The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
     * @type {string}
     * @memberof MortgageLiability
     */
    last_payment_date: string | null;
    /**
     * Description of the type of loan, for example `conventional`, `fixed`, or `variable`. This field is provided directly from the loan servicer and does not have an enumerated set of possible values.
     * @type {string}
     * @memberof MortgageLiability
     */
    loan_type_description: string | null;
    /**
     * Full duration of mortgage as at origination (e.g. `10 year`).
     * @type {string}
     * @memberof MortgageLiability
     */
    loan_term: string | null;
    /**
     * Original date on which mortgage is due in full. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
     * @type {string}
     * @memberof MortgageLiability
     */
    maturity_date: string | null;
    /**
     * The amount of the next payment.
     * @type {number}
     * @memberof MortgageLiability
     */
    next_monthly_payment: number | null;
    /**
     * The due date for the next payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
     * @type {string}
     * @memberof MortgageLiability
     */
    next_payment_due_date: string | null;
    /**
     * The date on which the loan was initially lent. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
     * @type {string}
     * @memberof MortgageLiability
     */
    origination_date: string | null;
    /**
     * The original principal balance of the mortgage.
     * @type {number}
     * @memberof MortgageLiability
     */
    origination_principal_amount: number | null;
    /**
     * Amount of loan (principal + interest) past due for payment.
     * @type {number}
     * @memberof MortgageLiability
     */
    past_due_amount: number | null;
    /**
     * 
     * @type {MortgagePropertyAddress}
     * @memberof MortgageLiability
     */
    property_address: MortgagePropertyAddress;
    /**
     * The year to date (YTD) interest paid.
     * @type {number}
     * @memberof MortgageLiability
     */
    ytd_interest_paid: number | null;
    /**
     * The YTD principal paid.
     * @type {number}
     * @memberof MortgageLiability
     */
    ytd_principal_paid: number | null;
}
/**
 * Object containing fields describing property address.
 * @export
 * @interface MortgagePropertyAddress
 */
// Edited by Plaid, line 9. any to unknown
export interface MortgagePropertyAddress {
    [key: string]: object | unknown;

    /**
     * The city name.
     * @type {string}
     * @memberof MortgagePropertyAddress
     */
    city: string | null;
    /**
     * The ISO 3166-1 alpha-2 country code.
     * @type {string}
     * @memberof MortgagePropertyAddress
     */
    country: string | null;
    /**
     * The five or nine digit postal code.
     * @type {string}
     * @memberof MortgagePropertyAddress
     */
    postal_code: string | null;
    /**
     * The region or state (example \"NC\").
     * @type {string}
     * @memberof MortgagePropertyAddress
     */
    region: string | null;
    /**
     * The full street address (example \"564 Main Street, Apt 15\").
     * @type {string}
     * @memberof MortgagePropertyAddress
     */
    street: string | null;
}
/**
 * Object containing risk signals and relevant metadata for a set of uploaded documents
 * @export
 * @interface MultiDocumentRiskSignal
 */
// Edited by Plaid, line 9. any to unknown
export interface MultiDocumentRiskSignal {
    [key: string]: object | unknown;

    /**
     * Array of objects containing attributes that could indicate if a document is fraudulent
     * @type {Array<RiskSignalDocumentReference>}
     * @memberof MultiDocumentRiskSignal
     */
    document_references: Array<RiskSignalDocumentReference>;
    /**
     * Array of attributes that indicate whether or not there is fraud risk with a set of documents
     * @type {Array<DocumentRiskSignal>}
     * @memberof MultiDocumentRiskSignal
     */
    risk_signals: Array<DocumentRiskSignal>;
}
/**
 * Score found by matching name provided by the API with the name on the account at the financial institution. If the account contains multiple owners, the maximum match score is filled.
 * @export
 * @interface NameMatchScore
 */
// Edited by Plaid, line 9. any to unknown
export interface NameMatchScore {
    [key: string]: object | unknown;

    /**
     * Represents the match score for name. 100 is a perfect score, 85-99 means a strong match, 50-84 is a partial match, less than 50 is a weak match and 0 is a complete mismatch. If the name is missing from either the API or financial institution, this is null.
     * @type {number}
     * @memberof NameMatchScore
     */
    score?: number | null;
    /**
     * first or last name completely matched, likely a family member
     * @type {boolean}
     * @memberof NameMatchScore
     */
    is_first_name_or_last_name_match?: boolean | null;
    /**
     * nickname matched, example Jennifer and Jenn.
     * @type {boolean}
     * @memberof NameMatchScore
     */
    is_nickname_match?: boolean | null;
    /**
     * Is `true` if the name on either of the names that was matched for the score contained strings indicative of a business name, such as \"CORP\", \"LLC\", \"INC\", or \"LTD\". A `true` result generally indicates the entity is a business. However, a `false` result does not mean the entity is not a business, as some businesses do not use these strings in the names used for their financial institution accounts.
     * @type {boolean}
     * @memberof NameMatchScore
     */
    is_business_name_detected?: boolean | null;
}
/**
 * An object representing information about the net pay amount on the paystub.
 * @export
 * @interface NetPay
 */
// Edited by Plaid, line 9. any to unknown
export interface NetPay {
    [key: string]: object | unknown;

    /**
     * Raw amount of the net pay for the pay period
     * @type {number}
     * @memberof NetPay
     */
    current_amount?: number | null;
    /**
     * Description of the net pay
     * @type {string}
     * @memberof NetPay
     */
    description?: string | null;
    /**
     * The ISO-4217 currency code of the net pay. Always `null` if `unofficial_currency_code` is non-null.
     * @type {string}
     * @memberof NetPay
     */
    iso_currency_code?: string | null;
    /**
     * The unofficial currency code associated with the net pay. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
     * @type {string}
     * @memberof NetPay
     */
    unofficial_currency_code?: string | null;
    /**
     * The year-to-date amount of the net pay
     * @type {number}
     * @memberof NetPay
     */
    ytd_amount?: number | null;
    /**
     * 
     * @type {Total}
     * @memberof NetPay
     * @deprecated
     */
    total?: Total;
}
/**
 * Fired when Plaid detects a new account for Items created or updated with [Account Select v2](https://plaid.com/docs/link/customization/#account-select). Upon receiving this webhook, you can prompt your users to share new accounts with you through [Account Select v2 update mode](https://plaid.com/docs/link/update-mode/#using-update-mode-to-request-new-accounts).
 * @export
 * @interface NewAccountsAvailableWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface NewAccountsAvailableWebhook {
    /**
     * `ITEM`
     * @type {string}
     * @memberof NewAccountsAvailableWebhook
     */
    webhook_type?: string;
    /**
     * `NEW_ACCOUNTS_AVAILABLE`
     * @type {string}
     * @memberof NewAccountsAvailableWebhook
     */
    webhook_code?: string;
    /**
     * The `item_id` of the Item associated with this webhook, warning, or error
     * @type {string}
     * @memberof NewAccountsAvailableWebhook
     */
    item_id?: string;
    /**
     * 
     * @type {PlaidError}
     * @memberof NewAccountsAvailableWebhook
     */
    error?: PlaidError | null;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof NewAccountsAvailableWebhook
     */
    environment?: WebhookEnvironmentValues;
}
/**
 * Account and bank identifier number data used to configure the test account. All values are optional.
 * @export
 * @interface Numbers
 */
// Edited by Plaid, line 9. any to unknown
export interface Numbers {
    [key: string]: object | unknown;

    /**
     * Will be used for the account number.
     * @type {string}
     * @memberof Numbers
     */
    account?: string;
    /**
     * Must be a valid ACH routing number.
     * @type {string}
     * @memberof Numbers
     */
    ach_routing?: string;
    /**
     * Must be a valid wire transfer routing number.
     * @type {string}
     * @memberof Numbers
     */
    ach_wire_routing?: string;
    /**
     * EFT institution number. Must be specified alongside `eft_branch`.
     * @type {string}
     * @memberof Numbers
     */
    eft_institution?: string;
    /**
     * EFT branch number. Must be specified alongside `eft_institution`.
     * @type {string}
     * @memberof Numbers
     */
    eft_branch?: string;
    /**
     * Bank identifier code (BIC). Must be specified alongside `international_iban`.
     * @type {string}
     * @memberof Numbers
     */
    international_bic?: string;
    /**
     * International bank account number (IBAN). If no account number is specified via `account`, will also be used as the account number by default. Must be specified alongside `international_bic`.
     * @type {string}
     * @memberof Numbers
     */
    international_iban?: string;
    /**
     * BACS sort code
     * @type {string}
     * @memberof Numbers
     */
    bacs_sort_code?: string;
}
/**
 * Identifying information for transferring holdings to an investments account via ACATS.
 * @export
 * @interface NumbersACATS
 */
// Edited by Plaid, line 9. any to unknown
export interface NumbersACATS {
    [key: string]: object | unknown;

    /**
     * The Plaid account ID associated with the account numbers
     * @type {string}
     * @memberof NumbersACATS
     */
    account_id: string;
    /**
     * The full account number for the account
     * @type {string}
     * @memberof NumbersACATS
     */
    account: string;
    /**
     * Identifiers for the clearinghouses that are assocciated with the account in order of relevance. This array will be empty if we can\'t provide any account level data. Institution level data can be retrieved from the institutions/get endpoints.
     * @type {Array<string>}
     * @memberof NumbersACATS
     */
    dtc_numbers: Array<string>;
}
/**
 * Identifying information for transferring money to or from a US account via ACH or wire transfer.
 * @export
 * @interface NumbersACH
 */
// Edited by Plaid, line 9. any to unknown
export interface NumbersACH {
    [key: string]: object | unknown;

    /**
     * The Plaid account ID associated with the account numbers
     * @type {string}
     * @memberof NumbersACH
     */
    account_id: string;
    /**
     * The ACH account number for the account.  Note that when using OAuth with Chase Bank (`ins_56`), Chase will issue \"tokenized\" routing and account numbers, which are not the user\'s actual account and routing numbers. These tokenized numbers should work identically to normal account and routing numbers. The digits returned in the `mask` field will continue to reflect the actual account number, rather than the tokenized account number; for this reason, when displaying account numbers to the user to help them identify their account in your UI, always use the `mask` rather than truncating the `account` number. If a user revokes their permissions to your app, the tokenized numbers will continue to work for ACH deposits, but not withdrawals.
     * @type {string}
     * @memberof NumbersACH
     */
    account: string;
    /**
     * The ACH routing number for the account. If the institution is `ins_56`, this may be a tokenized routing number. For more information, see the description of the `account` field.
     * @type {string}
     * @memberof NumbersACH
     */
    routing: string;
    /**
     * The wire transfer routing number for the account, if available
     * @type {string}
     * @memberof NumbersACH
     */
    wire_routing: string | null;
    /**
     * Whether the account supports ACH transfers into the account
     * @type {boolean}
     * @memberof NumbersACH
     */
    can_transfer_in?: boolean | null;
    /**
     * Whether the account supports ACH transfers out of the account
     * @type {boolean}
     * @memberof NumbersACH
     */
    can_transfer_out?: boolean | null;
}
/**
 * Identifying information for transferring money to or from a US account via ACH or wire transfer.
 * @export
 * @interface NumbersACHNullable
 */
// Edited by Plaid, line 9. any to unknown
export interface NumbersACHNullable {
    /**
     * The Plaid account ID associated with the account numbers
     * @type {string}
     * @memberof NumbersACHNullable
     */
    account_id: string;
    /**
     * The ACH account number for the account.  Note that when using OAuth with Chase Bank (`ins_56`), Chase will issue \"tokenized\" routing and account numbers, which are not the user\'s actual account and routing numbers. These tokenized numbers should work identically to normal account and routing numbers. The digits returned in the `mask` field will continue to reflect the actual account number, rather than the tokenized account number; for this reason, when displaying account numbers to the user to help them identify their account in your UI, always use the `mask` rather than truncating the `account` number. If a user revokes their permissions to your app, the tokenized numbers will continue to work for ACH deposits, but not withdrawals.
     * @type {string}
     * @memberof NumbersACHNullable
     */
    account: string;
    /**
     * The ACH routing number for the account. If the institution is `ins_56`, this may be a tokenized routing number. For more information, see the description of the `account` field.
     * @type {string}
     * @memberof NumbersACHNullable
     */
    routing: string;
    /**
     * The wire transfer routing number for the account, if available
     * @type {string}
     * @memberof NumbersACHNullable
     */
    wire_routing: string | null;
    /**
     * Whether the account supports ACH transfers into the account
     * @type {boolean}
     * @memberof NumbersACHNullable
     */
    can_transfer_in?: boolean | null;
    /**
     * Whether the account supports ACH transfers out of the account
     * @type {boolean}
     * @memberof NumbersACHNullable
     */
    can_transfer_out?: boolean | null;
}
/**
 * Identifying information for transferring money to or from a UK bank account via BACS.
 * @export
 * @interface NumbersBACS
 */
// Edited by Plaid, line 9. any to unknown
export interface NumbersBACS {
    [key: string]: object | unknown;

    /**
     * The Plaid account ID associated with the account numbers
     * @type {string}
     * @memberof NumbersBACS
     */
    account_id: string;
    /**
     * The BACS account number for the account
     * @type {string}
     * @memberof NumbersBACS
     */
    account: string;
    /**
     * The BACS sort code for the account
     * @type {string}
     * @memberof NumbersBACS
     */
    sort_code: string;
}
/**
 * Identifying information for transferring money to or from a UK bank account via BACS.
 * @export
 * @interface NumbersBACSNullable
 */
// Edited by Plaid, line 9. any to unknown
export interface NumbersBACSNullable {
    /**
     * The Plaid account ID associated with the account numbers
     * @type {string}
     * @memberof NumbersBACSNullable
     */
    account_id: string;
    /**
     * The BACS account number for the account
     * @type {string}
     * @memberof NumbersBACSNullable
     */
    account: string;
    /**
     * The BACS sort code for the account
     * @type {string}
     * @memberof NumbersBACSNullable
     */
    sort_code: string;
}
/**
 * Identifying information for transferring money to or from a Canadian bank account via EFT.
 * @export
 * @interface NumbersEFT
 */
// Edited by Plaid, line 9. any to unknown
export interface NumbersEFT {
    [key: string]: object | unknown;

    /**
     * The Plaid account ID associated with the account numbers
     * @type {string}
     * @memberof NumbersEFT
     */
    account_id: string;
    /**
     * The EFT account number for the account
     * @type {string}
     * @memberof NumbersEFT
     */
    account: string;
    /**
     * The EFT institution number for the account
     * @type {string}
     * @memberof NumbersEFT
     */
    institution: string;
    /**
     * The EFT branch number for the account
     * @type {string}
     * @memberof NumbersEFT
     */
    branch: string;
}
/**
 * Identifying information for transferring money to or from a Canadian bank account via EFT.
 * @export
 * @interface NumbersEFTNullable
 */
// Edited by Plaid, line 9. any to unknown
export interface NumbersEFTNullable {
    /**
     * The Plaid account ID associated with the account numbers
     * @type {string}
     * @memberof NumbersEFTNullable
     */
    account_id: string;
    /**
     * The EFT account number for the account
     * @type {string}
     * @memberof NumbersEFTNullable
     */
    account: string;
    /**
     * The EFT institution number for the account
     * @type {string}
     * @memberof NumbersEFTNullable
     */
    institution: string;
    /**
     * The EFT branch number for the account
     * @type {string}
     * @memberof NumbersEFTNullable
     */
    branch: string;
}
/**
 * International Bank Account Number (IBAN).
 * @export
 * @interface NumbersIBANNullable
 */
// Edited by Plaid, line 9. any to unknown
export interface NumbersIBANNullable {
}
/**
 * Identifying information for transferring money to or from an international bank account via wire transfer.
 * @export
 * @interface NumbersInternational
 */
// Edited by Plaid, line 9. any to unknown
export interface NumbersInternational {
    [key: string]: object | unknown;

    /**
     * The Plaid account ID associated with the account numbers
     * @type {string}
     * @memberof NumbersInternational
     */
    account_id: string;
    /**
     * The International Bank Account Number (IBAN) for the account
     * @type {string}
     * @memberof NumbersInternational
     */
    iban: string;
    /**
     * The Bank Identifier Code (BIC) for the account
     * @type {string}
     * @memberof NumbersInternational
     */
    bic: string;
}
/**
 * Account numbers using the International Bank Account Number and BIC/SWIFT code format.
 * @export
 * @interface NumbersInternationalIBAN
 */
// Edited by Plaid, line 9. any to unknown
export interface NumbersInternationalIBAN {
    [key: string]: object | unknown;

    /**
     * International Bank Account Number (IBAN).
     * @type {string}
     * @memberof NumbersInternationalIBAN
     */
    iban: string;
    /**
     * The Business Identifier Code, also known as SWIFT code, for this bank account.
     * @type {string}
     * @memberof NumbersInternationalIBAN
     */
    bic: string;
}
/**
 * Identifying information for transferring money to or from an international bank account via wire transfer.
 * @export
 * @interface NumbersInternationalNullable
 */
// Edited by Plaid, line 9. any to unknown
export interface NumbersInternationalNullable {
    /**
     * The Plaid account ID associated with the account numbers
     * @type {string}
     * @memberof NumbersInternationalNullable
     */
    account_id: string;
    /**
     * The International Bank Account Number (IBAN) for the account
     * @type {string}
     * @memberof NumbersInternationalNullable
     */
    iban: string;
    /**
     * The Bank Identifier Code (BIC) for the account
     * @type {string}
     * @memberof NumbersInternationalNullable
     */
    bic: string;
}
/**
 * Originator and their status.
 * @export
 * @interface Originator
 */
// Edited by Plaid, line 9. any to unknown
export interface Originator {
    [key: string]: object | unknown;

    /**
     * Originator’s client ID.
     * @type {string}
     * @memberof Originator
     */
    client_id: string;
    /**
     * 
     * @type {TransferDiligenceStatus}
     * @memberof Originator
     */
    transfer_diligence_status: TransferDiligenceStatus;
}
/**
 * The originator\'s expected transfer frequency.
 * @export
 * @enum {string}
 */
export enum OriginatorExpectedTransferFrequency {
    OncePerMonth = 'once_per_month',
    TwicePerMonth = 'twice_per_month',
    OncePerWeek = 'once_per_week',
    Daily = 'daily'
}

/**
 * `investment:` Investment account.  `credit:` Credit card  `depository:` Depository account  `loan:` Loan account  `payroll:` Payroll account  `other:` Non-specified account type  See the [Account type schema](https://plaid.com/docs/api/accounts#account-type-schema) for a full listing of account types and corresponding subtypes.
 * @export
 * @enum {string}
 */
export enum OverrideAccountType {
    Investment = 'investment',
    Credit = 'credit',
    Depository = 'depository',
    Loan = 'loan',
    Payroll = 'payroll',
    Other = 'other'
}

/**
 * Data to use to set values of test accounts. Some values cannot be specified in the schema and will instead will be calculated from other test data in order to achieve more consistent, realistic test data.
 * @export
 * @interface OverrideAccounts
 */
// Edited by Plaid, line 9. any to unknown
export interface OverrideAccounts {
    [key: string]: object | unknown;

    /**
     * 
     * @type {OverrideAccountType}
     * @memberof OverrideAccounts
     */
    type: OverrideAccountType;
    /**
     * 
     * @type {AccountSubtype}
     * @memberof OverrideAccounts
     */
    subtype: AccountSubtype | null;
    /**
     * If provided, the account will start with this amount as the current balance. 
     * @type {number}
     * @memberof OverrideAccounts
     */
    starting_balance: number;
    /**
     * If provided, the account will always have this amount as its  available balance, regardless of current balance or changes in transactions over time.
     * @type {number}
     * @memberof OverrideAccounts
     */
    force_available_balance: number;
    /**
     * ISO-4217 currency code. If provided, the account will be denominated in the given currency. Transactions will also be in this currency by default.
     * @type {string}
     * @memberof OverrideAccounts
     */
    currency: string;
    /**
     * 
     * @type {Meta}
     * @memberof OverrideAccounts
     */
    meta: Meta;
    /**
     * 
     * @type {Numbers}
     * @memberof OverrideAccounts
     */
    numbers: Numbers;
    /**
     * Specify the list of transactions on the account.
     * @type {Array<TransactionOverride>}
     * @memberof OverrideAccounts
     */
    transactions: Array<TransactionOverride>;
    /**
     * 
     * @type {HoldingsOverride}
     * @memberof OverrideAccounts
     */
    holdings?: HoldingsOverride;
    /**
     * 
     * @type {InvestmentsTransactionsOverride}
     * @memberof OverrideAccounts
     */
    investment_transactions?: InvestmentsTransactionsOverride;
    /**
     * 
     * @type {OwnerOverride}
     * @memberof OverrideAccounts
     */
    identity: OwnerOverride;
    /**
     * 
     * @type {LiabilityOverride}
     * @memberof OverrideAccounts
     */
    liability: LiabilityOverride;
    /**
     * 
     * @type {InflowModel}
     * @memberof OverrideAccounts
     */
    inflow_model: InflowModel;
    /**
     * 
     * @type {IncomeOverride}
     * @memberof OverrideAccounts
     */
    income?: IncomeOverride;
}
/**
 * Data returned from the financial institution about the owner or owners of an account. Only the `names` array must be non-empty.
 * @export
 * @interface Owner
 */
// Edited by Plaid, line 9. any to unknown
export interface Owner {
    [key: string]: object | unknown;

    /**
     * A list of names associated with the account by the financial institution. In the case of a joint account, Plaid will make a best effort to report the names of all account holders.  If an Item contains multiple accounts with different owner names, some institutions will report all names associated with the Item in each account\'s `names` array.
     * @type {Array<string>}
     * @memberof Owner
     */
    names: Array<string>;
    /**
     * A list of phone numbers associated with the account by the financial institution. May be an empty array if no relevant information is returned from the financial institution.
     * @type {Array<PhoneNumber>}
     * @memberof Owner
     */
    phone_numbers: Array<PhoneNumber>;
    /**
     * A list of email addresses associated with the account by the financial institution. May be an empty array if no relevant information is returned from the financial institution.
     * @type {Array<Email>}
     * @memberof Owner
     */
    emails: Array<Email>;
    /**
     * Data about the various addresses associated with the account by the financial institution. May be an empty array if no relevant information is returned from the financial institution.
     * @type {Array<Address>}
     * @memberof Owner
     */
    addresses: Array<Address>;
}
/**
 * Data about the owner or owners of an account. Any fields not specified will be filled in with default Sandbox information.
 * @export
 * @interface OwnerOverride
 */
// Edited by Plaid, line 9. any to unknown
export interface OwnerOverride {
    [key: string]: object | unknown;

    /**
     * A list of names associated with the account by the financial institution. These should always be the names of individuals, even for business accounts. Note that the same name data will be used for all accounts associated with an Item.
     * @type {Array<string>}
     * @memberof OwnerOverride
     */
    names: Array<string>;
    /**
     * A list of phone numbers associated with the account.
     * @type {Array<PhoneNumber>}
     * @memberof OwnerOverride
     */
    phone_numbers: Array<PhoneNumber>;
    /**
     * A list of email addresses associated with the account.
     * @type {Array<Email>}
     * @memberof OwnerOverride
     */
    emails: Array<Email>;
    /**
     * Data about the various addresses associated with the account.
     * @type {Array<Address>}
     * @memberof OwnerOverride
     */
    addresses: Array<Address>;
}
/**
 * How an asset is owned.  `association`: Ownership by a corporation, partnership, or unincorporated association, including for-profit and not-for-profit organizations. `individual`: Ownership by an individual. `joint`: Joint ownership by multiple parties. `trust`: Ownership by a revocable or irrevocable trust.
 * @export
 * @enum {string}
 */
export enum OwnershipType {
    Null = 'null',
    Individual = 'individual',
    Joint = 'joint',
    Association = 'association',
    Trust = 'trust'
}

/**
 * Field describing whether the associated address is a post office box. Will be `yes` when a P.O. box is detected, `no` when Plaid confirmed the address is not a P.O. box, and `no_data` when Plaid was not able to determine if the address is a P.O. box.
 * @export
 * @enum {string}
 */
export enum POBoxStatus {
    Yes = 'yes',
    No = 'no',
    NoData = 'no_data'
}

/**
 * Information about the student\'s eligibility in the Public Service Loan Forgiveness program. This is only returned if the institution is FedLoan (`ins_116527`). 
 * @export
 * @interface PSLFStatus
 */
// Edited by Plaid, line 9. any to unknown
export interface PSLFStatus {
    [key: string]: object | unknown;

    /**
     * The estimated date borrower will have completed 120 qualifying monthly payments. Returned in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
     * @type {string}
     * @memberof PSLFStatus
     */
    estimated_eligibility_date: string | null;
    /**
     * The number of qualifying payments that have been made.
     * @type {number}
     * @memberof PSLFStatus
     */
    payments_made: number | null;
    /**
     * The number of qualifying payments remaining.
     * @type {number}
     * @memberof PSLFStatus
     */
    payments_remaining: number | null;
}
/**
 * A collection of objects that define specific parties to a deal. This includes the direct participating parties, such as borrower and seller and the indirect parties such as the credit report provider.
 * @export
 * @interface Parties
 */
// Edited by Plaid, line 9. any to unknown
export interface Parties {
    [key: string]: object | unknown;

    /**
     * 
     * @type {Array<Party>}
     * @memberof Parties
     */
    PARTY: Array<Party>;
}
/**
 * Request schema for `/partner/customer/create`.
 * @export
 * @interface PartnerCustomerCreateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface PartnerCustomerCreateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof PartnerCustomerCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof PartnerCustomerCreateRequest
     */
    secret?: string;
    /**
     * The company name of the end customer being created. This will be used to display the end customer in the Plaid Dashboard. It will not be shown to end users.
     * @type {string}
     * @memberof PartnerCustomerCreateRequest
     */
    company_name: string;
    /**
     * Denotes whether or not the partner has completed attestation of diligence for the end customer to be created.
     * @type {boolean}
     * @memberof PartnerCustomerCreateRequest
     */
    is_diligence_attested: boolean;
    /**
     * The products to be enabled for the end customer.
     * @type {Array<Products>}
     * @memberof PartnerCustomerCreateRequest
     */
    products: Array<Products>;
    /**
     * If `true`, the end customer\'s default Link customization will be set to match the partner\'s. You can always change the end customer\'s Link customization in the Plaid Dashboard. See the [Link Customization docs](https://plaid.com/docs/link/customization/) for more information.
     * @type {boolean}
     * @memberof PartnerCustomerCreateRequest
     */
    create_link_customization?: boolean;
    /**
     * Base64-encoded representation of the end customer\'s logo. Must be a PNG of size 1024x1024 under 4MB. The logo will be shared with financial institutions and shown to the end user during Link flows. A logo is required if `create_link_customization` is `true`. If `create_link_customization` is `false` and the logo is omitted, a stock logo will be used.
     * @type {string}
     * @memberof PartnerCustomerCreateRequest
     */
    logo?: string;
    /**
     * The end customer\'s legal name. This will be shared with financial institutions as part of the OAuth registration process. It will not be shown to end users.
     * @type {string}
     * @memberof PartnerCustomerCreateRequest
     */
    legal_entity_name: string;
    /**
     * The end customer\'s website.
     * @type {string}
     * @memberof PartnerCustomerCreateRequest
     */
    website: string;
    /**
     * The name of the end customer\'s application. This will be shown to end users when they go through the Plaid Link flow.
     * @type {string}
     * @memberof PartnerCustomerCreateRequest
     */
    application_name: string;
    /**
     * 
     * @type {PartnerEndCustomerTechnicalContact}
     * @memberof PartnerCustomerCreateRequest
     */
    technical_contact?: PartnerEndCustomerTechnicalContact;
    /**
     * 
     * @type {PartnerEndCustomerBillingContact}
     * @memberof PartnerCustomerCreateRequest
     */
    billing_contact?: PartnerEndCustomerBillingContact;
    /**
     * 
     * @type {PartnerEndCustomerCustomerSupportInfo}
     * @memberof PartnerCustomerCreateRequest
     */
    customer_support_info?: PartnerEndCustomerCustomerSupportInfo;
    /**
     * 
     * @type {PartnerEndCustomerAddress}
     * @memberof PartnerCustomerCreateRequest
     */
    address: PartnerEndCustomerAddress;
    /**
     * Denotes whether the partner has forwarded the Plaid bank addendum to the end customer.
     * @type {boolean}
     * @memberof PartnerCustomerCreateRequest
     */
    is_bank_addendum_completed: boolean;
    /**
     * 
     * @type {PartnerEndCustomerAssetsUnderManagement}
     * @memberof PartnerCustomerCreateRequest
     */
    assets_under_management?: PartnerEndCustomerAssetsUnderManagement;
    /**
     * A list of URIs indicating the destination(s) where a user can be forwarded after completing the Link flow; used to support OAuth authentication flows when launching Link in the browser or via a webview. URIs should not contain any query parameters. When used in Production or Development, URIs must use https. To specify any subdomain, use `*` as a wildcard character, e.g. `https://_*.example.com/oauth.html`. To modify redirect URIs for an end customer after creating them, go to the end customer\'s [API page](https://dashboard.plaid.com/team/api) in the Dashboard.
     * @type {Array<string>}
     * @memberof PartnerCustomerCreateRequest
     */
    redirect_uris?: Array<string>;
}
/**
 * Response schema for `/partner/customer/create`.
 * @export
 * @interface PartnerCustomerCreateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface PartnerCustomerCreateResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {PartnerEndCustomerWithSecrets}
     * @memberof PartnerCustomerCreateResponse
     */
    end_customer?: PartnerEndCustomerWithSecrets;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof PartnerCustomerCreateResponse
     */
    request_id?: string;
}
/**
 * Request schema for `/partner/customer/enable`.
 * @export
 * @interface PartnerCustomerEnableRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface PartnerCustomerEnableRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof PartnerCustomerEnableRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof PartnerCustomerEnableRequest
     */
    secret?: string;
    /**
     * 
     * @type {string}
     * @memberof PartnerCustomerEnableRequest
     */
    end_customer_client_id: string;
}
/**
 * Response schema for `/partner/customer/enable`.
 * @export
 * @interface PartnerCustomerEnableResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface PartnerCustomerEnableResponse {
    [key: string]: object | unknown;

    /**
     * The end customer\'s secret key for the Production environment.
     * @type {string}
     * @memberof PartnerCustomerEnableResponse
     */
    production_secret?: string;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof PartnerCustomerEnableResponse
     */
    request_id?: string;
}
/**
 * Request schema for `/partner/customer/get`.
 * @export
 * @interface PartnerCustomerGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface PartnerCustomerGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof PartnerCustomerGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof PartnerCustomerGetRequest
     */
    secret?: string;
    /**
     * 
     * @type {string}
     * @memberof PartnerCustomerGetRequest
     */
    end_customer_client_id: string;
}
/**
 * Response schema for `/partner/customer/get`.
 * @export
 * @interface PartnerCustomerGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface PartnerCustomerGetResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {PartnerEndCustomer}
     * @memberof PartnerCustomerGetResponse
     */
    end_customer?: PartnerEndCustomer;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof PartnerCustomerGetResponse
     */
    request_id?: string;
}
/**
 * Request schema for `/partner/customer/oauth_institutions/get`.
 * @export
 * @interface PartnerCustomerOAuthInstitutionsGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface PartnerCustomerOAuthInstitutionsGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof PartnerCustomerOAuthInstitutionsGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof PartnerCustomerOAuthInstitutionsGetRequest
     */
    secret?: string;
    /**
     * 
     * @type {string}
     * @memberof PartnerCustomerOAuthInstitutionsGetRequest
     */
    end_customer_client_id: string;
}
/**
 * Response schema for `/partner/customer/oauth_institutions/get`.
 * @export
 * @interface PartnerCustomerOAuthInstitutionsGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface PartnerCustomerOAuthInstitutionsGetResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {PartnerEndCustomerFlowdownStatus}
     * @memberof PartnerCustomerOAuthInstitutionsGetResponse
     */
    flowdown_status?: PartnerEndCustomerFlowdownStatus;
    /**
     * 
     * @type {PartnerEndCustomerQuestionnaireStatus}
     * @memberof PartnerCustomerOAuthInstitutionsGetResponse
     */
    questionnaire_status?: PartnerEndCustomerQuestionnaireStatus;
    /**
     * The OAuth institutions with which the end customer\'s application is being registered.
     * @type {Array<PartnerEndCustomerOAuthInstitution>}
     * @memberof PartnerCustomerOAuthInstitutionsGetResponse
     */
    institutions?: Array<PartnerEndCustomerOAuthInstitution>;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof PartnerCustomerOAuthInstitutionsGetResponse
     */
    request_id?: string;
}
/**
 * Request schema for `/partner/customer/remove`.
 * @export
 * @interface PartnerCustomerRemoveRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface PartnerCustomerRemoveRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof PartnerCustomerRemoveRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof PartnerCustomerRemoveRequest
     */
    secret?: string;
    /**
     * 
     * @type {string}
     * @memberof PartnerCustomerRemoveRequest
     */
    end_customer_client_id: string;
}
/**
 * Response schema for `/partner/customer/remove`.
 * @export
 * @interface PartnerCustomerRemoveResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface PartnerCustomerRemoveResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof PartnerCustomerRemoveResponse
     */
    request_id?: string;
}
/**
 * The details for an end customer.
 * @export
 * @interface PartnerEndCustomer
 */
// Edited by Plaid, line 9. any to unknown
export interface PartnerEndCustomer {
    [key: string]: object | unknown;

    /**
     * 
     * @type {string}
     * @memberof PartnerEndCustomer
     */
    client_id?: string;
    /**
     * 
     * @type {string}
     * @memberof PartnerEndCustomer
     */
    company_name?: string;
    /**
     * 
     * @type {PartnerEndCustomerStatus}
     * @memberof PartnerEndCustomer
     */
    status?: PartnerEndCustomerStatus;
}
/**
 * The end customer\'s address.
 * @export
 * @interface PartnerEndCustomerAddress
 */
// Edited by Plaid, line 9. any to unknown
export interface PartnerEndCustomerAddress {
    [key: string]: object | unknown;

    /**
     * 
     * @type {string}
     * @memberof PartnerEndCustomerAddress
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof PartnerEndCustomerAddress
     */
    street?: string;
    /**
     * 
     * @type {string}
     * @memberof PartnerEndCustomerAddress
     */
    region?: string;
    /**
     * 
     * @type {string}
     * @memberof PartnerEndCustomerAddress
     */
    postal_code?: string;
    /**
     * ISO-3166-1 alpha-2 country code standard.
     * @type {string}
     * @memberof PartnerEndCustomerAddress
     */
    country_code?: string;
}
/**
 * Assets under management for the given end customer. Required for end customers with monthly service commitments.
 * @export
 * @interface PartnerEndCustomerAssetsUnderManagement
 */
// Edited by Plaid, line 9. any to unknown
export interface PartnerEndCustomerAssetsUnderManagement {
    [key: string]: object | unknown;

    /**
     * 
     * @type {number}
     * @memberof PartnerEndCustomerAssetsUnderManagement
     */
    amount: number;
    /**
     * 
     * @type {string}
     * @memberof PartnerEndCustomerAssetsUnderManagement
     */
    iso_currency_code: string;
}
/**
 * The billing contact for the end customer. Defaults to partner\'s billing contact if omitted.
 * @export
 * @interface PartnerEndCustomerBillingContact
 */
// Edited by Plaid, line 9. any to unknown
export interface PartnerEndCustomerBillingContact {
    [key: string]: object | unknown;

    /**
     * 
     * @type {string}
     * @memberof PartnerEndCustomerBillingContact
     */
    given_name?: string;
    /**
     * 
     * @type {string}
     * @memberof PartnerEndCustomerBillingContact
     */
    family_name?: string;
    /**
     * 
     * @type {string}
     * @memberof PartnerEndCustomerBillingContact
     */
    email?: string;
}
/**
 * This information is public. Users of your app will see this information when managing connections between your app and their bank accounts in Plaid Portal. Defaults to partner\'s customer support info if omitted.
 * @export
 * @interface PartnerEndCustomerCustomerSupportInfo
 */
// Edited by Plaid, line 9. any to unknown
export interface PartnerEndCustomerCustomerSupportInfo {
    [key: string]: object | unknown;

    /**
     * 
     * @type {string}
     * @memberof PartnerEndCustomerCustomerSupportInfo
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof PartnerEndCustomerCustomerSupportInfo
     */
    phone_number?: string;
    /**
     * 
     * @type {string}
     * @memberof PartnerEndCustomerCustomerSupportInfo
     */
    contact_url?: string;
    /**
     * 
     * @type {string}
     * @memberof PartnerEndCustomerCustomerSupportInfo
     */
    link_update_url?: string;
}
/**
 * The status of the addendum to the Plaid MSA (\"flowdown\") for the end customer.
 * @export
 * @enum {string}
 */
export enum PartnerEndCustomerFlowdownStatus {
    NotStarted = 'NOT_STARTED',
    InReview = 'IN_REVIEW',
    Negotiation = 'NEGOTIATION',
    Complete = 'COMPLETE'
}

/**
 * The OAuth registration information for an institution.
 * @export
 * @interface PartnerEndCustomerOAuthInstitution
 */
// Edited by Plaid, line 9. any to unknown
export interface PartnerEndCustomerOAuthInstitution {
    [key: string]: object | unknown;

    /**
     * 
     * @type {string}
     * @memberof PartnerEndCustomerOAuthInstitution
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof PartnerEndCustomerOAuthInstitution
     */
    institution_id?: string;
    /**
     * 
     * @type {PartnerEndCustomerOAuthInstitutionEnvironments}
     * @memberof PartnerEndCustomerOAuthInstitution
     */
    environments?: PartnerEndCustomerOAuthInstitutionEnvironments;
    /**
     * The date on which the end customer\'s application was approved by the institution, or an empty string if their application has not yet been approved.
     * @type {string}
     * @memberof PartnerEndCustomerOAuthInstitution
     */
    production_enablement_date?: string | null;
    /**
     * The date on which non-OAuth Item adds will no longer be supported for this institution, or an empty string if no such date has been set by the institution.
     * @type {string}
     * @memberof PartnerEndCustomerOAuthInstitution
     */
    classic_disablement_date?: string | null;
}
/**
 * The registration status for the end customer\'s application.
 * @export
 * @enum {string}
 */
export enum PartnerEndCustomerOAuthInstitutionApplicationStatus {
    NotStarted = 'NOT_STARTED',
    Processing = 'PROCESSING',
    Approved = 'APPROVED',
    Enabled = 'ENABLED',
    AttentionRequired = 'ATTENTION_REQUIRED'
}

/**
 * Registration statuses by environment.
 * @export
 * @interface PartnerEndCustomerOAuthInstitutionEnvironments
 */
// Edited by Plaid, line 9. any to unknown
export interface PartnerEndCustomerOAuthInstitutionEnvironments {
    [key: string]: object | unknown;

    /**
     * 
     * @type {PartnerEndCustomerOAuthInstitutionApplicationStatus}
     * @memberof PartnerEndCustomerOAuthInstitutionEnvironments
     */
    development?: PartnerEndCustomerOAuthInstitutionApplicationStatus;
    /**
     * 
     * @type {PartnerEndCustomerOAuthInstitutionApplicationStatus}
     * @memberof PartnerEndCustomerOAuthInstitutionEnvironments
     */
    production?: PartnerEndCustomerOAuthInstitutionApplicationStatus;
}
/**
 * The OAuth status of the update
 * @export
 * @enum {string}
 */
export enum PartnerEndCustomerOAuthStatusUpdatedValues {
    NotStarted = 'not-started',
    Processing = 'processing',
    Approved = 'approved',
    Enabled = 'enabled',
    AttentionRequired = 'attention-required'
}

/**
 * The webhook of type `PARTNER` and code `END_CUSTOMER_OAUTH_STATUS_UPDATED` will be fired when a partner\'s end customer has an update on their OAuth registration status with an institution.
 * @export
 * @interface PartnerEndCustomerOAuthStatusUpdatedWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface PartnerEndCustomerOAuthStatusUpdatedWebhook {
    /**
     * `PARTNER`
     * @type {string}
     * @memberof PartnerEndCustomerOAuthStatusUpdatedWebhook
     */
    webhook_type: string;
    /**
     * `END_CUSTOMER_OAUTH_STATUS_UPDATED`
     * @type {string}
     * @memberof PartnerEndCustomerOAuthStatusUpdatedWebhook
     */
    webhook_code: string;
    /**
     * The client ID of the end customer
     * @type {string}
     * @memberof PartnerEndCustomerOAuthStatusUpdatedWebhook
     */
    end_customer_client_id: string;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof PartnerEndCustomerOAuthStatusUpdatedWebhook
     */
    environment: WebhookEnvironmentValues;
    /**
     * The institution ID
     * @type {string}
     * @memberof PartnerEndCustomerOAuthStatusUpdatedWebhook
     */
    institution_id: string;
    /**
     * The institution name
     * @type {string}
     * @memberof PartnerEndCustomerOAuthStatusUpdatedWebhook
     */
    institution_name: string;
    /**
     * 
     * @type {PartnerEndCustomerOAuthStatusUpdatedValues}
     * @memberof PartnerEndCustomerOAuthStatusUpdatedWebhook
     */
    status: PartnerEndCustomerOAuthStatusUpdatedValues;
}
/**
 * The status of the end customer\'s security questionnaire.
 * @export
 * @enum {string}
 */
export enum PartnerEndCustomerQuestionnaireStatus {
    NotStarted = 'NOT_STARTED',
    Received = 'RECEIVED',
    Complete = 'COMPLETE'
}

/**
 * The secrets for the newly created end customer in non-Production environments.
 * @export
 * @interface PartnerEndCustomerSecrets
 */
// Edited by Plaid, line 9. any to unknown
export interface PartnerEndCustomerSecrets {
    [key: string]: object | unknown;

    /**
     * The end customer\'s secret key for the Sandbox environment.
     * @type {string}
     * @memberof PartnerEndCustomerSecrets
     */
    sandbox?: string;
    /**
     * The end customer\'s secret key for the Development environment.
     * @type {string}
     * @memberof PartnerEndCustomerSecrets
     */
    development?: string;
}
/**
 * The status of the given end customer.  `UNDER_REVIEW`: The end customer has been created and enabled in the non-Production environments. The end customer must be manually reviewed by the Plaid team before it can be enabled in production, at which point its status will automatically transition to `PENDING_ENABLEMENT` or `DENIED`.  `PENDING_ENABLEMENT`: The end customer is ready to be enabled in the Production environment. Call the `/partner/customer/enable` endpoint to enable the end customer in Production.  `ACTIVE`: The end customer has been enabled in all environments.  `DENIED`: The end customer has been created and enabled in the non-Production environments, but it did not pass review by the Plaid team and therefore cannot be enabled in the Production environment. Talk to your Account Manager for more information.
 * @export
 * @enum {string}
 */
export enum PartnerEndCustomerStatus {
    UnderReview = 'UNDER_REVIEW',
    PendingEnablement = 'PENDING_ENABLEMENT',
    Active = 'ACTIVE',
    Denied = 'DENIED'
}

/**
 * The technical contact for the end customer. Defaults to partner\'s technical contact if omitted.
 * @export
 * @interface PartnerEndCustomerTechnicalContact
 */
// Edited by Plaid, line 9. any to unknown
export interface PartnerEndCustomerTechnicalContact {
    [key: string]: object | unknown;

    /**
     * 
     * @type {string}
     * @memberof PartnerEndCustomerTechnicalContact
     */
    given_name?: string;
    /**
     * 
     * @type {string}
     * @memberof PartnerEndCustomerTechnicalContact
     */
    family_name?: string;
    /**
     * 
     * @type {string}
     * @memberof PartnerEndCustomerTechnicalContact
     */
    email?: string;
}
/**
 * The details for the newly created end customer, including secrets for non-Production environments.
 * @export
 * @interface PartnerEndCustomerWithSecrets
 */
// Edited by Plaid, line 9. any to unknown
export interface PartnerEndCustomerWithSecrets {
    /**
     * 
     * @type {string}
     * @memberof PartnerEndCustomerWithSecrets
     */
    client_id?: string;
    /**
     * 
     * @type {string}
     * @memberof PartnerEndCustomerWithSecrets
     */
    company_name?: string;
    /**
     * 
     * @type {PartnerEndCustomerStatus}
     * @memberof PartnerEndCustomerWithSecrets
     */
    status?: PartnerEndCustomerStatus;
    /**
     * 
     * @type {PartnerEndCustomerSecrets}
     * @memberof PartnerEndCustomerWithSecrets
     */
    secrets?: PartnerEndCustomerSecrets;
}
/**
 * 
 * @export
 * @interface PartnerEndCustomerWithSecretsAllOf
 */
// Edited by Plaid, line 9. any to unknown
export interface PartnerEndCustomerWithSecretsAllOf {
    /**
     * 
     * @type {PartnerEndCustomerSecrets}
     * @memberof PartnerEndCustomerWithSecretsAllOf
     */
    secrets?: PartnerEndCustomerSecrets;
}
/**
 * A collection of information about a single party to a transaction. Included direct participants like the borrower and seller as well as indirect participants such as the flood certificate provider.
 * @export
 * @interface Party
 */
// Edited by Plaid, line 9. any to unknown
export interface Party {
    [key: string]: object | unknown;

    /**
     * 
     * @type {PartyIndividual}
     * @memberof Party
     */
    INDIVIDUAL: PartyIndividual;
    /**
     * 
     * @type {Roles}
     * @memberof Party
     */
    ROLES: Roles;
    /**
     * 
     * @type {TaxpayerIdentifiers}
     * @memberof Party
     */
    TAXPAYER_IDENTIFIERS: TaxpayerIdentifiers;
}
/**
 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
 * @export
 * @interface PartyIndividual
 */
// Edited by Plaid, line 9. any to unknown
export interface PartyIndividual {
    [key: string]: object | unknown;

    /**
     * 
     * @type {IndividualName}
     * @memberof PartyIndividual
     */
    NAME: IndividualName;
}
/**
 * A value from a MISMO defined list that identifies the role that the party plays in the transaction. Parties may be either a person or legal entity. A party may play multiple roles in a transaction.A value from a MISMO defined list that identifies the role that the party plays in the transaction. Parties may be either a person or legal entity. A party may play multiple roles in a transaction.
 * @export
 * @enum {string}
 */
export enum PartyRoleType {
    Borrower = 'Borrower'
}

/**
 * An object representing a monetary amount.
 * @export
 * @interface Pay
 */
// Edited by Plaid, line 9. any to unknown
export interface Pay {
    [key: string]: object | unknown;

    /**
     * A numerical amount of a specific currency.
     * @type {number}
     * @memberof Pay
     */
    amount?: number | null;
    /**
     * Currency code, e.g. USD
     * @type {string}
     * @memberof Pay
     */
    currency?: string | null;
}
/**
 * The frequency of the pay period.
 * @export
 * @interface PayFrequency
 */
// Edited by Plaid, line 9. any to unknown
export interface PayFrequency {
    [key: string]: object | unknown;

    /**
     * 
     * @type {PayFrequencyValue}
     * @memberof PayFrequency
     */
    value: PayFrequencyValue;
    /**
     * 
     * @type {VerificationStatus}
     * @memberof PayFrequency
     */
    verification_status: VerificationStatus;
}
/**
 * The frequency of the pay period.
 * @export
 * @enum {string}
 */
export enum PayFrequencyValue {
    Monthly = 'monthly',
    Semimonthly = 'semimonthly',
    Weekly = 'weekly',
    Biweekly = 'biweekly',
    Unknown = 'unknown',
    Null = 'null'
}

/**
 * Details about the pay period.
 * @export
 * @interface PayPeriodDetails
 */
// Edited by Plaid, line 9. any to unknown
export interface PayPeriodDetails {
    [key: string]: object | unknown;

    /**
     * The amount of the paycheck.
     * @type {number}
     * @memberof PayPeriodDetails
     */
    check_amount?: number | null;
    /**
     * 
     * @type {Array<DistributionBreakdown>}
     * @memberof PayPeriodDetails
     */
    distribution_breakdown?: Array<DistributionBreakdown>;
    /**
     * The pay period end date, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format: \"yyyy-mm-dd\".
     * @type {string}
     * @memberof PayPeriodDetails
     */
    end_date?: string | null;
    /**
     * Total earnings before tax/deductions.
     * @type {number}
     * @memberof PayPeriodDetails
     */
    gross_earnings?: number | null;
    /**
     * The date on which the paystub was issued, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (\"yyyy-mm-dd\").
     * @type {string}
     * @memberof PayPeriodDetails
     */
    pay_date?: string | null;
    /**
     * The frequency at which an individual is paid.
     * @type {string}
     * @memberof PayPeriodDetails
     */
    pay_frequency?: PayPeriodDetailsPayFrequencyEnum;
    /**
     * The date on which the paystub was issued, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (\"yyyy-mm-dd\").
     * @type {string}
     * @memberof PayPeriodDetails
     * @deprecated
     */
    pay_day?: string | null;
    /**
     * The pay period start date, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format: \"yyyy-mm-dd\".
     * @type {string}
     * @memberof PayPeriodDetails
     */
    start_date?: string | null;
}

/**
    * @export
    * @enum {string}
    */
export enum PayPeriodDetailsPayFrequencyEnum {
    PayFrequencyUnknown = 'PAY_FREQUENCY_UNKNOWN',
    PayFrequencyWeekly = 'PAY_FREQUENCY_WEEKLY',
    PayFrequencyBiweekly = 'PAY_FREQUENCY_BIWEEKLY',
    PayFrequencySemimonthly = 'PAY_FREQUENCY_SEMIMONTHLY',
    PayFrequencyMonthly = 'PAY_FREQUENCY_MONTHLY',
    Null = 'null'
}

/**
 * An object representing the deduction line items for the pay period
 * @export
 * @interface PayStubDeductionsBreakdown
 */
// Edited by Plaid, line 9. any to unknown
export interface PayStubDeductionsBreakdown {
    [key: string]: object | unknown;

    /**
     * Raw amount of the deduction
     * @type {number}
     * @memberof PayStubDeductionsBreakdown
     */
    current_amount: number | null;
    /**
     * Description of the deduction line item
     * @type {string}
     * @memberof PayStubDeductionsBreakdown
     */
    description: string | null;
    /**
     * The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null.
     * @type {string}
     * @memberof PayStubDeductionsBreakdown
     */
    iso_currency_code: string | null;
    /**
     * The unofficial currency code associated with the line item. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
     * @type {string}
     * @memberof PayStubDeductionsBreakdown
     */
    unofficial_currency_code: string | null;
    /**
     * The year-to-date amount of the deduction
     * @type {number}
     * @memberof PayStubDeductionsBreakdown
     */
    ytd_amount: number | null;
}
/**
 * An object representing the total deductions for the pay period
 * @export
 * @interface PayStubDeductionsTotal
 */
// Edited by Plaid, line 9. any to unknown
export interface PayStubDeductionsTotal {
    [key: string]: object | unknown;

    /**
     * Raw amount of the deduction
     * @type {number}
     * @memberof PayStubDeductionsTotal
     */
    current_amount: number | null;
    /**
     * The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null.
     * @type {string}
     * @memberof PayStubDeductionsTotal
     */
    iso_currency_code: string | null;
    /**
     * The unofficial currency code associated with the line item. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
     * @type {string}
     * @memberof PayStubDeductionsTotal
     */
    unofficial_currency_code: string | null;
    /**
     * The year-to-date total amount of the deductions
     * @type {number}
     * @memberof PayStubDeductionsTotal
     */
    ytd_amount: number | null;
}
/**
 * Information about the accounts that the payment was distributed to.
 * @export
 * @interface PayStubDistributionBreakdown
 */
// Edited by Plaid, line 9. any to unknown
export interface PayStubDistributionBreakdown {
    [key: string]: object | unknown;

    /**
     * Name of the account for the given distribution.
     * @type {string}
     * @memberof PayStubDistributionBreakdown
     */
    account_name: string | null;
    /**
     * The name of the bank that the payment is being deposited to.
     * @type {string}
     * @memberof PayStubDistributionBreakdown
     */
    bank_name: string | null;
    /**
     * The amount distributed to this account.
     * @type {number}
     * @memberof PayStubDistributionBreakdown
     */
    current_amount: number | null;
    /**
     * The ISO-4217 currency code of the net pay. Always `null` if `unofficial_currency_code` is non-null.
     * @type {string}
     * @memberof PayStubDistributionBreakdown
     */
    iso_currency_code: string | null;
    /**
     * The last 2-4 alphanumeric characters of an account\'s official account number.
     * @type {string}
     * @memberof PayStubDistributionBreakdown
     */
    mask: string | null;
    /**
     * Type of the account that the paystub was sent to (e.g. \'checking\').
     * @type {string}
     * @memberof PayStubDistributionBreakdown
     */
    type: string | null;
    /**
     * The unofficial currency code associated with the net pay. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
     * @type {string}
     * @memberof PayStubDistributionBreakdown
     */
    unofficial_currency_code: string | null;
}
/**
 * An object representing the earnings line items for the pay period.
 * @export
 * @interface PayStubEarningsBreakdown
 */
// Edited by Plaid, line 9. any to unknown
export interface PayStubEarningsBreakdown {
    [key: string]: object | unknown;

    /**
     * Commonly used term to describe the earning line item.
     * @type {string}
     * @memberof PayStubEarningsBreakdown
     */
    canonical_description: string | null;
    /**
     * Raw amount of the earning line item.
     * @type {number}
     * @memberof PayStubEarningsBreakdown
     */
    current_amount: number | null;
    /**
     * Description of the earning line item.
     * @type {string}
     * @memberof PayStubEarningsBreakdown
     */
    description: string | null;
    /**
     * Number of hours applicable for this earning.
     * @type {number}
     * @memberof PayStubEarningsBreakdown
     */
    hours: number | null;
    /**
     * The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null.
     * @type {string}
     * @memberof PayStubEarningsBreakdown
     */
    iso_currency_code: string | null;
    /**
     * Hourly rate applicable for this earning.
     * @type {number}
     * @memberof PayStubEarningsBreakdown
     */
    rate: number | null;
    /**
     * The unofficial currency code associated with the line item. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
     * @type {string}
     * @memberof PayStubEarningsBreakdown
     */
    unofficial_currency_code: string | null;
    /**
     * The year-to-date amount of the deduction.
     * @type {number}
     * @memberof PayStubEarningsBreakdown
     */
    ytd_amount: number | null;
}
/**
 * An object representing both the current pay period and year to date amount for an earning category.
 * @export
 * @interface PayStubEarningsTotal
 */
// Edited by Plaid, line 9. any to unknown
export interface PayStubEarningsTotal {
    [key: string]: object | unknown;

    /**
     * Total amount of the earnings for this pay period.
     * @type {number}
     * @memberof PayStubEarningsTotal
     */
    current_amount: number | null;
    /**
     * Total number of hours worked for this pay period.
     * @type {number}
     * @memberof PayStubEarningsTotal
     */
    hours: number | null;
    /**
     * The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null.
     * @type {string}
     * @memberof PayStubEarningsTotal
     */
    iso_currency_code: string | null;
    /**
     * The unofficial currency code associated with the security. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
     * @type {string}
     * @memberof PayStubEarningsTotal
     */
    unofficial_currency_code: string | null;
    /**
     * The total year-to-date amount of the earnings.
     * @type {number}
     * @memberof PayStubEarningsTotal
     */
    ytd_amount: number | null;
}
/**
 * Details about the pay period.
 * @export
 * @interface PayStubPayPeriodDetails
 */
// Edited by Plaid, line 9. any to unknown
export interface PayStubPayPeriodDetails {
    [key: string]: object | unknown;

    /**
     * The amount of the paycheck.
     * @type {number}
     * @memberof PayStubPayPeriodDetails
     */
    pay_amount: number | null;
    /**
     * 
     * @type {Array<PayStubDistributionBreakdown>}
     * @memberof PayStubPayPeriodDetails
     */
    distribution_breakdown: Array<PayStubDistributionBreakdown>;
    /**
     * The date on which the pay period ended, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (\"yyyy-mm-dd\").
     * @type {string}
     * @memberof PayStubPayPeriodDetails
     */
    end_date: string | null;
    /**
     * Total earnings before tax/deductions.
     * @type {number}
     * @memberof PayStubPayPeriodDetails
     */
    gross_earnings: number | null;
    /**
     * The ISO-4217 currency code of the net pay. Always `null` if `unofficial_currency_code` is non-null.
     * @type {string}
     * @memberof PayStubPayPeriodDetails
     */
    iso_currency_code: string | null;
    /**
     * The date on which the pay stub was issued, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (\"yyyy-mm-dd\").
     * @type {string}
     * @memberof PayStubPayPeriodDetails
     */
    pay_date: string | null;
    /**
     * The frequency at which an individual is paid.
     * @type {string}
     * @memberof PayStubPayPeriodDetails
     */
    pay_frequency: string | null;
    /**
     * 
     * @type {CreditPayStubPayBasisType}
     * @memberof PayStubPayPeriodDetails
     */
    pay_basis?: CreditPayStubPayBasisType;
    /**
     * The date on which the pay period started, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (\"yyyy-mm-dd\").
     * @type {string}
     * @memberof PayStubPayPeriodDetails
     */
    start_date: string | null;
    /**
     * The unofficial currency code associated with the net pay. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
     * @type {string}
     * @memberof PayStubPayPeriodDetails
     */
    unofficial_currency_code: string | null;
}
/**
 * Taxpayer ID of the individual receiving the paystub.
 * @export
 * @interface PayStubTaxpayerID
 */
// Edited by Plaid, line 9. any to unknown
export interface PayStubTaxpayerID {
    [key: string]: object | unknown;

    /**
     * Type of ID, e.g. \'SSN\'.
     * @type {string}
     * @memberof PayStubTaxpayerID
     */
    id_type: string | null;
    /**
     * ID mask; i.e. last 4 digits of the taxpayer ID.
     * @type {string}
     * @memberof PayStubTaxpayerID
     */
    id_mask: string | null;
}
/**
 * The amount and currency of a payment
 * @export
 * @interface PaymentAmount
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentAmount {
    /**
     * 
     * @type {PaymentAmountCurrency}
     * @memberof PaymentAmount
     */
    currency: PaymentAmountCurrency;
    /**
     * The amount of the payment. Must contain at most two digits of precision e.g. `1.23`. Minimum accepted value is `1`.
     * @type {number}
     * @memberof PaymentAmount
     */
    value: number;
}
/**
 * The ISO-4217 currency code of the payment. For standing orders and payment consents, `\"GBP\"` must be used. For Poland, Denmark, Sweden and Norway, only the local currency is currently supported.
 * @export
 * @enum {string}
 */
export enum PaymentAmountCurrency {
    Gbp = 'GBP',
    Eur = 'EUR',
    Pln = 'PLN',
    Sek = 'SEK',
    Dkk = 'DKK',
    Nok = 'NOK'
}

/**
 * The amount and currency of a payment
 * @export
 * @interface PaymentAmountNullable
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentAmountNullable {
    [key: string]: object | unknown;

    /**
     * 
     * @type {PaymentAmountCurrency}
     * @memberof PaymentAmountNullable
     */
    currency: PaymentAmountCurrency;
    /**
     * The amount of the payment. Must contain at most two digits of precision e.g. `1.23`.
     * @type {number}
     * @memberof PaymentAmountNullable
     */
    value: number;
}
/**
 * The amount and currency of a payment
 * @export
 * @interface PaymentAmountRefunded
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentAmountRefunded {
    /**
     * 
     * @type {PaymentAmountCurrency}
     * @memberof PaymentAmountRefunded
     */
    currency: PaymentAmountCurrency;
    /**
     * The amount of the payment. Must contain at most two digits of precision e.g. `1.23`.
     * @type {number}
     * @memberof PaymentAmountRefunded
     */
    value: number;
}
/**
 * The amount and currency of a payment
 * @export
 * @interface PaymentAmountToRefund
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentAmountToRefund {
    /**
     * 
     * @type {PaymentAmountCurrency}
     * @memberof PaymentAmountToRefund
     */
    currency: PaymentAmountCurrency;
    /**
     * The amount of the payment. Must contain at most two digits of precision e.g. `1.23`.
     * @type {number}
     * @memberof PaymentAmountToRefund
     */
    value: number;
}
/**
 * The channel used to make a payment. `online:` transactions that took place online.  `in store:` transactions that were made at a physical location.  `other:` transactions that relate to banks, e.g. fees or deposits.
 * @export
 * @enum {string}
 */
export enum PaymentChannel {
    Online = 'online',
    InStore = 'in store',
    Other = 'other'
}

/**
 * Maximum amount of a single payment initiated using the payment consent.
 * @export
 * @interface PaymentConsentMaxPaymentAmount
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentConsentMaxPaymentAmount {
    /**
     * 
     * @type {PaymentAmountCurrency}
     * @memberof PaymentConsentMaxPaymentAmount
     */
    currency: PaymentAmountCurrency;
    /**
     * The amount of the payment. Must contain at most two digits of precision e.g. `1.23`. Minimum accepted value is `1`.
     * @type {number}
     * @memberof PaymentConsentMaxPaymentAmount
     */
    value: number;
}
/**
 * Where the payment consent period should start.  `CALENDAR`: line up with a calendar.  `CONSENT`: on the date of consent creation.
 * @export
 * @enum {string}
 */
export enum PaymentConsentPeriodicAlignment {
    Calendar = 'CALENDAR',
    Consent = 'CONSENT'
}

/**
 * Defines consent payments limitations per period.
 * @export
 * @interface PaymentConsentPeriodicAmount
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentConsentPeriodicAmount {
    /**
     * 
     * @type {PaymentConsentPeriodicAmountAmount}
     * @memberof PaymentConsentPeriodicAmount
     */
    amount: PaymentConsentPeriodicAmountAmount;
    /**
     * 
     * @type {PaymentConsentPeriodicInterval}
     * @memberof PaymentConsentPeriodicAmount
     */
    interval: PaymentConsentPeriodicInterval;
    /**
     * 
     * @type {PaymentConsentPeriodicAlignment}
     * @memberof PaymentConsentPeriodicAmount
     */
    alignment: PaymentConsentPeriodicAlignment;
}
/**
 * Maximum cumulative amount for all payments in the specified interval.
 * @export
 * @interface PaymentConsentPeriodicAmountAmount
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentConsentPeriodicAmountAmount {
    /**
     * 
     * @type {PaymentAmountCurrency}
     * @memberof PaymentConsentPeriodicAmountAmount
     */
    currency: PaymentAmountCurrency;
    /**
     * The amount of the payment. Must contain at most two digits of precision e.g. `1.23`. Minimum accepted value is `1`.
     * @type {number}
     * @memberof PaymentConsentPeriodicAmountAmount
     */
    value: number;
}
/**
 * Payment consent periodic interval.
 * @export
 * @enum {string}
 */
export enum PaymentConsentPeriodicInterval {
    Day = 'DAY',
    Week = 'WEEK',
    Month = 'MONTH',
    Year = 'YEAR'
}

/**
 * Life span for the payment consent. After the `to` date the payment consent expires and can no longer be used for payment initiation.
 * @export
 * @interface PaymentConsentValidDateTime
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentConsentValidDateTime {
    /**
     * The date and time from which the consent should be active, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
     * @type {string}
     * @memberof PaymentConsentValidDateTime
     */
    from?: string | null;
    /**
     * The date and time at which the consent expires, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
     * @type {string}
     * @memberof PaymentConsentValidDateTime
     */
    to?: string | null;
}
/**
 * The optional address of the payment recipient\'s bank account. Required by most institutions outside of the UK.
 * @export
 * @interface PaymentInitiationAddress
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentInitiationAddress {
    [key: string]: object | unknown;

    /**
     * An array of length 1-2 representing the street address where the recipient is located. Maximum of 70 characters.
     * @type {Array<string>}
     * @memberof PaymentInitiationAddress
     */
    street: Array<string>;
    /**
     * The city where the recipient is located. Maximum of 35 characters.
     * @type {string}
     * @memberof PaymentInitiationAddress
     */
    city: string;
    /**
     * The postal code where the recipient is located. Maximum of 16 characters.
     * @type {string}
     * @memberof PaymentInitiationAddress
     */
    postal_code: string;
    /**
     * The ISO 3166-1 alpha-2 country code where the recipient is located.
     * @type {string}
     * @memberof PaymentInitiationAddress
     */
    country: string;
}
/**
 * PaymentInitiationConsent defines a payment initiation consent.
 * @export
 * @interface PaymentInitiationConsent
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentInitiationConsent {
    [key: string]: object | unknown;

    /**
     * The consent ID.
     * @type {string}
     * @memberof PaymentInitiationConsent
     */
    consent_id: string;
    /**
     * 
     * @type {PaymentInitiationConsentStatus}
     * @memberof PaymentInitiationConsent
     */
    status: PaymentInitiationConsentStatus;
    /**
     * Consent creation timestamp, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
     * @type {string}
     * @memberof PaymentInitiationConsent
     */
    created_at: string;
    /**
     * The ID of the recipient the payment consent is for.
     * @type {string}
     * @memberof PaymentInitiationConsent
     */
    recipient_id: string;
    /**
     * A reference for the payment consent.
     * @type {string}
     * @memberof PaymentInitiationConsent
     */
    reference: string;
    /**
     * 
     * @type {PaymentInitiationConsentConstraints}
     * @memberof PaymentInitiationConsent
     */
    constraints: PaymentInitiationConsentConstraints;
    /**
     * An array of payment consent scopes.
     * @type {Array<PaymentInitiationConsentScope>}
     * @memberof PaymentInitiationConsent
     */
    scopes: Array<PaymentInitiationConsentScope>;
}
/**
 * Limitations that will be applied to payments initiated using the payment consent.
 * @export
 * @interface PaymentInitiationConsentConstraints
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentInitiationConsentConstraints {
    /**
     * 
     * @type {PaymentConsentValidDateTime}
     * @memberof PaymentInitiationConsentConstraints
     */
    valid_date_time?: PaymentConsentValidDateTime | null;
    /**
     * 
     * @type {PaymentConsentMaxPaymentAmount}
     * @memberof PaymentInitiationConsentConstraints
     */
    max_payment_amount: PaymentConsentMaxPaymentAmount;
    /**
     * A list of amount limitations per period of time.
     * @type {Array<PaymentConsentPeriodicAmount>}
     * @memberof PaymentInitiationConsentConstraints
     */
    periodic_amounts: Array<PaymentConsentPeriodicAmount>;
}
/**
 * PaymentInitiationConsentCreateRequest defines the request schema for `/payment_initiation/consent/create`
 * @export
 * @interface PaymentInitiationConsentCreateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentInitiationConsentCreateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof PaymentInitiationConsentCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof PaymentInitiationConsentCreateRequest
     */
    secret?: string;
    /**
     * The ID of the recipient the payment consent is for. The created consent can be used to transfer funds to this recipient only.
     * @type {string}
     * @memberof PaymentInitiationConsentCreateRequest
     */
    recipient_id: string;
    /**
     * A reference for the payment consent. This must be an alphanumeric string with at most 18 characters and must not contain any special characters.
     * @type {string}
     * @memberof PaymentInitiationConsentCreateRequest
     */
    reference: string;
    /**
     * An array of payment consent scopes.
     * @type {Set<PaymentInitiationConsentScope>}
     * @memberof PaymentInitiationConsentCreateRequest
     */
    scopes: Set<PaymentInitiationConsentScope>;
    /**
     * 
     * @type {PaymentInitiationConsentConstraints}
     * @memberof PaymentInitiationConsentCreateRequest
     */
    constraints: PaymentInitiationConsentConstraints;
    /**
     * 
     * @type {ExternalPaymentInitiationConsentOptions}
     * @memberof PaymentInitiationConsentCreateRequest
     */
    options?: ExternalPaymentInitiationConsentOptions | null;
}
/**
 * PaymentInitiationConsentCreateResponse defines the response schema for `/payment_initiation/consent/create`
 * @export
 * @interface PaymentInitiationConsentCreateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentInitiationConsentCreateResponse {
    [key: string]: object | unknown;

    /**
     * A unique ID identifying the payment consent.
     * @type {string}
     * @memberof PaymentInitiationConsentCreateResponse
     */
    consent_id: string;
    /**
     * 
     * @type {PaymentInitiationConsentStatus}
     * @memberof PaymentInitiationConsentCreateResponse
     */
    status: PaymentInitiationConsentStatus;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof PaymentInitiationConsentCreateResponse
     */
    request_id: string;
}
/**
 * PaymentInitiationConsentGetRequest defines the request schema for `/payment_initiation/consent/get`
 * @export
 * @interface PaymentInitiationConsentGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentInitiationConsentGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof PaymentInitiationConsentGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof PaymentInitiationConsentGetRequest
     */
    secret?: string;
    /**
     * The `consent_id` returned from `/payment_initiation/consent/create`.
     * @type {string}
     * @memberof PaymentInitiationConsentGetRequest
     */
    consent_id: string;
}
/**
 * PaymentInitiationConsentGetResponse defines the response schema for `/payment_initation/consent/get`
 * @export
 * @interface PaymentInitiationConsentGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentInitiationConsentGetResponse {
    /**
     * The consent ID.
     * @type {string}
     * @memberof PaymentInitiationConsentGetResponse
     */
    consent_id: string;
    /**
     * 
     * @type {PaymentInitiationConsentStatus}
     * @memberof PaymentInitiationConsentGetResponse
     */
    status: PaymentInitiationConsentStatus;
    /**
     * Consent creation timestamp, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
     * @type {string}
     * @memberof PaymentInitiationConsentGetResponse
     */
    created_at: string;
    /**
     * The ID of the recipient the payment consent is for.
     * @type {string}
     * @memberof PaymentInitiationConsentGetResponse
     */
    recipient_id: string;
    /**
     * A reference for the payment consent.
     * @type {string}
     * @memberof PaymentInitiationConsentGetResponse
     */
    reference: string;
    /**
     * 
     * @type {PaymentInitiationConsentConstraints}
     * @memberof PaymentInitiationConsentGetResponse
     */
    constraints: PaymentInitiationConsentConstraints;
    /**
     * An array of payment consent scopes.
     * @type {Array<PaymentInitiationConsentScope>}
     * @memberof PaymentInitiationConsentGetResponse
     */
    scopes: Array<PaymentInitiationConsentScope>;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof PaymentInitiationConsentGetResponse
     */
    request_id: string;
}
/**
 * PaymentInitiationConsentPaymentExecuteRequest defines the request schema for `/payment_initiation/consent/payment/execute`
 * @export
 * @interface PaymentInitiationConsentPaymentExecuteRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentInitiationConsentPaymentExecuteRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof PaymentInitiationConsentPaymentExecuteRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof PaymentInitiationConsentPaymentExecuteRequest
     */
    secret?: string;
    /**
     * The consent ID.
     * @type {string}
     * @memberof PaymentInitiationConsentPaymentExecuteRequest
     */
    consent_id: string;
    /**
     * 
     * @type {PaymentAmount}
     * @memberof PaymentInitiationConsentPaymentExecuteRequest
     */
    amount: PaymentAmount;
    /**
     * A random key provided by the client, per unique consent payment. Maximum of 128 characters.  The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. If a request to execute a consent payment fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single payment is created. If the request was successfully processed, it will prevent any payment that uses the same idempotency key, and was received within 24 hours of the first request, from being processed.
     * @type {string}
     * @memberof PaymentInitiationConsentPaymentExecuteRequest
     */
    idempotency_key: string;
}
/**
 * PaymentInitiationConsentPaymentExecuteResponse defines the response schema for `/payment_initiation/consent/payment/execute`
 * @export
 * @interface PaymentInitiationConsentPaymentExecuteResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentInitiationConsentPaymentExecuteResponse {
    [key: string]: object | unknown;

    /**
     * A unique ID identifying the payment
     * @type {string}
     * @memberof PaymentInitiationConsentPaymentExecuteResponse
     */
    payment_id: string;
    /**
     * 
     * @type {PaymentInitiationPaymentStatus}
     * @memberof PaymentInitiationConsentPaymentExecuteResponse
     */
    status: PaymentInitiationPaymentStatus;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof PaymentInitiationConsentPaymentExecuteResponse
     */
    request_id: string;
}
/**
 * PaymentInitiationConsentRevokeRequest defines the request schema for `/payment_initiation/consent/revoke`
 * @export
 * @interface PaymentInitiationConsentRevokeRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentInitiationConsentRevokeRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof PaymentInitiationConsentRevokeRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof PaymentInitiationConsentRevokeRequest
     */
    secret?: string;
    /**
     * The consent ID.
     * @type {string}
     * @memberof PaymentInitiationConsentRevokeRequest
     */
    consent_id: string;
}
/**
 * PaymentInitiationConsentRevokeResponse defines the response schema for `/payment_initation/consent/revoke`
 * @export
 * @interface PaymentInitiationConsentRevokeResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentInitiationConsentRevokeResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof PaymentInitiationConsentRevokeResponse
     */
    request_id?: string;
}
/**
 * Payment consent scope. Defines possible directions for payments made with the given consent.  `ME_TO_ME`: Allows moving money between accounts owned by the same user.  `EXTERNAL`: Allows initiating payments from the user\'s account to third parties.
 * @export
 * @enum {string}
 */
export enum PaymentInitiationConsentScope {
    MeToMe = 'ME_TO_ME',
    External = 'EXTERNAL'
}

/**
 * The status of the payment consent.  `UNAUTHORISED`: Consent created, but requires user authorisation.  `REJECTED`: Consent authorisation was rejected by the user and/or the bank.  `AUTHORISED`: Consent is active and ready to be used.  `REVOKED`: Consent has been revoked and can no longer be used.  `EXPIRED`: Consent is no longer valid.
 * @export
 * @enum {string}
 */
export enum PaymentInitiationConsentStatus {
    Unauthorised = 'UNAUTHORISED',
    Authorised = 'AUTHORISED',
    Revoked = 'REVOKED',
    Rejected = 'REJECTED',
    Expired = 'EXPIRED'
}

/**
 * Metadata that captures what specific payment configurations an institution supports when making Payment Initiation requests.
 * @export
 * @interface PaymentInitiationMetadata
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentInitiationMetadata {
    [key: string]: object | unknown;

    /**
     * Indicates whether the institution supports payments from a different country.
     * @type {boolean}
     * @memberof PaymentInitiationMetadata
     */
    supports_international_payments: boolean;
    /**
     * Indicates whether the institution supports SEPA Instant payments.
     * @type {boolean}
     * @memberof PaymentInitiationMetadata
     */
    supports_sepa_instant: boolean;
    /**
     * A mapping of currency to maximum payment amount (denominated in the smallest unit of currency) supported by the institution.  Example: `{\"GBP\": \"10000\"}` 
     * @type {{ [key: string]: string; }}
     * @memberof PaymentInitiationMetadata
     */
    maximum_payment_amount: { [key: string]: string; };
    /**
     * Indicates whether the institution supports returning refund details when initiating a payment.
     * @type {boolean}
     * @memberof PaymentInitiationMetadata
     */
    supports_refund_details: boolean;
    /**
     * 
     * @type {PaymentInitiationStandingOrderMetadata}
     * @memberof PaymentInitiationMetadata
     */
    standing_order_metadata: PaymentInitiationStandingOrderMetadata | null;
}
/**
 * An optional object used to restrict the accounts used for payments. If provided, the end user will be able to send payments only from the specified bank account.
 * @export
 * @interface PaymentInitiationOptionalRestrictionBacs
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentInitiationOptionalRestrictionBacs {
    /**
     * The account number of the account. Maximum of 10 characters.
     * @type {string}
     * @memberof PaymentInitiationOptionalRestrictionBacs
     */
    account?: string;
    /**
     * The 6-character sort code of the account.
     * @type {string}
     * @memberof PaymentInitiationOptionalRestrictionBacs
     */
    sort_code?: string;
}
/**
 * PaymentInitiationPayment defines a payment initiation payment
 * @export
 * @interface PaymentInitiationPayment
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentInitiationPayment {
    [key: string]: object | unknown;

    /**
     * The ID of the payment. Like all Plaid identifiers, the `payment_id` is case sensitive.
     * @type {string}
     * @memberof PaymentInitiationPayment
     */
    payment_id: string;
    /**
     * 
     * @type {PaymentAmount}
     * @memberof PaymentInitiationPayment
     */
    amount: PaymentAmount;
    /**
     * 
     * @type {PaymentInitiationPaymentStatus}
     * @memberof PaymentInitiationPayment
     */
    status: PaymentInitiationPaymentStatus;
    /**
     * The ID of the recipient
     * @type {string}
     * @memberof PaymentInitiationPayment
     */
    recipient_id: string;
    /**
     * A reference for the payment.
     * @type {string}
     * @memberof PaymentInitiationPayment
     */
    reference: string;
    /**
     * The value of the reference sent to the bank after adjustment to pass bank validation rules.
     * @type {string}
     * @memberof PaymentInitiationPayment
     */
    adjusted_reference?: string | null;
    /**
     * The date and time of the last time the `status` was updated, in IS0 8601 format
     * @type {string}
     * @memberof PaymentInitiationPayment
     */
    last_status_update: string;
    /**
     * 
     * @type {ExternalPaymentScheduleGet}
     * @memberof PaymentInitiationPayment
     */
    schedule?: ExternalPaymentScheduleGet | null;
    /**
     * 
     * @type {ExternalPaymentRefundDetails}
     * @memberof PaymentInitiationPayment
     */
    refund_details?: ExternalPaymentRefundDetails | null;
    /**
     * 
     * @type {SenderBACSNullable}
     * @memberof PaymentInitiationPayment
     */
    bacs: SenderBACSNullable | null;
    /**
     * The International Bank Account Number (IBAN) for the sender, if specified in the `/payment_initiation/payment/create` call.
     * @type {string}
     * @memberof PaymentInitiationPayment
     */
    iban: string | null;
    /**
     * Refund IDs associated with the payment.
     * @type {Array<string>}
     * @memberof PaymentInitiationPayment
     */
    refund_ids?: Array<string> | null;
    /**
     * 
     * @type {PaymentAmountRefunded}
     * @memberof PaymentInitiationPayment
     */
    amount_refunded?: PaymentAmountRefunded;
    /**
     * The EMI (E-Money Institution) wallet that this payment is associated with, if any. This wallet is used as an intermediary account to enable Plaid to reconcile the settlement of funds for Payment Initiation requests.
     * @type {string}
     * @memberof PaymentInitiationPayment
     */
    wallet_id?: string | null;
    /**
     * 
     * @type {PaymentScheme}
     * @memberof PaymentInitiationPayment
     */
    scheme?: PaymentScheme | null;
    /**
     * 
     * @type {PaymentScheme}
     * @memberof PaymentInitiationPayment
     */
    adjusted_scheme?: PaymentScheme | null;
    /**
     * The payment consent ID that this payment was initiated with. Is present only when payment was initiated using the payment consent.
     * @type {string}
     * @memberof PaymentInitiationPayment
     */
    consent_id?: string | null;
    /**
     * The transaction ID that this payment is associated with, if any. This is present only when a payment was initiated using virtual accounts.
     * @type {string}
     * @memberof PaymentInitiationPayment
     */
    transaction_id?: string | null;
}
/**
 * PaymentInitiationPaymentCreateRequest defines the request schema for `/payment_initiation/payment/create`
 * @export
 * @interface PaymentInitiationPaymentCreateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentInitiationPaymentCreateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof PaymentInitiationPaymentCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof PaymentInitiationPaymentCreateRequest
     */
    secret?: string;
    /**
     * The ID of the recipient the payment is for.
     * @type {string}
     * @memberof PaymentInitiationPaymentCreateRequest
     */
    recipient_id: string;
    /**
     * A reference for the payment. This must be an alphanumeric string with at most 18 characters and must not contain any special characters (since not all institutions support them). In order to track settlement via Payment Confirmation, each payment must have a unique reference. If the reference provided through the API is not unique, Plaid will adjust it. Both the originally provided and automatically adjusted references (if any) can be found in the `reference` and `adjusted_reference` fields, respectively.
     * @type {string}
     * @memberof PaymentInitiationPaymentCreateRequest
     */
    reference: string;
    /**
     * 
     * @type {PaymentAmount}
     * @memberof PaymentInitiationPaymentCreateRequest
     */
    amount: PaymentAmount;
    /**
     * 
     * @type {ExternalPaymentScheduleRequest}
     * @memberof PaymentInitiationPaymentCreateRequest
     */
    schedule?: ExternalPaymentScheduleRequest;
    /**
     * 
     * @type {ExternalPaymentOptions}
     * @memberof PaymentInitiationPaymentCreateRequest
     */
    options?: ExternalPaymentOptions | null;
}
/**
 * PaymentInitiationPaymentCreateResponse defines the response schema for `/payment_initiation/payment/create`
 * @export
 * @interface PaymentInitiationPaymentCreateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentInitiationPaymentCreateResponse {
    [key: string]: object | unknown;

    /**
     * A unique ID identifying the payment
     * @type {string}
     * @memberof PaymentInitiationPaymentCreateResponse
     */
    payment_id: string;
    /**
     * 
     * @type {PaymentInitiationPaymentCreateStatus}
     * @memberof PaymentInitiationPaymentCreateResponse
     */
    status: PaymentInitiationPaymentCreateStatus;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof PaymentInitiationPaymentCreateResponse
     */
    request_id: string;
}
/**
 * For a payment returned by this endpoint, there is only one possible value:  `PAYMENT_STATUS_INPUT_NEEDED`: The initial phase of the payment
 * @export
 * @enum {string}
 */
export enum PaymentInitiationPaymentCreateStatus {
    PaymentStatusInputNeeded = 'PAYMENT_STATUS_INPUT_NEEDED'
}

/**
 * PaymentInitiationPaymentGetRequest defines the request schema for `/payment_initiation/payment/get`
 * @export
 * @interface PaymentInitiationPaymentGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentInitiationPaymentGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof PaymentInitiationPaymentGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof PaymentInitiationPaymentGetRequest
     */
    secret?: string;
    /**
     * The `payment_id` returned from `/payment_initiation/payment/create`.
     * @type {string}
     * @memberof PaymentInitiationPaymentGetRequest
     */
    payment_id: string;
}
/**
 * PaymentInitiationPaymentGetResponse defines the response schema for `/payment_initation/payment/get`
 * @export
 * @interface PaymentInitiationPaymentGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentInitiationPaymentGetResponse {
    /**
     * The ID of the payment. Like all Plaid identifiers, the `payment_id` is case sensitive.
     * @type {string}
     * @memberof PaymentInitiationPaymentGetResponse
     */
    payment_id: string;
    /**
     * 
     * @type {PaymentAmount}
     * @memberof PaymentInitiationPaymentGetResponse
     */
    amount: PaymentAmount;
    /**
     * 
     * @type {PaymentInitiationPaymentStatus}
     * @memberof PaymentInitiationPaymentGetResponse
     */
    status: PaymentInitiationPaymentStatus;
    /**
     * The ID of the recipient
     * @type {string}
     * @memberof PaymentInitiationPaymentGetResponse
     */
    recipient_id: string;
    /**
     * A reference for the payment.
     * @type {string}
     * @memberof PaymentInitiationPaymentGetResponse
     */
    reference: string;
    /**
     * The value of the reference sent to the bank after adjustment to pass bank validation rules.
     * @type {string}
     * @memberof PaymentInitiationPaymentGetResponse
     */
    adjusted_reference?: string | null;
    /**
     * The date and time of the last time the `status` was updated, in IS0 8601 format
     * @type {string}
     * @memberof PaymentInitiationPaymentGetResponse
     */
    last_status_update: string;
    /**
     * 
     * @type {ExternalPaymentScheduleGet}
     * @memberof PaymentInitiationPaymentGetResponse
     */
    schedule?: ExternalPaymentScheduleGet | null;
    /**
     * 
     * @type {ExternalPaymentRefundDetails}
     * @memberof PaymentInitiationPaymentGetResponse
     */
    refund_details?: ExternalPaymentRefundDetails | null;
    /**
     * 
     * @type {SenderBACSNullable}
     * @memberof PaymentInitiationPaymentGetResponse
     */
    bacs: SenderBACSNullable | null;
    /**
     * The International Bank Account Number (IBAN) for the sender, if specified in the `/payment_initiation/payment/create` call.
     * @type {string}
     * @memberof PaymentInitiationPaymentGetResponse
     */
    iban: string | null;
    /**
     * Refund IDs associated with the payment.
     * @type {Array<string>}
     * @memberof PaymentInitiationPaymentGetResponse
     */
    refund_ids?: Array<string> | null;
    /**
     * 
     * @type {PaymentAmountRefunded}
     * @memberof PaymentInitiationPaymentGetResponse
     */
    amount_refunded?: PaymentAmountRefunded;
    /**
     * The EMI (E-Money Institution) wallet that this payment is associated with, if any. This wallet is used as an intermediary account to enable Plaid to reconcile the settlement of funds for Payment Initiation requests.
     * @type {string}
     * @memberof PaymentInitiationPaymentGetResponse
     */
    wallet_id?: string | null;
    /**
     * 
     * @type {PaymentScheme}
     * @memberof PaymentInitiationPaymentGetResponse
     */
    scheme?: PaymentScheme | null;
    /**
     * 
     * @type {PaymentScheme}
     * @memberof PaymentInitiationPaymentGetResponse
     */
    adjusted_scheme?: PaymentScheme | null;
    /**
     * The payment consent ID that this payment was initiated with. Is present only when payment was initiated using the payment consent.
     * @type {string}
     * @memberof PaymentInitiationPaymentGetResponse
     */
    consent_id?: string | null;
    /**
     * The transaction ID that this payment is associated with, if any. This is present only when a payment was initiated using virtual accounts.
     * @type {string}
     * @memberof PaymentInitiationPaymentGetResponse
     */
    transaction_id?: string | null;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof PaymentInitiationPaymentGetResponse
     */
    request_id: string;
}
/**
 * PaymentInitiationPaymentListRequest defines the request schema for `/payment_initiation/payment/list`
 * @export
 * @interface PaymentInitiationPaymentListRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentInitiationPaymentListRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof PaymentInitiationPaymentListRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof PaymentInitiationPaymentListRequest
     */
    secret?: string;
    /**
     * The maximum number of payments to return. If `count` is not specified, a maximum of 10 payments will be returned, beginning with the most recent payment before the cursor (if specified).
     * @type {number}
     * @memberof PaymentInitiationPaymentListRequest
     */
    count?: number | null;
    /**
     * A string in RFC 3339 format (i.e. \"2019-12-06T22:35:49Z\"). Only payments created before the cursor will be returned.
     * @type {string}
     * @memberof PaymentInitiationPaymentListRequest
     */
    cursor?: string | null;
    /**
     * The consent ID. If specified, only payments, executed using this consent, will be returned.
     * @type {string}
     * @memberof PaymentInitiationPaymentListRequest
     */
    consent_id?: string | null;
}
/**
 * PaymentInitiationPaymentListResponse defines the response schema for `/payment_initiation/payment/list`
 * @export
 * @interface PaymentInitiationPaymentListResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentInitiationPaymentListResponse {
    [key: string]: object | unknown;

    /**
     * An array of payments that have been created, associated with the given `client_id`.
     * @type {Array<PaymentInitiationPayment>}
     * @memberof PaymentInitiationPaymentListResponse
     */
    payments: Array<PaymentInitiationPayment>;
    /**
     * The value that, when used as the optional `cursor` parameter to `/payment_initiation/payment/list`, will return the next unreturned payment as its first payment.
     * @type {string}
     * @memberof PaymentInitiationPaymentListResponse
     */
    next_cursor: string | null;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof PaymentInitiationPaymentListResponse
     */
    request_id: string;
}
/**
 * PaymentInitiationPaymentReverseRequest defines the request schema for `/payment_initiation/payment/reverse`
 * @export
 * @interface PaymentInitiationPaymentReverseRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentInitiationPaymentReverseRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof PaymentInitiationPaymentReverseRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof PaymentInitiationPaymentReverseRequest
     */
    secret?: string;
    /**
     * The ID of the payment to reverse
     * @type {string}
     * @memberof PaymentInitiationPaymentReverseRequest
     */
    payment_id: string;
    /**
     * A random key provided by the client, per unique wallet transaction. Maximum of 128 characters.  The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. If a request to execute a wallet transaction fails due to a network connection error, then after a minimum delay of one minute, you can retry the request with the same idempotency key to guarantee that only a single wallet transaction is created. If the request was successfully processed, it will prevent any transaction that uses the same idempotency key, and was received within 24 hours of the first request, from being processed.
     * @type {string}
     * @memberof PaymentInitiationPaymentReverseRequest
     */
    idempotency_key: string;
    /**
     * A reference for the refund. This must be an alphanumeric string with 6 to 18 characters and must not contain any special characters or spaces.
     * @type {string}
     * @memberof PaymentInitiationPaymentReverseRequest
     */
    reference: string;
    /**
     * 
     * @type {PaymentAmountToRefund}
     * @memberof PaymentInitiationPaymentReverseRequest
     */
    amount?: PaymentAmountToRefund;
}
/**
 * PaymentInitiationPaymentReverseResponse defines the response schema for `/payment_initation/payment/reverse`
 * @export
 * @interface PaymentInitiationPaymentReverseResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentInitiationPaymentReverseResponse {
    [key: string]: object | unknown;

    /**
     * A unique ID identifying the refund
     * @type {string}
     * @memberof PaymentInitiationPaymentReverseResponse
     */
    refund_id: string;
    /**
     * 
     * @type {WalletTransactionStatus}
     * @memberof PaymentInitiationPaymentReverseResponse
     */
    status: WalletTransactionStatus;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof PaymentInitiationPaymentReverseResponse
     */
    request_id: string;
}
/**
 * The status of the payment.  `PAYMENT_STATUS_INPUT_NEEDED`: This is the initial state of all payments. It indicates that the payment is waiting on user input to continue processing. A payment may re-enter this state later on if further input is needed.  `PAYMENT_STATUS_INITIATED`: The payment has been successfully authorised and accepted by the financial institution. Further status transitions can be to REJECTED and, when supported by the institution, to EXECUTED.  `PAYMENT_STATUS_INSUFFICIENT_FUNDS`: The payment has failed due to insufficient funds.  `PAYMENT_STATUS_FAILED`: The payment has failed to be initiated. This error is retryable once the root cause is resolved.  `PAYMENT_STATUS_BLOCKED`: The payment has been blocked. This is a retryable error.  `PAYMENT_STATUS_AUTHORISING`: The payment is currently being processed. The payment will automatically exit this state when the financial institution has authorised the transaction.  `PAYMENT_STATUS_CANCELLED`: The payment was cancelled during authorisation.  `PAYMENT_STATUS_EXECUTED`: The funds have successfully left the payer account and payment is considered complete. This status isn’t supported by some institutions.  `PAYMENT_STATUS_SETTLED`: The payment has settled and funds are available for use. Payment settlement can only be guaranteed by using Plaid virtual accounts. A payment will typically settle within seconds to several days, depending on which payment rail is used.  `PAYMENT_STATUS_ESTABLISHED`: Indicates that the standing order has been successfully established. This state is only used for standing orders.  `PAYMENT_STATUS_REJECTED`: The payment was rejected by the financial institution.  Deprecated: These statuses will be removed in a future release.  `PAYMENT_STATUS_UNKNOWN`: The payment status is unknown.  `PAYMENT_STATUS_PROCESSING`: The payment is currently being processed. The payment will automatically exit this state when processing is complete.  `PAYMENT_STATUS_COMPLETED`: Indicates that the standing order has been successfully established. This state is only used for standing orders.
 * @export
 * @enum {string}
 */
export enum PaymentInitiationPaymentStatus {
    InputNeeded = 'PAYMENT_STATUS_INPUT_NEEDED',
    Processing = 'PAYMENT_STATUS_PROCESSING',
    Initiated = 'PAYMENT_STATUS_INITIATED',
    Completed = 'PAYMENT_STATUS_COMPLETED',
    InsufficientFunds = 'PAYMENT_STATUS_INSUFFICIENT_FUNDS',
    Failed = 'PAYMENT_STATUS_FAILED',
    Blocked = 'PAYMENT_STATUS_BLOCKED',
    Unknown = 'PAYMENT_STATUS_UNKNOWN',
    Executed = 'PAYMENT_STATUS_EXECUTED',
    Settled = 'PAYMENT_STATUS_SETTLED',
    Authorising = 'PAYMENT_STATUS_AUTHORISING',
    Cancelled = 'PAYMENT_STATUS_CANCELLED',
    Established = 'PAYMENT_STATUS_ESTABLISHED',
    Rejected = 'PAYMENT_STATUS_REJECTED'
}

/**
 * PaymentInitiationPaymentTokenCreateRequest defines the request schema for `/payment_initiation/payment/token/create`
 * @export
 * @interface PaymentInitiationPaymentTokenCreateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentInitiationPaymentTokenCreateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof PaymentInitiationPaymentTokenCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof PaymentInitiationPaymentTokenCreateRequest
     */
    secret?: string;
    /**
     * The `payment_id` returned from `/payment_initiation/payment/create`.
     * @type {string}
     * @memberof PaymentInitiationPaymentTokenCreateRequest
     */
    payment_id: string;
}
/**
 * PaymentInitiationPaymentTokenCreateResponse defines the response schema for `/payment_initiation/payment/token/create`
 * @export
 * @interface PaymentInitiationPaymentTokenCreateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentInitiationPaymentTokenCreateResponse {
    [key: string]: object | unknown;

    /**
     * A `payment_token` that can be provided to Link initialization to enter the payment initiation flow
     * @type {string}
     * @memberof PaymentInitiationPaymentTokenCreateResponse
     */
    payment_token: string;
    /**
     * The date and time at which the token will expire, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format. A `payment_token` expires after 15 minutes.
     * @type {string}
     * @memberof PaymentInitiationPaymentTokenCreateResponse
     */
    payment_token_expiration_time: string;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof PaymentInitiationPaymentTokenCreateResponse
     */
    request_id: string;
}
/**
 * PaymentInitiationRecipient defines a payment initiation recipient
 * @export
 * @interface PaymentInitiationRecipient
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentInitiationRecipient {
    [key: string]: object | unknown;

    /**
     * The ID of the recipient.
     * @type {string}
     * @memberof PaymentInitiationRecipient
     */
    recipient_id: string;
    /**
     * The name of the recipient.
     * @type {string}
     * @memberof PaymentInitiationRecipient
     */
    name: string;
    /**
     * 
     * @type {PaymentInitiationAddress}
     * @memberof PaymentInitiationRecipient
     */
    address?: PaymentInitiationAddress | null;
    /**
     * The International Bank Account Number (IBAN) for the recipient.
     * @type {string}
     * @memberof PaymentInitiationRecipient
     */
    iban?: string | null;
    /**
     * 
     * @type {RecipientBACSNullable}
     * @memberof PaymentInitiationRecipient
     */
    bacs?: RecipientBACSNullable | null;
}
/**
 * PaymentInitiationRecipientCreateRequest defines the request schema for `/payment_initiation/recipient/create`
 * @export
 * @interface PaymentInitiationRecipientCreateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentInitiationRecipientCreateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof PaymentInitiationRecipientCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof PaymentInitiationRecipientCreateRequest
     */
    secret?: string;
    /**
     * The name of the recipient. We recommend using strings of length 18 or less and avoid special characters to ensure compatibility with all institutions.
     * @type {string}
     * @memberof PaymentInitiationRecipientCreateRequest
     */
    name: string;
    /**
     * The International Bank Account Number (IBAN) for the recipient. If BACS data is not provided, an IBAN is required.
     * @type {string}
     * @memberof PaymentInitiationRecipientCreateRequest
     */
    iban?: string | null;
    /**
     * 
     * @type {RecipientBACSNullable}
     * @memberof PaymentInitiationRecipientCreateRequest
     */
    bacs?: RecipientBACSNullable | null;
    /**
     * 
     * @type {PaymentInitiationAddress}
     * @memberof PaymentInitiationRecipientCreateRequest
     */
    address?: PaymentInitiationAddress | null;
}
/**
 * PaymentInitiationRecipientCreateResponse defines the response schema for `/payment_initation/recipient/create`
 * @export
 * @interface PaymentInitiationRecipientCreateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentInitiationRecipientCreateResponse {
    [key: string]: object | unknown;

    /**
     * A unique ID identifying the recipient
     * @type {string}
     * @memberof PaymentInitiationRecipientCreateResponse
     */
    recipient_id: string;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof PaymentInitiationRecipientCreateResponse
     */
    request_id: string;
}
/**
 * PaymentInitiationRecipientGetRequest defines the request schema for `/payment_initiation/recipient/get`
 * @export
 * @interface PaymentInitiationRecipientGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentInitiationRecipientGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof PaymentInitiationRecipientGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof PaymentInitiationRecipientGetRequest
     */
    secret?: string;
    /**
     * The ID of the recipient
     * @type {string}
     * @memberof PaymentInitiationRecipientGetRequest
     */
    recipient_id: string;
}
/**
 * PaymentInitiationRecipientGetResponse defines the response schema for `/payment_initiation/recipient/get`
 * @export
 * @interface PaymentInitiationRecipientGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentInitiationRecipientGetResponse {
    /**
     * The ID of the recipient.
     * @type {string}
     * @memberof PaymentInitiationRecipientGetResponse
     */
    recipient_id: string;
    /**
     * The name of the recipient.
     * @type {string}
     * @memberof PaymentInitiationRecipientGetResponse
     */
    name: string;
    /**
     * 
     * @type {PaymentInitiationAddress}
     * @memberof PaymentInitiationRecipientGetResponse
     */
    address?: PaymentInitiationAddress | null;
    /**
     * The International Bank Account Number (IBAN) for the recipient.
     * @type {string}
     * @memberof PaymentInitiationRecipientGetResponse
     */
    iban?: string | null;
    /**
     * 
     * @type {RecipientBACSNullable}
     * @memberof PaymentInitiationRecipientGetResponse
     */
    bacs?: RecipientBACSNullable | null;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof PaymentInitiationRecipientGetResponse
     */
    request_id: string;
}
/**
 * 
 * @export
 * @interface PaymentInitiationRecipientGetResponseAllOf
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentInitiationRecipientGetResponseAllOf {
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof PaymentInitiationRecipientGetResponseAllOf
     */
    request_id?: string;
}
/**
 * PaymentInitiationRecipientListRequest defines the request schema for `/payment_initiation/recipient/list`
 * @export
 * @interface PaymentInitiationRecipientListRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentInitiationRecipientListRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof PaymentInitiationRecipientListRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof PaymentInitiationRecipientListRequest
     */
    secret?: string;
}
/**
 * PaymentInitiationRecipientListResponse defines the response schema for `/payment_initiation/recipient/list`
 * @export
 * @interface PaymentInitiationRecipientListResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentInitiationRecipientListResponse {
    [key: string]: object | unknown;

    /**
     * An array of payment recipients created for Payment Initiation
     * @type {Array<PaymentInitiationRecipient>}
     * @memberof PaymentInitiationRecipientListResponse
     */
    recipients: Array<PaymentInitiationRecipient>;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof PaymentInitiationRecipientListResponse
     */
    request_id: string;
}
/**
 * Metadata specifically related to valid Payment Initiation standing order configurations for the institution.
 * @export
 * @interface PaymentInitiationStandingOrderMetadata
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentInitiationStandingOrderMetadata {
    [key: string]: object | unknown;

    /**
     * Indicates whether the institution supports closed-ended standing orders by providing an end date.
     * @type {boolean}
     * @memberof PaymentInitiationStandingOrderMetadata
     */
    supports_standing_order_end_date: boolean;
    /**
     * This is only applicable to `MONTHLY` standing orders. Indicates whether the institution supports negative integers (-1 to -5) for setting up a `MONTHLY` standing order relative to the end of the month.
     * @type {boolean}
     * @memberof PaymentInitiationStandingOrderMetadata
     */
    supports_standing_order_negative_execution_days: boolean;
    /**
     * A list of the valid standing order intervals supported by the institution.
     * @type {Array<PaymentScheduleInterval>}
     * @memberof PaymentInitiationStandingOrderMetadata
     */
    valid_standing_order_intervals: Array<PaymentScheduleInterval>;
}
/**
 * Transaction information specific to inter-bank transfers. If the transaction was not an inter-bank transfer, all fields will be `null`.  If the `transactions` object was returned by a Transactions endpoint such as `/transactions/get`, the `payment_meta` key will always appear, but no data elements are guaranteed. If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
 * @export
 * @interface PaymentMeta
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentMeta {
    [key: string]: object | unknown;

    /**
     * The transaction reference number supplied by the financial institution.
     * @type {string}
     * @memberof PaymentMeta
     */
    reference_number: string | null;
    /**
     * The ACH PPD ID for the payer.
     * @type {string}
     * @memberof PaymentMeta
     */
    ppd_id: string | null;
    /**
     * For transfers, the party that is receiving the transaction.
     * @type {string}
     * @memberof PaymentMeta
     */
    payee: string | null;
    /**
     * The party initiating a wire transfer. Will be `null` if the transaction is not a wire transfer.
     * @type {string}
     * @memberof PaymentMeta
     */
    by_order_of: string | null;
    /**
     * For transfers, the party that is paying the transaction.
     * @type {string}
     * @memberof PaymentMeta
     */
    payer: string | null;
    /**
     * The type of transfer, e.g. \'ACH\'
     * @type {string}
     * @memberof PaymentMeta
     */
    payment_method: string | null;
    /**
     * The name of the payment processor
     * @type {string}
     * @memberof PaymentMeta
     */
    payment_processor: string | null;
    /**
     * The payer-supplied description of the transfer.
     * @type {string}
     * @memberof PaymentMeta
     */
    reason: string | null;
}
/**
 * PaymentProfileCreateRequest defines the request schema for `/payment_profile/create`
 * @export
 * @interface PaymentProfileCreateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentProfileCreateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof PaymentProfileCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof PaymentProfileCreateRequest
     */
    secret?: string;
}
/**
 * PaymentProfileCreateResponse defines the response schema for `/payment_profile/create`
 * @export
 * @interface PaymentProfileCreateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentProfileCreateResponse {
    [key: string]: object | unknown;

    /**
     * A payment profile token associated with the Payment Profile data that is being requested.
     * @type {string}
     * @memberof PaymentProfileCreateResponse
     */
    payment_profile_token: string;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof PaymentProfileCreateResponse
     */
    request_id: string;
}
/**
 * PaymentProfileGetRequest defines the request schema for `/payment_profile/get`
 * @export
 * @interface PaymentProfileGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentProfileGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof PaymentProfileGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof PaymentProfileGetRequest
     */
    secret?: string;
    /**
     * A payment profile token associated with the Payment Profile data that is being requested.
     * @type {string}
     * @memberof PaymentProfileGetRequest
     */
    payment_profile_token: string;
}
/**
 * PaymentProfileGetResponse defines the response schema for `/payment_profile/get`
 * @export
 * @interface PaymentProfileGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentProfileGetResponse {
    [key: string]: object | unknown;

    /**
     * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the last time the given Payment Profile was updated at
     * @type {string}
     * @memberof PaymentProfileGetResponse
     */
    updated_at: string;
    /**
     * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the time the given Payment Profile was created at
     * @type {string}
     * @memberof PaymentProfileGetResponse
     */
    created_at: string;
    /**
     * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the time the given Payment Profile was deleted at. Always `null` if the Payment Profile has not been deleted
     * @type {string}
     * @memberof PaymentProfileGetResponse
     */
    deleted_at: string | null;
    /**
     * 
     * @type {PaymentProfileStatus}
     * @memberof PaymentProfileGetResponse
     */
    status: PaymentProfileStatus;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof PaymentProfileGetResponse
     */
    request_id: string;
}
/**
 * PaymentProfileRemoveRequest defines the request schema for `/payment_profile/remove`
 * @export
 * @interface PaymentProfileRemoveRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentProfileRemoveRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof PaymentProfileRemoveRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof PaymentProfileRemoveRequest
     */
    secret?: string;
    /**
     * A payment profile token associated with the Payment Profile data that is being requested.
     * @type {string}
     * @memberof PaymentProfileRemoveRequest
     */
    payment_profile_token: string;
}
/**
 * PaymentProfileRemoveResponse defines the response schema for `/payment_profile/remove`
 * @export
 * @interface PaymentProfileRemoveResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentProfileRemoveResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof PaymentProfileRemoveResponse
     */
    request_id: string;
}
/**
 * The status of the given Payment Profile.  `READY`: This Payment Profile is ready to be used to create transfers using `/transfer/authorization/create` and `/transfer/create`.  `PENDING`: This Payment Profile is not ready to be used. You’ll need to call `/link/token/create` and provide the `payment_profile_token` in the `transfer.payment_profile_token` field to initiate the account linking experience.  `REMOVED`: This Payment Profile has been removed.
 * @export
 * @enum {string}
 */
export enum PaymentProfileStatus {
    Pending = 'PENDING',
    Ready = 'READY',
    Removed = 'REMOVED'
}

/**
 * The frequency interval of the payment.
 * @export
 * @enum {string}
 */
export enum PaymentScheduleInterval {
    Weekly = 'WEEKLY',
    Monthly = 'MONTHLY'
}

/**
 * Payment scheme. If not specified - the default in the region will be used (e.g. `SEPA_CREDIT_TRANSFER` for EU). Using unsupported values will result in a failed payment.  `LOCAL_DEFAULT`: The default payment scheme for the selected market and currency will be used.  `LOCAL_INSTANT`: The instant payment scheme for the selected market and currency will be used (if applicable). Fees may be applied by the institution. If the market does not support an Instant Scheme (e.g. Denmark), the default in the region will be used.  `SEPA_CREDIT_TRANSFER`: The standard payment to a beneficiary within the SEPA area.  `SEPA_CREDIT_TRANSFER_INSTANT`: Instant payment within the SEPA area. May involve additional fees and may not be available at some banks.
 * @export
 * @enum {string}
 */
export enum PaymentScheme {
    Null = 'null',
    LocalDefault = 'LOCAL_DEFAULT',
    LocalInstant = 'LOCAL_INSTANT',
    SepaCreditTransfer = 'SEPA_CREDIT_TRANSFER',
    SepaCreditTransferInstant = 'SEPA_CREDIT_TRANSFER_INSTANT'
}

/**
 * Fired when the status of a payment has changed.
 * @export
 * @interface PaymentStatusUpdateWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface PaymentStatusUpdateWebhook {
    [key: string]: object | unknown;

    /**
     * `PAYMENT_INITIATION`
     * @type {string}
     * @memberof PaymentStatusUpdateWebhook
     */
    webhook_type: string;
    /**
     * `PAYMENT_STATUS_UPDATE`
     * @type {string}
     * @memberof PaymentStatusUpdateWebhook
     */
    webhook_code: string;
    /**
     * The `payment_id` for the payment being updated
     * @type {string}
     * @memberof PaymentStatusUpdateWebhook
     */
    payment_id: string;
    /**
     * The transaction ID that this payment is associated with, if any. This is present only when a payment was initiated using virtual accounts.
     * @type {string}
     * @memberof PaymentStatusUpdateWebhook
     */
    transaction_id?: string | null;
    /**
     * 
     * @type {PaymentInitiationPaymentStatus}
     * @memberof PaymentStatusUpdateWebhook
     */
    new_payment_status: PaymentInitiationPaymentStatus;
    /**
     * 
     * @type {PaymentInitiationPaymentStatus}
     * @memberof PaymentStatusUpdateWebhook
     */
    old_payment_status: PaymentInitiationPaymentStatus;
    /**
     * The original value of the reference when creating the payment.
     * @type {string}
     * @memberof PaymentStatusUpdateWebhook
     */
    original_reference: string | null;
    /**
     * The value of the reference sent to the bank after adjustment to pass bank validation rules.
     * @type {string}
     * @memberof PaymentStatusUpdateWebhook
     */
    adjusted_reference?: string | null;
    /**
     * The original value of the `start_date` provided during the creation of a standing order. If the payment is not a standing order, this field will be `null`.
     * @type {string}
     * @memberof PaymentStatusUpdateWebhook
     */
    original_start_date: string | null;
    /**
     * The start date sent to the bank after adjusting for holidays or weekends.  Will be provided in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). If the start date did not require adjustment, or if the payment is not a standing order, this field will be `null`.
     * @type {string}
     * @memberof PaymentStatusUpdateWebhook
     */
    adjusted_start_date: string | null;
    /**
     * The timestamp of the update, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format, e.g. `\"2017-09-14T14:42:19.350Z\"`
     * @type {string}
     * @memberof PaymentStatusUpdateWebhook
     */
    timestamp: string;
    /**
     * 
     * @type {PlaidError}
     * @memberof PaymentStatusUpdateWebhook
     */
    error?: PlaidError | null;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof PaymentStatusUpdateWebhook
     */
    environment: WebhookEnvironmentValues;
}
/**
 * An object containing account level data.
 * @export
 * @interface PayrollIncomeAccountData
 */
// Edited by Plaid, line 9. any to unknown
export interface PayrollIncomeAccountData {
    [key: string]: object | unknown;

    /**
     * ID of the payroll provider account.
     * @type {string}
     * @memberof PayrollIncomeAccountData
     */
    account_id: string | null;
    /**
     * 
     * @type {PayrollIncomeRateOfPay}
     * @memberof PayrollIncomeAccountData
     */
    rate_of_pay: PayrollIncomeRateOfPay;
    /**
     * The frequency at which an individual is paid.
     * @type {string}
     * @memberof PayrollIncomeAccountData
     */
    pay_frequency: string | null;
}
/**
 * An object representing payroll data.
 * @export
 * @interface PayrollIncomeObject
 */
// Edited by Plaid, line 9. any to unknown
export interface PayrollIncomeObject {
    [key: string]: object | unknown;

    /**
     * ID of the payroll provider account.
     * @type {string}
     * @memberof PayrollIncomeObject
     */
    account_id: string | null;
    /**
     * Array of pay stubs for the user.
     * @type {Array<CreditPayStub>}
     * @memberof PayrollIncomeObject
     */
    pay_stubs: Array<CreditPayStub>;
    /**
     * Array of tax form W-2s.
     * @type {Array<CreditW2>}
     * @memberof PayrollIncomeObject
     */
    w2s: Array<CreditW2>;
    /**
     * Array of tax form 1099s.
     * @type {Array<Credit1099>}
     * @memberof PayrollIncomeObject
     */
    form1099s: Array<Credit1099>;
}
/**
 * An object representing the rate at which an individual is paid.
 * @export
 * @interface PayrollIncomeRateOfPay
 */
// Edited by Plaid, line 9. any to unknown
export interface PayrollIncomeRateOfPay {
    [key: string]: object | unknown;

    /**
     * The rate at which an employee is paid.
     * @type {string}
     * @memberof PayrollIncomeRateOfPay
     */
    pay_rate?: string | null;
    /**
     * The amount at which an employee is paid.
     * @type {number}
     * @memberof PayrollIncomeRateOfPay
     */
    pay_amount?: number | null;
}
/**
 * An object containing information about the payroll item.
 * @export
 * @interface PayrollItem
 */
// Edited by Plaid, line 9. any to unknown
export interface PayrollItem {
    /**
     * The `item_id` of the Item associated with this webhook, warning, or error
     * @type {string}
     * @memberof PayrollItem
     */
    item_id: string;
    /**
     * The unique identifier of the institution associated with the Item.
     * @type {string}
     * @memberof PayrollItem
     */
    institution_id: string;
    /**
     * The name of the institution associated with the Item.
     * @type {string}
     * @memberof PayrollItem
     */
    institution_name: string;
    /**
     * 
     * @type {Array<PayrollIncomeAccountData>}
     * @memberof PayrollItem
     */
    accounts: Array<PayrollIncomeAccountData>;
    /**
     * 
     * @type {Array<PayrollIncomeObject>}
     * @memberof PayrollItem
     */
    payroll_income: Array<PayrollIncomeObject>;
    /**
     * 
     * @type {PayrollItemStatus}
     * @memberof PayrollItem
     */
    status: PayrollItemStatus | null;
    /**
     * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DDTHH:mm:ssZ) indicating the last time that the Item was updated.
     * @type {string}
     * @memberof PayrollItem
     */
    updated_at: string | null;
}
/**
 * Details about the status of the payroll item.
 * @export
 * @interface PayrollItemStatus
 */
// Edited by Plaid, line 9. any to unknown
export interface PayrollItemStatus {
    [key: string]: object | unknown;

    /**
     * Denotes the processing status for the verification.  `UNKNOWN`: The processing status could not be determined.  `PROCESSING_COMPLETE`: The processing has completed and the user has approved for sharing. The data is available to be retrieved.  `PROCESSING`: The verification is still processing. The data is not available yet.  `FAILED`: The processing failed to complete successfully.  `APPROVAL_STATUS_PENDING`: The processing has completed but the user has not yet approved the sharing of the data.
     * @type {string}
     * @memberof PayrollItemStatus
     */
    processing_status?: string | null;
}
/**
 * Object containing fraud risk data pertaining to the Item linked as part of the verification.
 * @export
 * @interface PayrollRiskSignalsItem
 */
// Edited by Plaid, line 9. any to unknown
export interface PayrollRiskSignalsItem {
    [key: string]: object | unknown;

    /**
     * The `item_id` of the Item associated with this webhook, warning, or error
     * @type {string}
     * @memberof PayrollRiskSignalsItem
     */
    item_id: string;
    /**
     * Array of payroll income document authenticity data retrieved for each of the user\'s accounts.
     * @type {Array<DocumentRiskSignalsObject>}
     * @memberof PayrollRiskSignalsItem
     */
    verification_risk_signals: Array<DocumentRiskSignalsObject>;
}
/**
 * An object representing data extracted from the end user\'s paystub.
 * @export
 * @interface Paystub
 */
// Edited by Plaid, line 9. any to unknown
export interface Paystub {
    [key: string]: object | unknown;

    /**
     * 
     * @type {Deductions}
     * @memberof Paystub
     */
    deductions: Deductions;
    /**
     * An identifier of the document referenced by the document metadata.
     * @type {string}
     * @memberof Paystub
     */
    doc_id: string;
    /**
     * 
     * @type {Earnings}
     * @memberof Paystub
     */
    earnings: Earnings;
    /**
     * 
     * @type {Employee}
     * @memberof Paystub
     */
    employee: Employee;
    /**
     * 
     * @type {PaystubEmployer}
     * @memberof Paystub
     */
    employer: PaystubEmployer;
    /**
     * 
     * @type {EmploymentDetails}
     * @memberof Paystub
     * @deprecated
     */
    employment_details?: EmploymentDetails;
    /**
     * 
     * @type {NetPay}
     * @memberof Paystub
     */
    net_pay: NetPay;
    /**
     * 
     * @type {PayPeriodDetails}
     * @memberof Paystub
     */
    pay_period_details: PayPeriodDetails;
    /**
     * 
     * @type {PaystubDetails}
     * @memberof Paystub
     * @deprecated
     */
    paystub_details?: PaystubDetails;
    /**
     * 
     * @type {Array<IncomeBreakdown>}
     * @memberof Paystub
     * @deprecated
     */
    income_breakdown?: Array<IncomeBreakdown>;
    /**
     * 
     * @type {PaystubYTDDetails}
     * @memberof Paystub
     * @deprecated
     */
    ytd_earnings?: PaystubYTDDetails;
}
/**
 * Address on the paystub
 * @export
 * @interface PaystubAddress
 */
// Edited by Plaid, line 9. any to unknown
export interface PaystubAddress {
    [key: string]: object | unknown;

    /**
     * The full city name.
     * @type {string}
     * @memberof PaystubAddress
     */
    city?: string | null;
    /**
     * The ISO 3166-1 alpha-2 country code.
     * @type {string}
     * @memberof PaystubAddress
     */
    country?: string | null;
    /**
     * The postal code of the address.
     * @type {string}
     * @memberof PaystubAddress
     */
    postal_code?: string | null;
    /**
     * The region or state Example: `\"NC\"`
     * @type {string}
     * @memberof PaystubAddress
     */
    region?: string | null;
    /**
     * The full street address.
     * @type {string}
     * @memberof PaystubAddress
     */
    street?: string | null;
    /**
     * Street address line 1.
     * @type {string}
     * @memberof PaystubAddress
     * @deprecated
     */
    line1?: string | null;
    /**
     * Street address line 2.
     * @type {string}
     * @memberof PaystubAddress
     * @deprecated
     */
    line2?: string | null;
    /**
     * The region or state Example: `\"NC\"`
     * @type {string}
     * @memberof PaystubAddress
     * @deprecated
     */
    state_code?: string | null;
}
/**
 * Deduction on the paystub
 * @export
 * @interface PaystubDeduction
 */
// Edited by Plaid, line 9. any to unknown
export interface PaystubDeduction {
    [key: string]: object | unknown;

    /**
     * The description of the deduction, as provided on the paystub. For example: `\"401(k)\"`, `\"FICA MED TAX\"`.
     * @type {string}
     * @memberof PaystubDeduction
     */
    type: string | null;
    /**
     * `true` if the deduction is pre-tax; `false` otherwise.
     * @type {boolean}
     * @memberof PaystubDeduction
     */
    is_pretax: boolean | null;
    /**
     * The amount of the deduction.
     * @type {number}
     * @memberof PaystubDeduction
     */
    total: number | null;
}
/**
 * An object representing details that can be found on the paystub.
 * @export
 * @interface PaystubDetails
 */
// Edited by Plaid, line 9. any to unknown
export interface PaystubDetails {
    [key: string]: object | unknown;

    /**
     * Beginning date of the pay period on the paystub in the \'YYYY-MM-DD\' format.
     * @type {string}
     * @memberof PaystubDetails
     */
    pay_period_start_date?: string | null;
    /**
     * Ending date of the pay period on the paystub in the \'YYYY-MM-DD\' format.
     * @type {string}
     * @memberof PaystubDetails
     */
    pay_period_end_date?: string | null;
    /**
     * Pay date on the paystub in the \'YYYY-MM-DD\' format.
     * @type {string}
     * @memberof PaystubDetails
     */
    pay_date?: string | null;
    /**
     * The name of the payroll provider that generated the paystub, e.g. ADP
     * @type {string}
     * @memberof PaystubDetails
     */
    paystub_provider?: string | null;
    /**
     * 
     * @type {PaystubPayFrequency}
     * @memberof PaystubDetails
     */
    pay_frequency?: PaystubPayFrequency | null;
}
/**
 * Information about the employer on the paystub
 * @export
 * @interface PaystubEmployer
 */
// Edited by Plaid, line 9. any to unknown
export interface PaystubEmployer {
    [key: string]: object | unknown;

    /**
     * 
     * @type {PaystubAddress}
     * @memberof PaystubEmployer
     */
    address?: PaystubAddress;
    /**
     * The name of the employer on the paystub.
     * @type {string}
     * @memberof PaystubEmployer
     */
    name: string | null;
}
/**
 * An object representing data from a paystub.
 * @export
 * @interface PaystubOverride
 */
// Edited by Plaid, line 9. any to unknown
export interface PaystubOverride {
    /**
     * 
     * @type {PaystubOverrideEmployer}
     * @memberof PaystubOverride
     */
    employer?: PaystubOverrideEmployer;
    /**
     * 
     * @type {PaystubOverrideEmployee}
     * @memberof PaystubOverride
     */
    employee?: PaystubOverrideEmployee;
    /**
     * 
     * @type {Array<IncomeBreakdown>}
     * @memberof PaystubOverride
     */
    income_breakdown?: Array<IncomeBreakdown>;
    /**
     * 
     * @type {PayPeriodDetails}
     * @memberof PaystubOverride
     */
    pay_period_details?: PayPeriodDetails;
}
/**
 * The employee on the paystub.
 * @export
 * @interface PaystubOverrideEmployee
 */
// Edited by Plaid, line 9. any to unknown
export interface PaystubOverrideEmployee {
    /**
     * The name of the employee.
     * @type {string}
     * @memberof PaystubOverrideEmployee
     */
    name?: string;
    /**
     * 
     * @type {PaystubOverrideEmployeeAddress}
     * @memberof PaystubOverrideEmployee
     */
    address?: PaystubOverrideEmployeeAddress;
}
/**
 * The address of the employee.
 * @export
 * @interface PaystubOverrideEmployeeAddress
 */
// Edited by Plaid, line 9. any to unknown
export interface PaystubOverrideEmployeeAddress {
    /**
     * The full city name.
     * @type {string}
     * @memberof PaystubOverrideEmployeeAddress
     */
    city?: string;
    /**
     * The region or state Example: `\"NC\"`
     * @type {string}
     * @memberof PaystubOverrideEmployeeAddress
     */
    region?: string;
    /**
     * The full street address Example: `\"564 Main Street, APT 15\"`
     * @type {string}
     * @memberof PaystubOverrideEmployeeAddress
     */
    street?: string;
    /**
     * 5 digit postal code.
     * @type {string}
     * @memberof PaystubOverrideEmployeeAddress
     */
    postal_code?: string;
    /**
     * The country of the address.
     * @type {string}
     * @memberof PaystubOverrideEmployeeAddress
     */
    country?: string;
}
/**
 * The employer on the paystub.
 * @export
 * @interface PaystubOverrideEmployer
 */
// Edited by Plaid, line 9. any to unknown
export interface PaystubOverrideEmployer {
    /**
     * The name of the employer.
     * @type {string}
     * @memberof PaystubOverrideEmployer
     */
    name?: string;
}
/**
 * The frequency at which the employee is paid. Possible values: `MONTHLY`, `BI-WEEKLY`, `WEEKLY`, `SEMI-MONTHLY`.
 * @export
 * @enum {string}
 */
export enum PaystubPayFrequency {
    Monthly = 'MONTHLY',
    BiWeekly = 'BI-WEEKLY',
    Weekly = 'WEEKLY',
    SemiMonthly = 'SEMI-MONTHLY',
    Null = 'null'
}

/**
 * The amount of income earned year to date, as based on paystub data.
 * @export
 * @interface PaystubYTDDetails
 */
// Edited by Plaid, line 9. any to unknown
export interface PaystubYTDDetails {
    [key: string]: object | unknown;

    /**
     * Year-to-date gross earnings.
     * @type {number}
     * @memberof PaystubYTDDetails
     */
    gross_earnings?: number | null;
    /**
     * Year-to-date net (take home) earnings.
     * @type {number}
     * @memberof PaystubYTDDetails
     */
    net_earnings?: number | null;
}
/**
 * Fired when an Item’s access consent is expiring in 7 days. Some Items have explicit expiration times and we try to relay this when possible to reduce service disruption. This can be resolved by having the user go through Link’s update mode.
 * @export
 * @interface PendingExpirationWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface PendingExpirationWebhook {
    [key: string]: object | unknown;

    /**
     * `ITEM`
     * @type {string}
     * @memberof PendingExpirationWebhook
     */
    webhook_type: string;
    /**
     * `PENDING_EXPIRATION`
     * @type {string}
     * @memberof PendingExpirationWebhook
     */
    webhook_code: string;
    /**
     * The `item_id` of the Item associated with this webhook, warning, or error
     * @type {string}
     * @memberof PendingExpirationWebhook
     */
    item_id: string;
    /**
     * The date and time at which the Item\'s access consent will expire, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format
     * @type {string}
     * @memberof PendingExpirationWebhook
     */
    consent_expiration_time: string;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof PendingExpirationWebhook
     */
    environment: WebhookEnvironmentValues;
}
/**
 * Information describing the intent of the transaction. Most relevant for personal finance use cases, but not limited to such use cases.  See the [`taxonomy csv file`](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) for a full list of personal finance categories.
 * @export
 * @interface PersonalFinanceCategory
 */
// Edited by Plaid, line 9. any to unknown
export interface PersonalFinanceCategory {
    [key: string]: object | unknown;

    /**
     * A high level category that communicates the broad category of the transaction.
     * @type {string}
     * @memberof PersonalFinanceCategory
     */
    primary: string;
    /**
     * A granular category conveying the transaction\'s intent. This field can also be used as a unique identifier for the category.
     * @type {string}
     * @memberof PersonalFinanceCategory
     */
    detailed: string;
}
/**
 * A phone number
 * @export
 * @interface PhoneNumber
 */
// Edited by Plaid, line 9. any to unknown
export interface PhoneNumber {
    [key: string]: object | unknown;

    /**
     * The phone number.
     * @type {string}
     * @memberof PhoneNumber
     */
    data: string;
    /**
     * When `true`, identifies the phone number as the primary number on an account.
     * @type {boolean}
     * @memberof PhoneNumber
     */
    primary: boolean;
    /**
     * The type of phone number.
     * @type {string}
     * @memberof PhoneNumber
     */
    type: PhoneNumberTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum PhoneNumberTypeEnum {
    Home = 'home',
    Work = 'work',
    Office = 'office',
    Mobile = 'mobile',
    Mobile1 = 'mobile1',
    Other = 'other'
}

/**
 * Score found by matching phone number provided by the API with the phone number on the account at the financial institution. 100 is a perfect match and 0 is a no match. If the account contains multiple owners, the maximum match score is filled.
 * @export
 * @interface PhoneNumberMatchScore
 */
// Edited by Plaid, line 9. any to unknown
export interface PhoneNumberMatchScore {
    [key: string]: object | unknown;

    /**
     * Match score for normalized phone number. 100 is a perfect match and 0 is a no match. If the phone number is missing from either the API or financial institution, this is null.
     * @type {number}
     * @memberof PhoneNumberMatchScore
     */
    score?: number | null;
}
/**
 * An enum indicating whether a phone number is a phone line or a fax line.
 * @export
 * @enum {string}
 */
export enum PhoneType {
    Phone = 'phone',
    Fax = 'fax'
}

/**
 * The type of identity document detected in the images provided. Will always be one of the following values:    `drivers_license` - A driver\'s license for the associated country    `id_card` - A general national identification card, distinct from driver\'s licenses    `passport` - A passport for the associated country    `residence_permit_card` - An identity document permitting a foreign citizen to <em>temporarily</em> reside in the associated country    `resident_card` - An identity document permitting a foreign citizen to <em>permanently</em> reside in the associated country  Note: This value may be different from the ID type that the user selects within Link. For example, if they select \"Driver\'s License\" but then submit a picture of a passport, this field will say `passport`
 * @export
 * @enum {string}
 */
export enum PhysicalDocumentCategory {
    DriversLicense = 'drivers_license',
    IdCard = 'id_card',
    Passport = 'passport',
    ResidencePermitCard = 'residence_permit_card',
    ResidentCard = 'resident_card'
}

/**
 * Data extracted from a user-submitted document.
 * @export
 * @interface PhysicalDocumentExtractedData
 */
// Edited by Plaid, line 9. any to unknown
export interface PhysicalDocumentExtractedData {
    [key: string]: object | unknown;

    /**
     * Alpha-numeric ID number extracted via OCR from the user\'s document image.
     * @type {string}
     * @memberof PhysicalDocumentExtractedData
     */
    id_number: string | null;
    /**
     * 
     * @type {PhysicalDocumentCategory}
     * @memberof PhysicalDocumentExtractedData
     */
    category: PhysicalDocumentCategory;
    /**
     * A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
     * @type {string}
     * @memberof PhysicalDocumentExtractedData
     */
    expiration_date: string | null;
    /**
     * Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form.
     * @type {string}
     * @memberof PhysicalDocumentExtractedData
     */
    issuing_country: string;
    /**
     * An ISO 3166-2 subdivision code. Related terms would be \"state\", \"province\", \"prefecture\", \"zone\", \"subdivision\", etc.
     * @type {string}
     * @memberof PhysicalDocumentExtractedData
     */
    issuing_region: string | null;
}
/**
 * Analysis of the data extracted from the submitted document.
 * @export
 * @interface PhysicalDocumentExtractedDataAnalysis
 */
// Edited by Plaid, line 9. any to unknown
export interface PhysicalDocumentExtractedDataAnalysis {
    [key: string]: object | unknown;

    /**
     * 
     * @type {DocumentNameMatchCode}
     * @memberof PhysicalDocumentExtractedDataAnalysis
     */
    name: DocumentNameMatchCode;
    /**
     * 
     * @type {DocumentDateOfBirthMatchCode}
     * @memberof PhysicalDocumentExtractedDataAnalysis
     */
    date_of_birth: DocumentDateOfBirthMatchCode;
    /**
     * 
     * @type {ExpirationDate}
     * @memberof PhysicalDocumentExtractedDataAnalysis
     */
    expiration_date: ExpirationDate;
    /**
     * 
     * @type {IssuingCountry}
     * @memberof PhysicalDocumentExtractedDataAnalysis
     */
    issuing_country: IssuingCountry;
}
/**
 * URLs for downloading original and cropped images for this document submission. The URLs are designed to only allow downloading, not hot linking, so the URL will only serve the document image for 60 seconds before expiring. The expiration time is 60 seconds after the `GET` request for the associated Identity Verification attempt. A new expiring URL is generated with each request, so you can always rerequest the Identity Verification attempt if one of your URLs expires.
 * @export
 * @interface PhysicalDocumentImages
 */
// Edited by Plaid, line 9. any to unknown
export interface PhysicalDocumentImages {
    [key: string]: object | unknown;

    /**
     * Temporary URL that expires after 60 seconds for downloading the uncropped original image of the front of the document.
     * @type {string}
     * @memberof PhysicalDocumentImages
     */
    original_front: string | null;
    /**
     * Temporary URL that expires after 60 seconds for downloading the original image of the back of the document. Might be null if the back of the document was not collected.
     * @type {string}
     * @memberof PhysicalDocumentImages
     */
    original_back: string | null;
    /**
     * Temporary URL that expires after 60 seconds for downloading a cropped image containing just the front of the document.
     * @type {string}
     * @memberof PhysicalDocumentImages
     */
    cropped_front: string | null;
    /**
     * Temporary URL that expires after 60 seconds for downloading a cropped image containing just the back of the document. Might be null if the back of the document was not collected.
     * @type {string}
     * @memberof PhysicalDocumentImages
     */
    cropped_back: string | null;
    /**
     * Temporary URL that expires after 60 seconds for downloading a crop of just the user\'s face from the document image. Might be null if the document does not contain a face photo.
     * @type {string}
     * @memberof PhysicalDocumentImages
     */
    face: string | null;
}
/**
 * We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues. An Item with a non-`null` error object will only be part of an API response when calling `/item/get` to view Item status. Otherwise, error fields will be `null` if no error has occurred; if an error has occurred, an error code will be returned instead.
 * @export
 * @interface PlaidError
 */
// Edited by Plaid, line 9. any to unknown
export interface PlaidError {
    [key: string]: object | unknown;

    /**
     * 
     * @type {PlaidErrorType}
     * @memberof PlaidError
     */
    error_type: PlaidErrorType;
    /**
     * The particular error code. Safe for programmatic use.
     * @type {string}
     * @memberof PlaidError
     */
    error_code: string;
    /**
     * A developer-friendly representation of the error code. This may change over time and is not safe for programmatic use.
     * @type {string}
     * @memberof PlaidError
     */
    error_message: string;
    /**
     * A user-friendly representation of the error code. `null` if the error is not related to user action.  This may change over time and is not safe for programmatic use.
     * @type {string}
     * @memberof PlaidError
     */
    display_message: string | null;
    /**
     * A unique ID identifying the request, to be used for troubleshooting purposes. This field will be omitted in errors provided by webhooks.
     * @type {string}
     * @memberof PlaidError
     */
    request_id?: string;
    /**
     * In the Assets product, a request can pertain to more than one Item. If an error is returned for such a request, `causes` will return an array of errors containing a breakdown of these errors on the individual Item level, if any can be identified.  `causes` will only be provided for the `error_type` `ASSET_REPORT_ERROR`. `causes` will also not be populated inside an error nested within a `warning` object.
     * @type {Array<any>}
     * @memberof PlaidError
     */
    causes?: Array<any>;
    /**
     * The HTTP status code associated with the error. This will only be returned in the response body when the error information is provided via a webhook.
     * @type {number}
     * @memberof PlaidError
     */
    status?: number | null;
    /**
     * The URL of a Plaid documentation page with more information about the error
     * @type {string}
     * @memberof PlaidError
     */
    documentation_url?: string;
    /**
     * Suggested steps for resolving the error
     * @type {string}
     * @memberof PlaidError
     */
    suggested_action?: string | null;
}
/**
 * A broad categorization of the error. Safe for programmatic use.
 * @export
 * @enum {string}
 */
export enum PlaidErrorType {
    InvalidRequest = 'INVALID_REQUEST',
    InvalidResult = 'INVALID_RESULT',
    InvalidInput = 'INVALID_INPUT',
    InstitutionError = 'INSTITUTION_ERROR',
    RateLimitExceeded = 'RATE_LIMIT_EXCEEDED',
    ApiError = 'API_ERROR',
    ItemError = 'ITEM_ERROR',
    AssetReportError = 'ASSET_REPORT_ERROR',
    RecaptchaError = 'RECAPTCHA_ERROR',
    OauthError = 'OAUTH_ERROR',
    PaymentError = 'PAYMENT_ERROR',
    BankTransferError = 'BANK_TRANSFER_ERROR',
    IncomeVerificationError = 'INCOME_VERIFICATION_ERROR',
    MicrodepositsError = 'MICRODEPOSITS_ERROR'
}

/**
 * An object containing a set of ids related to an employee
 * @export
 * @interface PlatformIds
 */
// Edited by Plaid, line 9. any to unknown
export interface PlatformIds {
    [key: string]: object | unknown;

    /**
     * The ID of an employee as given by their employer
     * @type {string}
     * @memberof PlatformIds
     */
    employee_id?: string | null;
    /**
     * The ID of an employee as given by their payroll
     * @type {string}
     * @memberof PlatformIds
     */
    payroll_id?: string | null;
    /**
     * The ID of the position of the employee
     * @type {string}
     * @memberof PlatformIds
     */
    position_id?: string | null;
}
/**
 * ProcessorApexProcessorTokenCreateRequest defines the request schema for `/processor/apex/processor_token/create`
 * @export
 * @interface ProcessorApexProcessorTokenCreateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface ProcessorApexProcessorTokenCreateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof ProcessorApexProcessorTokenCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof ProcessorApexProcessorTokenCreateRequest
     */
    secret?: string;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof ProcessorApexProcessorTokenCreateRequest
     */
    access_token: string;
    /**
     * The `account_id` value obtained from the `onSuccess` callback in Link
     * @type {string}
     * @memberof ProcessorApexProcessorTokenCreateRequest
     */
    account_id: string;
}
/**
 * ProcessorAuthGetRequest defines the request schema for `/processor/auth/get`
 * @export
 * @interface ProcessorAuthGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface ProcessorAuthGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof ProcessorAuthGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof ProcessorAuthGetRequest
     */
    secret?: string;
    /**
     * The processor token obtained from the Plaid integration partner. Processor tokens are in the format: `processor-<environment>-<identifier>`
     * @type {string}
     * @memberof ProcessorAuthGetRequest
     */
    processor_token: string;
}
/**
 * ProcessorAuthGetResponse defines the response schema for `/processor/auth/get`
 * @export
 * @interface ProcessorAuthGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface ProcessorAuthGetResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof ProcessorAuthGetResponse
     */
    request_id: string;
    /**
     * 
     * @type {ProcessorNumber}
     * @memberof ProcessorAuthGetResponse
     */
    numbers: ProcessorNumber;
    /**
     * 
     * @type {AccountBase}
     * @memberof ProcessorAuthGetResponse
     */
    account: AccountBase;
}
/**
 * ProcessorBalanceGetRequest defines the request schema for `/processor/balance/get`
 * @export
 * @interface ProcessorBalanceGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface ProcessorBalanceGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof ProcessorBalanceGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof ProcessorBalanceGetRequest
     */
    secret?: string;
    /**
     * The processor token obtained from the Plaid integration partner. Processor tokens are in the format: `processor-<environment>-<identifier>`
     * @type {string}
     * @memberof ProcessorBalanceGetRequest
     */
    processor_token: string;
    /**
     * 
     * @type {ProcessorBalanceGetRequestOptions}
     * @memberof ProcessorBalanceGetRequest
     */
    options?: ProcessorBalanceGetRequestOptions;
}
/**
 * An optional object to filter `/processor/balance/get` results.
 * @export
 * @interface ProcessorBalanceGetRequestOptions
 */
// Edited by Plaid, line 9. any to unknown
export interface ProcessorBalanceGetRequestOptions {
    /**
     * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the oldest acceptable balance when making a request to `/accounts/balance/get`.  If the balance that is pulled for `ins_128026` (Capital One) is older than the given timestamp, an `INVALID_REQUEST` error with the code of `LAST_UPDATED_DATETIME_OUT_OF_RANGE` will be returned with the most recent timestamp for the requested account contained in the response.  This field is only used when the institution is `ins_128026` (Capital One), in which case a value must be provided or an `INVALID_REQUEST` error with the code of `INVALID_FIELD` will be returned. For all other institutions, this field is ignored.
     * @type {string}
     * @memberof ProcessorBalanceGetRequestOptions
     */
    min_last_updated_datetime?: string;
}
/**
 * ProcessorBalanceGetResponse defines the response schema for `/processor/balance/get`
 * @export
 * @interface ProcessorBalanceGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface ProcessorBalanceGetResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {AccountBase}
     * @memberof ProcessorBalanceGetResponse
     */
    account: AccountBase;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof ProcessorBalanceGetResponse
     */
    request_id: string;
}
/**
 * Defines the request schema for `/processor/bank_transfer/create`
 * @export
 * @interface ProcessorBankTransferCreateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface ProcessorBankTransferCreateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof ProcessorBankTransferCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof ProcessorBankTransferCreateRequest
     */
    secret?: string;
    /**
     * A random key provided by the client, per unique bank transfer. Maximum of 50 characters.  The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create a bank transfer fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single bank transfer is created.
     * @type {string}
     * @memberof ProcessorBankTransferCreateRequest
     */
    idempotency_key: string;
    /**
     * The processor token obtained from the Plaid integration partner. Processor tokens are in the format: `processor-<environment>-<identifier>`
     * @type {string}
     * @memberof ProcessorBankTransferCreateRequest
     */
    processor_token: string;
    /**
     * 
     * @type {BankTransferType}
     * @memberof ProcessorBankTransferCreateRequest
     */
    type: BankTransferType;
    /**
     * 
     * @type {BankTransferNetwork}
     * @memberof ProcessorBankTransferCreateRequest
     */
    network: BankTransferNetwork;
    /**
     * The amount of the bank transfer (decimal string with two digits of precision e.g. \"10.00\").
     * @type {string}
     * @memberof ProcessorBankTransferCreateRequest
     */
    amount: string;
    /**
     * The currency of the transfer amount – should be set to \"USD\".
     * @type {string}
     * @memberof ProcessorBankTransferCreateRequest
     */
    iso_currency_code: string;
    /**
     * The transfer description. Maximum of 10 characters.
     * @type {string}
     * @memberof ProcessorBankTransferCreateRequest
     */
    description: string;
    /**
     * 
     * @type {ACHClass}
     * @memberof ProcessorBankTransferCreateRequest
     */
    ach_class?: ACHClass;
    /**
     * 
     * @type {BankTransferUser}
     * @memberof ProcessorBankTransferCreateRequest
     */
    user: BankTransferUser;
    /**
     * An arbitrary string provided by the client for storage with the bank transfer. May be up to 100 characters.
     * @type {string}
     * @memberof ProcessorBankTransferCreateRequest
     */
    custom_tag?: string | null;
    /**
     * The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply: The JSON values must be Strings (no nested JSON objects allowed) Only ASCII characters may be used Maximum of 50 key/value pairs Maximum key length of 40 characters Maximum value length of 500 characters 
     * @type {{ [key: string]: string; }}
     * @memberof ProcessorBankTransferCreateRequest
     */
    metadata?: { [key: string]: string; } | null;
    /**
     * Plaid’s unique identifier for the origination account for this transfer. If you have more than one origination account, this value must be specified.
     * @type {string}
     * @memberof ProcessorBankTransferCreateRequest
     */
    origination_account_id?: string | null;
}
/**
 * Defines the response schema for `/processor/bank_transfer/create`
 * @export
 * @interface ProcessorBankTransferCreateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface ProcessorBankTransferCreateResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {BankTransfer}
     * @memberof ProcessorBankTransferCreateResponse
     */
    bank_transfer: BankTransfer;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof ProcessorBankTransferCreateResponse
     */
    request_id: string;
}
/**
 * ProcessorIdentityGetRequest defines the request schema for `/processor/identity/get`
 * @export
 * @interface ProcessorIdentityGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface ProcessorIdentityGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof ProcessorIdentityGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof ProcessorIdentityGetRequest
     */
    secret?: string;
    /**
     * The processor token obtained from the Plaid integration partner. Processor tokens are in the format: `processor-<environment>-<identifier>`
     * @type {string}
     * @memberof ProcessorIdentityGetRequest
     */
    processor_token: string;
}
/**
 * ProcessorIdentityGetResponse defines the response schema for `/processor/identity/get`
 * @export
 * @interface ProcessorIdentityGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface ProcessorIdentityGetResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {AccountIdentity}
     * @memberof ProcessorIdentityGetResponse
     */
    account: AccountIdentity;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof ProcessorIdentityGetResponse
     */
    request_id: string;
}
/**
 * ProcessorIdentityMatchRequest defines the request schema for `/processor/identity/match`
 * @export
 * @interface ProcessorIdentityMatchRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface ProcessorIdentityMatchRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof ProcessorIdentityMatchRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof ProcessorIdentityMatchRequest
     */
    secret?: string;
    /**
     * The processor token obtained from the Plaid integration partner. Processor tokens are in the format: `processor-<environment>-<identifier>`
     * @type {string}
     * @memberof ProcessorIdentityMatchRequest
     */
    processor_token: string;
    /**
     * 
     * @type {IdentityMatchUser}
     * @memberof ProcessorIdentityMatchRequest
     */
    user?: IdentityMatchUser;
}
/**
 * ProcessorIdentityMatchResponse defines the response schema for `/processor/identity/match`
 * @export
 * @interface ProcessorIdentityMatchResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface ProcessorIdentityMatchResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {AccountIdentityMatchScore}
     * @memberof ProcessorIdentityMatchResponse
     */
    account: AccountIdentityMatchScore;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof ProcessorIdentityMatchResponse
     */
    request_id: string;
}
/**
 * An object containing identifying numbers used for making electronic transfers to and from the `account`. The identifying number type (ACH, EFT, IBAN, or BACS) used will depend on the country of the account. An account may have more than one number type. If a particular identifying number type is not used by the `account` for which auth data has been requested, a null value will be returned.
 * @export
 * @interface ProcessorNumber
 */
// Edited by Plaid, line 9. any to unknown
export interface ProcessorNumber {
    [key: string]: object | unknown;

    /**
     * 
     * @type {NumbersACHNullable}
     * @memberof ProcessorNumber
     */
    ach?: NumbersACHNullable | null;
    /**
     * 
     * @type {NumbersEFTNullable}
     * @memberof ProcessorNumber
     */
    eft?: NumbersEFTNullable | null;
    /**
     * 
     * @type {NumbersInternationalNullable}
     * @memberof ProcessorNumber
     */
    international?: NumbersInternationalNullable | null;
    /**
     * 
     * @type {NumbersBACSNullable}
     * @memberof ProcessorNumber
     */
    bacs?: NumbersBACSNullable | null;
}
/**
 * ProcessorSignalDecisionReportRequest defines the request schema for `/processor/signal/decision/report`
 * @export
 * @interface ProcessorSignalDecisionReportRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface ProcessorSignalDecisionReportRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof ProcessorSignalDecisionReportRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof ProcessorSignalDecisionReportRequest
     */
    secret?: string;
    /**
     * The processor token obtained from the Plaid integration partner. Processor tokens are in the format: `processor-<environment>-<identifier>`
     * @type {string}
     * @memberof ProcessorSignalDecisionReportRequest
     */
    processor_token: string;
    /**
     * Must be the same as the `client_transaction_id` supplied when calling `/signal/evaluate`
     * @type {string}
     * @memberof ProcessorSignalDecisionReportRequest
     */
    client_transaction_id: string;
    /**
     * `true` if the ACH transaction was initiated, `false` otherwise.  This field must be returned as a boolean. If formatted incorrectly, this will result in an [`INVALID_FIELD`](/docs/errors/invalid-request/#invalid_field) error.
     * @type {boolean}
     * @memberof ProcessorSignalDecisionReportRequest
     */
    initiated: boolean;
    /**
     * The actual number of days (hold time) since the ACH debit transaction that you wait before making funds available to your customers. The holding time could affect the ACH return rate.  For example, use 0 if you make funds available to your customers instantly or the same day following the debit transaction, or 1 if you make funds available the next day following the debit initialization.
     * @type {number}
     * @memberof ProcessorSignalDecisionReportRequest
     */
    days_funds_on_hold?: number | null;
    /**
     * 
     * @type {SignalDecisionOutcome}
     * @memberof ProcessorSignalDecisionReportRequest
     */
    decision_outcome?: SignalDecisionOutcome | null;
    /**
     * 
     * @type {SignalPaymentMethod}
     * @memberof ProcessorSignalDecisionReportRequest
     */
    payment_method?: SignalPaymentMethod | null;
    /**
     * The amount (in USD) made available to your customers instantly following the debit transaction. It could be a partial amount of the requested transaction (example: 102.05).
     * @type {number}
     * @memberof ProcessorSignalDecisionReportRequest
     */
    amount_instantly_available?: number | null;
}
/**
 * ProcessorSignalDecisionReportResponse defines the response schema for `/processor/signal/decision/report`
 * @export
 * @interface ProcessorSignalDecisionReportResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface ProcessorSignalDecisionReportResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof ProcessorSignalDecisionReportResponse
     */
    request_id: string;
}
/**
 * ProcessorSignalEvaluateRequest defines the request schema for `/processor/signal/evaluate`
 * @export
 * @interface ProcessorSignalEvaluateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface ProcessorSignalEvaluateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof ProcessorSignalEvaluateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof ProcessorSignalEvaluateRequest
     */
    secret?: string;
    /**
     * The processor token obtained from the Plaid integration partner. Processor tokens are in the format: `processor-<environment>-<identifier>`
     * @type {string}
     * @memberof ProcessorSignalEvaluateRequest
     */
    processor_token: string;
    /**
     * The unique ID that you would like to use to refer to this transaction. For your convenience mapping your internal data, you could use your internal ID/identifier for this transaction. The max length for this field is 36 characters.
     * @type {string}
     * @memberof ProcessorSignalEvaluateRequest
     */
    client_transaction_id: string;
    /**
     * The transaction amount, in USD (e.g. `102.05`)
     * @type {number}
     * @memberof ProcessorSignalEvaluateRequest
     */
    amount: number;
    /**
     * `true` if the end user is present while initiating the ACH transfer and the endpoint is being called; `false` otherwise (for example, when the ACH transfer is scheduled and the end user is not present, or you call this endpoint after the ACH transfer but before submitting the Nacha file for ACH processing).
     * @type {boolean}
     * @memberof ProcessorSignalEvaluateRequest
     */
    user_present?: boolean | null;
    /**
     * A unique ID that identifies the end user in your system. This ID is used to correlate requests by a user with multiple Items. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`.
     * @type {string}
     * @memberof ProcessorSignalEvaluateRequest
     */
    client_user_id?: string;
    /**
     * **true** if the ACH transaction is a recurring transaction; **false** otherwise 
     * @type {boolean}
     * @memberof ProcessorSignalEvaluateRequest
     */
    is_recurring?: boolean | null;
    /**
     * The default ACH or non-ACH payment method to complete the transaction. `SAME_DAY_ACH`: Same Day ACH by NACHA. The debit transaction is processed and settled on the same day `NEXT_DAY_ACH`: Next Day ACH settlement for debit transactions, offered by some payment processors `STANDARD_ACH`: standard ACH by NACHA `REAL_TIME_PAYMENTS`: real-time payments such as RTP and FedNow `DEBIT_CARD`: if the default payment is over debit card networks `MULTIPLE_PAYMENT_METHODS`: if there is no default debit rail or there are multiple payment methods Possible values:  `SAME_DAY_ACH`, `NEXT_DAY_ACH`, `STANDARD_ACH`, `REAL_TIME_PAYMENTS`, `DEBIT_CARD`, `MULTIPLE_PAYMENT_METHODS`
     * @type {string}
     * @memberof ProcessorSignalEvaluateRequest
     */
    default_payment_method?: string | null;
    /**
     * 
     * @type {SignalUser}
     * @memberof ProcessorSignalEvaluateRequest
     */
    user?: SignalUser;
    /**
     * 
     * @type {SignalDevice}
     * @memberof ProcessorSignalEvaluateRequest
     */
    device?: SignalDevice;
}
/**
 * ProcessorSignalEvaluateResponse defines the response schema for `/processor/signal/evaluate`
 * @export
 * @interface ProcessorSignalEvaluateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface ProcessorSignalEvaluateResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof ProcessorSignalEvaluateResponse
     */
    request_id: string;
    /**
     * 
     * @type {SignalScores}
     * @memberof ProcessorSignalEvaluateResponse
     */
    scores: SignalScores;
    /**
     * 
     * @type {SignalEvaluateCoreAttributes}
     * @memberof ProcessorSignalEvaluateResponse
     */
    core_attributes?: SignalEvaluateCoreAttributes;
    /**
     * If bank information was not available to be used in the Signal model, this array contains warnings describing why bank data is missing. If you want to receive an API error instead of Signal scores in the case of missing bank data, file a support ticket or contact your Plaid account manager.
     * @type {Array<SignalWarning>}
     * @memberof ProcessorSignalEvaluateResponse
     */
    warnings?: Array<SignalWarning>;
}
/**
 * ProcessorSignalReturnReportRequest defines the request schema for `/processor/signal/return/report`
 * @export
 * @interface ProcessorSignalReturnReportRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface ProcessorSignalReturnReportRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof ProcessorSignalReturnReportRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof ProcessorSignalReturnReportRequest
     */
    secret?: string;
    /**
     * The processor token obtained from the Plaid integration partner. Processor tokens are in the format: `processor-<environment>-<identifier>`
     * @type {string}
     * @memberof ProcessorSignalReturnReportRequest
     */
    processor_token: string;
    /**
     * Must be the same as the `client_transaction_id` supplied when calling `/processor/signal/evaluate`
     * @type {string}
     * @memberof ProcessorSignalReturnReportRequest
     */
    client_transaction_id: string;
    /**
     * Must be a valid ACH return code (e.g. \"R01\")  If formatted incorrectly, this will result in an [`INVALID_FIELD`](/docs/errors/invalid-request/#invalid_field) error.
     * @type {string}
     * @memberof ProcessorSignalReturnReportRequest
     */
    return_code: string;
    /**
     * Date and time when you receive the returns from your payment processors, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
     * @type {string}
     * @memberof ProcessorSignalReturnReportRequest
     */
    returned_at?: string | null;
}
/**
 * ProcessorSignalReturnReportResponse defines the response schema for `/processor/signal/return/report`
 * @export
 * @interface ProcessorSignalReturnReportResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface ProcessorSignalReturnReportResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof ProcessorSignalReturnReportResponse
     */
    request_id: string;
}
/**
 * ProcessorStripeBankAccountTokenCreateRequest defines the request schema for `/processor/stripe/bank_account/create`
 * @export
 * @interface ProcessorStripeBankAccountTokenCreateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface ProcessorStripeBankAccountTokenCreateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof ProcessorStripeBankAccountTokenCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof ProcessorStripeBankAccountTokenCreateRequest
     */
    secret?: string;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof ProcessorStripeBankAccountTokenCreateRequest
     */
    access_token: string;
    /**
     * The `account_id` value obtained from the `onSuccess` callback in Link
     * @type {string}
     * @memberof ProcessorStripeBankAccountTokenCreateRequest
     */
    account_id: string;
}
/**
 * ProcessorStripeBankAccountTokenCreateResponse defines the response schema for `/processor/stripe/bank_account/create`
 * @export
 * @interface ProcessorStripeBankAccountTokenCreateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface ProcessorStripeBankAccountTokenCreateResponse {
    [key: string]: object | unknown;

    /**
     * A token that can be sent to Stripe for use in making API calls to Plaid
     * @type {string}
     * @memberof ProcessorStripeBankAccountTokenCreateResponse
     */
    stripe_bank_account_token: string;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof ProcessorStripeBankAccountTokenCreateResponse
     */
    request_id: string;
}
/**
 * ProcessorTokenCreateRequest defines the request schema for `/processor/token/create`
 * @export
 * @interface ProcessorTokenCreateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface ProcessorTokenCreateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof ProcessorTokenCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof ProcessorTokenCreateRequest
     */
    secret?: string;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof ProcessorTokenCreateRequest
     */
    access_token: string;
    /**
     * The `account_id` value obtained from the `onSuccess` callback in Link
     * @type {string}
     * @memberof ProcessorTokenCreateRequest
     */
    account_id: string;
    /**
     * The processor you are integrating with.
     * @type {string}
     * @memberof ProcessorTokenCreateRequest
     */
    processor: ProcessorTokenCreateRequestProcessorEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ProcessorTokenCreateRequestProcessorEnum {
    Dwolla = 'dwolla',
    Galileo = 'galileo',
    ModernTreasury = 'modern_treasury',
    Ocrolus = 'ocrolus',
    PrimeTrust = 'prime_trust',
    Vesta = 'vesta',
    Drivewealth = 'drivewealth',
    Vopay = 'vopay',
    Achq = 'achq',
    Check = 'check',
    Checkbook = 'checkbook',
    Circle = 'circle',
    SilaMoney = 'sila_money',
    Rize = 'rize',
    SvbApi = 'svb_api',
    Unit = 'unit',
    Wyre = 'wyre',
    Lithic = 'lithic',
    Alpaca = 'alpaca',
    Astra = 'astra',
    Moov = 'moov',
    TreasuryPrime = 'treasury_prime',
    Marqeta = 'marqeta',
    Checkout = 'checkout',
    Solid = 'solid',
    Highnote = 'highnote',
    Gemini = 'gemini',
    ApexClearing = 'apex_clearing',
    Gusto = 'gusto',
    Adyen = 'adyen',
    Atomic = 'atomic',
    I2c = 'i2c',
    Wepay = 'wepay',
    Riskified = 'riskified',
    Utb = 'utb',
    AdpRoll = 'adp_roll',
    FortressTrust = 'fortress_trust'
}

/**
 * ProcessorTokenCreateResponse defines the response schema for `/processor/token/create` and `/processor/apex/processor_token/create`
 * @export
 * @interface ProcessorTokenCreateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface ProcessorTokenCreateResponse {
    [key: string]: object | unknown;

    /**
     * The `processor_token` that can then be used by the Plaid partner to make API requests
     * @type {string}
     * @memberof ProcessorTokenCreateResponse
     */
    processor_token: string;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof ProcessorTokenCreateResponse
     */
    request_id: string;
}
/**
 * ProcessorTokenPermissionsGetRequest defines the request schema for `/processor/token/permissions/get`
 * @export
 * @interface ProcessorTokenPermissionsGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface ProcessorTokenPermissionsGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof ProcessorTokenPermissionsGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof ProcessorTokenPermissionsGetRequest
     */
    secret?: string;
    /**
     * The processor token obtained from the Plaid integration partner. Processor tokens are in the format: `processor-<environment>-<identifier>`
     * @type {string}
     * @memberof ProcessorTokenPermissionsGetRequest
     */
    processor_token: string;
}
/**
 * ProcessorTokenPermissionsGetResponse defines the response schema for `/processor/token/permissions/get`
 * @export
 * @interface ProcessorTokenPermissionsGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface ProcessorTokenPermissionsGetResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof ProcessorTokenPermissionsGetResponse
     */
    request_id: string;
    /**
     * A list of products the processor token should have access to. An empty list means that the processor has access to all available products, including future products.
     * @type {Array<Products>}
     * @memberof ProcessorTokenPermissionsGetResponse
     */
    products: Array<Products>;
}
/**
 * ProcessorTokenPermissionsSetRequest defines the request schema for `/processor/token/permissions/set`
 * @export
 * @interface ProcessorTokenPermissionsSetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface ProcessorTokenPermissionsSetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof ProcessorTokenPermissionsSetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof ProcessorTokenPermissionsSetRequest
     */
    secret?: string;
    /**
     * The processor token obtained from the Plaid integration partner. Processor tokens are in the format: `processor-<environment>-<identifier>`
     * @type {string}
     * @memberof ProcessorTokenPermissionsSetRequest
     */
    processor_token: string;
    /**
     * A list of products the processor token should have access to. An empty list will grant access to all products.
     * @type {Array<Products>}
     * @memberof ProcessorTokenPermissionsSetRequest
     */
    products: Array<Products>;
}
/**
 * ProcessorTokenPermissionsSetResponse defines the response schema for `/processor/token/permissions/set`
 * @export
 * @interface ProcessorTokenPermissionsSetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface ProcessorTokenPermissionsSetResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof ProcessorTokenPermissionsSetResponse
     */
    request_id: string;
}
/**
 * ProcessorTransactionsGetRequest defines the request schema for `/processor/transactions/get`
 * @export
 * @interface ProcessorTransactionsGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface ProcessorTransactionsGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof ProcessorTransactionsGetRequest
     */
    client_id?: string;
    /**
     * 
     * @type {TransactionsGetRequestOptions}
     * @memberof ProcessorTransactionsGetRequest
     */
    options?: TransactionsGetRequestOptions;
    /**
     * The processor token obtained from the Plaid integration partner. Processor tokens are in the format: `processor-<environment>-<identifier>`
     * @type {string}
     * @memberof ProcessorTransactionsGetRequest
     */
    processor_token: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof ProcessorTransactionsGetRequest
     */
    secret?: string;
    /**
     * The earliest date for which data should be returned. Dates should be formatted as YYYY-MM-DD.
     * @type {string}
     * @memberof ProcessorTransactionsGetRequest
     */
    start_date: string;
    /**
     * The latest date for which data should be returned. Dates should be formatted as YYYY-MM-DD.
     * @type {string}
     * @memberof ProcessorTransactionsGetRequest
     */
    end_date: string;
}
/**
 * ProcessorTransactionsGetResponse defines the response schema for `/processor/transactions/get`
 * @export
 * @interface ProcessorTransactionsGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface ProcessorTransactionsGetResponse {
    [key: string]: object | unknown;

    /**
     * An array containing the `accounts` associated with the Item for which transactions are being returned. Each transaction can be mapped to its corresponding account via the `account_id` field.
     * @type {Array<AccountBase>}
     * @memberof ProcessorTransactionsGetResponse
     */
    accounts: Array<AccountBase>;
    /**
     * An array containing transactions from the account. Transactions are returned in reverse chronological order, with the most recent at the beginning of the array. The maximum number of transactions returned is determined by the `count` parameter.
     * @type {Array<Transaction>}
     * @memberof ProcessorTransactionsGetResponse
     */
    transactions: Array<Transaction>;
    /**
     * The total number of transactions available within the date range specified. If `total_transactions` is larger than the size of the `transactions` array, more transactions are available and can be fetched via manipulating the `offset` parameter.
     * @type {number}
     * @memberof ProcessorTransactionsGetResponse
     */
    total_transactions: number;
    /**
     * 
     * @type {Item}
     * @memberof ProcessorTransactionsGetResponse
     */
    item: Item;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof ProcessorTransactionsGetResponse
     */
    request_id: string;
}
/**
 * ProcessorTransactionsRecurringGetRequest defines the request schema for `/processor/transactions/recurring/get`
 * @export
 * @interface ProcessorTransactionsRecurringGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface ProcessorTransactionsRecurringGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof ProcessorTransactionsRecurringGetRequest
     */
    client_id?: string;
    /**
     * The processor token obtained from the Plaid integration partner. Processor tokens are in the format: `processor-<environment>-<identifier>`
     * @type {string}
     * @memberof ProcessorTransactionsRecurringGetRequest
     */
    processor_token: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof ProcessorTransactionsRecurringGetRequest
     */
    secret?: string;
    /**
     * 
     * @type {TransactionsRecurringGetRequestOptions}
     * @memberof ProcessorTransactionsRecurringGetRequest
     */
    options?: TransactionsRecurringGetRequestOptions;
    /**
     * A list of `account_ids` to retrieve for the Item  Note: An error will be returned if a provided `account_id` is not associated with the Item.
     * @type {Array<string>}
     * @memberof ProcessorTransactionsRecurringGetRequest
     */
    account_ids: Array<string>;
}
/**
 * ProcessorTransactionsRecurringGetResponse defines the response schema for `/processor/transactions/recurring/get`
 * @export
 * @interface ProcessorTransactionsRecurringGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface ProcessorTransactionsRecurringGetResponse {
    [key: string]: object | unknown;

    /**
     * An array of depository transaction streams.
     * @type {Array<TransactionStream>}
     * @memberof ProcessorTransactionsRecurringGetResponse
     */
    inflow_streams: Array<TransactionStream>;
    /**
     * An array of expense transaction streams.
     * @type {Array<TransactionStream>}
     * @memberof ProcessorTransactionsRecurringGetResponse
     */
    outflow_streams: Array<TransactionStream>;
    /**
     * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the last time transaction streams for the given account were updated on
     * @type {string}
     * @memberof ProcessorTransactionsRecurringGetResponse
     */
    updated_datetime: string;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof ProcessorTransactionsRecurringGetResponse
     */
    request_id: string;
}
/**
 * ProcessorTransactionsRefreshRequest defines the request schema for `/processor/transactions/refresh`
 * @export
 * @interface ProcessorTransactionsRefreshRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface ProcessorTransactionsRefreshRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof ProcessorTransactionsRefreshRequest
     */
    client_id?: string;
    /**
     * The processor token obtained from the Plaid integration partner. Processor tokens are in the format: `processor-<environment>-<identifier>`
     * @type {string}
     * @memberof ProcessorTransactionsRefreshRequest
     */
    processor_token: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof ProcessorTransactionsRefreshRequest
     */
    secret?: string;
}
/**
 * ProcessorTransactionsRefreshResponse defines the response schema for `/processor/transactions/refresh`
 * @export
 * @interface ProcessorTransactionsRefreshResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface ProcessorTransactionsRefreshResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof ProcessorTransactionsRefreshResponse
     */
    request_id: string;
}
/**
 * ProcessorTransactionsSyncRequest defines the request schema for `/processor/transactions/sync`
 * @export
 * @interface ProcessorTransactionsSyncRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface ProcessorTransactionsSyncRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof ProcessorTransactionsSyncRequest
     */
    client_id?: string;
    /**
     * The processor token obtained from the Plaid integration partner. Processor tokens are in the format: `processor-<environment>-<identifier>`
     * @type {string}
     * @memberof ProcessorTransactionsSyncRequest
     */
    processor_token: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof ProcessorTransactionsSyncRequest
     */
    secret?: string;
    /**
     * The cursor value represents the last update requested. Providing it will cause the response to only return changes after this update. If omitted, the entire history of updates will be returned, starting with the first-added transactions on the item. Note: The upper-bound length of this cursor is 256 characters of base64.
     * @type {string}
     * @memberof ProcessorTransactionsSyncRequest
     */
    cursor?: string;
    /**
     * The number of transaction updates to fetch.
     * @type {number}
     * @memberof ProcessorTransactionsSyncRequest
     */
    count?: number;
    /**
     * 
     * @type {TransactionsSyncRequestOptions}
     * @memberof ProcessorTransactionsSyncRequest
     */
    options?: TransactionsSyncRequestOptions;
}
/**
 * ProcessorTransactionsSyncResponse defines the response schema for `/processor/transactions/sync`
 * @export
 * @interface ProcessorTransactionsSyncResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface ProcessorTransactionsSyncResponse {
    [key: string]: object | unknown;

    /**
     * Transactions that have been added to the Item since `cursor` ordered by ascending last modified time.
     * @type {Array<Transaction>}
     * @memberof ProcessorTransactionsSyncResponse
     */
    added: Array<Transaction>;
    /**
     * Transactions that have been modified on the Item since `cursor` ordered by ascending last modified time.
     * @type {Array<Transaction>}
     * @memberof ProcessorTransactionsSyncResponse
     */
    modified: Array<Transaction>;
    /**
     * Transactions that have been removed from the Item since `cursor` ordered by ascending last modified time.
     * @type {Array<RemovedTransaction>}
     * @memberof ProcessorTransactionsSyncResponse
     */
    removed: Array<RemovedTransaction>;
    /**
     * Cursor used for fetching any future updates after the latest update provided in this response. The cursor obtained after all pages have been pulled (indicated by `has_more` being `false`) will be valid for at least 1 year. This cursor should be persisted for later calls. If transactions are not yet available, this will be an empty string.
     * @type {string}
     * @memberof ProcessorTransactionsSyncResponse
     */
    next_cursor: string;
    /**
     * Represents if more than requested count of transaction updates exist. If true, the additional updates can be fetched by making an additional request with `cursor` set to `next_cursor`. If `has_more` is true, it’s important to pull all available pages, to make it less likely for underlying data changes to conflict with pagination.
     * @type {boolean}
     * @memberof ProcessorTransactionsSyncResponse
     */
    has_more: boolean;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof ProcessorTransactionsSyncResponse
     */
    request_id: string;
}
/**
 * The product access being requested. Used to or disallow product access across all accounts. If unset, defaults to all products allowed.
 * @export
 * @interface ProductAccess
 */
// Edited by Plaid, line 9. any to unknown
export interface ProductAccess {
    [key: string]: object | unknown;

    /**
     * Allow access to statements. Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
     * @type {boolean}
     * @memberof ProductAccess
     */
    statements?: boolean | null;
    /**
     * Allow access to the Identity product (name, email, phone, address). Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
     * @type {boolean}
     * @memberof ProductAccess
     */
    identity?: boolean | null;
    /**
     * Allow access to account number details. Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
     * @type {boolean}
     * @memberof ProductAccess
     */
    auth?: boolean | null;
    /**
     * Allow access to transaction details. Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
     * @type {boolean}
     * @memberof ProductAccess
     */
    transactions?: boolean | null;
    /**
     * Allow access to \"accounts_details_transactions\". Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
     * @type {boolean}
     * @memberof ProductAccess
     */
    accounts_details_transactions?: boolean | null;
    /**
     * Allow access to \"accounts_routing_number\". Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
     * @type {boolean}
     * @memberof ProductAccess
     */
    accounts_routing_number?: boolean | null;
    /**
     * Allow access to \"accounts_statements\". Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
     * @type {boolean}
     * @memberof ProductAccess
     */
    accounts_statements?: boolean | null;
    /**
     * Allow access to \"accounts_tax_statements\". Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
     * @type {boolean}
     * @memberof ProductAccess
     */
    accounts_tax_statements?: boolean | null;
    /**
     * Allow access to \"customers_profiles\". Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
     * @type {boolean}
     * @memberof ProductAccess
     */
    customers_profiles?: boolean | null;
}
/**
 * Fired when an `ACCESS_NOT_GRANTED` error is hit for Auth. The error can be resolved by putting the user through update mode with `auth` in the `products` array, as well as through the limited beta for update mode Authentication product validations.
 * @export
 * @interface ProductPermissionsRequiredAuthWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface ProductPermissionsRequiredAuthWebhook {
    [key: string]: object | unknown;

    /**
     * `AUTH`
     * @type {string}
     * @memberof ProductPermissionsRequiredAuthWebhook
     */
    webhook_type: string;
    /**
     * `PRODUCT_PERMISSIONS_REQUIRED`
     * @type {string}
     * @memberof ProductPermissionsRequiredAuthWebhook
     */
    webhook_code: string;
    /**
     * The `item_id` of the Item associated with this webhook, warning, or error
     * @type {string}
     * @memberof ProductPermissionsRequiredAuthWebhook
     */
    item_id: string;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof ProductPermissionsRequiredAuthWebhook
     */
    environment: WebhookEnvironmentValues;
}
/**
 * Fired when an `ACCESS_NOT_GRANTED` error is hit for Identity. The error can be resolved by putting the user through update mode with `identity` in the `products` array, as well as through the limited beta for update mode Identity product validations.
 * @export
 * @interface ProductPermissionsRequiredIdentityWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface ProductPermissionsRequiredIdentityWebhook {
    [key: string]: object | unknown;

    /**
     * `IDENTITY`
     * @type {string}
     * @memberof ProductPermissionsRequiredIdentityWebhook
     */
    webhook_type: string;
    /**
     * `PRODUCT_PERMISSIONS_REQUIRED`
     * @type {string}
     * @memberof ProductPermissionsRequiredIdentityWebhook
     */
    webhook_code: string;
    /**
     * The `item_id` of the Item associated with this webhook, warning, or error
     * @type {string}
     * @memberof ProductPermissionsRequiredIdentityWebhook
     */
    item_id: string;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof ProductPermissionsRequiredIdentityWebhook
     */
    environment: WebhookEnvironmentValues;
}
/**
 * A representation of the status health of a request type. Auth requests, Balance requests, Identity requests, Investments requests, Liabilities requests, Transactions updates, Investments updates, Liabilities updates, and Item logins each have their own status object.
 * @export
 * @interface ProductStatus
 */
// Edited by Plaid, line 9. any to unknown
export interface ProductStatus {
    [key: string]: object | unknown;

    /**
     * This field is deprecated in favor of the `breakdown` object, which provides more granular institution health data.  `HEALTHY`: the majority of requests are successful `DEGRADED`: only some requests are successful `DOWN`: all requests are failing
     * @type {string}
     * @memberof ProductStatus
     * @deprecated
     */
    status: ProductStatusStatusEnum;
    /**
     * [ISO 8601](https://wikipedia.org/wiki/ISO_8601) formatted timestamp of the last status change for the institution. 
     * @type {string}
     * @memberof ProductStatus
     */
    last_status_change: string;
    /**
     * 
     * @type {ProductStatusBreakdown}
     * @memberof ProductStatus
     */
    breakdown: ProductStatusBreakdown;
}

/**
    * @export
    * @enum {string}
    */
export enum ProductStatusStatusEnum {
    Healthy = 'HEALTHY',
    Degraded = 'DEGRADED',
    Down = 'DOWN'
}

/**
 * A detailed breakdown of the institution\'s performance for a request type. The values for `success`, `error_plaid`, and `error_institution` sum to 1. The time range used for calculating the breakdown may range from the most recent few minutes to the past six hours. In general, smaller institutions will show status that was calculated over a longer period of time. For Investment updates, which are refreshed less frequently, the period assessed may be 24 hours or more. For more details, see [Institution status details](https://plaid.com/docs/account/activity/#institution-status-details).
 * @export
 * @interface ProductStatusBreakdown
 */
// Edited by Plaid, line 9. any to unknown
export interface ProductStatusBreakdown {
    [key: string]: object | unknown;

    /**
     * The percentage of login attempts that are successful, expressed as a decimal.
     * @type {number}
     * @memberof ProductStatusBreakdown
     */
    success: number;
    /**
     * The percentage of logins that are failing due to an internal Plaid issue, expressed as a decimal. 
     * @type {number}
     * @memberof ProductStatusBreakdown
     */
    error_plaid: number;
    /**
     * The percentage of logins that are failing due to an issue in the institution\'s system, expressed as a decimal.
     * @type {number}
     * @memberof ProductStatusBreakdown
     */
    error_institution: number;
    /**
     * The `refresh_interval` may be `DELAYED` or `STOPPED` even when the success rate is high. This value is only returned for Transactions status breakdowns.
     * @type {string}
     * @memberof ProductStatusBreakdown
     */
    refresh_interval?: ProductStatusBreakdownRefreshIntervalEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ProductStatusBreakdownRefreshIntervalEnum {
    Normal = 'NORMAL',
    Delayed = 'DELAYED',
    Stopped = 'STOPPED'
}

/**
 * A list of products that an institution can support. All Items must be initialized with at least one product. The Balance product is always available and does not need to be specified during initialization.
 * @export
 * @enum {string}
 */
export enum Products {
    Assets = 'assets',
    Auth = 'auth',
    Balance = 'balance',
    Identity = 'identity',
    Investments = 'investments',
    InvestmentsAuth = 'investments_auth',
    Liabilities = 'liabilities',
    PaymentInitiation = 'payment_initiation',
    IdentityVerification = 'identity_verification',
    Transactions = 'transactions',
    CreditDetails = 'credit_details',
    Income = 'income',
    IncomeVerification = 'income_verification',
    DepositSwitch = 'deposit_switch',
    StandingOrders = 'standing_orders',
    Transfer = 'transfer',
    Employment = 'employment',
    RecurringTransactions = 'recurring_transactions',
    Signal = 'signal'
}

/**
 * The valid name matching sensitivity configurations for a screening program. Note that while certain matching techniques may be more prevalent on less strict settings, all matching algorithms are enabled for every sensitivity.  `coarse` - See more potential matches. This sensitivity will see more broad phonetic matches across alphabets that make missing a potential hit very unlikely. This setting is noisier and will require more manual review.  `balanced` - A good default for most companies. This sensitivity is balanced to show high quality hits with reduced noise.  `strict` - Aggressive false positive reduction. This sensitivity will require names to be more similar than `coarse` and `balanced` settings, relying less on phonetics, while still accounting for character transpositions, missing tokens, and other common permutations.  `exact` - Matches must be nearly exact. This sensitivity will only show hits with exact or nearly exact name matches with only basic correction such as extraneous symbols and capitalization. This setting is generally not recommended unless you have a very specific use case.
 * @export
 * @enum {string}
 */
export enum ProgramNameSensitivity {
    Coarse = 'coarse',
    Balanced = 'balanced',
    Strict = 'strict',
    Exact = 'exact'
}

/**
 * The employee\'s estimated annual salary, as derived from information reported on the paystub.
 * @export
 * @interface ProjectedIncomeSummaryFieldNumber
 */
// Edited by Plaid, line 9. any to unknown
export interface ProjectedIncomeSummaryFieldNumber {
    /**
     * The value of the field.
     * @type {number}
     * @memberof ProjectedIncomeSummaryFieldNumber
     */
    value: number;
    /**
     * 
     * @type {VerificationStatus}
     * @memberof ProjectedIncomeSummaryFieldNumber
     */
    verification_status: VerificationStatus;
}
/**
 * An enum indicating whether a network proxy is present and if so what type it is.  `none_detected` indicates the user is not on a detectable proxy network.  `tor` indicates the user was using a Tor browser, which sends encrypted traffic on a decentralized network and is somewhat similar to a VPN (Virtual Private Network).  `vpn` indicates the user is on a VPN (Virtual Private Network)  `web_proxy` indicates the user is on a web proxy server, which may allow them to conceal information such as their IP address or other identifying information.  `public_proxy` indicates the user is on a public web proxy server, which is similar to a web proxy but can be shared by multiple users. This may allow multiple users to appear as if they have the same IP address for instance.
 * @export
 * @enum {string}
 */
export enum ProxyType {
    NoneDetected = 'none_detected',
    Tor = 'tor',
    Vpn = 'vpn',
    WebProxy = 'web_proxy',
    PublicProxy = 'public_proxy'
}

/**
 * The request was flagged by Plaid\'s fraud system, and requires additional verification to ensure they are not a bot.
 * @export
 * @interface RecaptchaRequiredError
 */
// Edited by Plaid, line 9. any to unknown
export interface RecaptchaRequiredError {
    [key: string]: object | unknown;

    /**
     * RECAPTCHA_ERROR
     * @type {string}
     * @memberof RecaptchaRequiredError
     */
    error_type: string;
    /**
     * RECAPTCHA_REQUIRED
     * @type {string}
     * @memberof RecaptchaRequiredError
     */
    error_code: string;
    /**
     * 
     * @type {string}
     * @memberof RecaptchaRequiredError
     */
    display_message: string;
    /**
     * 400
     * @type {string}
     * @memberof RecaptchaRequiredError
     */
    http_code: string;
    /**
     * Your user will be prompted to solve a Google reCAPTCHA challenge in the Link Recaptcha pane. If they solve the challenge successfully, the user\'s request is resubmitted and they are directed to the next Item creation step.
     * @type {string}
     * @memberof RecaptchaRequiredError
     */
    link_user_experience: string;
    /**
     * Plaid\'s fraud system detects abusive traffic and considers a variety of parameters throughout Item creation requests. When a request is considered risky or possibly fraudulent, Link presents a reCAPTCHA for the user to solve.
     * @type {string}
     * @memberof RecaptchaRequiredError
     */
    common_causes: string;
    /**
     * Link will automatically guide your user through reCAPTCHA verification. As a general rule, we recommend instrumenting basic fraud monitoring to detect and protect your website from spam and abuse.  If your user cannot verify their session, please submit a Support ticket with the following identifiers: `link_session_id` or `request_id`
     * @type {string}
     * @memberof RecaptchaRequiredError
     */
    troubleshooting_steps: string;
}
/**
 * An object containing a BACS account number and sort code. If an IBAN is not provided or if you need to accept domestic GBP-denominated payments, BACS data is required.
 * @export
 * @interface RecipientBACS
 */
// Edited by Plaid, line 9. any to unknown
export interface RecipientBACS {
    [key: string]: object | unknown;

    /**
     * The account number of the account. Maximum of 10 characters.
     * @type {string}
     * @memberof RecipientBACS
     */
    account?: string;
    /**
     * The 6-character sort code of the account.
     * @type {string}
     * @memberof RecipientBACS
     */
    sort_code?: string;
}
/**
 * An object containing a BACS account number and sort code. If an IBAN is not provided or if this recipient needs to accept domestic GBP-denominated payments, BACS data is required.
 * @export
 * @interface RecipientBACSNullable
 */
// Edited by Plaid, line 9. any to unknown
export interface RecipientBACSNullable {
    /**
     * The account number of the account. Maximum of 10 characters.
     * @type {string}
     * @memberof RecipientBACSNullable
     */
    account?: string;
    /**
     * The 6-character sort code of the account.
     * @type {string}
     * @memberof RecipientBACSNullable
     */
    sort_code?: string;
}
/**
 * Insights relating to expenses and deposits that are predicted to occur on a scheduled basis, such as biweekly, monthly, or annually.  Common examples include loan payments, bill payments, subscriptions, and payroll income.  This is a beta field, available to all users.
 * @export
 * @interface Recurrence
 */
// Edited by Plaid, line 9. any to unknown
export interface Recurrence {
    [key: string]: object | unknown;

    /**
     * Whether or not the transaction is periodically recurring.
     * @type {boolean}
     * @memberof Recurrence
     */
    is_recurring?: boolean | null;
}
/**
 * Fired when a recurring transfer is cancelled by Plaid.
 * @export
 * @interface RecurringCancelledWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface RecurringCancelledWebhook {
    [key: string]: object | unknown;

    /**
     * `TRANSFER`
     * @type {string}
     * @memberof RecurringCancelledWebhook
     */
    webhook_type: string;
    /**
     * `RECURRING_CANCELLED`
     * @type {string}
     * @memberof RecurringCancelledWebhook
     */
    webhook_code: string;
    /**
     * Plaid’s unique identifier for a recurring transfer.
     * @type {string}
     * @memberof RecurringCancelledWebhook
     */
    recurring_transfer_id: string;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof RecurringCancelledWebhook
     */
    environment: WebhookEnvironmentValues;
}
/**
 * Fired when a new transfer of a recurring transfer is originated.
 * @export
 * @interface RecurringNewTransferWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface RecurringNewTransferWebhook {
    [key: string]: object | unknown;

    /**
     * `TRANSFER`
     * @type {string}
     * @memberof RecurringNewTransferWebhook
     */
    webhook_type: string;
    /**
     * `RECURRING_NEW_TRANSFER`
     * @type {string}
     * @memberof RecurringNewTransferWebhook
     */
    webhook_code: string;
    /**
     * Plaid’s unique identifier for a recurring transfer.
     * @type {string}
     * @memberof RecurringNewTransferWebhook
     */
    recurring_transfer_id: string;
    /**
     * Plaid’s unique identifier for a transfer.
     * @type {string}
     * @memberof RecurringNewTransferWebhook
     */
    transfer_id: string;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof RecurringNewTransferWebhook
     */
    environment: WebhookEnvironmentValues;
}
/**
 * Describes the frequency of the transaction stream.  `WEEKLY`: Assigned to a transaction stream that occurs approximately every week.  `BIWEEKLY`: Assigned to a transaction stream that occurs approximately every 2 weeks.  `SEMI_MONTHLY`: Assigned to a transaction stream that occurs approximately twice per month. This frequency is typically seen for inflow transaction streams.  `MONTHLY`: Assigned to a transaction stream that occurs approximately every month.  `ANNUALLY`: Assigned to a transaction stream that occurs approximately every year.  `UNKNOWN`: Assigned to a transaction stream that does not fit any of the pre-defined frequencies.
 * @export
 * @enum {string}
 */
export enum RecurringTransactionFrequency {
    Unknown = 'UNKNOWN',
    Weekly = 'WEEKLY',
    Biweekly = 'BIWEEKLY',
    SemiMonthly = 'SEMI_MONTHLY',
    Monthly = 'MONTHLY',
    Annually = 'ANNUALLY'
}

/**
 * Fired when recurring transactions data is updated. This includes when a new recurring stream is detected or when a new transaction is added to an existing recurring stream. The `RECURRING_TRANSACTIONS_UPDATE` webhook will also fire when one or more attributes of the recurring stream changes, which is usually a result of the addition, update, or removal of transactions to the stream.  After receipt of this webhook, the updated data can be fetched from `/transactions/recurring/get`.
 * @export
 * @interface RecurringTransactionsUpdateWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface RecurringTransactionsUpdateWebhook {
    [key: string]: object | unknown;

    /**
     * `TRANSACTIONS`
     * @type {string}
     * @memberof RecurringTransactionsUpdateWebhook
     */
    webhook_type: string;
    /**
     * `RECURRING_TRANSACTIONS_UPDATE`
     * @type {string}
     * @memberof RecurringTransactionsUpdateWebhook
     */
    webhook_code: string;
    /**
     * The `item_id` of the Item associated with this webhook, warning, or error
     * @type {string}
     * @memberof RecurringTransactionsUpdateWebhook
     */
    item_id: string;
    /**
     * A list of `account_ids` for accounts that have new or updated recurring transactions data.
     * @type {Array<string>}
     * @memberof RecurringTransactionsUpdateWebhook
     */
    account_ids: Array<string>;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof RecurringTransactionsUpdateWebhook
     */
    environment: WebhookEnvironmentValues;
}
/**
 * Represents a recurring transfer within the Transfers API.
 * @export
 * @interface RecurringTransfer
 */
// Edited by Plaid, line 9. any to unknown
export interface RecurringTransfer {
    [key: string]: object | unknown;

    /**
     * Plaid’s unique identifier for a recurring transfer.
     * @type {string}
     * @memberof RecurringTransfer
     */
    recurring_transfer_id: string;
    /**
     * The datetime when this transfer was created. This will be of the form `2006-01-02T15:04:05Z`
     * @type {string}
     * @memberof RecurringTransfer
     */
    created: string;
    /**
     * A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).  The next transfer origination date after bank holiday adjustment.
     * @type {string}
     * @memberof RecurringTransfer
     */
    next_origination_date: string;
    /**
     * Plaid’s unique identifier for a test clock.
     * @type {string}
     * @memberof RecurringTransfer
     */
    test_clock_id?: string | null;
    /**
     * 
     * @type {TransferType}
     * @memberof RecurringTransfer
     */
    type: TransferType;
    /**
     * The amount of the transfer (decimal string with two digits of precision e.g. \"10.00\").
     * @type {string}
     * @memberof RecurringTransfer
     */
    amount: string;
    /**
     * 
     * @type {TransferRecurringStatus}
     * @memberof RecurringTransfer
     */
    status: TransferRecurringStatus;
    /**
     * 
     * @type {ACHClass}
     * @memberof RecurringTransfer
     */
    ach_class?: ACHClass;
    /**
     * 
     * @type {TransferNetwork}
     * @memberof RecurringTransfer
     */
    network: TransferNetwork;
    /**
     * Plaid’s unique identifier for the origination account that was used for this transfer.
     * @type {string}
     * @memberof RecurringTransfer
     * @deprecated
     */
    origination_account_id: string;
    /**
     * The Plaid `account_id` corresponding to the end-user account that will be debited or credited.
     * @type {string}
     * @memberof RecurringTransfer
     */
    account_id: string;
    /**
     * The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited.
     * @type {string}
     * @memberof RecurringTransfer
     */
    funding_account_id: string;
    /**
     * The currency of the transfer amount, e.g. \"USD\"
     * @type {string}
     * @memberof RecurringTransfer
     */
    iso_currency_code: string;
    /**
     * The description of the recurring transfer.
     * @type {string}
     * @memberof RecurringTransfer
     */
    description: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RecurringTransfer
     */
    transfer_ids: Array<string>;
    /**
     * 
     * @type {TransferUserInResponse}
     * @memberof RecurringTransfer
     */
    user: TransferUserInResponse;
    /**
     * 
     * @type {TransferRecurringSchedule}
     * @memberof RecurringTransfer
     */
    schedule: TransferRecurringSchedule;
}
/**
 * Represents a recurring transfer within the Transfers API.
 * @export
 * @interface RecurringTransferNullable
 */
// Edited by Plaid, line 9. any to unknown
export interface RecurringTransferNullable {
    /**
     * Plaid’s unique identifier for a recurring transfer.
     * @type {string}
     * @memberof RecurringTransferNullable
     */
    recurring_transfer_id: string;
    /**
     * The datetime when this transfer was created. This will be of the form `2006-01-02T15:04:05Z`
     * @type {string}
     * @memberof RecurringTransferNullable
     */
    created: string;
    /**
     * A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).  The next transfer origination date after bank holiday adjustment.
     * @type {string}
     * @memberof RecurringTransferNullable
     */
    next_origination_date: string;
    /**
     * Plaid’s unique identifier for a test clock.
     * @type {string}
     * @memberof RecurringTransferNullable
     */
    test_clock_id?: string | null;
    /**
     * 
     * @type {TransferType}
     * @memberof RecurringTransferNullable
     */
    type: TransferType;
    /**
     * The amount of the transfer (decimal string with two digits of precision e.g. \"10.00\").
     * @type {string}
     * @memberof RecurringTransferNullable
     */
    amount: string;
    /**
     * 
     * @type {TransferRecurringStatus}
     * @memberof RecurringTransferNullable
     */
    status: TransferRecurringStatus;
    /**
     * 
     * @type {ACHClass}
     * @memberof RecurringTransferNullable
     */
    ach_class?: ACHClass;
    /**
     * 
     * @type {TransferNetwork}
     * @memberof RecurringTransferNullable
     */
    network: TransferNetwork;
    /**
     * Plaid’s unique identifier for the origination account that was used for this transfer.
     * @type {string}
     * @memberof RecurringTransferNullable
     * @deprecated
     */
    origination_account_id: string;
    /**
     * The Plaid `account_id` corresponding to the end-user account that will be debited or credited.
     * @type {string}
     * @memberof RecurringTransferNullable
     */
    account_id: string;
    /**
     * The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited.
     * @type {string}
     * @memberof RecurringTransferNullable
     */
    funding_account_id: string;
    /**
     * The currency of the transfer amount, e.g. \"USD\"
     * @type {string}
     * @memberof RecurringTransferNullable
     */
    iso_currency_code: string;
    /**
     * The description of the recurring transfer.
     * @type {string}
     * @memberof RecurringTransferNullable
     */
    description: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RecurringTransferNullable
     */
    transfer_ids: Array<string>;
    /**
     * 
     * @type {TransferUserInResponse}
     * @memberof RecurringTransferNullable
     */
    user: TransferUserInResponse;
    /**
     * 
     * @type {TransferRecurringSchedule}
     * @memberof RecurringTransferNullable
     */
    schedule: TransferRecurringSchedule;
}
/**
 * Fired when Plaid is unable to originate a new ACH transaction of the recurring transfer on the planned date.
 * @export
 * @interface RecurringTransferSkippedWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface RecurringTransferSkippedWebhook {
    [key: string]: object | unknown;

    /**
     * `TRANSFER`
     * @type {string}
     * @memberof RecurringTransferSkippedWebhook
     */
    webhook_type: string;
    /**
     * `RECURRING_TRANSFER_SKIPPED`
     * @type {string}
     * @memberof RecurringTransferSkippedWebhook
     */
    webhook_code: string;
    /**
     * Plaid’s unique identifier for a recurring transfer.
     * @type {string}
     * @memberof RecurringTransferSkippedWebhook
     */
    recurring_transfer_id: string;
    /**
     * 
     * @type {TransferAuthorizationDecision}
     * @memberof RecurringTransferSkippedWebhook
     */
    authorization_decision: TransferAuthorizationDecision;
    /**
     * 
     * @type {TransferAuthorizationDecisionRationaleCode}
     * @memberof RecurringTransferSkippedWebhook
     */
    authorization_decision_rationale_code?: TransferAuthorizationDecisionRationaleCode;
    /**
     * The planned date on which Plaid is unable to originate a new ACH transaction of the recurring transfer. This will be of the form YYYY-MM-DD.
     * @type {string}
     * @memberof RecurringTransferSkippedWebhook
     */
    skipped_origination_date: string;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof RecurringTransferSkippedWebhook
     */
    environment: WebhookEnvironmentValues;
}
/**
 * A representation of a removed transaction
 * @export
 * @interface RemovedTransaction
 */
// Edited by Plaid, line 9. any to unknown
export interface RemovedTransaction {
    /**
     * The ID of the removed transaction.
     * @type {string}
     * @memberof RemovedTransaction
     */
    transaction_id?: string;
}
/**
 * The report type. It can be `assets` or `income`.
 * @export
 * @enum {string}
 */
export enum ReportType {
    Assets = 'assets',
    Income = 'income'
}

/**
 * Information about an report identifier and a report name.
 * @export
 * @interface ReportingInformation
 */
// Edited by Plaid, line 9. any to unknown
export interface ReportingInformation {
    [key: string]: object | unknown;

    /**
     * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
     * @type {string}
     * @memberof ReportingInformation
     */
    ReportingInformationIdentifier: string;
}
/**
 * Result summary object specifying values for `behavior` attributes of risk check, when available.
 * @export
 * @interface RiskCheckBehavior
 */
// Edited by Plaid, line 9. any to unknown
export interface RiskCheckBehavior {
    [key: string]: object | unknown;

    /**
     * 
     * @type {RiskCheckBehaviorUserInteractionsLabel}
     * @memberof RiskCheckBehavior
     */
    user_interactions: RiskCheckBehaviorUserInteractionsLabel;
    /**
     * 
     * @type {RiskCheckBehaviorFraudRingDetectedLabel}
     * @memberof RiskCheckBehavior
     */
    fraud_ring_detected: RiskCheckBehaviorFraudRingDetectedLabel;
    /**
     * 
     * @type {RiskCheckBehaviorBotDetectedLabel}
     * @memberof RiskCheckBehavior
     */
    bot_detected: RiskCheckBehaviorBotDetectedLabel;
}
/**
 * Field describing the outcome of a bot detection behavior risk check.  `yes` indicates that automated activity was detected.  `no` indicates that automated activity was not detected.  `no_data` indicates there was not enough information available to give an accurate signal.
 * @export
 * @enum {string}
 */
export enum RiskCheckBehaviorBotDetectedLabel {
    Yes = 'yes',
    No = 'no',
    NoData = 'no_data'
}

/**
 * Field describing the outcome of a fraud ring behavior risk check.  `yes` indicates that fraud ring activity was detected.  `no` indicates that fraud ring activity was not detected.  `no_data` indicates there was not enough information available to give an accurate signal.
 * @export
 * @enum {string}
 */
export enum RiskCheckBehaviorFraudRingDetectedLabel {
    Yes = 'yes',
    No = 'no',
    NoData = 'no_data'
}

/**
 * Field describing the overall user interaction signals of a behavior risk check. This value represents how familiar the user is with the personal data they provide, based on a number of signals that are collected during their session.  `genuine` indicates the user has high familiarity with the data they are providing, and that fraud is unlikely.  `neutral` indicates some signals are present in between `risky` and `genuine`, but there are not enough clear signals to determine an outcome.  `risky` indicates the user has low familiarity with the data they are providing, and that fraud is likely.  `no_data` indicates there is not sufficient information to give an accurate signal.
 * @export
 * @enum {string}
 */
export enum RiskCheckBehaviorUserInteractionsLabel {
    Genuine = 'genuine',
    Neutral = 'neutral',
    Risky = 'risky',
    NoData = 'no_data'
}

/**
 * Additional information for the `risk_check` step.
 * @export
 * @interface RiskCheckDetails
 */
// Edited by Plaid, line 9. any to unknown
export interface RiskCheckDetails {
    [key: string]: object | unknown;

    /**
     * 
     * @type {IdentityVerificationStepStatus}
     * @memberof RiskCheckDetails
     */
    status: IdentityVerificationStepStatus;
    /**
     * 
     * @type {RiskCheckBehavior}
     * @memberof RiskCheckDetails
     */
    behavior: RiskCheckBehavior | null;
    /**
     * 
     * @type {RiskCheckEmail}
     * @memberof RiskCheckDetails
     */
    email: RiskCheckEmail | null;
    /**
     * 
     * @type {RiskCheckPhone}
     * @memberof RiskCheckDetails
     */
    phone: RiskCheckPhone | null;
    /**
     * Array of result summary objects specifying values for `device` attributes of risk check.
     * @type {Array<RiskCheckDevice>}
     * @memberof RiskCheckDetails
     */
    devices: Array<RiskCheckDevice>;
    /**
     * 
     * @type {RiskCheckIdentityAbuseSignals}
     * @memberof RiskCheckDetails
     */
    identity_abuse_signals?: RiskCheckIdentityAbuseSignals | null;
}
/**
 * Result summary object specifying values for `device` attributes of risk check.
 * @export
 * @interface RiskCheckDevice
 */
// Edited by Plaid, line 9. any to unknown
export interface RiskCheckDevice {
    [key: string]: object | unknown;

    /**
     * 
     * @type {ProxyType}
     * @memberof RiskCheckDevice
     */
    ip_proxy_type: ProxyType | null;
    /**
     * Count of spam lists the IP address is associated with if known.
     * @type {number}
     * @memberof RiskCheckDevice
     */
    ip_spam_list_count: number | null;
    /**
     * UTC offset of the timezone associated with the IP address.
     * @type {string}
     * @memberof RiskCheckDevice
     */
    ip_timezone_offset: string | null;
}
/**
 * Result summary object specifying values for `email` attributes of risk check.
 * @export
 * @interface RiskCheckEmail
 */
// Edited by Plaid, line 9. any to unknown
export interface RiskCheckEmail {
    [key: string]: object | unknown;

    /**
     * 
     * @type {RiskCheckEmailIsDeliverableStatus}
     * @memberof RiskCheckEmail
     */
    is_deliverable: RiskCheckEmailIsDeliverableStatus;
    /**
     * Count of all known breaches of this email address if known.
     * @type {number}
     * @memberof RiskCheckEmail
     */
    breach_count: number | null;
    /**
     * A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
     * @type {string}
     * @memberof RiskCheckEmail
     */
    first_breached_at: string | null;
    /**
     * A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
     * @type {string}
     * @memberof RiskCheckEmail
     */
    last_breached_at: string | null;
    /**
     * A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
     * @type {string}
     * @memberof RiskCheckEmail
     */
    domain_registered_at: string | null;
    /**
     * 
     * @type {RiskCheckEmailDomainIsFreeProvider}
     * @memberof RiskCheckEmail
     */
    domain_is_free_provider: RiskCheckEmailDomainIsFreeProvider;
    /**
     * 
     * @type {RiskCheckEmailDomainIsCustom}
     * @memberof RiskCheckEmail
     */
    domain_is_custom: RiskCheckEmailDomainIsCustom;
    /**
     * 
     * @type {RiskCheckEmailDomainIsDisposable}
     * @memberof RiskCheckEmail
     */
    domain_is_disposable: RiskCheckEmailDomainIsDisposable;
    /**
     * 
     * @type {RiskCheckEmailTopLevelDomainIsSuspicious}
     * @memberof RiskCheckEmail
     */
    top_level_domain_is_suspicious: RiskCheckEmailTopLevelDomainIsSuspicious;
    /**
     * A list of online services where this email address has been detected to have accounts or other activity.
     * @type {Set<RiskCheckLinkedService>}
     * @memberof RiskCheckEmail
     */
    linked_services: Set<RiskCheckLinkedService>;
}
/**
 * Indicates whether the email address domain is custom if known, i.e. a company domain and not free or disposable.
 * @export
 * @enum {string}
 */
export enum RiskCheckEmailDomainIsCustom {
    Yes = 'yes',
    No = 'no',
    NoData = 'no_data'
}

/**
 * Indicates whether the email domain is listed as disposable if known. Disposable domains are often used to create email addresses that are part of a fake set of user details.
 * @export
 * @enum {string}
 */
export enum RiskCheckEmailDomainIsDisposable {
    Yes = 'yes',
    No = 'no',
    NoData = 'no_data'
}

/**
 * Indicates whether the email address domain is a free provider such as Gmail or Hotmail if known.
 * @export
 * @enum {string}
 */
export enum RiskCheckEmailDomainIsFreeProvider {
    Yes = 'yes',
    No = 'no',
    NoData = 'no_data'
}

/**
 * SMTP-MX check to confirm the email address exists if known.
 * @export
 * @enum {string}
 */
export enum RiskCheckEmailIsDeliverableStatus {
    Yes = 'yes',
    No = 'no',
    NoData = 'no_data'
}

/**
 * Indicates whether the email address top level domain, which is the last part of the domain, is fraudulent or risky if known. In most cases, a suspicious top level domain is also associated with a disposable or high-risk domain.
 * @export
 * @enum {string}
 */
export enum RiskCheckEmailTopLevelDomainIsSuspicious {
    Yes = 'yes',
    No = 'no',
    NoData = 'no_data'
}

/**
 * Result summary object capturing abuse signals related to `identity abuse`, e.g. stolen and synthetic identity fraud.
 * @export
 * @interface RiskCheckIdentityAbuseSignals
 */
// Edited by Plaid, line 9. any to unknown
export interface RiskCheckIdentityAbuseSignals {
    [key: string]: object | unknown;

    /**
     * 
     * @type {RiskCheckSyntheticIdentity}
     * @memberof RiskCheckIdentityAbuseSignals
     */
    synthetic_identity: RiskCheckSyntheticIdentity | null;
    /**
     * 
     * @type {RiskCheckStolenIdentity}
     * @memberof RiskCheckIdentityAbuseSignals
     */
    stolen_identity: RiskCheckStolenIdentity | null;
}
/**
 * An enum indicating the type of a linked service.
 * @export
 * @enum {string}
 */
export enum RiskCheckLinkedService {
    Apple = 'apple',
    Ebay = 'ebay',
    Facebook = 'facebook',
    Flickr = 'flickr',
    Foursquare = 'foursquare',
    Github = 'github',
    Google = 'google',
    Gravatar = 'gravatar',
    Instagram = 'instagram',
    Lastfm = 'lastfm',
    Linkedin = 'linkedin',
    Microsoft = 'microsoft',
    Myspace = 'myspace',
    Pinterest = 'pinterest',
    Skype = 'skype',
    Spotify = 'spotify',
    Telegram = 'telegram',
    Tumblr = 'tumblr',
    Twitter = 'twitter',
    Viber = 'viber',
    Vimeo = 'vimeo',
    Weibo = 'weibo',
    Whatsapp = 'whatsapp',
    Yahoo = 'yahoo',
    Airbnb = 'airbnb',
    Amazon = 'amazon',
    Booking = 'booking',
    Discord = 'discord',
    Kakao = 'kakao',
    Ok = 'ok',
    Qzone = 'qzone',
    Line = 'line',
    Snapchat = 'snapchat',
    Zalo = 'zalo'
}

/**
 * Result summary object specifying values for `phone` attributes of risk check.
 * @export
 * @interface RiskCheckPhone
 */
// Edited by Plaid, line 9. any to unknown
export interface RiskCheckPhone {
    [key: string]: object | unknown;

    /**
     * A list of online services where this phone number has been detected to have accounts or other activity.
     * @type {Set<RiskCheckLinkedService>}
     * @memberof RiskCheckPhone
     */
    linked_services: Set<RiskCheckLinkedService>;
}
/**
 * Field containing the data used in determining the outcome of the stolen identity risk check.  Contains the following fields:  `score` - A score from 0 to 100 indicating the likelihood that the user is a stolen identity.
 * @export
 * @interface RiskCheckStolenIdentity
 */
// Edited by Plaid, line 9. any to unknown
export interface RiskCheckStolenIdentity {
    [key: string]: object | unknown;

    /**
     * A score from 0 to 100 indicating the likelihood that the user is a stolen identity.
     * @type {number}
     * @memberof RiskCheckStolenIdentity
     */
    score?: number;
}
/**
 * Field containing the data used in determining the outcome of the synthetic identity risk check.  Contains the following fields:  `score` - A score from 0 to 100 indicating the likelihood that the user is a synthetic identity.
 * @export
 * @interface RiskCheckSyntheticIdentity
 */
// Edited by Plaid, line 9. any to unknown
export interface RiskCheckSyntheticIdentity {
    [key: string]: object | unknown;

    /**
     * A score from 0 to 100 indicating the likelihood that the user is a synthetic identity.
     * @type {number}
     * @memberof RiskCheckSyntheticIdentity
     */
    score?: number;
}
/**
 * Object containing metadata for the document
 * @export
 * @interface RiskSignalDocumentReference
 */
// Edited by Plaid, line 9. any to unknown
export interface RiskSignalDocumentReference {
    [key: string]: object | unknown;

    /**
     * An identifier of the document referenced by the document metadata.
     * @type {string}
     * @memberof RiskSignalDocumentReference
     */
    document_id?: string | null;
    /**
     * The name of the document
     * @type {string}
     * @memberof RiskSignalDocumentReference
     */
    document_name?: string;
}
/**
 * ADocumentation not found in the MISMO model viewer and not provided by Freddie Mac.
 * @export
 * @interface Role
 */
// Edited by Plaid, line 9. any to unknown
export interface Role {
    [key: string]: object | unknown;

    /**
     * 
     * @type {RoleDetail}
     * @memberof Role
     */
    ROLE_DETAIL: RoleDetail;
}
/**
 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
 * @export
 * @interface RoleDetail
 */
// Edited by Plaid, line 9. any to unknown
export interface RoleDetail {
    [key: string]: object | unknown;

    /**
     * 
     * @type {PartyRoleType}
     * @memberof RoleDetail
     */
    PartyRoleType: PartyRoleType;
}
/**
 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
 * @export
 * @interface Roles
 */
// Edited by Plaid, line 9. any to unknown
export interface Roles {
    [key: string]: object | unknown;

    /**
     * 
     * @type {Role}
     * @memberof Roles
     */
    ROLE: Role;
}
/**
 * SandboxBankIncomeFireWebhookRequest defines the request schema for `/sandbox/bank_income/fire_webhook`
 * @export
 * @interface SandboxBankIncomeFireWebhookRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface SandboxBankIncomeFireWebhookRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof SandboxBankIncomeFireWebhookRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof SandboxBankIncomeFireWebhookRequest
     */
    secret?: string;
    /**
     * The URL to which the webhook should be sent. If provided, this will override the URL set in the dashboard.
     * @type {string}
     * @memberof SandboxBankIncomeFireWebhookRequest
     */
    webhook_override?: string;
    /**
     * 
     * @type {SandboxBankIncomeWebhookFireRequestWebhookCode}
     * @memberof SandboxBankIncomeFireWebhookRequest
     */
    webhook_code: SandboxBankIncomeWebhookFireRequestWebhookCode;
    /**
     * 
     * @type {SandboxBankIncomeWebhookFireRequestWebhookFields}
     * @memberof SandboxBankIncomeFireWebhookRequest
     */
    webhook_fields: SandboxBankIncomeWebhookFireRequestWebhookFields;
}
/**
 * SandboxBankIncomeFireWebhookResponse defines the response schema for `/sandbox/bank_income/fire_webhook`
 * @export
 * @interface SandboxBankIncomeFireWebhookResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface SandboxBankIncomeFireWebhookResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof SandboxBankIncomeFireWebhookResponse
     */
    request_id: string;
}
/**
 * The webhook codes this endpoint can be used to test
 * @export
 * @enum {string}
 */
export enum SandboxBankIncomeWebhookFireRequestWebhookCode {
    Update = 'BANK_INCOME_REFRESH_UPDATE',
    Complete = 'BANK_INCOME_REFRESH_COMPLETE'
}

/**
 * Optional fields which will be populated in the simulated webhook
 * @export
 * @interface SandboxBankIncomeWebhookFireRequestWebhookFields
 */
// Edited by Plaid, line 9. any to unknown
export interface SandboxBankIncomeWebhookFireRequestWebhookFields {
    /**
     * The user id to be returned in INCOME webhooks
     * @type {string}
     * @memberof SandboxBankIncomeWebhookFireRequestWebhookFields
     */
    user_id: string;
    /**
     * 
     * @type {BankIncomeRefreshCompleteResult}
     * @memberof SandboxBankIncomeWebhookFireRequestWebhookFields
     */
    bank_income_refresh_complete_result?: BankIncomeRefreshCompleteResult;
}
/**
 * Defines the request schema for `/sandbox/bank_transfer/fire_webhook`
 * @export
 * @interface SandboxBankTransferFireWebhookRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface SandboxBankTransferFireWebhookRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof SandboxBankTransferFireWebhookRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof SandboxBankTransferFireWebhookRequest
     */
    secret?: string;
    /**
     * The URL to which the webhook should be sent.
     * @type {string}
     * @memberof SandboxBankTransferFireWebhookRequest
     */
    webhook: string;
}
/**
 * Defines the response schema for `/sandbox/bank_transfer/fire_webhook`
 * @export
 * @interface SandboxBankTransferFireWebhookResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface SandboxBankTransferFireWebhookResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof SandboxBankTransferFireWebhookResponse
     */
    request_id: string;
}
/**
 * Defines the request schema for `/sandbox/bank_transfer/simulate`
 * @export
 * @interface SandboxBankTransferSimulateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface SandboxBankTransferSimulateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof SandboxBankTransferSimulateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof SandboxBankTransferSimulateRequest
     */
    secret?: string;
    /**
     * Plaid’s unique identifier for a bank transfer.
     * @type {string}
     * @memberof SandboxBankTransferSimulateRequest
     */
    bank_transfer_id: string;
    /**
     * The asynchronous event to be simulated. May be: `posted`, `failed`, or `reversed`.  An error will be returned if the event type is incompatible with the current transfer status. Compatible status --> event type transitions include:  `pending` --> `failed`  `pending` --> `posted`  `posted` --> `reversed` 
     * @type {string}
     * @memberof SandboxBankTransferSimulateRequest
     */
    event_type: string;
    /**
     * 
     * @type {BankTransferFailure}
     * @memberof SandboxBankTransferSimulateRequest
     */
    failure_reason?: BankTransferFailure | null;
}
/**
 * Defines the response schema for `/sandbox/bank_transfer/simulate`
 * @export
 * @interface SandboxBankTransferSimulateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface SandboxBankTransferSimulateResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof SandboxBankTransferSimulateResponse
     */
    request_id: string;
}
/**
 * SandboxIncomeFireWebhookRequest defines the request schema for `/sandbox/income/fire_webhook`
 * @export
 * @interface SandboxIncomeFireWebhookRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface SandboxIncomeFireWebhookRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof SandboxIncomeFireWebhookRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof SandboxIncomeFireWebhookRequest
     */
    secret?: string;
    /**
     * The Item ID associated with the verification.
     * @type {string}
     * @memberof SandboxIncomeFireWebhookRequest
     */
    item_id: string;
    /**
     * The Plaid `user_id` of the User associated with this webhook, warning, or error.
     * @type {string}
     * @memberof SandboxIncomeFireWebhookRequest
     */
    user_id?: string;
    /**
     * The URL to which the webhook should be sent.
     * @type {string}
     * @memberof SandboxIncomeFireWebhookRequest
     */
    webhook: string;
    /**
     * `VERIFICATION_STATUS_PROCESSING_COMPLETE`: The income verification status processing has completed. If the user uploaded multiple documents, this webhook will fire when all documents have finished processing. Call the `/income/verification/paystubs/get` endpoint and check the document metadata to see which documents were successfully parsed.  `VERIFICATION_STATUS_PROCESSING_FAILED`: A failure occurred when attempting to process the verification documentation.  `VERIFICATION_STATUS_PENDING_APPROVAL`: (deprecated) The income verification has been sent to the user for review.
     * @type {string}
     * @memberof SandboxIncomeFireWebhookRequest
     */
    verification_status: SandboxIncomeFireWebhookRequestVerificationStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum SandboxIncomeFireWebhookRequestVerificationStatusEnum {
    ProcessingComplete = 'VERIFICATION_STATUS_PROCESSING_COMPLETE',
    ProcessingFailed = 'VERIFICATION_STATUS_PROCESSING_FAILED',
    PendingApproval = 'VERIFICATION_STATUS_PENDING_APPROVAL'
}

/**
 * SandboxIncomeFireWebhookResponse defines the response schema for `/sandbox/income/fire_webhook`
 * @export
 * @interface SandboxIncomeFireWebhookResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface SandboxIncomeFireWebhookResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof SandboxIncomeFireWebhookResponse
     */
    request_id: string;
}
/**
 * SandboxItemFireWebhookRequest defines the request schema for `/sandbox/item/fire_webhook`
 * @export
 * @interface SandboxItemFireWebhookRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface SandboxItemFireWebhookRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof SandboxItemFireWebhookRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof SandboxItemFireWebhookRequest
     */
    secret?: string;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof SandboxItemFireWebhookRequest
     */
    access_token: string;
    /**
     * 
     * @type {WebhookType}
     * @memberof SandboxItemFireWebhookRequest
     */
    webhook_type?: WebhookType;
    /**
     * The webhook codes that can be fired by this test endpoint.
     * @type {string}
     * @memberof SandboxItemFireWebhookRequest
     */
    webhook_code: SandboxItemFireWebhookRequestWebhookCodeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum SandboxItemFireWebhookRequestWebhookCodeEnum {
    DefaultUpdate = 'DEFAULT_UPDATE',
    NewAccountsAvailable = 'NEW_ACCOUNTS_AVAILABLE',
    AuthDataUpdate = 'AUTH_DATA_UPDATE',
    RecurringTransactionsUpdate = 'RECURRING_TRANSACTIONS_UPDATE',
    SyncUpdatesAvailable = 'SYNC_UPDATES_AVAILABLE',
    ProductReady = 'PRODUCT_READY',
    Error = 'ERROR'
}

/**
 * SandboxItemFireWebhookResponse defines the response schema for `/sandbox/item/fire_webhook`
 * @export
 * @interface SandboxItemFireWebhookResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface SandboxItemFireWebhookResponse {
    [key: string]: object | unknown;

    /**
     * Value is `true`  if the test` webhook_code`  was successfully fired.
     * @type {boolean}
     * @memberof SandboxItemFireWebhookResponse
     */
    webhook_fired: boolean;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof SandboxItemFireWebhookResponse
     */
    request_id: string;
}
/**
 * SandboxItemResetLoginRequest defines the request schema for `/sandbox/item/reset_login`
 * @export
 * @interface SandboxItemResetLoginRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface SandboxItemResetLoginRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof SandboxItemResetLoginRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof SandboxItemResetLoginRequest
     */
    secret?: string;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof SandboxItemResetLoginRequest
     */
    access_token: string;
}
/**
 * SandboxItemResetLoginResponse defines the response schema for `/sandbox/item/reset_login`
 * @export
 * @interface SandboxItemResetLoginResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface SandboxItemResetLoginResponse {
    [key: string]: object | unknown;

    /**
     * `true` if the call succeeded
     * @type {boolean}
     * @memberof SandboxItemResetLoginResponse
     */
    reset_login: boolean;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof SandboxItemResetLoginResponse
     */
    request_id: string;
}
/**
 * SandboxItemSetVerificationStatusRequest defines the request schema for `/sandbox/item/set_verification_status`
 * @export
 * @interface SandboxItemSetVerificationStatusRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface SandboxItemSetVerificationStatusRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof SandboxItemSetVerificationStatusRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof SandboxItemSetVerificationStatusRequest
     */
    secret?: string;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof SandboxItemSetVerificationStatusRequest
     */
    access_token: string;
    /**
     * The `account_id` of the account whose verification status is to be modified
     * @type {string}
     * @memberof SandboxItemSetVerificationStatusRequest
     */
    account_id: string;
    /**
     * The verification status to set the account to.
     * @type {string}
     * @memberof SandboxItemSetVerificationStatusRequest
     */
    verification_status: SandboxItemSetVerificationStatusRequestVerificationStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum SandboxItemSetVerificationStatusRequestVerificationStatusEnum {
    AutomaticallyVerified = 'automatically_verified',
    VerificationExpired = 'verification_expired'
}

/**
 * SandboxItemSetVerificationStatusResponse defines the response schema for `/sandbox/item/set_verification_status`
 * @export
 * @interface SandboxItemSetVerificationStatusResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface SandboxItemSetVerificationStatusResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof SandboxItemSetVerificationStatusResponse
     */
    request_id: string;
}
/**
 * Defines the request schema for `sandbox/oauth/select_accounts`
 * @export
 * @interface SandboxOauthSelectAccountsRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface SandboxOauthSelectAccountsRequest {
    /**
     * 
     * @type {string}
     * @memberof SandboxOauthSelectAccountsRequest
     */
    oauth_state_id: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SandboxOauthSelectAccountsRequest
     */
    accounts: Array<string>;
}
/**
 * SandboxPaymentProfileResetLoginRequest defines the request schema for `/sandbox/payment_profile/reset_login`
 * @export
 * @interface SandboxPaymentProfileResetLoginRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface SandboxPaymentProfileResetLoginRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof SandboxPaymentProfileResetLoginRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof SandboxPaymentProfileResetLoginRequest
     */
    secret?: string;
    /**
     * A payment profile token associated with the Payment Profile data that is being requested.
     * @type {string}
     * @memberof SandboxPaymentProfileResetLoginRequest
     */
    payment_profile_token: string;
}
/**
 * SandboxPaymentProfileResetLoginResponse defines the response schema for `/sandbox/payment_profile/reset_login`
 * @export
 * @interface SandboxPaymentProfileResetLoginResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface SandboxPaymentProfileResetLoginResponse {
    [key: string]: object | unknown;

    /**
     * `true` if the call succeeded
     * @type {boolean}
     * @memberof SandboxPaymentProfileResetLoginResponse
     */
    reset_login: boolean;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof SandboxPaymentProfileResetLoginResponse
     */
    request_id: string;
}
/**
 * SandboxProcessorTokenCreateRequest defines the request schema for `/sandbox/processor_token/create`
 * @export
 * @interface SandboxProcessorTokenCreateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface SandboxProcessorTokenCreateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof SandboxProcessorTokenCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof SandboxProcessorTokenCreateRequest
     */
    secret?: string;
    /**
     * The ID of the institution the Item will be associated with
     * @type {string}
     * @memberof SandboxProcessorTokenCreateRequest
     */
    institution_id: string;
    /**
     * 
     * @type {SandboxProcessorTokenCreateRequestOptions}
     * @memberof SandboxProcessorTokenCreateRequest
     */
    options?: SandboxProcessorTokenCreateRequestOptions;
}
/**
 * An optional set of options to be used when configuring the Item. If specified, must not be `null`.
 * @export
 * @interface SandboxProcessorTokenCreateRequestOptions
 */
// Edited by Plaid, line 9. any to unknown
export interface SandboxProcessorTokenCreateRequestOptions {
    /**
     * Test username to use for the creation of the Sandbox Item. Default value is `user_good`.
     * @type {string}
     * @memberof SandboxProcessorTokenCreateRequestOptions
     */
    override_username?: string | null;
    /**
     * Test password to use for the creation of the Sandbox Item. Default value is `pass_good`.
     * @type {string}
     * @memberof SandboxProcessorTokenCreateRequestOptions
     */
    override_password?: string | null;
}
/**
 * SandboxProcessorTokenCreateResponse defines the response schema for `/sandbox/processor_token/create`
 * @export
 * @interface SandboxProcessorTokenCreateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface SandboxProcessorTokenCreateResponse {
    [key: string]: object | unknown;

    /**
     * A processor token that can be used to call the `/processor/` endpoints.
     * @type {string}
     * @memberof SandboxProcessorTokenCreateResponse
     */
    processor_token: string;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof SandboxProcessorTokenCreateResponse
     */
    request_id: string;
}
/**
 * SandboxPublicTokenCreateRequest defines the request schema for `/sandbox/public_token/create`
 * @export
 * @interface SandboxPublicTokenCreateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface SandboxPublicTokenCreateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof SandboxPublicTokenCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof SandboxPublicTokenCreateRequest
     */
    secret?: string;
    /**
     * The ID of the institution the Item will be associated with
     * @type {string}
     * @memberof SandboxPublicTokenCreateRequest
     */
    institution_id: string;
    /**
     * The products to initially pull for the Item. May be any products that the specified `institution_id`  supports. This array may not be empty.
     * @type {Array<Products>}
     * @memberof SandboxPublicTokenCreateRequest
     */
    initial_products: Array<Products>;
    /**
     * 
     * @type {SandboxPublicTokenCreateRequestOptions}
     * @memberof SandboxPublicTokenCreateRequest
     */
    options?: SandboxPublicTokenCreateRequestOptions;
    /**
     * The user token associated with the User data is being requested for.
     * @type {string}
     * @memberof SandboxPublicTokenCreateRequest
     */
    user_token?: string;
}
/**
 * Specifies options for Bank Income. This field is required if `income_verification` is included in the `initial_products` array and `bank` is specified in `income_source_types`.
 * @export
 * @interface SandboxPublicTokenCreateRequestIncomeVerificationBankIncome
 */
// Edited by Plaid, line 9. any to unknown
export interface SandboxPublicTokenCreateRequestIncomeVerificationBankIncome {
    /**
     * The number of days of data to request for the Bank Income product
     * @type {number}
     * @memberof SandboxPublicTokenCreateRequestIncomeVerificationBankIncome
     */
    days_requested?: number;
}
/**
 * An optional set of options to be used when configuring the Item. If specified, must not be `null`.
 * @export
 * @interface SandboxPublicTokenCreateRequestOptions
 */
// Edited by Plaid, line 9. any to unknown
export interface SandboxPublicTokenCreateRequestOptions {
    /**
     * Specify a webhook to associate with the new Item.
     * @type {string}
     * @memberof SandboxPublicTokenCreateRequestOptions
     */
    webhook?: string;
    /**
     * Test username to use for the creation of the Sandbox Item. Default value is `user_good`.
     * @type {string}
     * @memberof SandboxPublicTokenCreateRequestOptions
     */
    override_username?: string | null;
    /**
     * Test password to use for the creation of the Sandbox Item. Default value is `pass_good`.
     * @type {string}
     * @memberof SandboxPublicTokenCreateRequestOptions
     */
    override_password?: string | null;
    /**
     * 
     * @type {SandboxPublicTokenCreateRequestOptionsTransactions}
     * @memberof SandboxPublicTokenCreateRequestOptions
     */
    transactions?: SandboxPublicTokenCreateRequestOptionsTransactions;
    /**
     * 
     * @type {SandboxPublicTokenCreateRequestOptionsIncomeVerification}
     * @memberof SandboxPublicTokenCreateRequestOptions
     */
    income_verification?: SandboxPublicTokenCreateRequestOptionsIncomeVerification;
}
/**
 * A set of parameters for income verification options. This field is required if `income_verification` is included in the `initial_products` array.
 * @export
 * @interface SandboxPublicTokenCreateRequestOptionsIncomeVerification
 */
// Edited by Plaid, line 9. any to unknown
export interface SandboxPublicTokenCreateRequestOptionsIncomeVerification {
    /**
     * The types of source income data that users will be permitted to share. Options include `bank` and `payroll`. Currently you can only specify one of these options.
     * @type {Array<IncomeVerificationSourceType>}
     * @memberof SandboxPublicTokenCreateRequestOptionsIncomeVerification
     */
    income_source_types?: Array<IncomeVerificationSourceType>;
    /**
     * 
     * @type {SandboxPublicTokenCreateRequestIncomeVerificationBankIncome}
     * @memberof SandboxPublicTokenCreateRequestOptionsIncomeVerification
     */
    bank_income?: SandboxPublicTokenCreateRequestIncomeVerificationBankIncome;
}
/**
 * An optional set of parameters corresponding to transactions options.
 * @export
 * @interface SandboxPublicTokenCreateRequestOptionsTransactions
 */
// Edited by Plaid, line 9. any to unknown
export interface SandboxPublicTokenCreateRequestOptionsTransactions {
    /**
     * The earliest date for which to fetch transaction history. Dates should be formatted as YYYY-MM-DD.
     * @type {string}
     * @memberof SandboxPublicTokenCreateRequestOptionsTransactions
     */
    start_date?: string;
    /**
     * The most recent date for which to fetch transaction history. Dates should be formatted as YYYY-MM-DD.
     * @type {string}
     * @memberof SandboxPublicTokenCreateRequestOptionsTransactions
     */
    end_date?: string;
}
/**
 * SandboxPublicTokenCreateResponse defines the response schema for `/sandbox/public_token/create`
 * @export
 * @interface SandboxPublicTokenCreateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface SandboxPublicTokenCreateResponse {
    [key: string]: object | unknown;

    /**
     * A public token that can be exchanged for an access token using `/item/public_token/exchange`
     * @type {string}
     * @memberof SandboxPublicTokenCreateResponse
     */
    public_token: string;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof SandboxPublicTokenCreateResponse
     */
    request_id: string;
}
/**
 * Defines the request schema for `/sandbox/transfer/fire_webhook`
 * @export
 * @interface SandboxTransferFireWebhookRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface SandboxTransferFireWebhookRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof SandboxTransferFireWebhookRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof SandboxTransferFireWebhookRequest
     */
    secret?: string;
    /**
     * The URL to which the webhook should be sent.
     * @type {string}
     * @memberof SandboxTransferFireWebhookRequest
     */
    webhook: string;
}
/**
 * Defines the response schema for `/sandbox/transfer/fire_webhook`
 * @export
 * @interface SandboxTransferFireWebhookResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface SandboxTransferFireWebhookResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof SandboxTransferFireWebhookResponse
     */
    request_id: string;
}
/**
 * Defines the request schema for `/sandbox/transfer/repayment/simulate`
 * @export
 * @interface SandboxTransferRepaymentSimulateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface SandboxTransferRepaymentSimulateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof SandboxTransferRepaymentSimulateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof SandboxTransferRepaymentSimulateRequest
     */
    secret?: string;
}
/**
 * Defines the response schema for `/sandbox/transfer/repayment/simulate`
 * @export
 * @interface SandboxTransferRepaymentSimulateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface SandboxTransferRepaymentSimulateResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof SandboxTransferRepaymentSimulateResponse
     */
    request_id: string;
}
/**
 * Defines the request schema for `/sandbox/transfer/simulate`
 * @export
 * @interface SandboxTransferSimulateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface SandboxTransferSimulateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof SandboxTransferSimulateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof SandboxTransferSimulateRequest
     */
    secret?: string;
    /**
     * Plaid’s unique identifier for a transfer.
     * @type {string}
     * @memberof SandboxTransferSimulateRequest
     */
    transfer_id: string;
    /**
     * Plaid’s unique identifier for a test clock. If provided, the event to be simulated is created at the `virtual_time` on the provided `test_clock`.
     * @type {string}
     * @memberof SandboxTransferSimulateRequest
     */
    test_clock_id?: string | null;
    /**
     * The asynchronous event to be simulated. May be: `posted`, `settled`, `failed`, or `returned`.  An error will be returned if the event type is incompatible with the current transfer status. Compatible status --> event type transitions include:  `pending` --> `failed`  `pending` --> `posted`  `posted` --> `returned`  `posted` --> `settled` 
     * @type {string}
     * @memberof SandboxTransferSimulateRequest
     */
    event_type: string;
    /**
     * 
     * @type {TransferFailure}
     * @memberof SandboxTransferSimulateRequest
     */
    failure_reason?: TransferFailure | null;
}
/**
 * Defines the response schema for `/sandbox/transfer/simulate`
 * @export
 * @interface SandboxTransferSimulateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface SandboxTransferSimulateResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof SandboxTransferSimulateResponse
     */
    request_id: string;
}
/**
 * Defines the request schema for `/sandbox/transfer/sweep/simulate`
 * @export
 * @interface SandboxTransferSweepSimulateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface SandboxTransferSweepSimulateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof SandboxTransferSweepSimulateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof SandboxTransferSweepSimulateRequest
     */
    secret?: string;
    /**
     * Plaid’s unique identifier for a test clock. If provided, the sweep to be simulated is created on the day of the `virtual_time` on the `test_clock`. If the date of `virtual_time` is on weekend or a federal holiday, the next available banking day is used.
     * @type {string}
     * @memberof SandboxTransferSweepSimulateRequest
     */
    test_clock_id?: string | null;
}
/**
 * Defines the response schema for `/sandbox/transfer/sweep/simulate`
 * @export
 * @interface SandboxTransferSweepSimulateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface SandboxTransferSweepSimulateResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {SimulatedTransferSweep}
     * @memberof SandboxTransferSweepSimulateResponse
     */
    sweep?: SimulatedTransferSweep;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof SandboxTransferSweepSimulateResponse
     */
    request_id: string;
}
/**
 * Defines the request schema for `/sandbox/transfer/test_clock/advance`
 * @export
 * @interface SandboxTransferTestClockAdvanceRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface SandboxTransferTestClockAdvanceRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof SandboxTransferTestClockAdvanceRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof SandboxTransferTestClockAdvanceRequest
     */
    secret?: string;
    /**
     * Plaid’s unique identifier for a test clock.
     * @type {string}
     * @memberof SandboxTransferTestClockAdvanceRequest
     */
    test_clock_id: string;
    /**
     * The virtual timestamp on the test clock. This will be of the form `2006-01-02T15:04:05Z`.
     * @type {string}
     * @memberof SandboxTransferTestClockAdvanceRequest
     */
    new_virtual_time: string;
}
/**
 * Defines the response schema for `/sandbox/transfer/test_clock/advance`
 * @export
 * @interface SandboxTransferTestClockAdvanceResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface SandboxTransferTestClockAdvanceResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof SandboxTransferTestClockAdvanceResponse
     */
    request_id: string;
}
/**
 * Defines the request schema for `/sandbox/transfer/test_clock/create`
 * @export
 * @interface SandboxTransferTestClockCreateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface SandboxTransferTestClockCreateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof SandboxTransferTestClockCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof SandboxTransferTestClockCreateRequest
     */
    secret?: string;
    /**
     * The virtual timestamp on the test clock. If not provided, the current timestamp will be used. This will be of the form `2006-01-02T15:04:05Z`.
     * @type {string}
     * @memberof SandboxTransferTestClockCreateRequest
     */
    virtual_time?: string | null;
}
/**
 * Defines the response schema for `/sandbox/transfer/test_clock/create`
 * @export
 * @interface SandboxTransferTestClockCreateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface SandboxTransferTestClockCreateResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {TransferTestClock}
     * @memberof SandboxTransferTestClockCreateResponse
     */
    test_clock: TransferTestClock;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof SandboxTransferTestClockCreateResponse
     */
    request_id: string;
}
/**
 * Defines the request schema for `/sandbox/transfer/test_clock/get`
 * @export
 * @interface SandboxTransferTestClockGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface SandboxTransferTestClockGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof SandboxTransferTestClockGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof SandboxTransferTestClockGetRequest
     */
    secret?: string;
    /**
     * Plaid’s unique identifier for a test clock.
     * @type {string}
     * @memberof SandboxTransferTestClockGetRequest
     */
    test_clock_id: string;
}
/**
 * Defines the response schema for `/sandbox/transfer/test_clock/get`
 * @export
 * @interface SandboxTransferTestClockGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface SandboxTransferTestClockGetResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {TransferTestClock}
     * @memberof SandboxTransferTestClockGetResponse
     */
    test_clock: TransferTestClock;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof SandboxTransferTestClockGetResponse
     */
    request_id: string;
}
/**
 * Defines the request schema for `/sandbox/transfer/test_clock/list`
 * @export
 * @interface SandboxTransferTestClockListRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface SandboxTransferTestClockListRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof SandboxTransferTestClockListRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof SandboxTransferTestClockListRequest
     */
    secret?: string;
    /**
     * The start virtual timestamp of test clocks to return. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
     * @type {string}
     * @memberof SandboxTransferTestClockListRequest
     */
    start_virtual_time?: string | null;
    /**
     * The end virtual timestamp of test clocks to return. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
     * @type {string}
     * @memberof SandboxTransferTestClockListRequest
     */
    end_virtual_time?: string | null;
    /**
     * The maximum number of test clocks to return.
     * @type {number}
     * @memberof SandboxTransferTestClockListRequest
     */
    count?: number | null;
    /**
     * The number of test clocks to skip before returning results.
     * @type {number}
     * @memberof SandboxTransferTestClockListRequest
     */
    offset?: number;
}
/**
 * Defines the response schema for `/sandbox/transfer/test_clock/list`
 * @export
 * @interface SandboxTransferTestClockListResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface SandboxTransferTestClockListResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {Array<TransferTestClock>}
     * @memberof SandboxTransferTestClockListResponse
     */
    test_clocks: Array<TransferTestClock>;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof SandboxTransferTestClockListResponse
     */
    request_id: string;
}
/**
 * The scopes object
 * @export
 * @interface Scopes
 */
// Edited by Plaid, line 9. any to unknown
export interface Scopes {
    /**
     * 
     * @type {ProductAccess}
     * @memberof Scopes
     */
    product_access?: ProductAccess;
    /**
     * 
     * @type {Array<AccountAccess>}
     * @memberof Scopes
     */
    accounts?: Array<AccountAccess>;
    /**
     * Allow access to newly opened accounts as they are opened. If unset, defaults to `true`.
     * @type {boolean}
     * @memberof Scopes
     */
    new_accounts?: boolean | null;
}
/**
 * An indicator for when scopes are being updated. When scopes are updated via enrollment (i.e. OAuth), the partner must send `ENROLLMENT`. When scopes are updated in a post-enrollment view, the partner must send `PORTAL`.
 * @export
 * @enum {string}
 */
export enum ScopesContext {
    Enrollment = 'ENROLLMENT',
    Portal = 'PORTAL'
}

/**
 * The scopes object
 * @export
 * @interface ScopesNullable
 */
// Edited by Plaid, line 9. any to unknown
export interface ScopesNullable {
    /**
     * 
     * @type {ProductAccess}
     * @memberof ScopesNullable
     */
    product_access?: ProductAccess;
    /**
     * 
     * @type {Array<AccountAccess>}
     * @memberof ScopesNullable
     */
    accounts?: Array<AccountAccess>;
    /**
     * Allow access to newly opened accounts as they are opened. If unset, defaults to `true`.
     * @type {boolean}
     * @memberof ScopesNullable
     */
    new_accounts?: boolean | null;
}
/**
 * Analysis information describing why a screening hit matched the provided user information
 * @export
 * @interface ScreeningHitAnalysis
 */
// Edited by Plaid, line 9. any to unknown
export interface ScreeningHitAnalysis {
    [key: string]: object | unknown;

    /**
     * 
     * @type {MatchSummaryCode}
     * @memberof ScreeningHitAnalysis
     */
    dates_of_birth?: MatchSummaryCode;
    /**
     * 
     * @type {MatchSummaryCode}
     * @memberof ScreeningHitAnalysis
     */
    documents?: MatchSummaryCode;
    /**
     * 
     * @type {MatchSummaryCode}
     * @memberof ScreeningHitAnalysis
     */
    locations?: MatchSummaryCode;
    /**
     * 
     * @type {MatchSummaryCode}
     * @memberof ScreeningHitAnalysis
     */
    names?: MatchSummaryCode;
    /**
     * The version of the screening\'s `search_terms` that were compared when the screening hit was added. screening hits are immutable once they have been reviewed. If changes are detected due to updates to the screening\'s `search_terms`, the associated program, or the list\'s source data prior to review, the screening hit will be updated to reflect those changes.
     * @type {number}
     * @memberof ScreeningHitAnalysis
     */
    search_terms_version: number;
}
/**
 * Information associated with the watchlist hit
 * @export
 * @interface ScreeningHitData
 */
// Edited by Plaid, line 9. any to unknown
export interface ScreeningHitData {
    [key: string]: object | unknown;

    /**
     * Dates of birth associated with the watchlist hit
     * @type {Array<ScreeningHitDateOfBirthItem>}
     * @memberof ScreeningHitData
     */
    dates_of_birth?: Array<ScreeningHitDateOfBirthItem>;
    /**
     * Documents associated with the watchlist hit
     * @type {Array<ScreeningHitDocumentsItems>}
     * @memberof ScreeningHitData
     */
    documents?: Array<ScreeningHitDocumentsItems>;
    /**
     * Locations associated with the watchlist hit
     * @type {Array<GenericScreeningHitLocationItems>}
     * @memberof ScreeningHitData
     */
    locations?: Array<GenericScreeningHitLocationItems>;
    /**
     * Names associated with the watchlist hit
     * @type {Array<ScreeningHitNamesItems>}
     * @memberof ScreeningHitData
     */
    names?: Array<ScreeningHitNamesItems>;
}
/**
 * Analyzed date of birth for the associated hit
 * @export
 * @interface ScreeningHitDateOfBirthItem
 */
// Edited by Plaid, line 9. any to unknown
export interface ScreeningHitDateOfBirthItem {
    [key: string]: object | unknown;

    /**
     * 
     * @type {MatchSummary}
     * @memberof ScreeningHitDateOfBirthItem
     */
    analysis?: MatchSummary;
    /**
     * 
     * @type {DateRange}
     * @memberof ScreeningHitDateOfBirthItem
     */
    data?: DateRange;
}
/**
 * Analyzed document information for the associated hit
 * @export
 * @interface ScreeningHitDocumentsItems
 */
// Edited by Plaid, line 9. any to unknown
export interface ScreeningHitDocumentsItems {
    [key: string]: object | unknown;

    /**
     * 
     * @type {MatchSummary}
     * @memberof ScreeningHitDocumentsItems
     */
    analysis?: MatchSummary;
    /**
     * 
     * @type {WatchlistScreeningDocument}
     * @memberof ScreeningHitDocumentsItems
     */
    data?: WatchlistScreeningDocument;
}
/**
 * Analyzed name information for the associated hit
 * @export
 * @interface ScreeningHitNamesItems
 */
// Edited by Plaid, line 9. any to unknown
export interface ScreeningHitNamesItems {
    [key: string]: object | unknown;

    /**
     * 
     * @type {MatchSummary}
     * @memberof ScreeningHitNamesItems
     */
    analysis?: MatchSummary;
    /**
     * 
     * @type {IndividualScreeningHitNames}
     * @memberof ScreeningHitNamesItems
     */
    data?: IndividualScreeningHitNames;
}
/**
 * Fired when an individual screening status has changed, which can occur manually via the dashboard or during ongoing monitoring.
 * @export
 * @interface ScreeningStatusUpdatedWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface ScreeningStatusUpdatedWebhook {
    [key: string]: object | unknown;

    /**
     * `SCREENING`
     * @type {string}
     * @memberof ScreeningStatusUpdatedWebhook
     */
    webhook_type: string;
    /**
     * `STATUS_UPDATED`
     * @type {string}
     * @memberof ScreeningStatusUpdatedWebhook
     */
    webhook_code: string;
    /**
     * The ID of the associated screening.
     * @type {string}
     * @memberof ScreeningStatusUpdatedWebhook
     */
    screening_id: string;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof ScreeningStatusUpdatedWebhook
     */
    environment: WebhookEnvironmentValues;
}
/**
 * Contains details about a security
 * @export
 * @interface Security
 */
// Edited by Plaid, line 9. any to unknown
export interface Security {
    [key: string]: object | unknown;

    /**
     * A unique, Plaid-specific identifier for the security, used to associate securities with holdings. Like all Plaid identifiers, the `security_id` is case sensitive. The `security_id` may change if inherent details of the security change due to a corporate action, for example, in the event of a ticker symbol change or CUSIP change.
     * @type {string}
     * @memberof Security
     */
    security_id: string;
    /**
     * 12-character ISIN, a globally unique securities identifier. Please note that Plaid\'s customers must hold a license directly from CUSIP Global Services to receive CUSIP & ISIN data. This field will be null by default for new customers. For existing customers, this field will be null by default starting on Sept 15, 2023. If you would like access to this field, please contact your Plaid Account Manager or reach out to investments-vendors@plaid.com.
     * @type {string}
     * @memberof Security
     */
    isin: string | null;
    /**
     * 9-character CUSIP, an identifier assigned to North American securities. Please note that Plaid\'s customers must hold a license directly from CUSIP Global Services to receive CUSIP & ISIN data. This field will be null by default for new customers. For existing customers, this field will be null by default starting on Sept 15, 2023. If you would like access to this field, please contact your Plaid Account Manager or reach out to investments-vendors@plaid.com.
     * @type {string}
     * @memberof Security
     */
    cusip: string | null;
    /**
     * 7-character SEDOL, an identifier assigned to securities in the UK.
     * @type {string}
     * @memberof Security
     */
    sedol: string | null;
    /**
     * An identifier given to the security by the institution
     * @type {string}
     * @memberof Security
     */
    institution_security_id: string | null;
    /**
     * If `institution_security_id` is present, this field indicates the Plaid `institution_id` of the institution to whom the identifier belongs.
     * @type {string}
     * @memberof Security
     */
    institution_id: string | null;
    /**
     * In certain cases, Plaid will provide the ID of another security whose performance resembles this security, typically when the original security has low volume, or when a private security can be modeled with a publicly traded security.
     * @type {string}
     * @memberof Security
     */
    proxy_security_id: string | null;
    /**
     * A descriptive name for the security, suitable for display.
     * @type {string}
     * @memberof Security
     */
    name: string | null;
    /**
     * The security’s trading symbol for publicly traded securities, and otherwise a short identifier if available.
     * @type {string}
     * @memberof Security
     */
    ticker_symbol: string | null;
    /**
     * Indicates that a security is a highly liquid asset and can be treated like cash.
     * @type {boolean}
     * @memberof Security
     */
    is_cash_equivalent: boolean | null;
    /**
     * The security type of the holding. Valid security types are:  `cash`: Cash, currency, and money market funds  `cryptocurrency`: Digital or virtual currencies  `derivative`: Options, warrants, and other derivative instruments  `equity`: Domestic and foreign equities  `etf`: Multi-asset exchange-traded investment funds  `fixed income`: Bonds and certificates of deposit (CDs)  `loan`: Loans and loan receivables  `mutual fund`: Open- and closed-end vehicles pooling funds of multiple investors  `other`: Unknown or other investment types
     * @type {string}
     * @memberof Security
     */
    type: string | null;
    /**
     * Price of the security at the close of the previous trading session. Null for non-public securities.  If the security is a foreign currency this field will be updated daily and will be priced in USD.  If the security is a cryptocurrency, this field will be updated multiple times a day. As crypto prices can fluctuate quickly and data may become stale sooner than other asset classes, refer to `update_datetime` with the time when the price was last updated. 
     * @type {number}
     * @memberof Security
     */
    close_price: number | null;
    /**
     * Date for which `close_price` is accurate. Always `null` if `close_price` is `null`.
     * @type {string}
     * @memberof Security
     */
    close_price_as_of: string | null;
    /**
     * Date and time at which `close_price` is accurate, in ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ). Always `null` if `close_price` is `null`.
     * @type {string}
     * @memberof Security
     */
    update_datetime?: string | null;
    /**
     * The ISO-4217 currency code of the price given. Always `null` if `unofficial_currency_code` is non-`null`.
     * @type {string}
     * @memberof Security
     */
    iso_currency_code: string | null;
    /**
     * The unofficial currency code associated with the security. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
     * @type {string}
     * @memberof Security
     */
    unofficial_currency_code: string | null;
}
/**
 * Specify the security associated with the holding or investment transaction. When inputting custom security data to the Sandbox, Plaid will perform post-data-retrieval normalization and enrichment. These processes may cause the data returned by the Sandbox to be slightly different from the data you input. An ISO-4217 currency code and a security identifier (`ticker_symbol`, `cusip`, `isin`, or `sedol`) are required.
 * @export
 * @interface SecurityOverride
 */
// Edited by Plaid, line 9. any to unknown
export interface SecurityOverride {
    /**
     * 12-character ISIN, a globally unique securities identifier. Please note that Plaid\'s customers must hold a license directly from CUSIP Global Services to receive CUSIP & ISIN data. This field will be null by default for new customers. For existing customers, this field will be null by default starting on Sept 15, 2023. If you would like access to this field, please contact your Plaid Account Manager or reach out to investments-vendors@plaid.com.
     * @type {string}
     * @memberof SecurityOverride
     */
    isin?: string;
    /**
     * 9-character CUSIP, an identifier assigned to North American securities. Please note that Plaid\'s customers must hold a license directly from CUSIP Global Services to receive CUSIP & ISIN data. This field will be null by default for new customers. For existing customers, this field will be null by default starting on Sept 15, 2023. If you would like access to this field, please contact your Plaid Account Manager or reach out to investments-vendors@plaid.com.
     * @type {string}
     * @memberof SecurityOverride
     */
    cusip?: string;
    /**
     * 7-character SEDOL, an identifier assigned to securities in the UK.
     * @type {string}
     * @memberof SecurityOverride
     */
    sedol?: string;
    /**
     * A descriptive name for the security, suitable for display.
     * @type {string}
     * @memberof SecurityOverride
     */
    name?: string;
    /**
     * The security’s trading symbol for publicly traded securities, and otherwise a short identifier if available.
     * @type {string}
     * @memberof SecurityOverride
     */
    ticker_symbol?: string;
    /**
     * Either a valid `iso_currency_code` or `unofficial_currency_code`
     * @type {string}
     * @memberof SecurityOverride
     */
    currency?: string;
}
/**
 * High level descriptions of how the associated selfie was processed. If a selfie fails verification, the details in the `analysis` object should help clarify why the selfie was rejected.
 * @export
 * @interface SelfieAnalysis
 */
// Edited by Plaid, line 9. any to unknown
export interface SelfieAnalysis {
    [key: string]: object | unknown;

    /**
     * 
     * @type {SelfieAnalysisDocumentComparison}
     * @memberof SelfieAnalysis
     */
    document_comparison: SelfieAnalysisDocumentComparison;
}
/**
 * Information about the comparison between the selfie and the document (if documentary verification also ran).
 * @export
 * @enum {string}
 */
export enum SelfieAnalysisDocumentComparison {
    Match = 'match',
    NoMatch = 'no_match',
    NoInput = 'no_input'
}

/**
 * The image or video capture of a selfie. Only one of image or video URL will be populated per selfie.
 * @export
 * @interface SelfieCapture
 */
// Edited by Plaid, line 9. any to unknown
export interface SelfieCapture {
    [key: string]: object | unknown;

    /**
     * Temporary URL for downloading an image selfie capture.
     * @type {string}
     * @memberof SelfieCapture
     */
    image_url?: string | null;
    /**
     * Temporary URL for downloading a video selfie capture.
     * @type {string}
     * @memberof SelfieCapture
     */
    video_url?: string | null;
}
/**
 * Additional information for the `selfie_check` step. This field will be `null` unless `steps.selfie_check` has reached a terminal state of either `success` or `failed`.
 * @export
 * @interface SelfieCheck
 */
// Edited by Plaid, line 9. any to unknown
export interface SelfieCheck {
    [key: string]: object | unknown;

    /**
     * 
     * @type {SelfieCheckStatus}
     * @memberof SelfieCheck
     */
    status: SelfieCheckStatus;
    /**
     * An array of selfies submitted to the `selfie_check` step. Each entry represents one user submission.
     * @type {Array<SelfieCheckSelfie>}
     * @memberof SelfieCheck
     */
    selfies: Array<SelfieCheckSelfie>;
}
/**
 * Catpures and analysis from a user\'s selfie.
 * @export
 * @interface SelfieCheckSelfie
 */
// Edited by Plaid, line 9. any to unknown
export interface SelfieCheckSelfie {
    [key: string]: object | unknown;

    /**
     * 
     * @type {SelfieStatus}
     * @memberof SelfieCheckSelfie
     */
    status: SelfieStatus;
    /**
     * The `attempt` field begins with 1 and increments with each subsequent selfie upload.
     * @type {number}
     * @memberof SelfieCheckSelfie
     */
    attempt: number;
    /**
     * 
     * @type {SelfieCapture}
     * @memberof SelfieCheckSelfie
     */
    capture: SelfieCapture;
    /**
     * 
     * @type {SelfieAnalysis}
     * @memberof SelfieCheckSelfie
     */
    analysis: SelfieAnalysis;
}
/**
 * The outcome status for the associated Identity Verification attempt\'s `selfie_check` step. This field will always have the same value as `steps.selfie_check`.
 * @export
 * @enum {string}
 */
export enum SelfieCheckStatus {
    Success = 'success',
    Failed = 'failed'
}

/**
 * An outcome status for this specific selfie. Distinct from the overall `selfie_check.status` that summarizes the verification outcome from one or more selfies.
 * @export
 * @enum {string}
 */
export enum SelfieStatus {
    Success = 'success',
    Failed = 'failed'
}

/**
 * An object containing a BACS account number and sort code. If an IBAN is not provided or if this recipient needs to accept domestic GBP-denominated payments, BACS data is required.
 * @export
 * @interface SenderBACSNullable
 */
// Edited by Plaid, line 9. any to unknown
export interface SenderBACSNullable {
    /**
     * The account number of the account. Maximum of 10 characters.
     * @type {string}
     * @memberof SenderBACSNullable
     */
    account?: string;
    /**
     * The 6-character sort code of the account.
     * @type {string}
     * @memberof SenderBACSNullable
     */
    sort_code?: string;
}
/**
 * A collection of details related to a fulfillment service or product in terms of request, process and result.
 * @export
 * @interface Service
 */
// Edited by Plaid, line 9. any to unknown
export interface Service {
    [key: string]: object | unknown;

    /**
     * 
     * @type {VerificationOfAsset}
     * @memberof Service
     */
    VERIFICATION_OF_ASSET: VerificationOfAsset;
    /**
     * 
     * @type {Statuses}
     * @memberof Service
     */
    STATUSES: Statuses;
}
/**
 * A collection of details related to a fulfillment service or product in terms of request, process and result.
 * @export
 * @interface ServiceProductFulfillment
 */
// Edited by Plaid, line 9. any to unknown
export interface ServiceProductFulfillment {
    [key: string]: object | unknown;

    /**
     * 
     * @type {ServiceProductFulfillmentDetail}
     * @memberof ServiceProductFulfillment
     */
    SERVICE_PRODUCT_FULFILLMENT_DETAIL: ServiceProductFulfillmentDetail;
}
/**
 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
 * @export
 * @interface ServiceProductFulfillmentDetail
 */
// Edited by Plaid, line 9. any to unknown
export interface ServiceProductFulfillmentDetail {
    [key: string]: object | unknown;

    /**
     * A string that uniquely identifies a type of order Verification of Asset.
     * @type {string}
     * @memberof ServiceProductFulfillmentDetail
     */
    VendorOrderIdentifier: string | null;
    /**
     * 
     * @type {ServiceProductFulfillmentIdentifier}
     * @memberof ServiceProductFulfillmentDetail
     */
    ServiceProductFulfillmentIdentifier: ServiceProductFulfillmentIdentifier;
}
/**
 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
 * @export
 * @enum {string}
 */
export enum ServiceProductFulfillmentIdentifier {
    Voa = 'VOA',
    Voetransactions = 'VOETRANSACTIONS'
}

/**
 * The address of the student loan servicer. This is generally the remittance address to which payments should be sent.
 * @export
 * @interface ServicerAddressData
 */
// Edited by Plaid, line 9. any to unknown
export interface ServicerAddressData {
    [key: string]: object | unknown;

    /**
     * The full city name
     * @type {string}
     * @memberof ServicerAddressData
     */
    city: string | null;
    /**
     * The region or state Example: `\"NC\"`
     * @type {string}
     * @memberof ServicerAddressData
     */
    region: string | null;
    /**
     * The full street address Example: `\"564 Main Street, APT 15\"`
     * @type {string}
     * @memberof ServicerAddressData
     */
    street: string | null;
    /**
     * The postal code
     * @type {string}
     * @memberof ServicerAddressData
     */
    postal_code: string | null;
    /**
     * The ISO 3166-1 alpha-2 country code
     * @type {string}
     * @memberof ServicerAddressData
     */
    country: string | null;
}
/**
 * A collection of objects that describe requests and responses for services.
 * @export
 * @interface Services
 */
// Edited by Plaid, line 9. any to unknown
export interface Services {
    [key: string]: object | unknown;

    /**
     * 
     * @type {Service}
     * @memberof Services
     */
    SERVICE: Service;
}
/**
 * Data about the components comprising an address.
 * @export
 * @interface SignalAddressData
 */
// Edited by Plaid, line 9. any to unknown
export interface SignalAddressData {
    [key: string]: object | unknown;

    /**
     * The full city name
     * @type {string}
     * @memberof SignalAddressData
     */
    city?: string;
    /**
     * The region or state Example: `\"NC\"`
     * @type {string}
     * @memberof SignalAddressData
     */
    region?: string | null;
    /**
     * The full street address Example: `\"564 Main Street, APT 15\"`
     * @type {string}
     * @memberof SignalAddressData
     */
    street?: string;
    /**
     * The postal code
     * @type {string}
     * @memberof SignalAddressData
     */
    postal_code?: string | null;
    /**
     * The ISO 3166-1 alpha-2 country code
     * @type {string}
     * @memberof SignalAddressData
     */
    country?: string | null;
}
/**
 * The payment decision from the risk assessment.  `APPROVE`: approve the transaction without requiring further actions from your customers. For example, use this field if you are placing a standard hold for all the approved transactions before making funds available to your customers. You should also use this field if you decide to accelerate the fund availability for your customers.  `REVIEW`: the transaction requires manual review  `REJECT`: reject the transaction  `TAKE_OTHER_RISK_MEASURES`: for example, placing a longer hold on funds than those approved transactions or introducing customer frictions such as step-up verification/authentication  `NOT_EVALUATED`: if only logging the Signal results without using them  Possible values:  `APPROVE`, `REVIEW`, `REJECT`, `TAKE_OTHER_RISK_MEASURES`, `NOT_EVALUATED` 
 * @export
 * @enum {string}
 */
export enum SignalDecisionOutcome {
    Approve = 'APPROVE',
    Review = 'REVIEW',
    Reject = 'REJECT',
    TakeOtherRiskMeasures = 'TAKE_OTHER_RISK_MEASURES',
    NotEvaluated = 'NOT_EVALUATED'
}

/**
 * SignalDecisionReportRequest defines the request schema for `/signal/decision/report`
 * @export
 * @interface SignalDecisionReportRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface SignalDecisionReportRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof SignalDecisionReportRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof SignalDecisionReportRequest
     */
    secret?: string;
    /**
     * Must be the same as the `client_transaction_id` supplied when calling `/signal/evaluate`
     * @type {string}
     * @memberof SignalDecisionReportRequest
     */
    client_transaction_id: string;
    /**
     * `true` if the ACH transaction was initiated, `false` otherwise.  This field must be returned as a boolean. If formatted incorrectly, this will result in an [`INVALID_FIELD`](/docs/errors/invalid-request/#invalid_field) error.
     * @type {boolean}
     * @memberof SignalDecisionReportRequest
     */
    initiated: boolean;
    /**
     * The actual number of days (hold time) since the ACH debit transaction that you wait before making funds available to your customers. The holding time could affect the ACH return rate.  For example, use 0 if you make funds available to your customers instantly or the same day following the debit transaction, or 1 if you make funds available the next day following the debit initialization.
     * @type {number}
     * @memberof SignalDecisionReportRequest
     */
    days_funds_on_hold?: number | null;
    /**
     * 
     * @type {SignalDecisionOutcome}
     * @memberof SignalDecisionReportRequest
     */
    decision_outcome?: SignalDecisionOutcome | null;
    /**
     * 
     * @type {SignalPaymentMethod}
     * @memberof SignalDecisionReportRequest
     */
    payment_method?: SignalPaymentMethod | null;
    /**
     * The amount (in USD) made available to your customers instantly following the debit transaction. It could be a partial amount of the requested transaction (example: 102.05).
     * @type {number}
     * @memberof SignalDecisionReportRequest
     */
    amount_instantly_available?: number | null;
}
/**
 * SignalDecisionReportResponse defines the response schema for `/signal/decision/report`
 * @export
 * @interface SignalDecisionReportResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface SignalDecisionReportResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof SignalDecisionReportResponse
     */
    request_id: string;
}
/**
 * Details about the end user\'s device
 * @export
 * @interface SignalDevice
 */
// Edited by Plaid, line 9. any to unknown
export interface SignalDevice {
    /**
     * The IP address of the device that initiated the transaction
     * @type {string}
     * @memberof SignalDevice
     */
    ip_address?: string | null;
    /**
     * The user agent of the device that initiated the transaction (e.g. \"Mozilla/5.0\")
     * @type {string}
     * @memberof SignalDevice
     */
    user_agent?: string | null;
}
/**
 * The core attributes object contains additional data that can be used to assess the ACH return risk. Examples of data include:  `days_since_first_plaid_connection`: The number of days since the first time the Item was connected to an application via Plaid `plaid_connections_count_7d`: The number of times the Item has been connected to applications via Plaid over the past 7 days `plaid_connections_count_30d`: The number of times the Item has been connected to applications via Plaid over the past 30 days `total_plaid_connections_count`: The number of times the Item has been connected to applications via Plaid `is_savings_or_money_market_account`: Indicates whether the ACH transaction funding account is a savings/money market account  For the full list and detailed documentation of core attributes available, or to request that core attributes not be returned, contact Sales or your Plaid account manager
 * @export
 * @interface SignalEvaluateCoreAttributes
 */
// Edited by Plaid, line 9. any to unknown
export interface SignalEvaluateCoreAttributes {
    /**
     * We parse and analyze historical transaction metadata to identify the number of possible past returns due to unauthorized transactions over the past 7 days from the account that will be debited.
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    unauthorized_transactions_count_7d?: number | null;
    /**
     * We parse and analyze historical transaction metadata to identify the number of possible past returns due to unauthorized transactions over the past 30 days from the account that will be debited.
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    unauthorized_transactions_count_30d?: number | null;
    /**
     * We parse and analyze historical transaction metadata to identify the number of possible past returns due to unauthorized transactions over the past 60 days from the account that will be debited.
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    unauthorized_transactions_count_60d?: number | null;
    /**
     * We parse and analyze historical transaction metadata to identify the number of possible past returns due to unauthorized transactions over the past 90 days from the account that will be debited.
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    unauthorized_transactions_count_90d?: number | null;
    /**
     * We parse and analyze historical transaction metadata to identify the number of possible past returns due to non-sufficient funds/overdrafts over the past 7 days from the account that will be debited.
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    nsf_overdraft_transactions_count_7d?: number | null;
    /**
     * We parse and analyze historical transaction metadata to identify the number of possible past returns due to non-sufficient funds/overdrafts over the past 30 days from the account that will be debited.
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    nsf_overdraft_transactions_count_30d?: number | null;
    /**
     * We parse and analyze historical transaction metadata to identify the number of possible past returns due to non-sufficient funds/overdrafts over the past 60 days from the account that will be debited.
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    nsf_overdraft_transactions_count_60d?: number | null;
    /**
     * We parse and analyze historical transaction metadata to identify the number of possible past returns due to non-sufficient funds/overdrafts over the past 90 days from the account that will be debited.
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    nsf_overdraft_transactions_count_90d?: number | null;
    /**
     * The number of days since the first time the Item was connected to an application via Plaid
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    days_since_first_plaid_connection?: number | null;
    /**
     * The number of times the Item has been connected to applications via Plaid over the past 7 days
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    plaid_connections_count_7d?: number | null;
    /**
     * The number of times the Item has been connected to applications via Plaid over the past 30 days
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    plaid_connections_count_30d?: number | null;
    /**
     * The total number of times the Item has been connected to applications via Plaid
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    total_plaid_connections_count?: number | null;
    /**
     * Indicates if the ACH transaction funding account is a savings/money market account
     * @type {boolean}
     * @memberof SignalEvaluateCoreAttributes
     */
    is_savings_or_money_market_account?: boolean | null;
    /**
     * The total credit (inflow) transaction amount over the past 10 days from the account that will be debited
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    total_credit_transactions_amount_10d?: number | null;
    /**
     * The total debit (outflow) transaction amount over the past 10 days from the account that will be debited
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    total_debit_transactions_amount_10d?: number | null;
    /**
     * The 50th percentile of all credit (inflow) transaction amounts over the past 28 days from the account that will be debited
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    p50_credit_transactions_amount_28d?: number | null;
    /**
     * The 50th percentile of all debit (outflow) transaction amounts over the past 28 days from the account that will be debited
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    p50_debit_transactions_amount_28d?: number | null;
    /**
     * The 95th percentile of all credit (inflow) transaction amounts over the past 28 days from the account that will be debited
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    p95_credit_transactions_amount_28d?: number | null;
    /**
     * The 95th percentile of all debit (outflow) transaction amounts over the past 28 days from the account that will be debited
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    p95_debit_transactions_amount_28d?: number | null;
    /**
     * The number of days within the past 90 days when the account that will be debited had a negative end-of-day available balance
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    days_with_negative_balance_count_90d?: number | null;
    /**
     * The 90th percentile of the end-of-day available balance over the past 30 days of the account that will be debited
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    p90_eod_balance_30d?: number | null;
    /**
     * The 90th percentile of the end-of-day available balance over the past 60 days of the account that will be debited
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    p90_eod_balance_60d?: number | null;
    /**
     * The 90th percentile of the end-of-day available balance over the past 90 days of the account that will be debited
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    p90_eod_balance_90d?: number | null;
    /**
     * The 10th percentile of the end-of-day available balance over the past 30 days of the account that will be debited
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    p10_eod_balance_30d?: number | null;
    /**
     * The 10th percentile of the end-of-day available balance over the past 60 days of the account that will be debited
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    p10_eod_balance_60d?: number | null;
    /**
     * The 10th percentile of the end-of-day available balance over the past 90 days of the account that will be debited
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    p10_eod_balance_90d?: number | null;
    /**
     * Available balance, as of the `balance_last_updated` time. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    available_balance?: number | null;
    /**
     * Current balance, as of the `balance_last_updated` time. The current balance is the total amount of funds in the account.
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    current_balance?: number | null;
    /**
     * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DDTHH:mm:ssZ) indicating the last time that the balance for the given account has been updated.
     * @type {string}
     * @memberof SignalEvaluateCoreAttributes
     */
    balance_last_updated?: string | null;
    /**
     * The number of times the account\'s phone numbers on file have changed over the past 28 days
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    phone_change_count_28d?: number | null;
    /**
     * The number of times the account\'s phone numbers on file have changed over the past 90 days
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    phone_change_count_90d?: number | null;
    /**
     * The number of times the account\'s email addresses on file have changed over the past 28 days
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    email_change_count_28d?: number | null;
    /**
     * The number of times the account\'s email addresses on file have changed over the past 90 days
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    email_change_count_90d?: number | null;
    /**
     * The number of times the account\'s addresses on file have changed over the past 28 days
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    address_change_count_28d?: number | null;
    /**
     * The number of times the account\'s addresses on file have changed over the past 90 days
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    address_change_count_90d?: number | null;
    /**
     * The number of non-OAuth authentication attempts via Plaid for this bank account over the past 3 days
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    plaid_non_oauth_authentication_attempts_count_3d?: number | null;
    /**
     * The number of non-OAuth authentication attempts via Plaid for this bank account over the past 7 days
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    plaid_non_oauth_authentication_attempts_count_7d?: number | null;
    /**
     * The number of non-OAuth authentication attempts via Plaid for this bank account over the past 30 days
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    plaid_non_oauth_authentication_attempts_count_30d?: number | null;
    /**
     * The number of failed non-OAuth authentication attempts via Plaid for this bank account over the past 3 days
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    failed_plaid_non_oauth_authentication_attempts_count_3d?: number | null;
    /**
     * The number of failed non-OAuth authentication attempts via Plaid for this bank account over the past 7 days
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    failed_plaid_non_oauth_authentication_attempts_count_7d?: number | null;
    /**
     * The number of failed non-OAuth authentication attempts via Plaid for this bank account over the past 30 days
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    failed_plaid_non_oauth_authentication_attempts_count_30d?: number | null;
    /**
     * The total number of debit (outflow) transactions over the past 10 days from the account that will be debited
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    debit_transactions_count_10d?: number | null;
    /**
     * The total number of credit (inflow) transactions over the past 10 days from the account that will be debited
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    credit_transactions_count_10d?: number | null;
    /**
     * The total number of debit (outflow) transactions over the past 30 days from the account that will be debited
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    debit_transactions_count_30d?: number | null;
    /**
     * The total number of credit (inflow) transactions over the past 30 days from the account that will be debited
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    credit_transactions_count_30d?: number | null;
    /**
     * The total number of debit (outflow) transactions over the past 60 days from the account that will be debited
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    debit_transactions_count_60d?: number | null;
    /**
     * The total number of credit (inflow) transactions over the past 60 days from the account that will be debited
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    credit_transactions_count_60d?: number | null;
    /**
     * The total number of debit (outflow) transactions over the past 90 days from the account that will be debited
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    debit_transactions_count_90d?: number | null;
    /**
     * The total number of credit (inflow) transactions over the past 90 days from the account that will be debited
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    credit_transactions_count_90d?: number | null;
    /**
     * The total debit (outflow) transaction amount over the past 30 days from the account that will be debited
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    total_debit_transactions_amount_30d?: number | null;
    /**
     * The total credit (inflow) transaction amount over the past 30 days from the account that will be debited
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    total_credit_transactions_amount_30d?: number | null;
    /**
     * The total debit (outflow) transaction amount over the past 60 days from the account that will be debited
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    total_debit_transactions_amount_60d?: number | null;
    /**
     * The total credit (inflow) transaction amount over the past 60 days from the account that will be debited
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    total_credit_transactions_amount_60d?: number | null;
    /**
     * The total debit (outflow) transaction amount over the past 90 days from the account that will be debited
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    total_debit_transactions_amount_90d?: number | null;
    /**
     * The total credit (inflow) transaction amount over the past 90 days from the account that will be debited
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    total_credit_transactions_amount_90d?: number | null;
    /**
     * The 50th percentile of the end-of-day available balance over the past 30 days of the account that will be debited
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    p50_eod_balance_30d?: number | null;
    /**
     * The 50th percentile of the end-of-day available balance over the past 60 days of the account that will be debited
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    p50_eod_balance_60d?: number | null;
    /**
     * The 50th percentile of the end-of-day available balance over the past 90 days of the account that will be debited
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    p50_eod_balance_90d?: number | null;
    /**
     * The 50th percentile of the end-of-day available balance between day 31 and day 60 over the past 60 days of the account that will be debited
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    p50_eod_balance_31d_to_60d?: number | null;
    /**
     * The 50th percentile of the end-of-day available balance between day 61 and day 90 over the past 60 days of the account that will be debited
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    p50_eod_balance_61d_to_90d?: number | null;
    /**
     * The 90th percentile of the end-of-day available balance between day 31 and day 60 over the past 60 days of the account that will be debited
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    p90_eod_balance_31d_to_60d?: number | null;
    /**
     * The 90th percentile of the end-of-day available balance between day 61 and day 90 over the past 60 days of the account that will be debited
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    p90_eod_balance_61d_to_90d?: number | null;
    /**
     * The 10th percentile of the end-of-day available balance between day 31 and day 60 over the past 60 days of the account that will be debited
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    p10_eod_balance_31d_to_60d?: number | null;
    /**
     * The 10th percentile of the end-of-day available balance between day 61 and day 90 over the past 60 days of the account that will be debited
     * @type {number}
     * @memberof SignalEvaluateCoreAttributes
     */
    p10_eod_balance_61d_to_90d?: number | null;
    /**
     * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DDTHH:mm:ssZ) indicating the last time that the transactions for the given account have been updated.
     * @type {string}
     * @memberof SignalEvaluateCoreAttributes
     */
    transactions_last_updated?: string | null;
}
/**
 * SignalEvaluateRequest defines the request schema for `/signal/evaluate`
 * @export
 * @interface SignalEvaluateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface SignalEvaluateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof SignalEvaluateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof SignalEvaluateRequest
     */
    secret?: string;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof SignalEvaluateRequest
     */
    access_token: string;
    /**
     * The Plaid `account_id` of the account that is the funding source for the proposed transaction. The `account_id` is returned in the `/accounts/get` endpoint as well as the [`onSuccess`](/docs/link/ios/#link-ios-onsuccess-linkSuccess-metadata-accounts-id) callback metadata.  This will return an [`INVALID_ACCOUNT_ID`](/docs/errors/invalid-input/#invalid_account_id) error if the account has been removed at the bank or if the `account_id` is no longer valid.
     * @type {string}
     * @memberof SignalEvaluateRequest
     */
    account_id: string;
    /**
     * The unique ID that you would like to use to refer to this transaction. For your convenience mapping your internal data, you could use your internal ID/identifier for this transaction. The max length for this field is 36 characters.
     * @type {string}
     * @memberof SignalEvaluateRequest
     */
    client_transaction_id: string;
    /**
     * The transaction amount, in USD (e.g. `102.05`)
     * @type {number}
     * @memberof SignalEvaluateRequest
     */
    amount: number;
    /**
     * `true` if the end user is present while initiating the ACH transfer and the endpoint is being called; `false` otherwise (for example, when the ACH transfer is scheduled and the end user is not present, or you call this endpoint after the ACH transfer but before submitting the Nacha file for ACH processing).
     * @type {boolean}
     * @memberof SignalEvaluateRequest
     */
    user_present?: boolean | null;
    /**
     * A unique ID that identifies the end user in your system. This ID is used to correlate requests by a user with multiple Items. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`.
     * @type {string}
     * @memberof SignalEvaluateRequest
     */
    client_user_id?: string;
    /**
     * `true` if the ACH transaction is a recurring transaction; `false` otherwise 
     * @type {boolean}
     * @memberof SignalEvaluateRequest
     */
    is_recurring?: boolean | null;
    /**
     * The default ACH or non-ACH payment method to complete the transaction. `SAME_DAY_ACH`: Same Day ACH by NACHA. The debit transaction is processed and settled on the same day `NEXT_DAY_ACH`: Next Day ACH settlement for debit transactions, offered by some payment processors `STANDARD_ACH`: standard ACH by NACHA `REAL_TIME_PAYMENTS`: real-time payments such as RTP and FedNow `DEBIT_CARD`: if the default payment is over debit card networks `MULTIPLE_PAYMENT_METHODS`: if there is no default debit rail or there are multiple payment methods Possible values:  `SAME_DAY_ACH`, `NEXT_DAY_ACH`, `STANDARD_ACH`, `REAL_TIME_PAYMENTS`, `DEBIT_CARD`, `MULTIPLE_PAYMENT_METHODS`
     * @type {string}
     * @memberof SignalEvaluateRequest
     */
    default_payment_method?: string | null;
    /**
     * 
     * @type {SignalUser}
     * @memberof SignalEvaluateRequest
     */
    user?: SignalUser;
    /**
     * 
     * @type {SignalDevice}
     * @memberof SignalEvaluateRequest
     */
    device?: SignalDevice;
}
/**
 * SignalEvaluateResponse defines the response schema for `/signal/income/evaluate`
 * @export
 * @interface SignalEvaluateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface SignalEvaluateResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof SignalEvaluateResponse
     */
    request_id: string;
    /**
     * 
     * @type {SignalScores}
     * @memberof SignalEvaluateResponse
     */
    scores: SignalScores;
    /**
     * 
     * @type {SignalEvaluateCoreAttributes}
     * @memberof SignalEvaluateResponse
     */
    core_attributes?: SignalEvaluateCoreAttributes;
    /**
     * If bank information was not available to be used in the Signal model, this array contains warnings describing why bank data is missing. If you want to receive an API error instead of Signal scores in the case of missing bank data, file a support ticket or contact your Plaid account manager.
     * @type {Array<SignalWarning>}
     * @memberof SignalEvaluateResponse
     */
    warnings: Array<SignalWarning>;
}
/**
 * Signal insights including scores and attributes.
 * @export
 * @interface SignalInsights
 */
// Edited by Plaid, line 9. any to unknown
export interface SignalInsights {
    [key: string]: object | unknown;

    /**
     * 
     * @type {SignalScores}
     * @memberof SignalInsights
     */
    scores?: SignalScores;
    /**
     * 
     * @type {SignalEvaluateCoreAttributes}
     * @memberof SignalInsights
     */
    core_attributes?: SignalEvaluateCoreAttributes;
    /**
     * If bank information was not available to be used in the Signal model, this array contains warnings describing why bank data is missing. If you want to receive an API error instead of Signal scores in the case of missing bank data, file a support ticket or contact your Plaid account manager.
     * @type {Array<SignalWarning>}
     * @memberof SignalInsights
     */
    warnings?: Array<SignalWarning>;
}
/**
 * The payment method to complete the transaction after the risk assessment. It may be different from the default payment method.  `SAME_DAY_ACH`: Same Day ACH by NACHA. The debit transaction is processed and settled on the same day  `NEXT_DAY_ACH`: Next Day ACH settlement for debit transactions, offered by some payment processors  `STANDARD_ACH`: standard ACH by NACHA  `REAL_TIME_PAYMENTS`: real-time payments such as RTP and FedNow  `DEBIT_CARD`: if the default payment is over debit card networks  `MULTIPLE_PAYMENT_METHODS`: if there is no default debit rail or there are multiple payment methods  Possible values: `SAME_DAY_ACH`, `NEXT_DAY_ACH`, `STANDARD_ACH`, `REAL_TIME_PAYMENTS`, `DEBIT_CARD`, `MULTIPLE_PAYMENT_METHODS` 
 * @export
 * @enum {string}
 */
export enum SignalPaymentMethod {
    SameDayAch = 'SAME_DAY_ACH',
    NextDayAch = 'NEXT_DAY_ACH',
    StandardAch = 'STANDARD_ACH',
    RealTimePayments = 'REAL_TIME_PAYMENTS',
    DebitCard = 'DEBIT_CARD',
    MultiplePaymentMethods = 'MULTIPLE_PAYMENT_METHODS'
}

/**
 * The user\'s legal name
 * @export
 * @interface SignalPersonName
 */
// Edited by Plaid, line 9. any to unknown
export interface SignalPersonName {
    /**
     * The user\'s name prefix (e.g. \"Mr.\")
     * @type {string}
     * @memberof SignalPersonName
     */
    prefix?: string | null;
    /**
     * The user\'s given name. If the user has a one-word name, it should be provided in this field.
     * @type {string}
     * @memberof SignalPersonName
     */
    given_name?: string | null;
    /**
     * The user\'s middle name
     * @type {string}
     * @memberof SignalPersonName
     */
    middle_name?: string | null;
    /**
     * The user\'s family name / surname
     * @type {string}
     * @memberof SignalPersonName
     */
    family_name?: string | null;
    /**
     * The user\'s name suffix (e.g. \"II\")
     * @type {string}
     * @memberof SignalPersonName
     */
    suffix?: string | null;
}
/**
 * SignalPrepareRequest defines the request schema for `/signal/prepare`
 * @export
 * @interface SignalPrepareRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface SignalPrepareRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof SignalPrepareRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof SignalPrepareRequest
     */
    secret?: string;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof SignalPrepareRequest
     */
    access_token: string;
}
/**
 * SignalPrepareResponse defines the response schema for `/signal/prepare`
 * @export
 * @interface SignalPrepareResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface SignalPrepareResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof SignalPrepareResponse
     */
    request_id: string;
}
/**
 * SignalReturnReportRequest defines the request schema for `/signal/return/report`
 * @export
 * @interface SignalReturnReportRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface SignalReturnReportRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof SignalReturnReportRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof SignalReturnReportRequest
     */
    secret?: string;
    /**
     * Must be the same as the `client_transaction_id` supplied when calling `/signal/evaluate`
     * @type {string}
     * @memberof SignalReturnReportRequest
     */
    client_transaction_id: string;
    /**
     * Must be a valid ACH return code (e.g. \"R01\")  If formatted incorrectly, this will result in an [`INVALID_FIELD`](/docs/errors/invalid-request/#invalid_field) error.
     * @type {string}
     * @memberof SignalReturnReportRequest
     */
    return_code: string;
    /**
     * Date and time when you receive the returns from your payment processors, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
     * @type {string}
     * @memberof SignalReturnReportRequest
     */
    returned_at?: string | null;
}
/**
 * SignalReturnReportResponse defines the response schema for `/signal/return/report`
 * @export
 * @interface SignalReturnReportResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface SignalReturnReportResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof SignalReturnReportResponse
     */
    request_id: string;
}
/**
 * Risk scoring details broken down by risk category.
 * @export
 * @interface SignalScores
 */
// Edited by Plaid, line 9. any to unknown
export interface SignalScores {
    [key: string]: object | unknown;

    /**
     * 
     * @type {CustomerInitiatedReturnRisk}
     * @memberof SignalScores
     */
    customer_initiated_return_risk?: CustomerInitiatedReturnRisk;
    /**
     * 
     * @type {BankInitiatedReturnRisk}
     * @memberof SignalScores
     */
    bank_initiated_return_risk?: BankInitiatedReturnRisk;
}
/**
 * Details about the end user initiating the transaction (i.e., the account holder).
 * @export
 * @interface SignalUser
 */
// Edited by Plaid, line 9. any to unknown
export interface SignalUser {
    /**
     * 
     * @type {SignalPersonName}
     * @memberof SignalUser
     */
    name?: SignalPersonName | null;
    /**
     * The user\'s phone number, in E.164 format: +{countrycode}{number}. For example: \"+14151234567\"
     * @type {string}
     * @memberof SignalUser
     */
    phone_number?: string | null;
    /**
     * The user\'s email address.
     * @type {string}
     * @memberof SignalUser
     */
    email_address?: string | null;
    /**
     * 
     * @type {SignalAddressData}
     * @memberof SignalUser
     */
    address?: SignalAddressData | null;
}
/**
 * Conveys information about the errors causing missing or stale bank data used to construct the /signal/evaluate scores and response
 * @export
 * @interface SignalWarning
 */
// Edited by Plaid, line 9. any to unknown
export interface SignalWarning {
    /**
     * A broad categorization of the warning. Safe for programmatic use.
     * @type {string}
     * @memberof SignalWarning
     */
    warning_type?: string;
    /**
     * The warning code identifies a specific kind of warning that pertains to the error causing bank data to be missing. Safe for programmatic use. For more details on warning codes, please refer to Plaid standard error codes documentation. In case you receive the `ITEM_LOGIN_REQUIRED` warning, we recommend re-authenticating your user by implementing Link\'s update mode. This will guide your user to fix their credentials, allowing Plaid to start fetching data again for future Signal requests.
     * @type {string}
     * @memberof SignalWarning
     */
    warning_code?: string;
    /**
     * A developer-friendly representation of the warning type. This may change over time and is not safe for programmatic use.
     * @type {string}
     * @memberof SignalWarning
     */
    warning_message?: string;
}
/**
 * A sweep returned from the `/sandbox/transfer/sweep/simulate` endpoint. Can be null if there are no transfers to include in a sweep.
 * @export
 * @interface SimulatedTransferSweep
 */
// Edited by Plaid, line 9. any to unknown
export interface SimulatedTransferSweep {
    /**
     * Identifier of the sweep.
     * @type {string}
     * @memberof SimulatedTransferSweep
     */
    id: string;
    /**
     * The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited.
     * @type {string}
     * @memberof SimulatedTransferSweep
     */
    funding_account_id: string;
    /**
     * The datetime when the sweep occurred, in RFC 3339 format.
     * @type {string}
     * @memberof SimulatedTransferSweep
     */
    created: string;
    /**
     * Signed decimal amount of the sweep as it appears on your sweep account ledger (e.g. \"-10.00\")  If amount is not present, the sweep was net-settled to zero and outstanding debits and credits between the sweep account and Plaid are balanced.
     * @type {string}
     * @memberof SimulatedTransferSweep
     */
    amount: string;
    /**
     * The currency of the sweep, e.g. \"USD\".
     * @type {string}
     * @memberof SimulatedTransferSweep
     */
    iso_currency_code: string;
    /**
     * The date when the sweep settled, in the YYYY-MM-DD format.
     * @type {string}
     * @memberof SimulatedTransferSweep
     */
    settled: string | null;
}
/**
 * Object containing all risk signals and relevant metadata for a single document
 * @export
 * @interface SingleDocumentRiskSignal
 */
// Edited by Plaid, line 9. any to unknown
export interface SingleDocumentRiskSignal {
    [key: string]: object | unknown;

    /**
     * 
     * @type {RiskSignalDocumentReference}
     * @memberof SingleDocumentRiskSignal
     */
    document_reference: RiskSignalDocumentReference;
    /**
     * Array of attributes that indicate whether or not there is fraud risk with a document
     * @type {Array<DocumentRiskSignal>}
     * @memberof SingleDocumentRiskSignal
     */
    risk_signals: Array<DocumentRiskSignal>;
    /**
     * 
     * @type {DocumentRiskSummary}
     * @memberof SingleDocumentRiskSignal
     */
    risk_summary: DocumentRiskSummary;
}
/**
 * A type indicating whether a dashboard user, an API-based user, or Plaid last touched this object.
 * @export
 * @enum {string}
 */
export enum Source {
    Dashboard = 'dashboard',
    Link = 'link',
    Api = 'api',
    System = 'system'
}

/**
 * The schema below describes the various `types` and corresponding `subtypes` that Plaid recognizes and reports for financial institution accounts.
 * @export
 * @interface StandaloneAccountType
 */
// Edited by Plaid, line 9. any to unknown
export interface StandaloneAccountType {
    [key: string]: object | unknown;

    /**
     * An account type holding cash, in which funds are deposited. Supported products for `depository` accounts are: Auth (`checking` and `savings` types only), Balance, Transactions, Identity, Payment Initiation, and Assets.
     * @type {string}
     * @memberof StandaloneAccountType
     */
    depository: string;
    /**
     * A credit card type account. Supported products for `credit` accounts are: Balance, Transactions, Identity, and Liabilities.
     * @type {string}
     * @memberof StandaloneAccountType
     */
    credit: string;
    /**
     * A loan type account. Supported products for `loan` accounts are: Balance, Liabilities, and Transactions.
     * @type {string}
     * @memberof StandaloneAccountType
     */
    loan: string;
    /**
     * An investment account. Supported products for `investment` accounts are: Balance and Investments. In API versions 2018-05-22 and earlier, this type is called `brokerage`.
     * @type {string}
     * @memberof StandaloneAccountType
     */
    investment: string;
    /**
     * Other or unknown account type. Supported products for `other` accounts are: Balance, Transactions, Identity, and Assets.
     * @type {string}
     * @memberof StandaloneAccountType
     */
    other: string;
}
/**
 * The following currency codes are supported by Plaid.
 * @export
 * @interface StandaloneCurrencyCodeList
 */
// Edited by Plaid, line 9. any to unknown
export interface StandaloneCurrencyCodeList {
    [key: string]: object | unknown;

    /**
     * Plaid supports all ISO 4217 currency codes.
     * @type {string}
     * @memberof StandaloneCurrencyCodeList
     */
    iso_currency_code: string;
    /**
     * List of unofficial currency codes
     * @type {string}
     * @memberof StandaloneCurrencyCodeList
     */
    unofficial_currency_code: string;
}
/**
 * Valid values for investment transaction types and subtypes. Note that transactions representing inflow of cash will appear as negative amounts, outflow of cash will appear as positive amounts.
 * @export
 * @interface StandaloneInvestmentTransactionType
 */
// Edited by Plaid, line 9. any to unknown
export interface StandaloneInvestmentTransactionType {
    [key: string]: object | unknown;

    /**
     * Buying an investment
     * @type {string}
     * @memberof StandaloneInvestmentTransactionType
     */
    buy: string;
    /**
     * Selling an investment
     * @type {string}
     * @memberof StandaloneInvestmentTransactionType
     */
    sell: string;
    /**
     * A cancellation of a pending transaction
     * @type {string}
     * @memberof StandaloneInvestmentTransactionType
     */
    cancel: string;
    /**
     * Activity that modifies a cash position
     * @type {string}
     * @memberof StandaloneInvestmentTransactionType
     */
    cash: string;
    /**
     * Fees on the account, e.g. commission, bookkeeping, options-related.
     * @type {string}
     * @memberof StandaloneInvestmentTransactionType
     */
    fee: string;
    /**
     * Activity that modifies a position, but not through buy/sell activity e.g. options exercise, portfolio transfer
     * @type {string}
     * @memberof StandaloneInvestmentTransactionType
     */
    transfer: string;
}
/**
 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
 * @export
 * @interface Status
 */
// Edited by Plaid, line 9. any to unknown
export interface Status {
    [key: string]: object | unknown;

    /**
     * Satus Code.
     * @type {string}
     * @memberof Status
     */
    StatusCode: string | null;
    /**
     * Status Description.
     * @type {string}
     * @memberof Status
     */
    StatusDescription: string | null;
}
/**
 * A collection of STATUS containers.
 * @export
 * @interface Statuses
 */
// Edited by Plaid, line 9. any to unknown
export interface Statuses {
    [key: string]: object | unknown;

    /**
     * 
     * @type {Status}
     * @memberof Statuses
     */
    STATUS: Status;
}
/**
 * An instruction specifying what steps the new Identity Verification attempt should require the user to complete:   `reset` - Restart the user at the beginning of the session, regardless of whether they successfully completed part of their previous session.  `incomplete` - Start the new session at the step that the user failed in the previous session, skipping steps that have already been successfully completed.  `infer` - If the most recent Identity Verification attempt associated with the given `client_user_id` has a status of `failed` or `expired`, retry using the `incomplete` strategy. Otherwise, use the `reset` strategy.  `custom` - Start the new session with a custom configuration, specified by the value of the `steps` field  Note:  The `incomplete` strategy cannot be applied if the session\'s failing step is `screening` or `risk_check`.  The `infer` strategy cannot be applied if the session\'s status is still `active`
 * @export
 * @enum {string}
 */
export enum Strategy {
    Reset = 'reset',
    Incomplete = 'incomplete',
    Infer = 'infer',
    Custom = 'custom'
}

/**
 * Contains details about a student loan account
 * @export
 * @interface StudentLoan
 */
// Edited by Plaid, line 9. any to unknown
export interface StudentLoan {
    [key: string]: object | unknown;

    /**
     * The ID of the account that this liability belongs to.
     * @type {string}
     * @memberof StudentLoan
     */
    account_id: string | null;
    /**
     * The account number of the loan. For some institutions, this may be a masked version of the number (e.g., the last 4 digits instead of the entire number).
     * @type {string}
     * @memberof StudentLoan
     */
    account_number: string | null;
    /**
     * The dates on which loaned funds were disbursed or will be disbursed. These are often in the past. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
     * @type {Array<string>}
     * @memberof StudentLoan
     */
    disbursement_dates: Array<string> | null;
    /**
     * The date when the student loan is expected to be paid off. Availability for this field is limited. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
     * @type {string}
     * @memberof StudentLoan
     */
    expected_payoff_date: string | null;
    /**
     * The guarantor of the student loan.
     * @type {string}
     * @memberof StudentLoan
     */
    guarantor: string | null;
    /**
     * The interest rate on the loan as a percentage.
     * @type {number}
     * @memberof StudentLoan
     */
    interest_rate_percentage: number;
    /**
     * `true` if a payment is currently overdue. Availability for this field is limited.
     * @type {boolean}
     * @memberof StudentLoan
     */
    is_overdue: boolean | null;
    /**
     * The amount of the last payment.
     * @type {number}
     * @memberof StudentLoan
     */
    last_payment_amount: number | null;
    /**
     * The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
     * @type {string}
     * @memberof StudentLoan
     */
    last_payment_date: string | null;
    /**
     * The date of the last statement. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
     * @type {string}
     * @memberof StudentLoan
     */
    last_statement_issue_date: string | null;
    /**
     * The type of loan, e.g., \"Consolidation Loans\".
     * @type {string}
     * @memberof StudentLoan
     */
    loan_name: string | null;
    /**
     * 
     * @type {StudentLoanStatus}
     * @memberof StudentLoan
     */
    loan_status: StudentLoanStatus;
    /**
     * The minimum payment due for the next billing cycle. There are some exceptions: Some institutions require a minimum payment across all loans associated with an account number. Our API presents that same minimum payment amount on each loan. The institutions that do this are: Great Lakes ( `ins_116861`), Firstmark (`ins_116295`), Commonbond Firstmark Services (`ins_116950`), Nelnet (`ins_116528`), EdFinancial Services (`ins_116304`), Granite State (`ins_116308`), and Oklahoma Student Loan Authority (`ins_116945`). Firstmark (`ins_116295` ) and Navient (`ins_116248`) will display as $0 if there is an autopay program in effect.
     * @type {number}
     * @memberof StudentLoan
     */
    minimum_payment_amount: number | null;
    /**
     * The due date for the next payment. The due date is `null` if a payment is not expected. A payment is not expected if `loan_status.type` is `deferment`, `in_school`, `consolidated`, `paid in full`, or `transferred`. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
     * @type {string}
     * @memberof StudentLoan
     */
    next_payment_due_date: string | null;
    /**
     * The date on which the loan was initially lent. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). 
     * @type {string}
     * @memberof StudentLoan
     */
    origination_date: string | null;
    /**
     * The original principal balance of the loan.
     * @type {number}
     * @memberof StudentLoan
     */
    origination_principal_amount: number | null;
    /**
     * The total dollar amount of the accrued interest balance. For Sallie Mae ( `ins_116944`), this amount is included in the current balance of the loan, so this field will return as `null`.
     * @type {number}
     * @memberof StudentLoan
     */
    outstanding_interest_amount: number | null;
    /**
     * The relevant account number that should be used to reference this loan for payments. In the majority of cases, `payment_reference_number` will match `account_number,` but in some institutions, such as Great Lakes (`ins_116861`), it will be different.
     * @type {string}
     * @memberof StudentLoan
     */
    payment_reference_number: string | null;
    /**
     * 
     * @type {PSLFStatus}
     * @memberof StudentLoan
     */
    pslf_status: PSLFStatus;
    /**
     * 
     * @type {StudentRepaymentPlan}
     * @memberof StudentLoan
     */
    repayment_plan: StudentRepaymentPlan;
    /**
     * The sequence number of the student loan. Heartland ECSI (`ins_116948`) does not make this field available.
     * @type {string}
     * @memberof StudentLoan
     */
    sequence_number: string | null;
    /**
     * 
     * @type {ServicerAddressData}
     * @memberof StudentLoan
     */
    servicer_address: ServicerAddressData;
    /**
     * The year to date (YTD) interest paid. Availability for this field is limited.
     * @type {number}
     * @memberof StudentLoan
     */
    ytd_interest_paid: number | null;
    /**
     * The year to date (YTD) principal paid. Availability for this field is limited.
     * @type {number}
     * @memberof StudentLoan
     */
    ytd_principal_paid: number | null;
}
/**
 * Student loan repayment information used to configure Sandbox test data for the Liabilities product
 * @export
 * @interface StudentLoanRepaymentModel
 */
// Edited by Plaid, line 9. any to unknown
export interface StudentLoanRepaymentModel {
    [key: string]: object | unknown;

    /**
     * The only currently supported value for this field is `standard`.
     * @type {string}
     * @memberof StudentLoanRepaymentModel
     */
    type: string;
    /**
     * Configures the number of months before repayment starts.
     * @type {number}
     * @memberof StudentLoanRepaymentModel
     */
    non_repayment_months: number;
    /**
     * Configures the number of months of repayments before the loan is paid off.
     * @type {number}
     * @memberof StudentLoanRepaymentModel
     */
    repayment_months: number;
}
/**
 * An object representing the status of the student loan
 * @export
 * @interface StudentLoanStatus
 */
// Edited by Plaid, line 9. any to unknown
export interface StudentLoanStatus {
    [key: string]: object | unknown;

    /**
     * The date until which the loan will be in its current status. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). 
     * @type {string}
     * @memberof StudentLoanStatus
     */
    end_date: string | null;
    /**
     * The status type of the student loan
     * @type {string}
     * @memberof StudentLoanStatus
     */
    type: StudentLoanStatusTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum StudentLoanStatusTypeEnum {
    Cancelled = 'cancelled',
    ChargedOff = 'charged off',
    Claim = 'claim',
    Consolidated = 'consolidated',
    Deferment = 'deferment',
    Delinquent = 'delinquent',
    Discharged = 'discharged',
    Extension = 'extension',
    Forbearance = 'forbearance',
    InGrace = 'in grace',
    InMilitary = 'in military',
    InSchool = 'in school',
    NotFullyDisbursed = 'not fully disbursed',
    Other = 'other',
    PaidInFull = 'paid in full',
    Refunded = 'refunded',
    Repayment = 'repayment',
    Transferred = 'transferred'
}

/**
 * An object representing the repayment plan for the student loan
 * @export
 * @interface StudentRepaymentPlan
 */
// Edited by Plaid, line 9. any to unknown
export interface StudentRepaymentPlan {
    [key: string]: object | unknown;

    /**
     * The description of the repayment plan as provided by the servicer.
     * @type {string}
     * @memberof StudentRepaymentPlan
     */
    description: string | null;
    /**
     * The type of the repayment plan.
     * @type {string}
     * @memberof StudentRepaymentPlan
     */
    type: StudentRepaymentPlanTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum StudentRepaymentPlanTypeEnum {
    ExtendedGraduated = 'extended graduated',
    ExtendedStandard = 'extended standard',
    Graduated = 'graduated',
    IncomeContingentRepayment = 'income-contingent repayment',
    IncomeBasedRepayment = 'income-based repayment',
    InterestOnly = 'interest-only',
    Other = 'other',
    PayAsYouEarn = 'pay as you earn',
    RevisedPayAsYouEarn = 'revised pay as you earn',
    Standard = 'standard',
    Null = 'null'
}

/**
 * Fired when an Item\'s transactions change. This can be due to any event resulting in new changes, such as an initial 30-day transactions fetch upon the initialization of an Item with transactions, the backfill of historical transactions that occurs shortly after, or when changes are populated from a regularly-scheduled transactions update job. It is recommended to listen for the `SYNC_UPDATES_AVAILABLE` webhook when using the `/transactions/sync` endpoint. Note that when using `/transactions/sync` the older webhooks `INITIAL_UPDATE`, `HISTORICAL_UPDATE`, `DEFAULT_UPDATE`, and `TRANSACTIONS_REMOVED`, which are intended for use with `/transactions/get`, will also continue to be sent in order to maintain backwards compatibility. It is not necessary to listen for and respond to those webhooks when using `/transactions/sync`.  After receipt of this webhook, the new changes can be fetched for the Item from `/transactions/sync`.  Note that to receive this webhook for an Item, `/transactions/sync` must have been called at least once on that Item. This means that, unlike the `INITIAL_UPDATE` and `HISTORICAL_UPDATE` webhooks, it will not fire immediately upon Item creation. If `/transactions/sync` is called on an Item that was *not* initialized with Transactions, the webhook will fire twice: once the first 30 days of transactions data has been fetched, and a second time when all available historical transactions data has been fetched.  This webhook will typically not fire in the Sandbox environment, due to the lack of dynamic transactions data. To test this webhook in Sandbox, call `/sandbox/item/fire_webhook`.
 * @export
 * @interface SyncUpdatesAvailableWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface SyncUpdatesAvailableWebhook {
    [key: string]: object | unknown;

    /**
     * `TRANSACTIONS`
     * @type {string}
     * @memberof SyncUpdatesAvailableWebhook
     */
    webhook_type: string;
    /**
     * `SYNC_UPDATES_AVAILABLE`
     * @type {string}
     * @memberof SyncUpdatesAvailableWebhook
     */
    webhook_code: string;
    /**
     * The `item_id` of the Item associated with this webhook, warning, or error
     * @type {string}
     * @memberof SyncUpdatesAvailableWebhook
     */
    item_id: string;
    /**
     * Indicates if initial pull information is available.
     * @type {boolean}
     * @memberof SyncUpdatesAvailableWebhook
     */
    initial_update_complete: boolean;
    /**
     * Indicates if historical pull information is available.
     * @type {boolean}
     * @memberof SyncUpdatesAvailableWebhook
     */
    historical_update_complete: boolean;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof SyncUpdatesAvailableWebhook
     */
    environment: WebhookEnvironmentValues;
}
/**
 * Data about an official document used to report the user\'s income to the IRS.
 * @export
 * @interface Taxform
 */
// Edited by Plaid, line 9. any to unknown
export interface Taxform {
    [key: string]: object | unknown;

    /**
     * An identifier of the document referenced by the document metadata.
     * @type {string}
     * @memberof Taxform
     */
    doc_id?: string;
    /**
     * The type of tax document. Currently, the only supported value is `w2`.
     * @type {string}
     * @memberof Taxform
     */
    document_type: string;
    /**
     * 
     * @type {W2}
     * @memberof Taxform
     */
    w2?: W2;
}
/**
 * Taxpayer ID of the individual receiving the paystub.
 * @export
 * @interface TaxpayerID
 */
// Edited by Plaid, line 9. any to unknown
export interface TaxpayerID {
    [key: string]: object | unknown;

    /**
     * Type of ID, e.g. \'SSN\'
     * @type {string}
     * @memberof TaxpayerID
     */
    id_type?: string | null;
    /**
     * ID mask; i.e. last 4 digits of the taxpayer ID
     * @type {string}
     * @memberof TaxpayerID
     */
    id_mask?: string | null;
    /**
     * Last 4 digits of unique number of ID.
     * @type {string}
     * @memberof TaxpayerID
     * @deprecated
     */
    last_4_digits?: string | null;
}
/**
 * Information about the Taxpayer identification values assigned to the individual or legal entity.Information about the Taxpayer identification values assigned to the individual or legal entity.
 * @export
 * @interface TaxpayerIdentifier
 */
// Edited by Plaid, line 9. any to unknown
export interface TaxpayerIdentifier {
    [key: string]: object | unknown;

    /**
     * 
     * @type {TaxpayerIdentifierType}
     * @memberof TaxpayerIdentifier
     */
    TaxpayerIdentifierType: TaxpayerIdentifierType | null;
    /**
     * The value of the taxpayer identifier as assigned by the IRS to the individual or legal entity.
     * @type {string}
     * @memberof TaxpayerIdentifier
     */
    TaxpayerIdentifierValue: string | null;
}
/**
 * A value from a MISMO prescribed list that classifies identification numbers used by the Internal Revenue Service (IRS) in the administration of tax laws. A Social Security number (SSN) is issued by the SSA; all other taxpayer identification numbers are issued by the IRS.
 * @export
 * @enum {string}
 */
export enum TaxpayerIdentifierType {
    IndividualTaxpayerIdentificationNumber = 'IndividualTaxpayerIdentificationNumber',
    SocialSecurityNumber = 'SocialSecurityNumber'
}

/**
 * The collection of TAXPAYER_IDENTIFICATION elements
 * @export
 * @interface TaxpayerIdentifiers
 */
// Edited by Plaid, line 9. any to unknown
export interface TaxpayerIdentifiers {
    [key: string]: object | unknown;

    /**
     * 
     * @type {TaxpayerIdentifier}
     * @memberof TaxpayerIdentifiers
     */
    TAXPAYER_IDENTIFIER: TaxpayerIdentifier;
}
/**
 * An object representing both the current pay period and year to date amount for a category.
 * @export
 * @interface Total
 */
// Edited by Plaid, line 9. any to unknown
export interface Total {
    [key: string]: object | unknown;

    /**
     * 
     * @type {TotalCanonicalDescription}
     * @memberof Total
     */
    canonical_description?: TotalCanonicalDescription | null;
    /**
     * Text of the line item as printed on the paystub.
     * @type {string}
     * @memberof Total
     */
    description?: string | null;
    /**
     * 
     * @type {Pay}
     * @memberof Total
     * @deprecated
     */
    current_pay?: Pay;
    /**
     * 
     * @type {Pay}
     * @memberof Total
     * @deprecated
     */
    ytd_pay?: Pay;
}
/**
 * Commonly used term to describe the line item.
 * @export
 * @enum {string}
 */
export enum TotalCanonicalDescription {
    Bonus = 'BONUS',
    Commission = 'COMMISSION',
    Overtime = 'OVERTIME',
    PaidTimeOff = 'PAID TIME OFF',
    RegularPay = 'REGULAR PAY',
    Vacation = 'VACATION',
    EmployeeMedicare = 'EMPLOYEE MEDICARE',
    Fica = 'FICA',
    SocialSecurityEmployeeTax = 'SOCIAL SECURITY EMPLOYEE TAX',
    Medical = 'MEDICAL',
    Vision = 'VISION',
    Dental = 'DENTAL',
    NetPay = 'NET PAY',
    Taxes = 'TAXES',
    NotFound = 'NOT_FOUND',
    Other = 'OTHER',
    Null = 'null'
}

/**
 * A representation of a transaction
 * @export
 * @interface Transaction
 */
// Edited by Plaid, line 9. any to unknown
export interface Transaction {
    /**
     * The ID of the account in which this transaction occurred.
     * @type {string}
     * @memberof Transaction
     */
    account_id: string;
    /**
     * The settled value of the transaction, denominated in the transactions\'s currency, as stated in `iso_currency_code` or `unofficial_currency_code`. Positive values when money moves out of the account; negative values when money moves in. For example, debit card purchases are positive; credit card payments, direct deposits, and refunds are negative.
     * @type {number}
     * @memberof Transaction
     */
    amount: number;
    /**
     * The ISO-4217 currency code of the transaction. Always `null` if `unofficial_currency_code` is non-null.
     * @type {string}
     * @memberof Transaction
     */
    iso_currency_code: string | null;
    /**
     * The unofficial currency code associated with the transaction. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
     * @type {string}
     * @memberof Transaction
     */
    unofficial_currency_code: string | null;
    /**
     * A hierarchical array of the categories to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).  All Transactions implementations are recommended to use the new `personal_finance_category` instead of `category`. `personal_finance_category` provides more meaningful categorization and greater accuracy.  If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
     * @type {Array<string>}
     * @memberof Transaction
     */
    category: Array<string> | null;
    /**
     * The ID of the category to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).  All Transactions implementations are recommended to use the new `personal_finance_category` instead of `category_id`, as it provides greater accuracy and more meaningful categorization.  If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
     * @type {string}
     * @memberof Transaction
     */
    category_id: string | null;
    /**
     * The check number of the transaction. This field is only populated for check transactions.
     * @type {string}
     * @memberof Transaction
     */
    check_number?: string | null;
    /**
     * For pending transactions, the date that the transaction occurred; for posted transactions, the date that the transaction posted. Both dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DD` ). To receive information about the date that a posted transaction was initiated, see the `authorized_date` field.
     * @type {string}
     * @memberof Transaction
     */
    date: string;
    /**
     * 
     * @type {Location}
     * @memberof Transaction
     */
    location: Location;
    /**
     * The merchant name or transaction description.  If the `transactions` object was returned by a Transactions endpoint such as `/transactions/get`, this field will always appear. If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
     * @type {string}
     * @memberof Transaction
     */
    name: string;
    /**
     * The merchant name, as enriched by Plaid from the `name` field. This is typically a more human-readable version of the merchant counterparty in the transaction. For some bank transactions (such as checks or account transfers) where there is no meaningful merchant name, this value will be `null`.
     * @type {string}
     * @memberof Transaction
     */
    merchant_name?: string | null;
    /**
     * The string returned by the financial institution to describe the transaction. For transactions returned by `/transactions/get`, this field is in beta and will be omitted unless the client is both enrolled in the closed beta program and has set `options.include_original_description` to `true`.
     * @type {string}
     * @memberof Transaction
     */
    original_description?: string | null;
    /**
     * 
     * @type {PaymentMeta}
     * @memberof Transaction
     */
    payment_meta: PaymentMeta;
    /**
     * When `true`, identifies the transaction as pending or unsettled. Pending transaction details (name, type, amount, category ID) may change before they are settled.
     * @type {boolean}
     * @memberof Transaction
     */
    pending: boolean;
    /**
     * The ID of a posted transaction\'s associated pending transaction, where applicable.
     * @type {string}
     * @memberof Transaction
     */
    pending_transaction_id: string | null;
    /**
     * The name of the account owner. This field is not typically populated and only relevant when dealing with sub-accounts.
     * @type {string}
     * @memberof Transaction
     */
    account_owner: string | null;
    /**
     * The unique ID of the transaction. Like all Plaid identifiers, the `transaction_id` is case sensitive.
     * @type {string}
     * @memberof Transaction
     */
    transaction_id: string;
    /**
     * Please use the `payment_channel` field, `transaction_type` will be deprecated in the future.  `digital:` transactions that took place online.  `place:` transactions that were made at a physical location.  `special:` transactions that relate to banks, e.g. fees or deposits.  `unresolved:` transactions that do not fit into the other three types. 
     * @type {string}
     * @memberof Transaction
     * @deprecated
     */
    transaction_type?: TransactionTransactionTypeEnum;
    /**
     * The logo associated with the merchant, if available. Formatted as a 100x100 pixels PNG file path.
     * @type {string}
     * @memberof Transaction
     */
    logo_url?: string | null;
    /**
     * The website associated with the merchant, if available.
     * @type {string}
     * @memberof Transaction
     */
    website?: string | null;
    /**
     * The date that the transaction was authorized. For posted transactions, the `date` field will indicate the posted date, but `authorized_date` will indicate the day the transaction was authorized by the financial institution. If presenting transactions to the user in a UI, the `authorized_date`, when available, is generally preferable to use over the `date` field for posted transactions, as it will generally represent the date the user actually made the transaction. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DD` ).
     * @type {string}
     * @memberof Transaction
     */
    authorized_date: string | null;
    /**
     * Date and time when a transaction was authorized in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DDTHH:mm:ssZ` ). For posted transactions, the `datetime` field will indicate the posted date, but `authorized_datetime` will indicate the day the transaction was authorized by the financial institution. If presenting transactions to the user in a UI, the `authorized_datetime`, when available, is generally preferable to use over the `datetime` field for posted transactions, as it will generally represent the date the user actually made the transaction.  This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00). This field is only populated in API version 2019-05-29 and later.
     * @type {string}
     * @memberof Transaction
     */
    authorized_datetime: string | null;
    /**
     * Date and time when a transaction was posted in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DDTHH:mm:ssZ` ). For the date that the transaction was initiated, rather than posted, see the `authorized_datetime` field.  This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00). This field is only populated in API version 2019-05-29 and later.
     * @type {string}
     * @memberof Transaction
     */
    datetime: string | null;
    /**
     * The channel used to make a payment. `online:` transactions that took place online.  `in store:` transactions that were made at a physical location.  `other:` transactions that relate to banks, e.g. fees or deposits.  This field replaces the `transaction_type` field. 
     * @type {string}
     * @memberof Transaction
     */
    payment_channel: TransactionPaymentChannelEnum;
    /**
     * 
     * @type {PersonalFinanceCategory}
     * @memberof Transaction
     */
    personal_finance_category?: PersonalFinanceCategory | null;
    /**
     * 
     * @type {TransactionCode}
     * @memberof Transaction
     */
    transaction_code: TransactionCode | null;
    /**
     * A link to the icon associated with the primary personal finance category. The logo will always be 100x100 pixels.
     * @type {string}
     * @memberof Transaction
     */
    personal_finance_category_icon_url?: string;
    /**
     * The counterparties present in the transaction. Counterparties, such as the financial institutions, are extracted by Plaid from the raw description.
     * @type {Array<TransactionCounterparty>}
     * @memberof Transaction
     */
    counterparties?: Array<TransactionCounterparty>;
}

/**
    * @export
    * @enum {string}
    */
export enum TransactionTransactionTypeEnum {
    Digital = 'digital',
    Place = 'place',
    Special = 'special',
    Unresolved = 'unresolved'
}
/**
    * @export
    * @enum {string}
    */
export enum TransactionPaymentChannelEnum {
    Online = 'online',
    InStore = 'in store',
    Other = 'other'
}

/**
 * 
 * @export
 * @interface TransactionAllOf
 */
// Edited by Plaid, line 9. any to unknown
export interface TransactionAllOf {
    /**
     * The date that the transaction was authorized. For posted transactions, the `date` field will indicate the posted date, but `authorized_date` will indicate the day the transaction was authorized by the financial institution. If presenting transactions to the user in a UI, the `authorized_date`, when available, is generally preferable to use over the `date` field for posted transactions, as it will generally represent the date the user actually made the transaction. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DD` ).
     * @type {string}
     * @memberof TransactionAllOf
     */
    authorized_date: string | null;
    /**
     * Date and time when a transaction was authorized in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DDTHH:mm:ssZ` ). For posted transactions, the `datetime` field will indicate the posted date, but `authorized_datetime` will indicate the day the transaction was authorized by the financial institution. If presenting transactions to the user in a UI, the `authorized_datetime`, when available, is generally preferable to use over the `datetime` field for posted transactions, as it will generally represent the date the user actually made the transaction.  This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00). This field is only populated in API version 2019-05-29 and later.
     * @type {string}
     * @memberof TransactionAllOf
     */
    authorized_datetime: string | null;
    /**
     * Date and time when a transaction was posted in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DDTHH:mm:ssZ` ). For the date that the transaction was initiated, rather than posted, see the `authorized_datetime` field.  This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00). This field is only populated in API version 2019-05-29 and later.
     * @type {string}
     * @memberof TransactionAllOf
     */
    datetime: string | null;
    /**
     * The channel used to make a payment. `online:` transactions that took place online.  `in store:` transactions that were made at a physical location.  `other:` transactions that relate to banks, e.g. fees or deposits.  This field replaces the `transaction_type` field. 
     * @type {string}
     * @memberof TransactionAllOf
     */
    payment_channel: TransactionAllOfPaymentChannelEnum;
    /**
     * 
     * @type {PersonalFinanceCategory}
     * @memberof TransactionAllOf
     */
    personal_finance_category?: PersonalFinanceCategory | null;
    /**
     * 
     * @type {TransactionCode}
     * @memberof TransactionAllOf
     */
    transaction_code: TransactionCode | null;
    /**
     * A link to the icon associated with the primary personal finance category. The logo will always be 100x100 pixels.
     * @type {string}
     * @memberof TransactionAllOf
     */
    personal_finance_category_icon_url?: string;
    /**
     * The counterparties present in the transaction. Counterparties, such as the financial institutions, are extracted by Plaid from the raw description.
     * @type {Array<TransactionCounterparty>}
     * @memberof TransactionAllOf
     */
    counterparties?: Array<TransactionCounterparty>;
}

/**
    * @export
    * @enum {string}
    */
export enum TransactionAllOfPaymentChannelEnum {
    Online = 'online',
    InStore = 'in store',
    Other = 'other'
}

/**
 * A representation of a transaction
 * @export
 * @interface TransactionBase
 */
// Edited by Plaid, line 9. any to unknown
export interface TransactionBase {
    [key: string]: object | unknown;

    /**
     * The ID of the account in which this transaction occurred.
     * @type {string}
     * @memberof TransactionBase
     */
    account_id: string;
    /**
     * The settled value of the transaction, denominated in the transactions\'s currency, as stated in `iso_currency_code` or `unofficial_currency_code`. Positive values when money moves out of the account; negative values when money moves in. For example, debit card purchases are positive; credit card payments, direct deposits, and refunds are negative.
     * @type {number}
     * @memberof TransactionBase
     */
    amount: number;
    /**
     * The ISO-4217 currency code of the transaction. Always `null` if `unofficial_currency_code` is non-null.
     * @type {string}
     * @memberof TransactionBase
     */
    iso_currency_code: string | null;
    /**
     * The unofficial currency code associated with the transaction. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
     * @type {string}
     * @memberof TransactionBase
     */
    unofficial_currency_code: string | null;
    /**
     * A hierarchical array of the categories to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).  All Transactions implementations are recommended to use the new `personal_finance_category` instead of `category`. `personal_finance_category` provides more meaningful categorization and greater accuracy.  If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
     * @type {Array<string>}
     * @memberof TransactionBase
     */
    category?: Array<string> | null;
    /**
     * The ID of the category to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).  All Transactions implementations are recommended to use the new `personal_finance_category` instead of `category_id`, as it provides greater accuracy and more meaningful categorization.  If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
     * @type {string}
     * @memberof TransactionBase
     */
    category_id?: string | null;
    /**
     * The check number of the transaction. This field is only populated for check transactions.
     * @type {string}
     * @memberof TransactionBase
     */
    check_number?: string | null;
    /**
     * For pending transactions, the date that the transaction occurred; for posted transactions, the date that the transaction posted. Both dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DD` ). To receive information about the date that a posted transaction was initiated, see the `authorized_date` field.
     * @type {string}
     * @memberof TransactionBase
     */
    date: string;
    /**
     * 
     * @type {Location}
     * @memberof TransactionBase
     */
    location?: Location;
    /**
     * The merchant name or transaction description.  If the `transactions` object was returned by a Transactions endpoint such as `/transactions/get`, this field will always appear. If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
     * @type {string}
     * @memberof TransactionBase
     */
    name?: string;
    /**
     * The merchant name, as enriched by Plaid from the `name` field. This is typically a more human-readable version of the merchant counterparty in the transaction. For some bank transactions (such as checks or account transfers) where there is no meaningful merchant name, this value will be `null`.
     * @type {string}
     * @memberof TransactionBase
     */
    merchant_name?: string | null;
    /**
     * The string returned by the financial institution to describe the transaction. For transactions returned by `/transactions/get`, this field is in beta and will be omitted unless the client is both enrolled in the closed beta program and has set `options.include_original_description` to `true`.
     * @type {string}
     * @memberof TransactionBase
     */
    original_description?: string | null;
    /**
     * 
     * @type {PaymentMeta}
     * @memberof TransactionBase
     */
    payment_meta?: PaymentMeta;
    /**
     * When `true`, identifies the transaction as pending or unsettled. Pending transaction details (name, type, amount, category ID) may change before they are settled.
     * @type {boolean}
     * @memberof TransactionBase
     */
    pending: boolean;
    /**
     * The ID of a posted transaction\'s associated pending transaction, where applicable.
     * @type {string}
     * @memberof TransactionBase
     */
    pending_transaction_id?: string | null;
    /**
     * The name of the account owner. This field is not typically populated and only relevant when dealing with sub-accounts.
     * @type {string}
     * @memberof TransactionBase
     */
    account_owner?: string | null;
    /**
     * The unique ID of the transaction. Like all Plaid identifiers, the `transaction_id` is case sensitive.
     * @type {string}
     * @memberof TransactionBase
     */
    transaction_id: string;
    /**
     * Please use the `payment_channel` field, `transaction_type` will be deprecated in the future.  `digital:` transactions that took place online.  `place:` transactions that were made at a physical location.  `special:` transactions that relate to banks, e.g. fees or deposits.  `unresolved:` transactions that do not fit into the other three types. 
     * @type {string}
     * @memberof TransactionBase
     * @deprecated
     */
    transaction_type?: TransactionBaseTransactionTypeEnum;
    /**
     * The logo associated with the merchant, if available. Formatted as a 100x100 pixels PNG file path.
     * @type {string}
     * @memberof TransactionBase
     */
    logo_url?: string | null;
    /**
     * The website associated with the merchant, if available.
     * @type {string}
     * @memberof TransactionBase
     */
    website?: string | null;
}

/**
    * @export
    * @enum {string}
    */
export enum TransactionBaseTransactionTypeEnum {
    Digital = 'digital',
    Place = 'place',
    Special = 'special',
    Unresolved = 'unresolved'
}

/**
 * An identifier classifying the transaction type.  This field is only populated for European institutions. For institutions in the US and Canada, this field is set to `null`.  `adjustment:` Bank adjustment  `atm:` Cash deposit or withdrawal via an automated teller machine  `bank charge:` Charge or fee levied by the institution  `bill payment`: Payment of a bill  `cash:` Cash deposit or withdrawal  `cashback:` Cash withdrawal while making a debit card purchase  `cheque:` Document ordering the payment of money to another person or organization  `direct debit:` Automatic withdrawal of funds initiated by a third party at a regular interval  `interest:` Interest earned or incurred  `purchase:` Purchase made with a debit or credit card  `standing order:` Payment instructed by the account holder to a third party at a regular interval  `transfer:` Transfer of money between accounts
 * @export
 * @enum {string}
 */
export enum TransactionCode {
    Adjustment = 'adjustment',
    Atm = 'atm',
    BankCharge = 'bank charge',
    BillPayment = 'bill payment',
    Cash = 'cash',
    Cashback = 'cashback',
    Cheque = 'cheque',
    DirectDebit = 'direct debit',
    Interest = 'interest',
    Purchase = 'purchase',
    StandingOrder = 'standing order',
    Transfer = 'transfer',
    Null = 'null'
}

/**
 * The counterparty, such as the merchant or financial institution, is extracted by Plaid from the raw description.
 * @export
 * @interface TransactionCounterparty
 */
// Edited by Plaid, line 9. any to unknown
export interface TransactionCounterparty {
    [key: string]: object | unknown;

    /**
     * The name of the counterparty, such as the merchant or the financial institution, as extracted by Plaid from the raw description.
     * @type {string}
     * @memberof TransactionCounterparty
     */
    name: string;
    /**
     * 
     * @type {CounterpartyType}
     * @memberof TransactionCounterparty
     */
    type: CounterpartyType;
    /**
     * The website associated with the counterparty.
     * @type {string}
     * @memberof TransactionCounterparty
     */
    website: string | null;
    /**
     * The URL of a logo associated with the counterparty, if available. The logo is formatted as a 100x100 pixel PNG filepath.
     * @type {string}
     * @memberof TransactionCounterparty
     */
    logo_url: string | null;
}
/**
 * Information about the matched direct deposit transaction used to verify a user\'s payroll information.
 * @export
 * @interface TransactionData
 */
// Edited by Plaid, line 9. any to unknown
export interface TransactionData {
    [key: string]: object | unknown;

    /**
     * The description of the transaction.
     * @type {string}
     * @memberof TransactionData
     */
    description: string;
    /**
     * The amount of the transaction.
     * @type {number}
     * @memberof TransactionData
     */
    amount: number;
    /**
     * The date of the transaction, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (\"yyyy-mm-dd\").
     * @type {string}
     * @memberof TransactionData
     */
    date: string;
    /**
     * A unique identifier for the end user\'s account.
     * @type {string}
     * @memberof TransactionData
     */
    account_id: string;
    /**
     * A unique identifier for the transaction.
     * @type {string}
     * @memberof TransactionData
     */
    transaction_id: string;
}
/**
 * Data to populate as test transaction data. If not specified, random transactions will be generated instead.
 * @export
 * @interface TransactionOverride
 */
// Edited by Plaid, line 9. any to unknown
export interface TransactionOverride {
    [key: string]: object | unknown;

    /**
     * The date of the transaction, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format. Transactions in Sandbox will move from pending to posted once their transaction date has been reached. If a `date_transacted` is not provided by the institution, a transaction date may be available in the [`authorized_date`](https://plaid.com/docs/api/products/transactions/#transactions-get-response-transactions-authorized-date) field.
     * @type {string}
     * @memberof TransactionOverride
     */
    date_transacted: string;
    /**
     * The date the transaction posted, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format. Posted dates in the past or present will result in posted transactions; posted dates in the future will result in pending transactions.
     * @type {string}
     * @memberof TransactionOverride
     */
    date_posted: string;
    /**
     * The transaction amount. Can be negative.
     * @type {number}
     * @memberof TransactionOverride
     */
    amount: number;
    /**
     * The transaction description.
     * @type {string}
     * @memberof TransactionOverride
     */
    description: string;
    /**
     * The ISO-4217 format currency code for the transaction.
     * @type {string}
     * @memberof TransactionOverride
     */
    currency?: string;
}
/**
 * A grouping of related transactions
 * @export
 * @interface TransactionStream
 */
// Edited by Plaid, line 9. any to unknown
export interface TransactionStream {
    [key: string]: object | unknown;

    /**
     * The ID of the account to which the stream belongs
     * @type {string}
     * @memberof TransactionStream
     */
    account_id: string;
    /**
     * A unique id for the stream
     * @type {string}
     * @memberof TransactionStream
     */
    stream_id: string;
    /**
     * A hierarchical array of the categories to which this transaction belongs. See [Categories](https://plaid.com/docs/api/products/transactions/#categoriesget).  All implementations are encouraged to use the new `personal_finance_category` instead of `category`. `personal_finance_category` provides more meaningful categorization and greater accuracy.
     * @type {Array<string>}
     * @memberof TransactionStream
     */
    category: Array<string>;
    /**
     * The ID of the category to which this transaction belongs. See [Categories](https://plaid.com/docs/api/products/transactions/#categoriesget).  All implementations are encouraged to use the new `personal_finance_category` instead of `category`. `personal_finance_category` provides more meaningful categorization and greater accuracy.
     * @type {string}
     * @memberof TransactionStream
     */
    category_id: string;
    /**
     * A description of the transaction stream.
     * @type {string}
     * @memberof TransactionStream
     */
    description: string;
    /**
     * The merchant associated with the transaction stream.
     * @type {string}
     * @memberof TransactionStream
     */
    merchant_name: string | null;
    /**
     * The posted date of the earliest transaction in the stream.
     * @type {string}
     * @memberof TransactionStream
     */
    first_date: string;
    /**
     * The posted date of the latest transaction in the stream.
     * @type {string}
     * @memberof TransactionStream
     */
    last_date: string;
    /**
     * 
     * @type {RecurringTransactionFrequency}
     * @memberof TransactionStream
     */
    frequency: RecurringTransactionFrequency;
    /**
     * An array of Plaid transaction IDs belonging to the stream, sorted by posted date.
     * @type {Array<string>}
     * @memberof TransactionStream
     */
    transaction_ids: Array<string>;
    /**
     * 
     * @type {TransactionStreamAmount}
     * @memberof TransactionStream
     */
    average_amount: TransactionStreamAmount;
    /**
     * 
     * @type {TransactionStreamAmount}
     * @memberof TransactionStream
     */
    last_amount: TransactionStreamAmount;
    /**
     * Indicates whether the transaction stream is still live.
     * @type {boolean}
     * @memberof TransactionStream
     */
    is_active: boolean;
    /**
     * 
     * @type {TransactionStreamStatus}
     * @memberof TransactionStream
     */
    status: TransactionStreamStatus;
    /**
     * 
     * @type {PersonalFinanceCategory}
     * @memberof TransactionStream
     */
    personal_finance_category?: PersonalFinanceCategory | null;
}
/**
 * Object with data pertaining to an amount on the transaction stream.
 * @export
 * @interface TransactionStreamAmount
 */
// Edited by Plaid, line 9. any to unknown
export interface TransactionStreamAmount {
    [key: string]: object | unknown;

    /**
     * Represents the numerical value of an amount.
     * @type {number}
     * @memberof TransactionStreamAmount
     */
    amount?: number;
    /**
     * The ISO-4217 currency code of the amount. Always `null` if `unofficial_currency_code` is non-`null`.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
     * @type {string}
     * @memberof TransactionStreamAmount
     */
    iso_currency_code?: string | null;
    /**
     * The unofficial currency code of the amount. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
     * @type {string}
     * @memberof TransactionStreamAmount
     */
    unofficial_currency_code?: string | null;
}
/**
 * The current status of the transaction stream.  `MATURE`: A `MATURE` recurring stream should have at least 3 transactions and happen on a regular cadence (For Annual recurring stream, we will mark it `MATURE` after 2 instances).  `EARLY_DETECTION`: When a recurring transaction first appears in the transaction history and before it fulfills the requirement of a mature stream, the status will be `EARLY_DETECTION`.  `TOMBSTONED`: A stream that was previously in the `EARLY_DETECTION` status will move to the `TOMBSTONED` status when no further transactions were found at the next expected date.  `UNKNOWN`: A stream is assigned an `UNKNOWN` status when none of the other statuses are applicable.
 * @export
 * @enum {string}
 */
export enum TransactionStreamStatus {
    Unknown = 'UNKNOWN',
    Mature = 'MATURE',
    EarlyDetection = 'EARLY_DETECTION',
    Tombstoned = 'TOMBSTONED'
}

/**
 * A representation of a transactions category rule.
 * @export
 * @interface TransactionsCategoryRule
 */
// Edited by Plaid, line 9. any to unknown
export interface TransactionsCategoryRule {
    /**
     * A unique identifier of the rule created
     * @type {string}
     * @memberof TransactionsCategoryRule
     */
    id?: string;
    /**
     * A unique identifier of the Item the rule was created for.
     * @type {string}
     * @memberof TransactionsCategoryRule
     */
    item_id?: string;
    /**
     * Date and time when a rule was created in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DDTHH:mm:ssZ` ). 
     * @type {string}
     * @memberof TransactionsCategoryRule
     */
    created_at?: string;
    /**
     * Personal finance category unique identifier.  In the personal finance category taxonomy, this field is represented by the detailed category field. 
     * @type {string}
     * @memberof TransactionsCategoryRule
     */
    personal_finance_category?: string;
    /**
     * 
     * @type {TransactionsRuleDetails}
     * @memberof TransactionsCategoryRule
     */
    rule_details?: TransactionsRuleDetails;
}
/**
 * TransactionsEnhanceGetRequest defines the request schema for `/transactions/enhance`.
 * @export
 * @interface TransactionsEnhanceGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface TransactionsEnhanceGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransactionsEnhanceGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransactionsEnhanceGetRequest
     */
    secret?: string;
    /**
     * The type of account for the requested transactions (`depository` or `credit`).
     * @type {string}
     * @memberof TransactionsEnhanceGetRequest
     */
    account_type: string;
    /**
     * An array of raw transactions to be enhanced.
     * @type {Array<ClientProvidedRawTransaction>}
     * @memberof TransactionsEnhanceGetRequest
     */
    transactions: Array<ClientProvidedRawTransaction>;
}
/**
 * TransactionsEnhanceGetResponse defines the response schema for `/beta/transactions/v1/enhance`.
 * @export
 * @interface TransactionsEnhanceGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface TransactionsEnhanceGetResponse {
    [key: string]: object | unknown;

    /**
     * An array of enhanced transactions.
     * @type {Array<ClientProvidedEnhancedTransaction>}
     * @memberof TransactionsEnhanceGetResponse
     */
    enhanced_transactions: Array<ClientProvidedEnhancedTransaction>;
}
/**
 * TransactionsEnrichGetRequest defines the request schema for `/transactions/enrich`.
 * @export
 * @interface TransactionsEnrichGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface TransactionsEnrichGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransactionsEnrichGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransactionsEnrichGetRequest
     */
    secret?: string;
    /**
     * The account type for the requested transactions (either `depository` or `credit`).
     * @type {string}
     * @memberof TransactionsEnrichGetRequest
     */
    account_type: string;
    /**
     * An array of transaction objects to be enriched by Plaid. Maximum of 100 transactions per request.
     * @type {Array<ClientProvidedTransaction>}
     * @memberof TransactionsEnrichGetRequest
     */
    transactions: Array<ClientProvidedTransaction>;
    /**
     * 
     * @type {TransactionsEnrichRequestOptions}
     * @memberof TransactionsEnrichGetRequest
     */
    options?: TransactionsEnrichRequestOptions;
}
/**
 * TransactionsEnrichGetResponse defines the response schema for `/transactions/enrich`.
 * @export
 * @interface TransactionsEnrichGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface TransactionsEnrichGetResponse {
    [key: string]: object | unknown;

    /**
     * A list of enriched transactions.
     * @type {Array<ClientProvidedEnrichedTransaction>}
     * @memberof TransactionsEnrichGetResponse
     */
    enriched_transactions: Array<ClientProvidedEnrichedTransaction>;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof TransactionsEnrichGetResponse
     */
    request_id?: string;
}
/**
 * An optional object to be used with the request.
 * @export
 * @interface TransactionsEnrichRequestOptions
 */
// Edited by Plaid, line 9. any to unknown
export interface TransactionsEnrichRequestOptions {
    /**
     * Include `legacy_category` and `legacy_category_id` in the response (in addition to the default `personal_finance_category`).  Categories are based on Plaid\'s legacy taxonomy. For a full list of legacy categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).
     * @type {boolean}
     * @memberof TransactionsEnrichRequestOptions
     */
    include_legacy_category?: boolean;
}
/**
 * TransactionsGetRequest defines the request schema for `/transactions/get`
 * @export
 * @interface TransactionsGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface TransactionsGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransactionsGetRequest
     */
    client_id?: string;
    /**
     * 
     * @type {TransactionsGetRequestOptions}
     * @memberof TransactionsGetRequest
     */
    options?: TransactionsGetRequestOptions;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof TransactionsGetRequest
     */
    access_token: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransactionsGetRequest
     */
    secret?: string;
    /**
     * The earliest date for which data should be returned. Dates should be formatted as YYYY-MM-DD.
     * @type {string}
     * @memberof TransactionsGetRequest
     */
    start_date: string;
    /**
     * The latest date for which data should be returned. Dates should be formatted as YYYY-MM-DD.
     * @type {string}
     * @memberof TransactionsGetRequest
     */
    end_date: string;
}
/**
 * An optional object to be used with the request. If specified, `options` must not be `null`.
 * @export
 * @interface TransactionsGetRequestOptions
 */
// Edited by Plaid, line 9. any to unknown
export interface TransactionsGetRequestOptions {
    /**
     * A list of `account_ids` to retrieve for the Item  Note: An error will be returned if a provided `account_id` is not associated with the Item.
     * @type {Array<string>}
     * @memberof TransactionsGetRequestOptions
     */
    account_ids?: Array<string>;
    /**
     * The number of transactions to fetch.
     * @type {number}
     * @memberof TransactionsGetRequestOptions
     */
    count?: number;
    /**
     * The number of transactions to skip. The default value is 0.
     * @type {number}
     * @memberof TransactionsGetRequestOptions
     */
    offset?: number;
    /**
     * Include the raw unparsed transaction description from the financial institution. This field is disabled by default. If you need this information in addition to the parsed data provided, contact your Plaid Account Manager, or submit a [Support request](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/product-functionality) .
     * @type {boolean}
     * @memberof TransactionsGetRequestOptions
     */
    include_original_description?: boolean | null;
    /**
     * Please use [`include_personal_finance_category`](https://plaid.com/docs/api/products/transactions/#transactions-get-request-options-include-personal-finance-category) instead.
     * @type {boolean}
     * @memberof TransactionsGetRequestOptions
     * @deprecated
     */
    include_personal_finance_category_beta?: boolean;
    /**
     * Include the [`personal_finance_category`](https://plaid.com/docs/api/products/transactions/#transactions-get-response-transactions-personal-finance-category) object in the response.  All implementations are encouraged to set this field to `true` and use the `personal_finance_category` instead of `category`. Personal finance categories are the preferred categorization system for transactions, providing higher accuracy and more meaningful categories.  See the [`taxonomy csv file`](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) for a full list of personal finance categories.  Plaid is also introducing Category Rules - a new endpoint that will enable you to change the `personal_finance_category` for a transaction based on your users’ needs. When rules are set, the selected category will override the Plaid provided category. To learn more, send a note to transactions-feedback@plaid.com.
     * @type {boolean}
     * @memberof TransactionsGetRequestOptions
     */
    include_personal_finance_category?: boolean;
    /**
     * Include counterparties and extran merchant fields in the transaction. This field is disabled by default. If you need this information in addition to the parsed data provided, contact your Plaid Account Manager.
     * @type {boolean}
     * @memberof TransactionsGetRequestOptions
     */
    include_logo_and_counterparty_beta?: boolean;
}
/**
 * TransactionsGetResponse defines the response schema for `/transactions/get`
 * @export
 * @interface TransactionsGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface TransactionsGetResponse {
    [key: string]: object | unknown;

    /**
     * An array containing the `accounts` associated with the Item for which transactions are being returned. Each transaction can be mapped to its corresponding account via the `account_id` field.
     * @type {Array<AccountBase>}
     * @memberof TransactionsGetResponse
     */
    accounts: Array<AccountBase>;
    /**
     * An array containing transactions from the account. Transactions are returned in reverse chronological order, with the most recent at the beginning of the array. The maximum number of transactions returned is determined by the `count` parameter.
     * @type {Array<Transaction>}
     * @memberof TransactionsGetResponse
     */
    transactions: Array<Transaction>;
    /**
     * The total number of transactions available within the date range specified. If `total_transactions` is larger than the size of the `transactions` array, more transactions are available and can be fetched via manipulating the `offset` parameter.
     * @type {number}
     * @memberof TransactionsGetResponse
     */
    total_transactions: number;
    /**
     * 
     * @type {Item}
     * @memberof TransactionsGetResponse
     */
    item: Item;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof TransactionsGetResponse
     */
    request_id: string;
}
/**
 * TransactionsRecurringGetRequest defines the request schema for `/transactions/recurring/get`
 * @export
 * @interface TransactionsRecurringGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface TransactionsRecurringGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransactionsRecurringGetRequest
     */
    client_id?: string;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof TransactionsRecurringGetRequest
     */
    access_token: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransactionsRecurringGetRequest
     */
    secret?: string;
    /**
     * 
     * @type {TransactionsRecurringGetRequestOptions}
     * @memberof TransactionsRecurringGetRequest
     */
    options?: TransactionsRecurringGetRequestOptions;
    /**
     * A list of `account_ids` to retrieve for the Item  Note: An error will be returned if a provided `account_id` is not associated with the Item.
     * @type {Array<string>}
     * @memberof TransactionsRecurringGetRequest
     */
    account_ids: Array<string>;
}
/**
 * An optional object to be used with the request. If specified, `options` must not be `null`.
 * @export
 * @interface TransactionsRecurringGetRequestOptions
 */
// Edited by Plaid, line 9. any to unknown
export interface TransactionsRecurringGetRequestOptions {
    /**
     * Include the [`personal_finance_category`](https://plaid.com/docs/api/products/transactions/#transactions-get-response-transactions-personal-finance-category) object for each transaction stream in the response.  All implementations are encouraged to set this field to `true` and to use the `personal_finance_category` field instead of `category`. Personal finance categories are the preferred categorization system for transactions, providing higher accuracy and more meaningful categories.  See the [`taxonomy csv file`](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) for a full list of personal finance categories.
     * @type {boolean}
     * @memberof TransactionsRecurringGetRequestOptions
     */
    include_personal_finance_category?: boolean;
}
/**
 * TransactionsRecurringGetResponse defines the response schema for `/transactions/recurring/get`
 * @export
 * @interface TransactionsRecurringGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface TransactionsRecurringGetResponse {
    [key: string]: object | unknown;

    /**
     * An array of depository transaction streams.
     * @type {Array<TransactionStream>}
     * @memberof TransactionsRecurringGetResponse
     */
    inflow_streams: Array<TransactionStream>;
    /**
     * An array of expense transaction streams.
     * @type {Array<TransactionStream>}
     * @memberof TransactionsRecurringGetResponse
     */
    outflow_streams: Array<TransactionStream>;
    /**
     * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the last time transaction streams for the given account were updated on
     * @type {string}
     * @memberof TransactionsRecurringGetResponse
     */
    updated_datetime: string;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof TransactionsRecurringGetResponse
     */
    request_id: string;
}
/**
 * TransactionsRefreshRequest defines the request schema for `/transactions/refresh`
 * @export
 * @interface TransactionsRefreshRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface TransactionsRefreshRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransactionsRefreshRequest
     */
    client_id?: string;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof TransactionsRefreshRequest
     */
    access_token: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransactionsRefreshRequest
     */
    secret?: string;
}
/**
 * TransactionsRefreshResponse defines the response schema for `/transactions/refresh`
 * @export
 * @interface TransactionsRefreshResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface TransactionsRefreshResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof TransactionsRefreshResponse
     */
    request_id: string;
}
/**
 * Fired when transaction(s) for an Item are deleted. The deleted transaction IDs are included in the webhook payload. Plaid will typically check for deleted transaction data several times a day.  This webhook is intended for use with `/transactions/get`; if you are using the newer `/transactions/sync` endpoint, this webhook will still be fired to maintain backwards compatibility, but it is recommended to listen for and respond to the `SYNC_UPDATES_AVAILABLE` webhook instead.
 * @export
 * @interface TransactionsRemovedWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface TransactionsRemovedWebhook {
    [key: string]: object | unknown;

    /**
     * `TRANSACTIONS`
     * @type {string}
     * @memberof TransactionsRemovedWebhook
     */
    webhook_type: string;
    /**
     * `TRANSACTIONS_REMOVED`
     * @type {string}
     * @memberof TransactionsRemovedWebhook
     */
    webhook_code: string;
    /**
     * 
     * @type {PlaidError}
     * @memberof TransactionsRemovedWebhook
     */
    error?: PlaidError | null;
    /**
     * An array of `transaction_ids` corresponding to the removed transactions
     * @type {Array<string>}
     * @memberof TransactionsRemovedWebhook
     */
    removed_transactions: Array<string>;
    /**
     * The `item_id` of the Item associated with this webhook, warning, or error
     * @type {string}
     * @memberof TransactionsRemovedWebhook
     */
    item_id: string;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof TransactionsRemovedWebhook
     */
    environment: WebhookEnvironmentValues;
}
/**
 * A representation of transactions rule details.
 * @export
 * @interface TransactionsRuleDetails
 */
// Edited by Plaid, line 9. any to unknown
export interface TransactionsRuleDetails {
    /**
     * 
     * @type {TransactionsRuleField}
     * @memberof TransactionsRuleDetails
     */
    field: TransactionsRuleField;
    /**
     * 
     * @type {TransactionsRuleType}
     * @memberof TransactionsRuleDetails
     */
    type: TransactionsRuleType;
    /**
     * For TRANSACTION_ID field, provide transaction_id. For NAME field, provide a string pattern. 
     * @type {string}
     * @memberof TransactionsRuleDetails
     */
    query: string;
}
/**
 * Transaction field for which the rule is defined.
 * @export
 * @enum {string}
 */
export enum TransactionsRuleField {
    TransactionId = 'TRANSACTION_ID',
    Name = 'NAME'
}

/**
 * Transaction rule\'s match type. For TRANSACTION_ID field, EXACT_MATCH is available. Matches are case sensitive. 
 * @export
 * @enum {string}
 */
export enum TransactionsRuleType {
    ExactMatch = 'EXACT_MATCH',
    SubstringMatch = 'SUBSTRING_MATCH'
}

/**
 * TransactionsRulesCreateRequest defines the request schema for `beta/transactions/rules/v1/create`
 * @export
 * @interface TransactionsRulesCreateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface TransactionsRulesCreateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransactionsRulesCreateRequest
     */
    client_id?: string;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof TransactionsRulesCreateRequest
     */
    access_token: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransactionsRulesCreateRequest
     */
    secret?: string;
    /**
     * Personal finance detailed category.  All implementations are encouraged to use this field instead of `category`, as it provides more meaningful and accurate categorization.  See the [`taxonomy csv file`](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) for a full list of personal finance categories. 
     * @type {string}
     * @memberof TransactionsRulesCreateRequest
     */
    personal_finance_category: string;
    /**
     * 
     * @type {TransactionsRuleDetails}
     * @memberof TransactionsRulesCreateRequest
     */
    rule_details: TransactionsRuleDetails;
}
/**
 * TransactionsRulesCreateResponse defines the response schema for `/beta/transactions/rules/v1/create`
 * @export
 * @interface TransactionsRulesCreateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface TransactionsRulesCreateResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {TransactionsCategoryRule}
     * @memberof TransactionsRulesCreateResponse
     */
    rule: TransactionsCategoryRule;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof TransactionsRulesCreateResponse
     */
    request_id: string;
}
/**
 * TransactionsRulesListRequest defines the request schema for `/beta/transactions/rules/v1/list`
 * @export
 * @interface TransactionsRulesListRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface TransactionsRulesListRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransactionsRulesListRequest
     */
    client_id?: string;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof TransactionsRulesListRequest
     */
    access_token: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransactionsRulesListRequest
     */
    secret?: string;
}
/**
 * TransactionsRulesListResponse defines the response schema for `/beta/transactions/rules/v1/list`
 * @export
 * @interface TransactionsRulesListResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface TransactionsRulesListResponse {
    [key: string]: object | unknown;

    /**
     * A list of the Item\'s transaction rules
     * @type {Array<TransactionsCategoryRule>}
     * @memberof TransactionsRulesListResponse
     */
    rules: Array<TransactionsCategoryRule>;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof TransactionsRulesListResponse
     */
    request_id: string;
}
/**
 * TransactionsRulesRemoveRequest defines the request schema for `/beta/transactions/rules/v1/remove`
 * @export
 * @interface TransactionsRulesRemoveRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface TransactionsRulesRemoveRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransactionsRulesRemoveRequest
     */
    client_id?: string;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof TransactionsRulesRemoveRequest
     */
    access_token: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransactionsRulesRemoveRequest
     */
    secret?: string;
    /**
     * A rule\'s unique identifier
     * @type {string}
     * @memberof TransactionsRulesRemoveRequest
     */
    rule_id: string;
}
/**
 * TransactionsRulesRemoveResponse defines the response schema for `/beta/transactions/rules/v1/remove`
 * @export
 * @interface TransactionsRulesRemoveResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface TransactionsRulesRemoveResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof TransactionsRulesRemoveResponse
     */
    request_id: string;
}
/**
 * TransactionsSyncRequest defines the request schema for `/transactions/sync`
 * @export
 * @interface TransactionsSyncRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface TransactionsSyncRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransactionsSyncRequest
     */
    client_id?: string;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof TransactionsSyncRequest
     */
    access_token: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransactionsSyncRequest
     */
    secret?: string;
    /**
     * The cursor value represents the last update requested. Providing it will cause the response to only return changes after this update. If omitted, the entire history of updates will be returned, starting with the first-added transactions on the Item. The cursor also accepts the special value of `\"now\"`, which can be used to fast-forward the cursor as part of migrating an existing Item from `/transactions/get` to `/transactions/sync`. For more information, see the [Transactions sync migration guide](https://plaid.com/docs/transactions/sync-migration/). Note that using the `\"now` value is not supported for any use case other than migrating existing Items from `/transactions/get`.  The upper-bound length of this cursor is 256 characters of base64.
     * @type {string}
     * @memberof TransactionsSyncRequest
     */
    cursor?: string;
    /**
     * The number of transaction updates to fetch.
     * @type {number}
     * @memberof TransactionsSyncRequest
     */
    count?: number;
    /**
     * 
     * @type {TransactionsSyncRequestOptions}
     * @memberof TransactionsSyncRequest
     */
    options?: TransactionsSyncRequestOptions;
}
/**
 * An optional object to be used with the request. If specified, `options` must not be `null`.
 * @export
 * @interface TransactionsSyncRequestOptions
 */
// Edited by Plaid, line 9. any to unknown
export interface TransactionsSyncRequestOptions {
    /**
     * Include the raw unparsed transaction description from the financial institution. This field is disabled by default. If you need this information in addition to the parsed data provided, contact your Plaid Account Manager or submit a [Support request](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/product-functionality).
     * @type {boolean}
     * @memberof TransactionsSyncRequestOptions
     */
    include_original_description?: boolean | null;
    /**
     * Include the [`personal_finance_category`](https://plaid.com/docs/api/products/transactions/#transactions-sync-response-added-personal-finance-category) object in the response.  All implementations are encouraged to use set this field to `true` and to use the `personal_finance_category` instead of `category` for more meaningful and accurate categorization.  See the [`taxonomy csv file`](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) for a full list of personal finance categories.  We’re also introducing Category Rules - a new beta endpoint that will enable you to change the `personal_finance_category` for a transaction based on your users’ needs. When rules are set, the selected category will override the Plaid provided category. To learn more, send a note to transactions-feedback@plaid.com.
     * @type {boolean}
     * @memberof TransactionsSyncRequestOptions
     */
    include_personal_finance_category?: boolean;
    /**
     * Include counterparties and extra merchant fields in the transaction. This field is disabled by default. If you need this information in addition to the parsed data provided, contact your Plaid Account Manager.
     * @type {boolean}
     * @memberof TransactionsSyncRequestOptions
     */
    include_logo_and_counterparty_beta?: boolean;
}
/**
 * TransactionsSyncResponse defines the response schema for `/transactions/sync`
 * @export
 * @interface TransactionsSyncResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface TransactionsSyncResponse {
    [key: string]: object | unknown;

    /**
     * Transactions that have been added to the Item since `cursor` ordered by ascending last modified time.
     * @type {Array<Transaction>}
     * @memberof TransactionsSyncResponse
     */
    added: Array<Transaction>;
    /**
     * Transactions that have been modified on the Item since `cursor` ordered by ascending last modified time.
     * @type {Array<Transaction>}
     * @memberof TransactionsSyncResponse
     */
    modified: Array<Transaction>;
    /**
     * Transactions that have been removed from the Item since `cursor` ordered by ascending last modified time.
     * @type {Array<RemovedTransaction>}
     * @memberof TransactionsSyncResponse
     */
    removed: Array<RemovedTransaction>;
    /**
     * Cursor used for fetching any future updates after the latest update provided in this response. The cursor obtained after all pages have been pulled (indicated by `has_more` being `false`) will be valid for at least 1 year. This cursor should be persisted for later calls. If transactions are not yet available, this will be an empty string.
     * @type {string}
     * @memberof TransactionsSyncResponse
     */
    next_cursor: string;
    /**
     * Represents if more than requested count of transaction updates exist. If true, the additional updates can be fetched by making an additional request with `cursor` set to `next_cursor`. If `has_more` is true, it’s important to pull all available pages, to make it less likely for underlying data changes to conflict with pagination.
     * @type {boolean}
     * @memberof TransactionsSyncResponse
     */
    has_more: boolean;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof TransactionsSyncResponse
     */
    request_id: string;
}
/**
 * Represents a transfer within the Transfers API.
 * @export
 * @interface Transfer
 */
// Edited by Plaid, line 9. any to unknown
export interface Transfer {
    [key: string]: object | unknown;

    /**
     * Plaid’s unique identifier for a transfer.
     * @type {string}
     * @memberof Transfer
     */
    id: string;
    /**
     * 
     * @type {ACHClass}
     * @memberof Transfer
     */
    ach_class?: ACHClass;
    /**
     * The Plaid `account_id` corresponding to the end-user account that will be debited or credited.
     * @type {string}
     * @memberof Transfer
     */
    account_id?: string;
    /**
     * The id of the associated funding account, available in the Plaid Dashboard. If present, this indicates which of your business checking accounts will be credited or debited.
     * @type {string}
     * @memberof Transfer
     */
    funding_account_id: string | null;
    /**
     * 
     * @type {TransferType}
     * @memberof Transfer
     */
    type: TransferType;
    /**
     * 
     * @type {TransferUserInResponse}
     * @memberof Transfer
     */
    user: TransferUserInResponse;
    /**
     * The amount of the transfer (decimal string with two digits of precision e.g. \"10.00\").
     * @type {string}
     * @memberof Transfer
     */
    amount: string;
    /**
     * The description of the transfer.
     * @type {string}
     * @memberof Transfer
     */
    description: string;
    /**
     * The datetime when this transfer was created. This will be of the form `2006-01-02T15:04:05Z`
     * @type {string}
     * @memberof Transfer
     */
    created: string;
    /**
     * 
     * @type {TransferStatus}
     * @memberof Transfer
     */
    status: TransferStatus;
    /**
     * 
     * @type {TransferSweepStatus}
     * @memberof Transfer
     */
    sweep_status?: TransferSweepStatus | null;
    /**
     * 
     * @type {TransferNetwork}
     * @memberof Transfer
     */
    network: TransferNetwork;
    /**
     * When `true`, you can still cancel this transfer.
     * @type {boolean}
     * @memberof Transfer
     */
    cancellable: boolean;
    /**
     * 
     * @type {TransferFailure}
     * @memberof Transfer
     */
    failure_reason: TransferFailure | null;
    /**
     * The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply: The JSON values must be Strings (no nested JSON objects allowed) Only ASCII characters may be used Maximum of 50 key/value pairs Maximum key length of 40 characters Maximum value length of 500 characters 
     * @type {{ [key: string]: string; }}
     * @memberof Transfer
     */
    metadata: { [key: string]: string; } | null;
    /**
     * Plaid’s unique identifier for the origination account that was used for this transfer.
     * @type {string}
     * @memberof Transfer
     * @deprecated
     */
    origination_account_id: string;
    /**
     * 
     * @type {TransferAuthorizationGuaranteeDecision}
     * @memberof Transfer
     */
    guarantee_decision: TransferAuthorizationGuaranteeDecision | null;
    /**
     * 
     * @type {TransferAuthorizationGuaranteeDecisionRationale}
     * @memberof Transfer
     */
    guarantee_decision_rationale: TransferAuthorizationGuaranteeDecisionRationale | null;
    /**
     * The currency of the transfer amount, e.g. \"USD\"
     * @type {string}
     * @memberof Transfer
     */
    iso_currency_code: string;
    /**
     * The date 3 business days from settlement date indicating the following ACH returns can no longer happen: R01, R02, R03, R29. This will be of the form YYYY-MM-DD.
     * @type {string}
     * @memberof Transfer
     */
    standard_return_window: string | null;
    /**
     * The date 61 business days from settlement date indicating the following ACH returns can no longer happen: R05, R07, R10, R11, R51, R33, R37, R38, R51, R52, R53. This will be of the form YYYY-MM-DD.
     * @type {string}
     * @memberof Transfer
     */
    unauthorized_return_window: string | null;
    /**
     * The expected date when the full amount of the transfer settles at the consumers’ account, if the transfer is credit; or at the customer\'s business checking account, if the transfer is debit. Only set for ACH transfers and is null for non-ACH transfers. Only set for ACH transfers. This will be of the form YYYY-MM-DD.
     * @type {string}
     * @memberof Transfer
     */
    expected_settlement_date: string | null;
    /**
     * The Plaid client ID that is the originator of this transfer. Only present if created on behalf of another client as a third-party sender (TPS).
     * @type {string}
     * @memberof Transfer
     */
    originator_client_id: string | null;
    /**
     * A list of refunds associated with this transfer.
     * @type {Array<TransferRefund>}
     * @memberof Transfer
     */
    refunds: Array<TransferRefund>;
    /**
     * The id of the recurring transfer if this transfer belongs to a recurring transfer.
     * @type {string}
     * @memberof Transfer
     */
    recurring_transfer_id: string | null;
    /**
     * The expected sweep settlement schedule of this transfer, assuming this transfer is not `returned`. Only applies to ACH debit transfers.
     * @type {Array<TransferExpectedSweepSettlementScheduleItem>}
     * @memberof Transfer
     */
    expected_sweep_settlement_schedule?: Array<TransferExpectedSweepSettlementScheduleItem>;
    /**
     * 
     * @type {TransferCreditFundsSource}
     * @memberof Transfer
     */
    credit_funds_source: TransferCreditFundsSource | null;
}
/**
 * Contains the authorization decision for a proposed transfer.
 * @export
 * @interface TransferAuthorization
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferAuthorization {
    [key: string]: object | unknown;

    /**
     * Plaid’s unique identifier for a transfer authorization.
     * @type {string}
     * @memberof TransferAuthorization
     */
    id: string;
    /**
     * The datetime representing when the authorization was created, in the format `2006-01-02T15:04:05Z`.
     * @type {string}
     * @memberof TransferAuthorization
     */
    created: string;
    /**
     * 
     * @type {TransferAuthorizationDecision}
     * @memberof TransferAuthorization
     */
    decision: TransferAuthorizationDecision;
    /**
     * 
     * @type {TransferAuthorizationDecisionRationale}
     * @memberof TransferAuthorization
     */
    decision_rationale: TransferAuthorizationDecisionRationale | null;
    /**
     * 
     * @type {SignalInsights}
     * @memberof TransferAuthorization
     */
    signal_insights?: SignalInsights | null;
    /**
     * 
     * @type {TransferAuthorizationGuaranteeDecision}
     * @memberof TransferAuthorization
     */
    guarantee_decision: TransferAuthorizationGuaranteeDecision | null;
    /**
     * 
     * @type {TransferAuthorizationGuaranteeDecisionRationale}
     * @memberof TransferAuthorization
     */
    guarantee_decision_rationale: TransferAuthorizationGuaranteeDecisionRationale | null;
    /**
     * 
     * @type {TransferAuthorizationProposedTransfer}
     * @memberof TransferAuthorization
     */
    proposed_transfer: TransferAuthorizationProposedTransfer;
}
/**
 * Defines the request schema for `/transfer/authorization/create`
 * @export
 * @interface TransferAuthorizationCreateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferAuthorizationCreateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransferAuthorizationCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransferAuthorizationCreateRequest
     */
    secret?: string;
    /**
     * The Plaid `access_token` for the account that will be debited or credited. Required if not using `payment_profile_token`.
     * @type {string}
     * @memberof TransferAuthorizationCreateRequest
     */
    access_token?: string;
    /**
     * The Plaid `account_id` corresponding to the end-user account that will be debited or credited. Returned only if `account_id` was set on intent creation.
     * @type {string}
     * @memberof TransferAuthorizationCreateRequest
     */
    account_id?: string;
    /**
     * The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited. Defaults to the account configured during onboarding.
     * @type {string}
     * @memberof TransferAuthorizationCreateRequest
     */
    funding_account_id?: string | null;
    /**
     * The payment profile token associated with the Payment Profile that will be debited or credited. Required if not using `access_token`.
     * @type {string}
     * @memberof TransferAuthorizationCreateRequest
     */
    payment_profile_token?: string;
    /**
     * 
     * @type {TransferType}
     * @memberof TransferAuthorizationCreateRequest
     */
    type: TransferType;
    /**
     * 
     * @type {TransferNetwork}
     * @memberof TransferAuthorizationCreateRequest
     */
    network: TransferNetwork;
    /**
     * The amount of the transfer (decimal string with two digits of precision e.g. \"10.00\").
     * @type {string}
     * @memberof TransferAuthorizationCreateRequest
     */
    amount: string;
    /**
     * 
     * @type {ACHClass}
     * @memberof TransferAuthorizationCreateRequest
     */
    ach_class?: ACHClass;
    /**
     * 
     * @type {TransferAuthorizationUserInRequest}
     * @memberof TransferAuthorizationCreateRequest
     */
    user: TransferAuthorizationUserInRequest;
    /**
     * 
     * @type {TransferAuthorizationDevice}
     * @memberof TransferAuthorizationCreateRequest
     */
    device?: TransferAuthorizationDevice;
    /**
     * Plaid\'s unique identifier for the origination account for this authorization. If not specified, the default account will be used.
     * @type {string}
     * @memberof TransferAuthorizationCreateRequest
     * @deprecated
     */
    origination_account_id?: string;
    /**
     * The currency of the transfer amount. The default value is \"USD\".
     * @type {string}
     * @memberof TransferAuthorizationCreateRequest
     */
    iso_currency_code?: string;
    /**
     * A random key provided by the client, per unique authorization, which expires after 48 hours. Maximum of 50 characters.  The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create an authorization fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single authorization is created.  This idempotency key expires after 48 hours, after which the same key can be reused. Failure to provide this key may result in duplicate charges.  Required for guaranteed ACH customers.
     * @type {string}
     * @memberof TransferAuthorizationCreateRequest
     */
    idempotency_key?: string | null;
    /**
     * If the end user is initiating the specific transfer themselves via an interactive UI, this should be `true`; for automatic recurring payments where the end user is not actually initiating each individual transfer, it should be `false`.
     * @type {boolean}
     * @memberof TransferAuthorizationCreateRequest
     */
    user_present?: boolean | null;
    /**
     * If set to `false`, Plaid will not offer a `guarantee_decision` for this request (Guarantee customers only).
     * @type {boolean}
     * @memberof TransferAuthorizationCreateRequest
     */
    with_guarantee?: boolean | null;
    /**
     * The unique identifier returned by Plaid\'s [beacon](https://plaid.com/docs/transfer/guarantee/#using-a-beacon) when it is run on your webpage.
     * @type {string}
     * @memberof TransferAuthorizationCreateRequest
     */
    beacon_session_id?: string | null;
    /**
     * The Plaid client ID that is the originator of this transfer. Only needed if creating transfers on behalf of another client as a third-party sender (TPS).
     * @type {string}
     * @memberof TransferAuthorizationCreateRequest
     */
    originator_client_id?: string | null;
    /**
     * 
     * @type {TransferCreditFundsSource}
     * @memberof TransferAuthorizationCreateRequest
     */
    credit_funds_source?: TransferCreditFundsSource | null;
    /**
     * Plaid’s unique identifier for a test clock. This field may only be used when using `sandbox` environment. If provided, the `authorization` is created at the `virtual_time` on the provided `test_clock`.
     * @type {string}
     * @memberof TransferAuthorizationCreateRequest
     */
    test_clock_id?: string | null;
}
/**
 * Defines the response schema for `/transfer/authorization/create`
 * @export
 * @interface TransferAuthorizationCreateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferAuthorizationCreateResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {TransferAuthorization}
     * @memberof TransferAuthorizationCreateResponse
     */
    authorization: TransferAuthorization;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof TransferAuthorizationCreateResponse
     */
    request_id: string;
}
/**
 *  A decision regarding the proposed transfer.  `approved` – The proposed transfer has received the end user\'s consent and has been approved for processing by Plaid. The `decision_rationale` field is set if Plaid was unable to fetch the account information. You may proceed with the transfer, but further review is recommended (i.e., use Link in update to re-authenticate your user when `decision_rationale.code` is `ITEM_LOGIN_REQUIRED`). Refer to the `code` field in the `decision_rationale` object for details.  `declined` – Plaid reviewed the proposed transfer and declined processing. Refer to the `code` field in the `decision_rationale` object for details.
 * @export
 * @enum {string}
 */
export enum TransferAuthorizationDecision {
    Approved = 'approved',
    Declined = 'declined'
}

/**
 * The rationale for Plaid\'s decision regarding a proposed transfer. It is always set for `declined` decisions, and may or may not be null for `approved` decisions.
 * @export
 * @interface TransferAuthorizationDecisionRationale
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferAuthorizationDecisionRationale {
    [key: string]: object | unknown;

    /**
     * 
     * @type {TransferAuthorizationDecisionRationaleCode}
     * @memberof TransferAuthorizationDecisionRationale
     */
    code: TransferAuthorizationDecisionRationaleCode;
    /**
     * A human-readable description of the code associated with a transfer approval or transfer decline.
     * @type {string}
     * @memberof TransferAuthorizationDecisionRationale
     */
    description: string;
}
/**
 * A code representing the rationale for approving or declining the proposed transfer. Possible values are:  `MANUALLY_VERIFIED_ITEM` – Item created via same-day micro deposits, limited information available. Plaid will offer `approved` as a transaction decision.  `ITEM_LOGIN_REQUIRED` – Unable to collect the account information due to Item staleness. Can be rectified using Link in update mode. Plaid will offer `approved` as a transaction decision.  `PAYMENT_PROFILE_LOGIN_REQUIRED` - Unable to collect the account information due to invalid login when using Payment Profiles. Can be rectified using update mode for Payment Profile. Plaid will offer `approved` as a transaction decision.  `ERROR` – Unable to collect the account information due to an error. Plaid will offer `approved` as a transaction decision.  `NSF` – Transaction likely to result in a return due to insufficient funds. Plaid will offer `declined` as a transaction decision.  `RISK` - Transaction is high-risk. Plaid will offer `declined` as a transaction decision.  `TRANSFER_LIMIT_REACHED` - One or several transfer limits are reached, e.g. monthly transfer limit. Plaid will offer `declined` as a transaction decision.  `MIGRATED_ACCOUNT_ITEM` - Item created via `/transfer/account_migration` endpoint, limited information available. Plaid will offer `approved` as a transaction decision.
 * @export
 * @enum {string}
 */
export enum TransferAuthorizationDecisionRationaleCode {
    Nsf = 'NSF',
    Risk = 'RISK',
    TransferLimitReached = 'TRANSFER_LIMIT_REACHED',
    ManuallyVerifiedItem = 'MANUALLY_VERIFIED_ITEM',
    ItemLoginRequired = 'ITEM_LOGIN_REQUIRED',
    PaymentProfileLoginRequired = 'PAYMENT_PROFILE_LOGIN_REQUIRED',
    Error = 'ERROR',
    MigratedAccountItem = 'MIGRATED_ACCOUNT_ITEM'
}

/**
 * Information about the device being used to initiate the authorization.
 * @export
 * @interface TransferAuthorizationDevice
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferAuthorizationDevice {
    [key: string]: object | unknown;

    /**
     * The IP address of the device being used to initiate the authorization. Required when the end-user is present at authorization create time.
     * @type {string}
     * @memberof TransferAuthorizationDevice
     */
    ip_address?: string;
    /**
     * The user agent of the device being used to initiate the authorization. Required when the end-user is present at authorization create time.
     * @type {string}
     * @memberof TransferAuthorizationDevice
     */
    user_agent?: string;
}
/**
 * Indicates whether the transfer is guaranteed by Plaid (Guarantee customers only). This field will contain either `GUARANTEED` or `NOT_GUARANTEED` indicating whether Plaid will guarantee the transfer. If the transfer is not guaranteed, additional information will be provided in the `guarantee_decision_rationale` field. Refer to the `code` field in `guarantee_decision_rationale` for details.
 * @export
 * @enum {string}
 */
export enum TransferAuthorizationGuaranteeDecision {
    Guaranteed = 'GUARANTEED',
    NotGuaranteed = 'NOT_GUARANTEED',
    Null = 'null'
}

/**
 * The rationale for Plaid\'s decision to not guarantee a transfer. Will be `null` unless `guarantee_decision` is `NOT_GUARANTEED`.
 * @export
 * @interface TransferAuthorizationGuaranteeDecisionRationale
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferAuthorizationGuaranteeDecisionRationale {
    [key: string]: object | unknown;

    /**
     * 
     * @type {TransferAuthorizationGuaranteeDecisionRationaleCode}
     * @memberof TransferAuthorizationGuaranteeDecisionRationale
     */
    code: TransferAuthorizationGuaranteeDecisionRationaleCode;
    /**
     * A human-readable description of why the transfer cannot be guaranteed.
     * @type {string}
     * @memberof TransferAuthorizationGuaranteeDecisionRationale
     */
    description: string;
}
/**
 * A code representing the reason Plaid declined to guarantee this transfer:  `RETURN_BANK`: The risk of a bank-initiated return (for example, an R01/NSF) is too high to guarantee this transfer.  `RETURN_CUSTOMER`: The risk of a customer-initiated return (for example, a R10/Unauthorized) is too high to guarantee this transfer.  `GUARANTEE_LIMIT_REACHED`: This transfer is low-risk, but Guarantee has exhausted an internal limit on the number or rate of guarantees that applies to this transfer.  `RISK_ESTIMATE_UNAVAILABLE`: A risk estimate is unavailable for this Item.  `REQUIRED_PARAM_MISSING`: Required fields are missing.
 * @export
 * @enum {string}
 */
export enum TransferAuthorizationGuaranteeDecisionRationaleCode {
    ReturnBank = 'RETURN_BANK',
    ReturnCustomer = 'RETURN_CUSTOMER',
    GuaranteeLimitReached = 'GUARANTEE_LIMIT_REACHED',
    RiskEstimateUnavailable = 'RISK_ESTIMATE_UNAVAILABLE',
    RequiredParamMissing = 'REQUIRED_PARAM_MISSING'
}

/**
 * Details regarding the proposed transfer.
 * @export
 * @interface TransferAuthorizationProposedTransfer
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferAuthorizationProposedTransfer {
    [key: string]: object | unknown;

    /**
     * 
     * @type {ACHClass}
     * @memberof TransferAuthorizationProposedTransfer
     */
    ach_class?: ACHClass;
    /**
     * The Plaid `account_id` for the account that will be debited or credited.
     * @type {string}
     * @memberof TransferAuthorizationProposedTransfer
     */
    account_id?: string;
    /**
     * The id of the associated funding account, available in the Plaid Dashboard. If present, this indicates which of your business checking accounts will be credited or debited.
     * @type {string}
     * @memberof TransferAuthorizationProposedTransfer
     */
    funding_account_id: string | null;
    /**
     * 
     * @type {TransferType}
     * @memberof TransferAuthorizationProposedTransfer
     */
    type: TransferType;
    /**
     * 
     * @type {TransferUserInResponse}
     * @memberof TransferAuthorizationProposedTransfer
     */
    user: TransferUserInResponse;
    /**
     * The amount of the transfer (decimal string with two digits of precision e.g. \"10.00\").
     * @type {string}
     * @memberof TransferAuthorizationProposedTransfer
     */
    amount: string;
    /**
     * The network or rails used for the transfer.
     * @type {string}
     * @memberof TransferAuthorizationProposedTransfer
     */
    network: string;
    /**
     * Plaid\'s unique identifier for the origination account that was used for this transfer.
     * @type {string}
     * @memberof TransferAuthorizationProposedTransfer
     * @deprecated
     */
    origination_account_id: string;
    /**
     * The currency of the transfer amount. The default value is \"USD\".
     * @type {string}
     * @memberof TransferAuthorizationProposedTransfer
     */
    iso_currency_code: string;
    /**
     * The Plaid client ID that is the originator of this transfer. Only present if created on behalf of another client as a third-party sender (TPS).
     * @type {string}
     * @memberof TransferAuthorizationProposedTransfer
     */
    originator_client_id: string | null;
    /**
     * 
     * @type {TransferCreditFundsSource}
     * @memberof TransferAuthorizationProposedTransfer
     */
    credit_funds_source: TransferCreditFundsSource | null;
}
/**
 * The legal name and other information for the account holder.
 * @export
 * @interface TransferAuthorizationUserInRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferAuthorizationUserInRequest {
    /**
     * The user\'s legal name.
     * @type {string}
     * @memberof TransferAuthorizationUserInRequest
     */
    legal_name: string;
    /**
     * The user\'s phone number. In order to qualify for a guaranteed transfer, at least one of `phone_number` or `email_address` must be provided.
     * @type {string}
     * @memberof TransferAuthorizationUserInRequest
     */
    phone_number?: string;
    /**
     * The user\'s email address. In order to qualify for a guaranteed transfer, at least one of `phone_number` or `email_address` must be provided.
     * @type {string}
     * @memberof TransferAuthorizationUserInRequest
     */
    email_address?: string;
    /**
     * 
     * @type {TransferUserAddressInRequest}
     * @memberof TransferAuthorizationUserInRequest
     */
    address?: TransferUserAddressInRequest;
}
/**
 * Information about the balance held with Plaid.
 * @export
 * @interface TransferBalance
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferBalance {
    [key: string]: object | unknown;

    /**
     * The amount of this balance available for use (decimal string with two digits of precision e.g. \"10.00\").
     * @type {string}
     * @memberof TransferBalance
     */
    available: string;
    /**
     * 
     * @type {TransferBalanceType}
     * @memberof TransferBalance
     */
    type: TransferBalanceType;
}
/**
 * Defines the request schema for `/transfer/balance/get`
 * @export
 * @interface TransferBalanceGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferBalanceGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransferBalanceGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransferBalanceGetRequest
     */
    secret?: string;
    /**
     * 
     * @type {TransferBalanceType}
     * @memberof TransferBalanceGetRequest
     */
    type: TransferBalanceType;
}
/**
 * Defines the response schema for `/transfer/balance/get`
 * @export
 * @interface TransferBalanceGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferBalanceGetResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {TransferBalance}
     * @memberof TransferBalanceGetResponse
     */
    balance: TransferBalance;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof TransferBalanceGetResponse
     */
    request_id: string;
}
/**
 * The type of balance.  `prefunded_rtp_credits` - Your prefunded RTP credit balance with Plaid `prefunded_ach_credits` - Your prefunded ACH credit balance with Plaid
 * @export
 * @enum {string}
 */
export enum TransferBalanceType {
    RtpCredits = 'prefunded_rtp_credits',
    AchCredits = 'prefunded_ach_credits'
}

/**
 * Defines the request schema for `/transfer/cancel`
 * @export
 * @interface TransferCancelRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferCancelRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransferCancelRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransferCancelRequest
     */
    secret?: string;
    /**
     * Plaid’s unique identifier for a transfer.
     * @type {string}
     * @memberof TransferCancelRequest
     */
    transfer_id: string;
    /**
     * The Plaid client ID of the transfer originator. Should only be present if `client_id` is a third-party sender (TPS).
     * @type {string}
     * @memberof TransferCancelRequest
     */
    originator_client_id?: string | null;
}
/**
 * Defines the response schema for `/transfer/cancel`
 * @export
 * @interface TransferCancelResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferCancelResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof TransferCancelResponse
     */
    request_id: string;
}
/**
 * Contains the supported service types in RTP
 * @export
 * @interface TransferCapabilitiesGetRTP
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferCapabilitiesGetRTP {
    [key: string]: object | unknown;

    /**
     * When `true`, the linked Item\'s institution supports RTP credit transfer.
     * @type {boolean}
     * @memberof TransferCapabilitiesGetRTP
     */
    credit?: boolean;
}
/**
 * Defines the request schema for `/transfer/capabilities/get`
 * @export
 * @interface TransferCapabilitiesGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferCapabilitiesGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransferCapabilitiesGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransferCapabilitiesGetRequest
     */
    secret?: string;
    /**
     * The Plaid `access_token` for the account that will be debited or credited. Required if not using `payment_profile_token`.
     * @type {string}
     * @memberof TransferCapabilitiesGetRequest
     */
    access_token?: string;
    /**
     * The Plaid `account_id` corresponding to the end-user account that will be debited or credited. Returned only if `account_id` was set on intent creation.
     * @type {string}
     * @memberof TransferCapabilitiesGetRequest
     */
    account_id?: string;
    /**
     * A payment profile token associated with the Payment Profile data that is being requested.
     * @type {string}
     * @memberof TransferCapabilitiesGetRequest
     */
    payment_profile_token?: string;
}
/**
 * Defines the response schema for `/transfer/capabilities/get`
 * @export
 * @interface TransferCapabilitiesGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferCapabilitiesGetResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {InstitutionSupportedNetworks}
     * @memberof TransferCapabilitiesGetResponse
     */
    institution_supported_networks: InstitutionSupportedNetworks;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof TransferCapabilitiesGetResponse
     */
    request_id: string;
}
/**
 * Defines the request schema for `/transfer/configuration/get`
 * @export
 * @interface TransferConfigurationGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferConfigurationGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransferConfigurationGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransferConfigurationGetRequest
     */
    secret?: string;
    /**
     * The Plaid client ID of the transfer originator. Should only be present if `client_id` is a third-party sender (TPS).
     * @type {string}
     * @memberof TransferConfigurationGetRequest
     */
    originator_client_id?: string | null;
}
/**
 * Defines the response schema for `/transfer/configuration/get`
 * @export
 * @interface TransferConfigurationGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferConfigurationGetResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof TransferConfigurationGetResponse
     */
    request_id: string;
    /**
     * The max limit of dollar amount of a single transfer (decimal string with two digits of precision e.g. \"10.00\").
     * @type {string}
     * @memberof TransferConfigurationGetResponse
     */
    max_single_transfer_amount: string;
    /**
     * The max limit of dollar amount of a single credit transfer (decimal string with two digits of precision e.g. \"10.00\").
     * @type {string}
     * @memberof TransferConfigurationGetResponse
     */
    max_single_transfer_credit_amount: string;
    /**
     * The max limit of dollar amount of a single debit transfer (decimal string with two digits of precision e.g. \"10.00\").
     * @type {string}
     * @memberof TransferConfigurationGetResponse
     */
    max_single_transfer_debit_amount: string;
    /**
     * The max limit of sum of dollar amount of credit transfers in last 24 hours (decimal string with two digits of precision e.g. \"10.00\").
     * @type {string}
     * @memberof TransferConfigurationGetResponse
     */
    max_daily_credit_amount: string;
    /**
     * The max limit of sum of dollar amount of debit transfers in last 24 hours (decimal string with two digits of precision e.g. \"10.00\").
     * @type {string}
     * @memberof TransferConfigurationGetResponse
     */
    max_daily_debit_amount: string;
    /**
     * The max limit of sum of dollar amount of credit and debit transfers in one calendar month (decimal string with two digits of precision e.g. \"10.00\").
     * @type {string}
     * @memberof TransferConfigurationGetResponse
     */
    max_monthly_amount: string;
    /**
     * The max limit of sum of dollar amount of credit transfers in one calendar month (decimal string with two digits of precision e.g. \"10.00\").
     * @type {string}
     * @memberof TransferConfigurationGetResponse
     */
    max_monthly_credit_amount: string;
    /**
     * The max limit of sum of dollar amount of debit transfers in one calendar month (decimal string with two digits of precision e.g. \"10.00\").
     * @type {string}
     * @memberof TransferConfigurationGetResponse
     */
    max_monthly_debit_amount: string;
    /**
     * The currency of the dollar amount, e.g. \"USD\".
     * @type {string}
     * @memberof TransferConfigurationGetResponse
     */
    iso_currency_code: string;
}
/**
 * Defines the request schema for `/transfer/create`
 * @export
 * @interface TransferCreateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferCreateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransferCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransferCreateRequest
     */
    secret?: string;
    /**
     * Deprecated. `authorization_id` is now used as idempotency instead.  A random key provided by the client, per unique transfer. Maximum of 50 characters.  The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create a transfer fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single transfer is created.
     * @type {string}
     * @memberof TransferCreateRequest
     * @deprecated
     */
    idempotency_key?: string;
    /**
     * The Plaid `access_token` for the account that will be debited or credited. Required if not using `payment_profile_token`.
     * @type {string}
     * @memberof TransferCreateRequest
     */
    access_token?: string;
    /**
     * The Plaid `account_id` corresponding to the end-user account that will be debited or credited. Returned only if `account_id` was set on intent creation.
     * @type {string}
     * @memberof TransferCreateRequest
     */
    account_id?: string;
    /**
     * The payment profile token associated with the Payment Profile that will be debited or credited. Required if not using `access_token`.
     * @type {string}
     * @memberof TransferCreateRequest
     */
    payment_profile_token?: string;
    /**
     * Plaid’s unique identifier for a transfer authorization. This parameter also serves the purpose of acting as an idempotency identifier.
     * @type {string}
     * @memberof TransferCreateRequest
     */
    authorization_id: string;
    /**
     * 
     * @type {TransferType}
     * @memberof TransferCreateRequest
     * @deprecated
     */
    type?: TransferType;
    /**
     * 
     * @type {TransferNetwork}
     * @memberof TransferCreateRequest
     * @deprecated
     */
    network?: TransferNetwork;
    /**
     * The amount of the transfer (decimal string with two digits of precision e.g. \"10.00\").
     * @type {string}
     * @memberof TransferCreateRequest
     */
    amount?: string;
    /**
     * The transfer description. Maximum of 15 characters. If reprocessing a returned transfer, please note that the `description` field must be `\"Retry\"` to indicate that it\'s a retry of a previously returned transfer. You may retry a transfer up to 2 times, within 180 days of creating the original transfer. Only transfers that were returned with code `R01` or `R09` may be retried. For a full listing of ACH return codes, see [Transfer errors](https://plaid.com/docs/errors/transfer/#ach-return-codes).
     * @type {string}
     * @memberof TransferCreateRequest
     */
    description: string;
    /**
     * 
     * @type {ACHClass}
     * @memberof TransferCreateRequest
     * @deprecated
     */
    ach_class?: ACHClass;
    /**
     * 
     * @type {TransferUserInRequestDeprecated}
     * @memberof TransferCreateRequest
     * @deprecated
     */
    user?: TransferUserInRequestDeprecated | null;
    /**
     * The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply: The JSON values must be Strings (no nested JSON objects allowed) Only ASCII characters may be used Maximum of 50 key/value pairs Maximum key length of 40 characters Maximum value length of 500 characters 
     * @type {{ [key: string]: string; }}
     * @memberof TransferCreateRequest
     */
    metadata?: { [key: string]: string; } | null;
    /**
     * Plaid’s unique identifier for the origination account for this transfer. If you have more than one origination account, this value must be specified. Otherwise, this field should be left blank.
     * @type {string}
     * @memberof TransferCreateRequest
     * @deprecated
     */
    origination_account_id?: string | null;
    /**
     * The currency of the transfer amount. The default value is \"USD\".
     * @type {string}
     * @memberof TransferCreateRequest
     * @deprecated
     */
    iso_currency_code?: string;
    /**
     * Plaid’s unique identifier for a test clock. This field may only be used when using `sandbox` environment. If provided, the `transfer` is created at the `virtual_time` on the provided `test_clock`.
     * @type {string}
     * @memberof TransferCreateRequest
     */
    test_clock_id?: string | null;
}
/**
 * Defines the response schema for `/transfer/create`
 * @export
 * @interface TransferCreateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferCreateResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {Transfer}
     * @memberof TransferCreateResponse
     */
    transfer: Transfer;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof TransferCreateResponse
     */
    request_id: string;
}
/**
 * Specifies the source of funds for the transfer. Only valid for `credit` transfers, and defaults to `sweep` if not specified. This field is not specified for `debit` transfers.  `sweep` - Sweep funds from your funding account `prefunded_rtp_credits` - Use your prefunded RTP credit balance with Plaid `prefunded_ach_credits` - Use your prefunded ACH credit balance with Plaid
 * @export
 * @enum {string}
 */
export enum TransferCreditFundsSource {
    Sweep = 'sweep',
    PrefundedRtpCredits = 'prefunded_rtp_credits',
    PrefundedAchCredits = 'prefunded_ach_credits',
    Null = 'null'
}

/**
 * Specifies the originator\'s expected usage of credits. For all dollar amounts, use a decimal string with two digits of precision e.g. \"10.00\". This field is required if the originator is expected to process credit transfers.
 * @export
 * @interface TransferCreditUsageConfiguration
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferCreditUsageConfiguration {
    /**
     * 
     * @type {OriginatorExpectedTransferFrequency}
     * @memberof TransferCreditUsageConfiguration
     */
    expected_frequency: OriginatorExpectedTransferFrequency;
    /**
     * The originator’s expected highest amount for a single credit transfer.
     * @type {string}
     * @memberof TransferCreditUsageConfiguration
     */
    expected_highest_amount: string;
    /**
     * The originator’s expected average amount per credit.
     * @type {string}
     * @memberof TransferCreditUsageConfiguration
     */
    expected_average_amount: string;
    /**
     * The originator’s monthly expected ACH credit processing amount for the next 6-12 months.
     * @type {string}
     * @memberof TransferCreditUsageConfiguration
     */
    expected_monthly_amount: string;
    /**
     * Specifies the expected use cases for the originator’s credit transfers. This should be a list that contains one or more of the following codes:  `\"ccd\"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts  `\"ppd\"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, eg. bill payment  `\"web\"` - A credit Entry initiated by or on behalf of a holder of a Consumer Account that is intended for a Consumer Account of a Receiver
     * @type {Array<CreditACHClass>}
     * @memberof TransferCreditUsageConfiguration
     */
    sec_codes: Array<CreditACHClass>;
}
/**
 * Specifies the originator\'s expected usage of debits. For all dollar amounts, use a decimal string with two digits of precision e.g. \"10.00\". This field is required if the originator is expected to process debit transfers.
 * @export
 * @interface TransferDebitUsageConfiguration
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferDebitUsageConfiguration {
    /**
     * 
     * @type {OriginatorExpectedTransferFrequency}
     * @memberof TransferDebitUsageConfiguration
     */
    expected_frequency: OriginatorExpectedTransferFrequency;
    /**
     * The originator’s expected highest amount for a single debit transfer.
     * @type {string}
     * @memberof TransferDebitUsageConfiguration
     */
    expected_highest_amount: string;
    /**
     * The originator’s expected average amount per debit.
     * @type {string}
     * @memberof TransferDebitUsageConfiguration
     */
    expected_average_amount: string;
    /**
     * The originator’s monthly expected ACH debit processing amount for the next 6-12 months.
     * @type {string}
     * @memberof TransferDebitUsageConfiguration
     */
    expected_monthly_amount: string;
    /**
     * Specifies the expected use cases for the originator’s debit transfers. This should be a list that contains one or more of the following codes:  `\"ccd\"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts  `\"ppd\"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, eg. bill payment  `\"tel\"` - Telephone-Initiated Entry  `\"web\"` - Internet-Initiated Entry - debits from a consumer’s account where their authorization is obtained over the Internet
     * @type {Array<ACHClass>}
     * @memberof TransferDebitUsageConfiguration
     */
    sec_codes: Array<ACHClass>;
}
/**
 * Information about the device being used to initiate the authorization.
 * @export
 * @interface TransferDevice
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferDevice {
    [key: string]: object | unknown;

    /**
     * The IP address of the device being used to initiate the authorization.
     * @type {string}
     * @memberof TransferDevice
     */
    ip_address: string;
    /**
     * The user agent of the device being used to initiate the authorization.
     * @type {string}
     * @memberof TransferDevice
     */
    user_agent: string;
}
/**
 * Defines the request schema for `/transfer/diligence/document/upload`
 * @export
 * @interface TransferDiligenceDocumentUploadRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferDiligenceDocumentUploadRequest {
    /**
     * The Client ID of the originator whose document that you want to upload.
     * @type {string}
     * @memberof TransferDiligenceDocumentUploadRequest
     */
    originator_client_id: string;
    /**
     * A file to upload.
     * @type {any}
     * @memberof TransferDiligenceDocumentUploadRequest
     */
    file: any;
    /**
     * 
     * @type {TransferDocumentPurpose}
     * @memberof TransferDiligenceDocumentUploadRequest
     */
    purpose: TransferDocumentPurpose;
}
/**
 * Defines the response schema for `/transfer/diligence/document/upload`
 * @export
 * @interface TransferDiligenceDocumentUploadResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferDiligenceDocumentUploadResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof TransferDiligenceDocumentUploadResponse
     */
    request_id: string;
}
/**
 * Originator’s diligence status.
 * @export
 * @enum {string}
 */
export enum TransferDiligenceStatus {
    UnderReview = 'under_review',
    Approved = 'approved',
    Denied = 'denied'
}

/**
 * Defines the request schema for `/transfer/diligence/submit`
 * @export
 * @interface TransferDiligenceSubmitRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferDiligenceSubmitRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransferDiligenceSubmitRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransferDiligenceSubmitRequest
     */
    secret?: string;
    /**
     * Client ID of the the originator whose diligence that you want to submit.
     * @type {string}
     * @memberof TransferDiligenceSubmitRequest
     */
    originator_client_id: string;
    /**
     * 
     * @type {TransferOriginatorDiligence}
     * @memberof TransferDiligenceSubmitRequest
     */
    originator_diligence: TransferOriginatorDiligence;
}
/**
 * Defines the response schema for `/transfer/diligence/submit`
 * @export
 * @interface TransferDiligenceSubmitResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferDiligenceSubmitResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof TransferDiligenceSubmitResponse
     */
    request_id: string;
}
/**
 * Specifies the purpose of the uploaded file.  `\"DUE_DILIGENCE\"` - The transfer due diligence document of the originator. The size of the document should be less than 20MB. Supported file extension: .pdf, .docx, .doc.
 * @export
 * @enum {string}
 */
export enum TransferDocumentPurpose {
    DueDiligence = 'DUE_DILIGENCE'
}

/**
 * Represents an event in the Transfers API.
 * @export
 * @interface TransferEvent
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferEvent {
    [key: string]: object | unknown;

    /**
     * Plaid’s unique identifier for this event. IDs are sequential unsigned 64-bit integers.
     * @type {number}
     * @memberof TransferEvent
     */
    event_id: number;
    /**
     * The datetime when this event occurred. This will be of the form `2006-01-02T15:04:05Z`.
     * @type {string}
     * @memberof TransferEvent
     */
    timestamp: string;
    /**
     * 
     * @type {TransferEventType}
     * @memberof TransferEvent
     */
    event_type: TransferEventType;
    /**
     * The account ID associated with the transfer.
     * @type {string}
     * @memberof TransferEvent
     */
    account_id: string;
    /**
     * The id of the associated funding account, available in the Plaid Dashboard. If present, this indicates which of your business checking accounts will be credited or debited.
     * @type {string}
     * @memberof TransferEvent
     */
    funding_account_id: string | null;
    /**
     * Plaid’s unique identifier for a transfer.
     * @type {string}
     * @memberof TransferEvent
     */
    transfer_id: string;
    /**
     * The ID of the origination account that this balance belongs to.
     * @type {string}
     * @memberof TransferEvent
     * @deprecated
     */
    origination_account_id: string | null;
    /**
     * 
     * @type {TransferType}
     * @memberof TransferEvent
     */
    transfer_type: TransferType;
    /**
     * The amount of the transfer (decimal string with two digits of precision e.g. \"10.00\").
     * @type {string}
     * @memberof TransferEvent
     */
    transfer_amount: string;
    /**
     * 
     * @type {TransferFailure}
     * @memberof TransferEvent
     */
    failure_reason: TransferFailure | null;
    /**
     * Plaid’s unique identifier for a sweep.
     * @type {string}
     * @memberof TransferEvent
     */
    sweep_id: string | null;
    /**
     * A signed amount of how much was `swept` or `return_swept` for this transfer (decimal string with two digits of precision e.g. \"-5.50\").
     * @type {string}
     * @memberof TransferEvent
     */
    sweep_amount: string | null;
    /**
     * Plaid’s unique identifier for a refund. A non-null value indicates the event is for the associated refund of the transfer.
     * @type {string}
     * @memberof TransferEvent
     */
    refund_id: string | null;
    /**
     * The Plaid client ID that is the originator of the transfer that this event applies to. Only present if the transfer was created on behalf of another client as a third-party sender (TPS).
     * @type {string}
     * @memberof TransferEvent
     */
    originator_client_id: string | null;
}
/**
 * Defines the request schema for `/transfer/event/list`
 * @export
 * @interface TransferEventListRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferEventListRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransferEventListRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransferEventListRequest
     */
    secret?: string;
    /**
     * The start datetime of transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
     * @type {string}
     * @memberof TransferEventListRequest
     */
    start_date?: string | null;
    /**
     * The end datetime of transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
     * @type {string}
     * @memberof TransferEventListRequest
     */
    end_date?: string | null;
    /**
     * Plaid’s unique identifier for a transfer.
     * @type {string}
     * @memberof TransferEventListRequest
     */
    transfer_id?: string | null;
    /**
     * The account ID to get events for all transactions to/from an account.
     * @type {string}
     * @memberof TransferEventListRequest
     */
    account_id?: string | null;
    /**
     * 
     * @type {TransferEventListTransferType}
     * @memberof TransferEventListRequest
     */
    transfer_type?: TransferEventListTransferType | null;
    /**
     * Filter events by event type.
     * @type {Array<TransferEventType>}
     * @memberof TransferEventListRequest
     */
    event_types?: Array<TransferEventType>;
    /**
     * Plaid’s unique identifier for a sweep.
     * @type {string}
     * @memberof TransferEventListRequest
     */
    sweep_id?: string;
    /**
     * The maximum number of transfer events to return. If the number of events matching the above parameters is greater than `count`, the most recent events will be returned.
     * @type {number}
     * @memberof TransferEventListRequest
     */
    count?: number | null;
    /**
     * The offset into the list of transfer events. When `count`=25 and `offset`=0, the first 25 events will be returned. When `count`=25 and `offset`=25, the next 25 events will be returned.
     * @type {number}
     * @memberof TransferEventListRequest
     */
    offset?: number | null;
    /**
     * The origination account ID to get events for transfers from a specific origination account.
     * @type {string}
     * @memberof TransferEventListRequest
     * @deprecated
     */
    origination_account_id?: string | null;
    /**
     * Filter transfer events to only those with the specified originator client.
     * @type {string}
     * @memberof TransferEventListRequest
     */
    originator_client_id?: string | null;
    /**
     * Filter transfer events to only those with the specified `funding_account_id`.
     * @type {string}
     * @memberof TransferEventListRequest
     */
    funding_account_id?: string | null;
}
/**
 * Defines the response schema for `/transfer/event/list`
 * @export
 * @interface TransferEventListResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferEventListResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {Array<TransferEvent>}
     * @memberof TransferEventListResponse
     */
    transfer_events: Array<TransferEvent>;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof TransferEventListResponse
     */
    request_id: string;
}
/**
 * The type of transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into your origination account; a `credit` indicates a transfer of money out of your origination account.
 * @export
 * @enum {string}
 */
export enum TransferEventListTransferType {
    Debit = 'debit',
    Credit = 'credit',
    Null = 'null'
}

/**
 * Defines the request schema for `/transfer/event/sync`
 * @export
 * @interface TransferEventSyncRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferEventSyncRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransferEventSyncRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransferEventSyncRequest
     */
    secret?: string;
    /**
     * The latest (largest) `event_id` fetched via the sync endpoint, or 0 initially.
     * @type {number}
     * @memberof TransferEventSyncRequest
     */
    after_id: number;
    /**
     * The maximum number of transfer events to return.
     * @type {number}
     * @memberof TransferEventSyncRequest
     */
    count?: number | null;
}
/**
 * Defines the response schema for `/transfer/event/sync`
 * @export
 * @interface TransferEventSyncResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferEventSyncResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {Array<TransferEvent>}
     * @memberof TransferEventSyncResponse
     */
    transfer_events: Array<TransferEvent>;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof TransferEventSyncResponse
     */
    request_id: string;
}
/**
 * The type of event that this transfer represents.  `pending`: A new transfer was created; it is in the pending state.  `cancelled`: The transfer was cancelled by the client.  `failed`: The transfer failed, no funds were moved.  `posted`: The transfer has been successfully submitted to the payment network.  `settled`: Credits are available to be withdrawn or debits have been deducted from the Plaid linked account.  `returned`: A posted transfer was returned.  `swept`: The transfer was swept to / from the sweep account.  `swept_settled`: Credits are available to be withdrawn or debits have been deducted from the customer’s business checking account.  `return_swept`: Due to the transfer being returned, funds were pulled from or pushed back to the sweep account.
 * @export
 * @enum {string}
 */
export enum TransferEventType {
    Pending = 'pending',
    Cancelled = 'cancelled',
    Failed = 'failed',
    Posted = 'posted',
    Settled = 'settled',
    Returned = 'returned',
    Swept = 'swept',
    SweptSettled = 'swept_settled',
    ReturnSwept = 'return_swept'
}

/**
 * Fired when new transfer events are available. Receiving this webhook indicates you should fetch the new events from `/transfer/event/sync`.
 * @export
 * @interface TransferEventsUpdateWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferEventsUpdateWebhook {
    [key: string]: object | unknown;

    /**
     * `TRANSFER`
     * @type {string}
     * @memberof TransferEventsUpdateWebhook
     */
    webhook_type: string;
    /**
     * `TRANSFER_EVENTS_UPDATE`
     * @type {string}
     * @memberof TransferEventsUpdateWebhook
     */
    webhook_code: string;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof TransferEventsUpdateWebhook
     */
    environment: WebhookEnvironmentValues;
}
/**
 * Defines an expected sweep date and amount.
 * @export
 * @interface TransferExpectedSweepSettlementScheduleItem
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferExpectedSweepSettlementScheduleItem {
    [key: string]: object | unknown;

    /**
     * The settlement date of a sweep for this transfer.
     * @type {string}
     * @memberof TransferExpectedSweepSettlementScheduleItem
     */
    sweep_settlement_date: string;
    /**
     * The accumulated amount that has been swept by `sweep_settlement_date`.
     * @type {string}
     * @memberof TransferExpectedSweepSettlementScheduleItem
     */
    swept_settled_amount: string;
}
/**
 * The failure reason if the event type for a transfer is `\"failed\"` or `\"returned\"`. Null value otherwise.
 * @export
 * @interface TransferFailure
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferFailure {
    [key: string]: object | unknown;

    /**
     * The ACH return code, e.g. `R01`.  A return code will be provided if and only if the transfer status is `returned`. For a full listing of ACH return codes, see [Transfer errors](https://plaid.com/docs/errors/transfer/#ach-return-codes).
     * @type {string}
     * @memberof TransferFailure
     */
    ach_return_code?: string | null;
    /**
     * A human-readable description of the reason for the failure or reversal.
     * @type {string}
     * @memberof TransferFailure
     */
    description?: string;
}
/**
 * Defines the request schema for `/transfer/get`
 * @export
 * @interface TransferGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransferGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransferGetRequest
     */
    secret?: string;
    /**
     * Plaid’s unique identifier for a transfer.
     * @type {string}
     * @memberof TransferGetRequest
     */
    transfer_id: string;
    /**
     * The Plaid client ID of the transfer originator. Should only be present if `client_id` is a third-party sender (TPS).
     * @type {string}
     * @memberof TransferGetRequest
     */
    originator_client_id?: string | null;
}
/**
 * Defines the response schema for `/transfer/get`
 * @export
 * @interface TransferGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferGetResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {Transfer}
     * @memberof TransferGetResponse
     */
    transfer: Transfer;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof TransferGetResponse
     */
    request_id: string;
}
/**
 *  A decision regarding the proposed transfer.  `APPROVED` – The proposed transfer has received the end user\'s consent and has been approved for processing by Plaid. The `decision_rationale` field is set if Plaid was unable to fetch the account information. You may proceed with the transfer, but further review is recommended (i.e., use Link in update to re-authenticate your user when `decision_rationale.code` is `ITEM_LOGIN_REQUIRED`). Refer to the `code` field in the `decision_rationale` object for details.  `DECLINED` – Plaid reviewed the proposed transfer and declined processing. Refer to the `code` field in the `decision_rationale` object for details.
 * @export
 * @enum {string}
 */
export enum TransferIntentAuthorizationDecision {
    Approved = 'APPROVED',
    Declined = 'DECLINED'
}

/**
 * Represents a transfer intent within Transfer UI.
 * @export
 * @interface TransferIntentCreate
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferIntentCreate {
    [key: string]: object | unknown;

    /**
     * Plaid\'s unique identifier for the transfer intent object.
     * @type {string}
     * @memberof TransferIntentCreate
     */
    id: string;
    /**
     * The datetime the transfer was created. This will be of the form `2006-01-02T15:04:05Z`.
     * @type {string}
     * @memberof TransferIntentCreate
     */
    created: string;
    /**
     * 
     * @type {TransferIntentStatus}
     * @memberof TransferIntentCreate
     */
    status: TransferIntentStatus;
    /**
     * The Plaid `account_id` corresponding to the end-user account that will be debited or credited. Returned only if `account_id` was set on intent creation.
     * @type {string}
     * @memberof TransferIntentCreate
     */
    account_id?: string | null;
    /**
     * Plaid’s unique identifier for the origination account for the intent. If not provided, the default account will be used.
     * @type {string}
     * @memberof TransferIntentCreate
     * @deprecated
     */
    origination_account_id: string;
    /**
     * The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited.
     * @type {string}
     * @memberof TransferIntentCreate
     */
    funding_account_id: string;
    /**
     * The amount of the transfer (decimal string with two digits of precision e.g. \"10.00\").
     * @type {string}
     * @memberof TransferIntentCreate
     */
    amount: string;
    /**
     * 
     * @type {TransferIntentCreateMode}
     * @memberof TransferIntentCreate
     */
    mode: TransferIntentCreateMode;
    /**
     * 
     * @type {TransferIntentCreateNetwork}
     * @memberof TransferIntentCreate
     */
    network?: TransferIntentCreateNetwork;
    /**
     * 
     * @type {ACHClass}
     * @memberof TransferIntentCreate
     */
    ach_class?: ACHClass;
    /**
     * 
     * @type {TransferUserInResponse}
     * @memberof TransferIntentCreate
     */
    user: TransferUserInResponse;
    /**
     * A description for the underlying transfer. Maximum of 8 characters.
     * @type {string}
     * @memberof TransferIntentCreate
     */
    description: string;
    /**
     * The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply: The JSON values must be Strings (no nested JSON objects allowed) Only ASCII characters may be used Maximum of 50 key/value pairs Maximum key length of 40 characters Maximum value length of 500 characters 
     * @type {{ [key: string]: string; }}
     * @memberof TransferIntentCreate
     */
    metadata?: { [key: string]: string; } | null;
    /**
     * The currency of the transfer amount, e.g. \"USD\"
     * @type {string}
     * @memberof TransferIntentCreate
     */
    iso_currency_code: string;
    /**
     * When `true`, the transfer requires a `GUARANTEED` decision by Plaid to proceed (Guarantee customers only).
     * @type {boolean}
     * @memberof TransferIntentCreate
     */
    require_guarantee?: boolean | null;
}
/**
 * The direction of the flow of transfer funds.  `PAYMENT`: Transfers funds from an end user\'s account to your business account.  `DISBURSEMENT`: Transfers funds from your business account to an end user\'s account.
 * @export
 * @enum {string}
 */
export enum TransferIntentCreateMode {
    Payment = 'PAYMENT',
    Disbursement = 'DISBURSEMENT'
}

/**
 * The network or rails used for the transfer. Defaults to `same-day-ach`.  For transfers submitted as either `ach` or `same-day-ach` the cutoff for same-day is 9:30 AM Pacific Time and the cutoff for next-day transfers is 5:30 PM Pacific Time. It is recommended to submit a transfer at least 15 minutes before the cutoff time in order to ensure that it will be processed before the cutoff. Any transfer that is indicated as `same-day-ach` and that misses the same-day cutoff, but is submitted in time for the next-day cutoff, will be sent over next-day rails and will not incur same-day charges. Note that both legs of the transfer will be downgraded if applicable.
 * @export
 * @enum {string}
 */
export enum TransferIntentCreateNetwork {
    Ach = 'ach',
    SameDayAch = 'same-day-ach'
}

/**
 * Defines the request schema for `/transfer/intent/create`
 * @export
 * @interface TransferIntentCreateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferIntentCreateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransferIntentCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransferIntentCreateRequest
     */
    secret?: string;
    /**
     * The Plaid `account_id` corresponding to the end-user account that will be debited or credited.
     * @type {string}
     * @memberof TransferIntentCreateRequest
     */
    account_id?: string | null;
    /**
     * The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited. Defaults to the account configured during onboarding.
     * @type {string}
     * @memberof TransferIntentCreateRequest
     */
    funding_account_id?: string | null;
    /**
     * 
     * @type {TransferIntentCreateMode}
     * @memberof TransferIntentCreateRequest
     */
    mode: TransferIntentCreateMode;
    /**
     * 
     * @type {TransferIntentCreateNetwork}
     * @memberof TransferIntentCreateRequest
     */
    network?: TransferIntentCreateNetwork;
    /**
     * The amount of the transfer (decimal string with two digits of precision e.g. \"10.00\").
     * @type {string}
     * @memberof TransferIntentCreateRequest
     */
    amount: string;
    /**
     * A description for the underlying transfer. Maximum of 8 characters.
     * @type {string}
     * @memberof TransferIntentCreateRequest
     */
    description: string;
    /**
     * 
     * @type {ACHClass}
     * @memberof TransferIntentCreateRequest
     */
    ach_class?: ACHClass;
    /**
     * Plaid’s unique identifier for the origination account for the intent. If not provided, the default account will be used.
     * @type {string}
     * @memberof TransferIntentCreateRequest
     * @deprecated
     */
    origination_account_id?: string | null;
    /**
     * 
     * @type {TransferUserInRequest}
     * @memberof TransferIntentCreateRequest
     */
    user: TransferUserInRequest;
    /**
     * The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply: The JSON values must be Strings (no nested JSON objects allowed) Only ASCII characters may be used Maximum of 50 key/value pairs Maximum key length of 40 characters Maximum value length of 500 characters 
     * @type {{ [key: string]: string; }}
     * @memberof TransferIntentCreateRequest
     */
    metadata?: { [key: string]: string; } | null;
    /**
     * The currency of the transfer amount, e.g. \"USD\"
     * @type {string}
     * @memberof TransferIntentCreateRequest
     */
    iso_currency_code?: string;
    /**
     * When `true`, the transfer requires a `GUARANTEED` decision by Plaid to proceed (Guarantee customers only).
     * @type {boolean}
     * @memberof TransferIntentCreateRequest
     */
    require_guarantee?: boolean | null;
}
/**
 * Defines the response schema for `/transfer/intent/create`
 * @export
 * @interface TransferIntentCreateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferIntentCreateResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {TransferIntentCreate}
     * @memberof TransferIntentCreateResponse
     */
    transfer_intent: TransferIntentCreate;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof TransferIntentCreateResponse
     */
    request_id: string;
}
/**
 * Represents a transfer intent within Transfer UI.
 * @export
 * @interface TransferIntentGet
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferIntentGet {
    [key: string]: object | unknown;

    /**
     * Plaid\'s unique identifier for a transfer intent object.
     * @type {string}
     * @memberof TransferIntentGet
     */
    id: string;
    /**
     * The datetime the transfer was created. This will be of the form `2006-01-02T15:04:05Z`.
     * @type {string}
     * @memberof TransferIntentGet
     */
    created: string;
    /**
     * 
     * @type {TransferIntentStatus}
     * @memberof TransferIntentGet
     */
    status: TransferIntentStatus;
    /**
     * Plaid\'s unique identifier for the transfer created through the UI. Returned only if the transfer was successfully created. Null value otherwise.
     * @type {string}
     * @memberof TransferIntentGet
     */
    transfer_id: string | null;
    /**
     * 
     * @type {TransferIntentGetFailureReason}
     * @memberof TransferIntentGet
     */
    failure_reason: TransferIntentGetFailureReason | null;
    /**
     * 
     * @type {TransferIntentAuthorizationDecision}
     * @memberof TransferIntentGet
     */
    authorization_decision: TransferIntentAuthorizationDecision | null;
    /**
     * 
     * @type {TransferAuthorizationDecisionRationale}
     * @memberof TransferIntentGet
     */
    authorization_decision_rationale: TransferAuthorizationDecisionRationale | null;
    /**
     * The Plaid `account_id` for the account that will be debited or credited. Returned only if `account_id` was set on intent creation.
     * @type {string}
     * @memberof TransferIntentGet
     */
    account_id?: string | null;
    /**
     * Plaid’s unique identifier for the origination account used for the transfer.
     * @type {string}
     * @memberof TransferIntentGet
     * @deprecated
     */
    origination_account_id: string;
    /**
     * The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited.
     * @type {string}
     * @memberof TransferIntentGet
     */
    funding_account_id: string;
    /**
     * The amount of the transfer (decimal string with two digits of precision e.g. \"10.00\").
     * @type {string}
     * @memberof TransferIntentGet
     */
    amount: string;
    /**
     * 
     * @type {TransferIntentCreateMode}
     * @memberof TransferIntentGet
     */
    mode: TransferIntentCreateMode;
    /**
     * 
     * @type {TransferIntentCreateNetwork}
     * @memberof TransferIntentGet
     */
    network?: TransferIntentCreateNetwork;
    /**
     * 
     * @type {ACHClass}
     * @memberof TransferIntentGet
     */
    ach_class?: ACHClass;
    /**
     * 
     * @type {TransferUserInResponse}
     * @memberof TransferIntentGet
     */
    user: TransferUserInResponse;
    /**
     * A description for the underlying transfer. Maximum of 8 characters.
     * @type {string}
     * @memberof TransferIntentGet
     */
    description: string;
    /**
     * The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply: The JSON values must be Strings (no nested JSON objects allowed) Only ASCII characters may be used Maximum of 50 key/value pairs Maximum key length of 40 characters Maximum value length of 500 characters 
     * @type {{ [key: string]: string; }}
     * @memberof TransferIntentGet
     */
    metadata?: { [key: string]: string; } | null;
    /**
     * The currency of the transfer amount, e.g. \"USD\"
     * @type {string}
     * @memberof TransferIntentGet
     */
    iso_currency_code: string;
    /**
     * When `true`, the transfer requires a `GUARANTEED` decision by Plaid to proceed (Guarantee customers only).
     * @type {boolean}
     * @memberof TransferIntentGet
     */
    require_guarantee?: boolean | null;
    /**
     * 
     * @type {TransferAuthorizationGuaranteeDecision}
     * @memberof TransferIntentGet
     */
    guarantee_decision: TransferAuthorizationGuaranteeDecision | null;
    /**
     * 
     * @type {TransferAuthorizationGuaranteeDecisionRationale}
     * @memberof TransferIntentGet
     */
    guarantee_decision_rationale: TransferAuthorizationGuaranteeDecisionRationale | null;
}
/**
 * The reason for a failed transfer intent. Returned only if the transfer intent status is `failed`. Null otherwise.
 * @export
 * @interface TransferIntentGetFailureReason
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferIntentGetFailureReason {
    [key: string]: object | unknown;

    /**
     * A broad categorization of the error.
     * @type {string}
     * @memberof TransferIntentGetFailureReason
     */
    error_type?: string;
    /**
     * A code representing the reason for a failed transfer intent (i.e., an API error or the authorization being declined).
     * @type {string}
     * @memberof TransferIntentGetFailureReason
     */
    error_code?: string;
    /**
     * A human-readable description of the code associated with a failed transfer intent.
     * @type {string}
     * @memberof TransferIntentGetFailureReason
     */
    error_message?: string;
}
/**
 * Defines the request schema for `/transfer/intent/get`
 * @export
 * @interface TransferIntentGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferIntentGetRequest {
    [key: string]: object | unknown;

    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransferIntentGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransferIntentGetRequest
     */
    secret?: string;
    /**
     * Plaid\'s unique identifier for a transfer intent object.
     * @type {string}
     * @memberof TransferIntentGetRequest
     */
    transfer_intent_id: string;
}
/**
 * Defines the response schema for `/transfer/intent/get`
 * @export
 * @interface TransferIntentGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferIntentGetResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {TransferIntentGet}
     * @memberof TransferIntentGetResponse
     */
    transfer_intent: TransferIntentGet;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof TransferIntentGetResponse
     */
    request_id: string;
}
/**
 * The status of the transfer intent.  `PENDING`: The transfer intent is pending. `SUCCEEDED`: The transfer intent was successfully created. `FAILED`: The transfer intent was unable to be created.
 * @export
 * @enum {string}
 */
export enum TransferIntentStatus {
    Pending = 'PENDING',
    Succeeded = 'SUCCEEDED',
    Failed = 'FAILED'
}

/**
 * Defines the request schema for `/transfer/list`
 * @export
 * @interface TransferListRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferListRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransferListRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransferListRequest
     */
    secret?: string;
    /**
     * The start datetime of transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
     * @type {string}
     * @memberof TransferListRequest
     */
    start_date?: string | null;
    /**
     * The end datetime of transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
     * @type {string}
     * @memberof TransferListRequest
     */
    end_date?: string | null;
    /**
     * The maximum number of transfers to return.
     * @type {number}
     * @memberof TransferListRequest
     */
    count?: number;
    /**
     * The number of transfers to skip before returning results.
     * @type {number}
     * @memberof TransferListRequest
     */
    offset?: number;
    /**
     * Filter transfers to only those originated through the specified origination account.
     * @type {string}
     * @memberof TransferListRequest
     * @deprecated
     */
    origination_account_id?: string | null;
    /**
     * Filter transfers to only those with the specified originator client.
     * @type {string}
     * @memberof TransferListRequest
     */
    originator_client_id?: string | null;
    /**
     * Filter transfers to only those with the specified `funding_account_id`.
     * @type {string}
     * @memberof TransferListRequest
     */
    funding_account_id?: string | null;
}
/**
 * Defines the response schema for `/transfer/list`
 * @export
 * @interface TransferListResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferListResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {Array<Transfer>}
     * @memberof TransferListResponse
     */
    transfers: Array<Transfer>;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof TransferListResponse
     */
    request_id: string;
}
/**
 * Defines the request schema for `/transfer/metrics/get`
 * @export
 * @interface TransferMetricsGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferMetricsGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransferMetricsGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransferMetricsGetRequest
     */
    secret?: string;
    /**
     * The Plaid client ID of the transfer originator. Should only be present if `client_id` is a third-party sender (TPS).
     * @type {string}
     * @memberof TransferMetricsGetRequest
     */
    originator_client_id?: string | null;
}
/**
 * Defines the response schema for `/transfer/metrics/get`
 * @export
 * @interface TransferMetricsGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferMetricsGetResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof TransferMetricsGetResponse
     */
    request_id: string;
    /**
     * Sum of dollar amount of debit transfers in last 24 hours (decimal string with two digits of precision e.g. \"10.00\").
     * @type {string}
     * @memberof TransferMetricsGetResponse
     */
    daily_debit_transfer_volume: string;
    /**
     * Sum of dollar amount of credit transfers in last 24 hours (decimal string with two digits of precision e.g. \"10.00\").
     * @type {string}
     * @memberof TransferMetricsGetResponse
     */
    daily_credit_transfer_volume: string;
    /**
     * Sum of dollar amount of credit and debit transfers in current calendar month (decimal string with two digits of precision e.g. \"10.00\").
     * @type {string}
     * @memberof TransferMetricsGetResponse
     */
    monthly_transfer_volume: string;
    /**
     * Sum of dollar amount of debit transfers in current calendar month (decimal string with two digits of precision e.g. \"10.00\").
     * @type {string}
     * @memberof TransferMetricsGetResponse
     */
    monthly_debit_transfer_volume: string;
    /**
     * Sum of dollar amount of credit transfers in current calendar month (decimal string with two digits of precision e.g. \"10.00\").
     * @type {string}
     * @memberof TransferMetricsGetResponse
     */
    monthly_credit_transfer_volume: string;
    /**
     * The currency of the dollar amount, e.g. \"USD\".
     * @type {string}
     * @memberof TransferMetricsGetResponse
     */
    iso_currency_code: string;
}
/**
 * Defines the request schema for `/transfer/migrate_account`
 * @export
 * @interface TransferMigrateAccountRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferMigrateAccountRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransferMigrateAccountRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransferMigrateAccountRequest
     */
    secret?: string;
    /**
     * The user\'s account number.
     * @type {string}
     * @memberof TransferMigrateAccountRequest
     */
    account_number: string;
    /**
     * The user\'s routing number.
     * @type {string}
     * @memberof TransferMigrateAccountRequest
     */
    routing_number: string;
    /**
     * The user\'s wire transfer routing number. This is the ABA number; for some institutions, this may differ from the ACH number used in `routing_number`.
     * @type {string}
     * @memberof TransferMigrateAccountRequest
     */
    wire_routing_number?: string;
    /**
     * The type of the bank account (`checking` or `savings`).
     * @type {string}
     * @memberof TransferMigrateAccountRequest
     */
    account_type: string;
}
/**
 * Defines the response schema for `/transfer/migrate_account`
 * @export
 * @interface TransferMigrateAccountResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferMigrateAccountResponse {
    [key: string]: object | unknown;

    /**
     * The Plaid `access_token` for the newly created Item.
     * @type {string}
     * @memberof TransferMigrateAccountResponse
     */
    access_token: string;
    /**
     * The Plaid `account_id` for the newly created Item.
     * @type {string}
     * @memberof TransferMigrateAccountResponse
     */
    account_id: string;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof TransferMigrateAccountResponse
     */
    request_id: string;
}
/**
 * The network or rails used for the transfer.  For transfers submitted as either `ach` or `same-day-ach` the cutoff for same-day is 9:30 AM Pacific Time and the cutoff for next-day transfers is 5:30 PM Pacific Time. It is recommended to submit a transfer at least 15 minutes before the cutoff time in order to ensure that it will be processed before the cutoff. Any transfer that is indicated as `same-day-ach` and that misses the same-day cutoff, but is submitted in time for the next-day cutoff, will be sent over next-day rails and will not incur same-day charges. Note that both legs of the transfer will be downgraded if applicable.
 * @export
 * @enum {string}
 */
export enum TransferNetwork {
    Ach = 'ach',
    SameDayAch = 'same-day-ach',
    Rtp = 'rtp'
}

/**
 * The originator\'s address.
 * @export
 * @interface TransferOriginatorAddress
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferOriginatorAddress {
    /**
     * 
     * @type {string}
     * @memberof TransferOriginatorAddress
     */
    city: string;
    /**
     * 
     * @type {string}
     * @memberof TransferOriginatorAddress
     */
    street: string;
    /**
     * 
     * @type {string}
     * @memberof TransferOriginatorAddress
     */
    region: string;
    /**
     * 
     * @type {string}
     * @memberof TransferOriginatorAddress
     */
    postal_code: string;
    /**
     * ISO-3166-1 alpha-2 country code standard.
     * @type {string}
     * @memberof TransferOriginatorAddress
     */
    country_code: string;
}
/**
 * Defines the request schema for `/transfer/originator/create`
 * @export
 * @interface TransferOriginatorCreateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferOriginatorCreateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransferOriginatorCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransferOriginatorCreateRequest
     */
    secret?: string;
    /**
     * The company name of the end customer being created. This will be displayed in public-facing surfaces, e.g. Plaid Dashboard.
     * @type {string}
     * @memberof TransferOriginatorCreateRequest
     */
    company_name: string;
}
/**
 * Defines the response schema for `/transfer/originator/create`
 * @export
 * @interface TransferOriginatorCreateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferOriginatorCreateResponse {
    [key: string]: object | unknown;

    /**
     * Client ID of the originator. This identifier will be used when creating transfers and should be stored associated with end user information.
     * @type {string}
     * @memberof TransferOriginatorCreateResponse
     */
    originator_client_id: string;
    /**
     * The company name of the end customer.
     * @type {string}
     * @memberof TransferOriginatorCreateResponse
     */
    company_name: string;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof TransferOriginatorCreateResponse
     */
    request_id: string;
}
/**
 * The diligence information for the originator.
 * @export
 * @interface TransferOriginatorDiligence
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferOriginatorDiligence {
    /**
     * The business name of the originator.
     * @type {string}
     * @memberof TransferOriginatorDiligence
     */
    dba: string;
    /**
     * The tax ID of the originator.
     * @type {string}
     * @memberof TransferOriginatorDiligence
     */
    tax_id: string;
    /**
     * 
     * @type {TransferCreditUsageConfiguration}
     * @memberof TransferOriginatorDiligence
     */
    credit_usage_configuration?: TransferCreditUsageConfiguration | null;
    /**
     * 
     * @type {TransferDebitUsageConfiguration}
     * @memberof TransferOriginatorDiligence
     */
    debit_usage_configuration?: TransferDebitUsageConfiguration | null;
    /**
     * 
     * @type {TransferOriginatorAddress}
     * @memberof TransferOriginatorDiligence
     */
    address: TransferOriginatorAddress;
    /**
     * The website of the originator.
     * @type {string}
     * @memberof TransferOriginatorDiligence
     */
    website: string;
    /**
     * The NAICS code of the originator.
     * @type {string}
     * @memberof TransferOriginatorDiligence
     */
    naics_code: string;
}
/**
 * Defines the request schema for `/transfer/originator/get`
 * @export
 * @interface TransferOriginatorGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferOriginatorGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransferOriginatorGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransferOriginatorGetRequest
     */
    secret?: string;
    /**
     * Client ID of the end customer (i.e. the originator).
     * @type {string}
     * @memberof TransferOriginatorGetRequest
     */
    originator_client_id: string;
}
/**
 * Defines the response schema for `/transfer/originator/get`
 * @export
 * @interface TransferOriginatorGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferOriginatorGetResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {DetailedOriginator}
     * @memberof TransferOriginatorGetResponse
     */
    originator: DetailedOriginator;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof TransferOriginatorGetResponse
     */
    request_id: string;
}
/**
 * Defines the request schema for `/transfer/originator/list`
 * @export
 * @interface TransferOriginatorListRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferOriginatorListRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransferOriginatorListRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransferOriginatorListRequest
     */
    secret?: string;
    /**
     * The maximum number of originators to return.
     * @type {number}
     * @memberof TransferOriginatorListRequest
     */
    count?: number | null;
    /**
     * The number of originators to skip before returning results.
     * @type {number}
     * @memberof TransferOriginatorListRequest
     */
    offset?: number | null;
}
/**
 * Defines the response schema for `/transfer/originator/list`
 * @export
 * @interface TransferOriginatorListResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferOriginatorListResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {Array<Originator>}
     * @memberof TransferOriginatorListResponse
     */
    originators: Array<Originator>;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof TransferOriginatorListResponse
     */
    request_id: string;
}
/**
 * Defines the request schema for `/transfer/questionnaire/create`
 * @export
 * @interface TransferQuestionnaireCreateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferQuestionnaireCreateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransferQuestionnaireCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransferQuestionnaireCreateRequest
     */
    secret?: string;
    /**
     * Client ID of the end customer.
     * @type {string}
     * @memberof TransferQuestionnaireCreateRequest
     */
    originator_client_id: string;
    /**
     * URL the end customer will be redirected to after completing questions in Plaid-hosted onboarding flow.
     * @type {string}
     * @memberof TransferQuestionnaireCreateRequest
     */
    redirect_uri: string;
}
/**
 * Defines the response schema for `/transfer/questionnaire/create`
 * @export
 * @interface TransferQuestionnaireCreateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferQuestionnaireCreateResponse {
    [key: string]: object | unknown;

    /**
     * Plaid-hosted onboarding URL that you will redirect the end customer to.
     * @type {string}
     * @memberof TransferQuestionnaireCreateResponse
     */
    onboarding_url: string;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof TransferQuestionnaireCreateResponse
     */
    request_id: string;
}
/**
 * Defines the request schema for `/transfer/recurring/cancel`
 * @export
 * @interface TransferRecurringCancelRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferRecurringCancelRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransferRecurringCancelRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransferRecurringCancelRequest
     */
    secret?: string;
    /**
     * Plaid’s unique identifier for a recurring transfer.
     * @type {string}
     * @memberof TransferRecurringCancelRequest
     */
    recurring_transfer_id: string;
}
/**
 * Defines the response schema for `/transfer/recurring/cancel`
 * @export
 * @interface TransferRecurringCancelResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferRecurringCancelResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof TransferRecurringCancelResponse
     */
    request_id: string;
}
/**
 * Defines the request schema for `/transfer/recurring/create`
 * @export
 * @interface TransferRecurringCreateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferRecurringCreateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransferRecurringCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransferRecurringCreateRequest
     */
    secret?: string;
    /**
     * The Plaid `access_token` for the account that will be debited or credited. Required if not using `payment_profile_token`.
     * @type {string}
     * @memberof TransferRecurringCreateRequest
     */
    access_token: string;
    /**
     * A random key provided by the client, per unique recurring transfer. Maximum of 50 characters.  The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create a recurring fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single recurring transfer is created.
     * @type {string}
     * @memberof TransferRecurringCreateRequest
     */
    idempotency_key: string;
    /**
     * The Plaid `account_id` corresponding to the end-user account that will be debited or credited. Returned only if `account_id` was set on intent creation.
     * @type {string}
     * @memberof TransferRecurringCreateRequest
     */
    account_id: string;
    /**
     * The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited. Defaults to the account configured during onboarding.
     * @type {string}
     * @memberof TransferRecurringCreateRequest
     */
    funding_account_id?: string | null;
    /**
     * 
     * @type {TransferType}
     * @memberof TransferRecurringCreateRequest
     */
    type: TransferType;
    /**
     * 
     * @type {TransferNetwork}
     * @memberof TransferRecurringCreateRequest
     */
    network: TransferNetwork;
    /**
     * 
     * @type {ACHClass}
     * @memberof TransferRecurringCreateRequest
     */
    ach_class?: ACHClass;
    /**
     * The amount of the transfer (decimal string with two digits of precision e.g. \"10.00\").
     * @type {string}
     * @memberof TransferRecurringCreateRequest
     */
    amount: string;
    /**
     * If the end user is initiating the specific transfer themselves via an interactive UI, this should be `true`; for automatic recurring payments where the end user is not actually initiating each individual transfer, it should be `false`.
     * @type {boolean}
     * @memberof TransferRecurringCreateRequest
     */
    user_present: boolean | null;
    /**
     * The currency of the transfer amount. The default value is \"USD\".
     * @type {string}
     * @memberof TransferRecurringCreateRequest
     * @deprecated
     */
    iso_currency_code?: string;
    /**
     * The description of the recurring transfer.
     * @type {string}
     * @memberof TransferRecurringCreateRequest
     */
    description: string;
    /**
     * Plaid’s unique identifier for a test clock. This field may only be used when using `sandbox` environment. If provided, the created `recurring_transfer` is associated with the `test_clock`. New originations are automatically generated when the associated `test_clock` advances.
     * @type {string}
     * @memberof TransferRecurringCreateRequest
     */
    test_clock_id?: string | null;
    /**
     * 
     * @type {TransferRecurringSchedule}
     * @memberof TransferRecurringCreateRequest
     */
    schedule: TransferRecurringSchedule;
    /**
     * 
     * @type {TransferUserInRequest}
     * @memberof TransferRecurringCreateRequest
     */
    user: TransferUserInRequest;
    /**
     * 
     * @type {TransferDevice}
     * @memberof TransferRecurringCreateRequest
     */
    device: TransferDevice;
}
/**
 * Defines the response schema for `/transfer/recurring/create`
 * @export
 * @interface TransferRecurringCreateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferRecurringCreateResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {RecurringTransferNullable}
     * @memberof TransferRecurringCreateResponse
     */
    recurring_transfer?: RecurringTransferNullable;
    /**
     * 
     * @type {TransferAuthorizationDecision}
     * @memberof TransferRecurringCreateResponse
     */
    decision: TransferAuthorizationDecision;
    /**
     * 
     * @type {TransferAuthorizationDecisionRationale}
     * @memberof TransferRecurringCreateResponse
     */
    decision_rationale?: TransferAuthorizationDecisionRationale | null;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof TransferRecurringCreateResponse
     */
    request_id: string;
}
/**
 * Defines the request schema for `/transfer/recurring/get`
 * @export
 * @interface TransferRecurringGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferRecurringGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransferRecurringGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransferRecurringGetRequest
     */
    secret?: string;
    /**
     * Plaid’s unique identifier for a recurring transfer.
     * @type {string}
     * @memberof TransferRecurringGetRequest
     */
    recurring_transfer_id: string;
}
/**
 * Defines the response schema for `/transfer/recurring/get`
 * @export
 * @interface TransferRecurringGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferRecurringGetResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {RecurringTransfer}
     * @memberof TransferRecurringGetResponse
     */
    recurring_transfer: RecurringTransfer;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof TransferRecurringGetResponse
     */
    request_id: string;
}
/**
 * Defines the request schema for `/transfer/recurring/list`
 * @export
 * @interface TransferRecurringListRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferRecurringListRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransferRecurringListRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransferRecurringListRequest
     */
    secret?: string;
    /**
     * The start datetime of recurring transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
     * @type {string}
     * @memberof TransferRecurringListRequest
     */
    start_time?: string | null;
    /**
     * The end datetime of recurring transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
     * @type {string}
     * @memberof TransferRecurringListRequest
     */
    end_time?: string | null;
    /**
     * The maximum number of recurring transfers to return.
     * @type {number}
     * @memberof TransferRecurringListRequest
     */
    count?: number;
    /**
     * The number of recurring transfers to skip before returning results.
     * @type {number}
     * @memberof TransferRecurringListRequest
     */
    offset?: number;
    /**
     * Filter recurring transfers to only those with the specified `funding_account_id`.
     * @type {string}
     * @memberof TransferRecurringListRequest
     */
    funding_account_id?: string | null;
}
/**
 * Defines the response schema for `/transfer/recurring/list`
 * @export
 * @interface TransferRecurringListResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferRecurringListResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {Array<RecurringTransfer>}
     * @memberof TransferRecurringListResponse
     */
    recurring_transfers: Array<RecurringTransfer>;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof TransferRecurringListResponse
     */
    request_id: string;
}
/**
 * The schedule that the recurring transfer will be executed on.
 * @export
 * @interface TransferRecurringSchedule
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferRecurringSchedule {
    /**
     * 
     * @type {TransferScheduleIntervalUnit}
     * @memberof TransferRecurringSchedule
     */
    interval_unit: TransferScheduleIntervalUnit;
    /**
     * The number of recurring `interval_units` between originations. The recurring interval(before holiday adjustment) is calculated by multiplying `interval_unit` and `interval_count`. For instance, to schedule a recurring transfer which originates once every two weeks, set `interval_unit` = `week` and `interval_count` = 2.
     * @type {number}
     * @memberof TransferRecurringSchedule
     */
    interval_count: number;
    /**
     * The day of the interval on which to schedule the transfer.  If the `interval_unit` is `week`, `interval_execution_day` should be an integer from 1 (Monday) to 5 (Friday).  If the `interval_unit` is `month`, `interval_execution_day` should be an integer indicating which day of the month to make the transfer on. Integers from 1 to 28 can be used to make a transfer on that day of the month. Negative integers from -1 to -5 can be used to make a transfer relative to the end of the month. To make a transfer on the last day of the month, use -1; to make the transfer on the second-to-last day, use -2, and so on.  The transfer will be originated on next available banking day if the designated day is a non banking day.
     * @type {number}
     * @memberof TransferRecurringSchedule
     */
    interval_execution_day: number;
    /**
     * A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). The recurring transfer will begin on the first `interval_execution_day` on or after the `start_date`.  If the first `interval_execution_day` on or after the start date is also the same day that `/transfer/recurring/create` was called, the bank *may* make the first payment on that day, but it is not guaranteed to do so.
     * @type {string}
     * @memberof TransferRecurringSchedule
     */
    start_date: string;
    /**
     * A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). The recurring transfer will end on the last `interval_execution_day` on or before the `end_date`. If the `interval_execution_day` between the start date and the end date (inclusive) is also the same day that `/transfer/recurring/create` was called, the bank *may* make a payment on that day, but it is not guaranteed to do so.
     * @type {string}
     * @memberof TransferRecurringSchedule
     */
    end_date?: string | null;
}
/**
 * The status of the recurring transfer.  `active`: The recurring transfer is currently active. `cancelled`: The recurring transfer was cancelled by the client or Plaid. `expired`: The recurring transfer has completed all originations according to its recurring schedule.
 * @export
 * @enum {string}
 */
export enum TransferRecurringStatus {
    Active = 'active',
    Cancelled = 'cancelled',
    Expired = 'expired'
}

/**
 * Represents a refund within the Transfers API.
 * @export
 * @interface TransferRefund
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferRefund {
    [key: string]: object | unknown;

    /**
     * Plaid’s unique identifier for a refund.
     * @type {string}
     * @memberof TransferRefund
     */
    id: string;
    /**
     * The ID of the transfer to refund.
     * @type {string}
     * @memberof TransferRefund
     */
    transfer_id: string;
    /**
     * The amount of the refund (decimal string with two digits of precision e.g. \"10.00\").
     * @type {string}
     * @memberof TransferRefund
     */
    amount: string;
    /**
     * 
     * @type {TransferRefundStatus}
     * @memberof TransferRefund
     */
    status: TransferRefundStatus;
    /**
     * The datetime when this refund was created. This will be of the form `2006-01-02T15:04:05Z`
     * @type {string}
     * @memberof TransferRefund
     */
    created: string;
}
/**
 * Defines the request schema for `/transfer/refund/cancel`
 * @export
 * @interface TransferRefundCancelRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferRefundCancelRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransferRefundCancelRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransferRefundCancelRequest
     */
    secret?: string;
    /**
     * Plaid’s unique identifier for a refund.
     * @type {string}
     * @memberof TransferRefundCancelRequest
     */
    refund_id: string;
}
/**
 * Defines the response schema for `/transfer/refund/cancel`
 * @export
 * @interface TransferRefundCancelResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferRefundCancelResponse {
    [key: string]: object | unknown;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof TransferRefundCancelResponse
     */
    request_id: string;
}
/**
 * Defines the request schema for `/transfer/refund/create`
 * @export
 * @interface TransferRefundCreateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferRefundCreateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransferRefundCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransferRefundCreateRequest
     */
    secret?: string;
    /**
     * The ID of the transfer to refund.
     * @type {string}
     * @memberof TransferRefundCreateRequest
     */
    transfer_id: string;
    /**
     * The amount of the refund (decimal string with two digits of precision e.g. \"10.00\").
     * @type {string}
     * @memberof TransferRefundCreateRequest
     */
    amount: string;
    /**
     * A random key provided by the client, per unique refund. Maximum of 50 characters.  The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create a refund fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single refund is created.
     * @type {string}
     * @memberof TransferRefundCreateRequest
     */
    idempotency_key: string;
}
/**
 * Defines the response schema for `/transfer/refund/create`
 * @export
 * @interface TransferRefundCreateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferRefundCreateResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {TransferRefund}
     * @memberof TransferRefundCreateResponse
     */
    refund: TransferRefund;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof TransferRefundCreateResponse
     */
    request_id: string;
}
/**
 * Defines the request schema for `/transfer/refund/get`
 * @export
 * @interface TransferRefundGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferRefundGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransferRefundGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransferRefundGetRequest
     */
    secret?: string;
    /**
     * Plaid’s unique identifier for a refund.
     * @type {string}
     * @memberof TransferRefundGetRequest
     */
    refund_id: string;
}
/**
 * Defines the response schema for `/transfer/refund/get`
 * @export
 * @interface TransferRefundGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferRefundGetResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {TransferRefund}
     * @memberof TransferRefundGetResponse
     */
    refund: TransferRefund;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof TransferRefundGetResponse
     */
    request_id: string;
}
/**
 * The status of the refund.  `pending`: A new refund was created; it is in the pending state. `posted`: The refund has been successfully submitted to the payment network. `cancelled`: The refund was cancelled by the client. `failed`: The refund failed or was returned.
 * @export
 * @enum {string}
 */
export enum TransferRefundStatus {
    Pending = 'pending',
    Posted = 'posted',
    Cancelled = 'cancelled',
    Failed = 'failed'
}

/**
 * A repayment is created automatically after one or more guaranteed transactions receive a return. If there are multiple eligible returns in a day, they are batched together into a single repayment.  Repayments are sent over ACH, with funds typically available on the next banking day.
 * @export
 * @interface TransferRepayment
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferRepayment {
    [key: string]: object | unknown;

    /**
     * Identifier of the repayment.
     * @type {string}
     * @memberof TransferRepayment
     */
    repayment_id: string;
    /**
     * The datetime when the repayment occurred, in RFC 3339 format.
     * @type {string}
     * @memberof TransferRepayment
     */
    created: string;
    /**
     * Decimal amount of the repayment as it appears on your account ledger.
     * @type {string}
     * @memberof TransferRepayment
     */
    amount: string;
    /**
     * The currency of the repayment, e.g. \"USD\".
     * @type {string}
     * @memberof TransferRepayment
     */
    iso_currency_code: string;
}
/**
 * Defines the request schema for `/transfer/repayment/list`
 * @export
 * @interface TransferRepaymentListRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferRepaymentListRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransferRepaymentListRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransferRepaymentListRequest
     */
    secret?: string;
    /**
     * The start datetime of repayments to return (RFC 3339 format).
     * @type {string}
     * @memberof TransferRepaymentListRequest
     */
    start_date?: string | null;
    /**
     * The end datetime of repayments to return (RFC 3339 format).
     * @type {string}
     * @memberof TransferRepaymentListRequest
     */
    end_date?: string | null;
    /**
     * The maximum number of repayments to return.
     * @type {number}
     * @memberof TransferRepaymentListRequest
     */
    count?: number | null;
    /**
     * The number of repayments to skip before returning results.
     * @type {number}
     * @memberof TransferRepaymentListRequest
     */
    offset?: number;
}
/**
 * Defines the response schema for `/transfer/repayments/list`
 * @export
 * @interface TransferRepaymentListResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferRepaymentListResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {Array<TransferRepayment>}
     * @memberof TransferRepaymentListResponse
     */
    repayments: Array<TransferRepayment>;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof TransferRepaymentListResponse
     */
    request_id: string;
}
/**
 * Represents a return on a Guaranteed ACH transfer that is included in the specified repayment.
 * @export
 * @interface TransferRepaymentReturn
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferRepaymentReturn {
    [key: string]: object | unknown;

    /**
     * The unique identifier of the guaranteed transfer that was returned.
     * @type {string}
     * @memberof TransferRepaymentReturn
     */
    transfer_id: string;
    /**
     * The unique identifier of the corresponding `returned` transfer event.
     * @type {number}
     * @memberof TransferRepaymentReturn
     */
    event_id: number;
    /**
     * The value of the returned transfer.
     * @type {string}
     * @memberof TransferRepaymentReturn
     */
    amount: string;
    /**
     * The currency of the repayment, e.g. \"USD\".
     * @type {string}
     * @memberof TransferRepaymentReturn
     */
    iso_currency_code: string;
}
/**
 * Defines the request schema for `/transfer/repayment/return/list`
 * @export
 * @interface TransferRepaymentReturnListRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferRepaymentReturnListRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransferRepaymentReturnListRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransferRepaymentReturnListRequest
     */
    secret?: string;
    /**
     * Identifier of the repayment to query.
     * @type {string}
     * @memberof TransferRepaymentReturnListRequest
     */
    repayment_id: string;
    /**
     * The maximum number of repayments to return.
     * @type {number}
     * @memberof TransferRepaymentReturnListRequest
     */
    count?: number | null;
    /**
     * The number of repayments to skip before returning results.
     * @type {number}
     * @memberof TransferRepaymentReturnListRequest
     */
    offset?: number;
}
/**
 * Defines the response schema for `/transfer/repayments/return/list`
 * @export
 * @interface TransferRepaymentReturnListResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferRepaymentReturnListResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {Array<TransferRepaymentReturn>}
     * @memberof TransferRepaymentReturnListResponse
     */
    repayment_returns: Array<TransferRepaymentReturn>;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof TransferRepaymentReturnListResponse
     */
    request_id: string;
}
/**
 * The unit of the recurring interval.
 * @export
 * @enum {string}
 */
export enum TransferScheduleIntervalUnit {
    Week = 'week',
    Month = 'month'
}

/**
 * The status of the transfer.  `pending`: A new transfer was created; it is in the pending state. `posted`: The transfer has been successfully submitted to the payment network. `settled`: Credits are available to be withdrawn or debits have been deducted from the Plaid linked account. `cancelled`: The transfer was cancelled by the client. `failed`: The transfer failed, no funds were moved. `returned`: A posted transfer was returned.
 * @export
 * @enum {string}
 */
export enum TransferStatus {
    Pending = 'pending',
    Posted = 'posted',
    Settled = 'settled',
    Cancelled = 'cancelled',
    Failed = 'failed',
    Returned = 'returned'
}

/**
 * Describes a sweep of funds to / from the sweep account.  A sweep is associated with many sweep events (events of type `swept` or `return_swept`) which can be retrieved by invoking the `/transfer/event/list` endpoint with the corresponding `sweep_id`.  `swept` events occur when the transfer amount is credited or debited from your sweep account, depending on the `type` of the transfer. `return_swept` events occur when a transfer is returned and Plaid undoes the credit or debit.  The total sum of the `swept` and `return_swept` events is equal to the `amount` of the sweep Plaid creates and matches the amount of the entry on your sweep account ledger.
 * @export
 * @interface TransferSweep
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferSweep {
    [key: string]: object | unknown;

    /**
     * Identifier of the sweep.
     * @type {string}
     * @memberof TransferSweep
     */
    id: string;
    /**
     * The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited.
     * @type {string}
     * @memberof TransferSweep
     */
    funding_account_id: string;
    /**
     * The datetime when the sweep occurred, in RFC 3339 format.
     * @type {string}
     * @memberof TransferSweep
     */
    created: string;
    /**
     * Signed decimal amount of the sweep as it appears on your sweep account ledger (e.g. \"-10.00\")  If amount is not present, the sweep was net-settled to zero and outstanding debits and credits between the sweep account and Plaid are balanced.
     * @type {string}
     * @memberof TransferSweep
     */
    amount: string;
    /**
     * The currency of the sweep, e.g. \"USD\".
     * @type {string}
     * @memberof TransferSweep
     */
    iso_currency_code: string;
    /**
     * The date when the sweep settled, in the YYYY-MM-DD format.
     * @type {string}
     * @memberof TransferSweep
     */
    settled: string | null;
}
/**
 * Defines the request schema for `/transfer/sweep/get`
 * @export
 * @interface TransferSweepGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferSweepGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransferSweepGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransferSweepGetRequest
     */
    secret?: string;
    /**
     * Plaid\'s unique identifier for the sweep (UUID) or a shortened form consisting of the first 8 characters of the identifier (8-digit hexadecimal string).
     * @type {string}
     * @memberof TransferSweepGetRequest
     */
    sweep_id: string;
}
/**
 * Defines the response schema for `/transfer/sweep/get`
 * @export
 * @interface TransferSweepGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferSweepGetResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {TransferSweep}
     * @memberof TransferSweepGetResponse
     */
    sweep: TransferSweep;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof TransferSweepGetResponse
     */
    request_id: string;
}
/**
 * Defines the request schema for `/transfer/sweep/list`
 * @export
 * @interface TransferSweepListRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferSweepListRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransferSweepListRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransferSweepListRequest
     */
    secret?: string;
    /**
     * The start datetime of sweeps to return (RFC 3339 format).
     * @type {string}
     * @memberof TransferSweepListRequest
     */
    start_date?: string | null;
    /**
     * The end datetime of sweeps to return (RFC 3339 format).
     * @type {string}
     * @memberof TransferSweepListRequest
     */
    end_date?: string | null;
    /**
     * The maximum number of sweeps to return.
     * @type {number}
     * @memberof TransferSweepListRequest
     */
    count?: number | null;
    /**
     * The number of sweeps to skip before returning results.
     * @type {number}
     * @memberof TransferSweepListRequest
     */
    offset?: number;
    /**
     * Filter sweeps to only those with the specified amount.
     * @type {string}
     * @memberof TransferSweepListRequest
     */
    amount?: string | null;
    /**
     * Filter sweeps to only those with the specified originator client.
     * @type {string}
     * @memberof TransferSweepListRequest
     */
    originator_client_id?: string | null;
    /**
     * Filter sweeps to only those with the specified `funding_account_id`.
     * @type {string}
     * @memberof TransferSweepListRequest
     */
    funding_account_id?: string | null;
}
/**
 * Defines the response schema for `/transfer/sweep/list`
 * @export
 * @interface TransferSweepListResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferSweepListResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {Array<TransferSweep>}
     * @memberof TransferSweepListResponse
     */
    sweeps: Array<TransferSweep>;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof TransferSweepListResponse
     */
    request_id: string;
}
/**
 * The status of the sweep for the transfer.  `unswept`: The transfer hasn\'t been swept yet. `swept`: The transfer was swept to the sweep account. `swept_settled`: Credits are available to be withdrawn or debits have been deducted from the customer’s business checking account. `return_swept`: The transfer was returned, funds were pulled back or pushed back to the sweep account. `null`: The transfer will never be swept (e.g. if the transfer is cancelled or returned before being swept)
 * @export
 * @enum {string}
 */
export enum TransferSweepStatus {
    Null = 'null',
    Unswept = 'unswept',
    Swept = 'swept',
    SweptSettled = 'swept_settled',
    ReturnSwept = 'return_swept'
}

/**
 * Defines the test clock for a transfer.
 * @export
 * @interface TransferTestClock
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferTestClock {
    [key: string]: object | unknown;

    /**
     * Plaid’s unique identifier for a test clock.
     * @type {string}
     * @memberof TransferTestClock
     */
    test_clock_id: string;
    /**
     * The virtual timestamp on the test clock. This will be of the form `2006-01-02T15:04:05Z`.
     * @type {string}
     * @memberof TransferTestClock
     */
    virtual_time: string;
}
/**
 * The type of transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into the origination account; a `credit` indicates a transfer of money out of the origination account.
 * @export
 * @enum {string}
 */
export enum TransferType {
    Debit = 'debit',
    Credit = 'credit'
}

/**
 * The address associated with the account holder. Providing this data will improve the likelihood that Plaid will be able to guarantee the transfer, if applicable.
 * @export
 * @interface TransferUserAddressInRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferUserAddressInRequest {
    /**
     * The street number and name (i.e., \"100 Market St.\").
     * @type {string}
     * @memberof TransferUserAddressInRequest
     */
    street?: string;
    /**
     * Ex. \"San Francisco\"
     * @type {string}
     * @memberof TransferUserAddressInRequest
     */
    city?: string;
    /**
     * The state or province (e.g., \"CA\").
     * @type {string}
     * @memberof TransferUserAddressInRequest
     */
    region?: string;
    /**
     * The postal code (e.g., \"94103\").
     * @type {string}
     * @memberof TransferUserAddressInRequest
     */
    postal_code?: string;
    /**
     * A two-letter country code (e.g., \"US\").
     * @type {string}
     * @memberof TransferUserAddressInRequest
     */
    country?: string;
}
/**
 * The address associated with the account holder.
 * @export
 * @interface TransferUserAddressInResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferUserAddressInResponse {
    [key: string]: object | unknown;

    /**
     * The street number and name (i.e., \"100 Market St.\").
     * @type {string}
     * @memberof TransferUserAddressInResponse
     */
    street: string | null;
    /**
     * Ex. \"San Francisco\"
     * @type {string}
     * @memberof TransferUserAddressInResponse
     */
    city: string | null;
    /**
     * The state or province (e.g., \"CA\").
     * @type {string}
     * @memberof TransferUserAddressInResponse
     */
    region: string | null;
    /**
     * The postal code (e.g., \"94103\").
     * @type {string}
     * @memberof TransferUserAddressInResponse
     */
    postal_code: string | null;
    /**
     * A two-letter country code (e.g., \"US\").
     * @type {string}
     * @memberof TransferUserAddressInResponse
     */
    country: string | null;
}
/**
 * The legal name and other information for the account holder.
 * @export
 * @interface TransferUserInRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferUserInRequest {
    /**
     * The user\'s legal name.
     * @type {string}
     * @memberof TransferUserInRequest
     */
    legal_name: string;
    /**
     * The user\'s phone number.
     * @type {string}
     * @memberof TransferUserInRequest
     */
    phone_number?: string;
    /**
     * The user\'s email address.
     * @type {string}
     * @memberof TransferUserInRequest
     */
    email_address?: string;
    /**
     * 
     * @type {TransferUserAddressInRequest}
     * @memberof TransferUserInRequest
     */
    address?: TransferUserAddressInRequest;
}
/**
 * The legal name and other information for the account holder.
 * @export
 * @interface TransferUserInRequestDeprecated
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferUserInRequestDeprecated {
    /**
     * The user\'s legal name.
     * @type {string}
     * @memberof TransferUserInRequestDeprecated
     */
    legal_name?: string;
    /**
     * The user\'s phone number.
     * @type {string}
     * @memberof TransferUserInRequestDeprecated
     */
    phone_number?: string;
    /**
     * The user\'s email address.
     * @type {string}
     * @memberof TransferUserInRequestDeprecated
     */
    email_address?: string;
    /**
     * 
     * @type {TransferUserAddressInRequest}
     * @memberof TransferUserInRequestDeprecated
     */
    address?: TransferUserAddressInRequest;
}
/**
 * The legal name and other information for the account holder.
 * @export
 * @interface TransferUserInResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface TransferUserInResponse {
    [key: string]: object | unknown;

    /**
     * The user\'s legal name.
     * @type {string}
     * @memberof TransferUserInResponse
     */
    legal_name: string;
    /**
     * The user\'s phone number.
     * @type {string}
     * @memberof TransferUserInResponse
     */
    phone_number: string | null;
    /**
     * The user\'s email address.
     * @type {string}
     * @memberof TransferUserInResponse
     */
    email_address: string | null;
    /**
     * 
     * @type {TransferUserAddressInResponse}
     * @memberof TransferUserInResponse
     */
    address: TransferUserAddressInResponse | null;
}
/**
 * Search terms for editing an entity watchlist screening
 * @export
 * @interface UpdateEntityScreeningRequestSearchTerms
 */
// Edited by Plaid, line 9. any to unknown
export interface UpdateEntityScreeningRequestSearchTerms {
    /**
     * ID of the associated entity program.
     * @type {string}
     * @memberof UpdateEntityScreeningRequestSearchTerms
     */
    entity_watchlist_program_id: string;
    /**
     * The name of the organization being screened.
     * @type {string}
     * @memberof UpdateEntityScreeningRequestSearchTerms
     */
    legal_name?: string;
    /**
     * The numeric or alphanumeric identifier associated with this document.
     * @type {string}
     * @memberof UpdateEntityScreeningRequestSearchTerms
     */
    document_number?: string;
    /**
     * A valid email address.
     * @type {string}
     * @memberof UpdateEntityScreeningRequestSearchTerms
     */
    email_address?: string;
    /**
     * Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form.
     * @type {string}
     * @memberof UpdateEntityScreeningRequestSearchTerms
     */
    country?: string;
    /**
     * A phone number in E.164 format.
     * @type {string}
     * @memberof UpdateEntityScreeningRequestSearchTerms
     */
    phone_number?: string;
    /**
     * An \'http\' or \'https\' URL (must begin with either of those).
     * @type {string}
     * @memberof UpdateEntityScreeningRequestSearchTerms
     */
    url?: string;
}
/**
 * Search terms for editing an individual watchlist screening
 * @export
 * @interface UpdateIndividualScreeningRequestSearchTerms
 */
// Edited by Plaid, line 9. any to unknown
export interface UpdateIndividualScreeningRequestSearchTerms {
    /**
     * ID of the associated program.
     * @type {string}
     * @memberof UpdateIndividualScreeningRequestSearchTerms
     */
    watchlist_program_id?: string;
    /**
     * The legal name of the individual being screened.
     * @type {string}
     * @memberof UpdateIndividualScreeningRequestSearchTerms
     */
    legal_name?: string;
    /**
     * A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
     * @type {string}
     * @memberof UpdateIndividualScreeningRequestSearchTerms
     */
    date_of_birth?: string;
    /**
     * The numeric or alphanumeric identifier associated with this document.
     * @type {string}
     * @memberof UpdateIndividualScreeningRequestSearchTerms
     */
    document_number?: string;
    /**
     * Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form.
     * @type {string}
     * @memberof UpdateIndividualScreeningRequestSearchTerms
     */
    country?: string;
}
/**
 * Home address for the user.
 * @export
 * @interface UserAddress
 */
// Edited by Plaid, line 9. any to unknown
export interface UserAddress {
    [key: string]: object | unknown;

    /**
     * The primary street portion of an address. If the user has submitted their address, this field will always be filled.
     * @type {string}
     * @memberof UserAddress
     */
    street: string;
    /**
     * Extra street information, like an apartment or suite number.
     * @type {string}
     * @memberof UserAddress
     */
    street2?: string | null;
    /**
     * City from the end user\'s address
     * @type {string}
     * @memberof UserAddress
     */
    city: string;
    /**
     * An ISO 3166-2 subdivision code. Related terms would be \"state\", \"province\", \"prefecture\", \"zone\", \"subdivision\", etc.
     * @type {string}
     * @memberof UserAddress
     */
    region: string;
    /**
     * The postal code for the associated address. Between 2 and 10 alphanumeric characters. For US-based addresses this must be 5 numeric digits.
     * @type {string}
     * @memberof UserAddress
     */
    postal_code: string;
    /**
     * Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form.
     * @type {string}
     * @memberof UserAddress
     */
    country: string;
}
/**
 * UserCreateRequest defines the request schema for `/user/create`
 * @export
 * @interface UserCreateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface UserCreateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof UserCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof UserCreateRequest
     */
    secret?: string;
    /**
     * A unique ID representing the end user. Maximum of 128 characters. Typically this will be a user ID number from your application. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`.
     * @type {string}
     * @memberof UserCreateRequest
     */
    client_user_id: string;
}
/**
 * UserCreateResponse defines the response schema for `/user/create`
 * @export
 * @interface UserCreateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface UserCreateResponse {
    [key: string]: object | unknown;

    /**
     * The user token associated with the User data is being requested for.
     * @type {string}
     * @memberof UserCreateResponse
     */
    user_token: string;
    /**
     * The Plaid `user_id` of the User associated with this webhook, warning, or error.
     * @type {string}
     * @memberof UserCreateResponse
     */
    user_id: string;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof UserCreateResponse
     */
    request_id: string;
}
/**
 * Custom test accounts are configured with a JSON configuration object formulated according to the schema below. All top level fields are optional. Sending an empty object as a configuration will result in an account configured with random balances and transaction history.
 * @export
 * @interface UserCustomPassword
 */
// Edited by Plaid, line 9. any to unknown
export interface UserCustomPassword {
    [key: string]: object | unknown;

    /**
     * The version of the password schema to use, possible values are 1 or 2. The default value is 2. You should only specify 1 if you know it is necessary for your test suite.
     * @type {string}
     * @memberof UserCustomPassword
     */
    version?: string | null;
    /**
     * A seed, in the form of a string, that will be used to randomly generate account and transaction data, if this data is not specified using the `override_accounts` argument. If no seed is specified, the randomly generated data will be different each time.  Note that transactions data is generated relative to the Item\'s creation date. Different Items created on different dates with the same seed for transactions data will have different dates for the transactions. The number of days between each transaction and the Item creation will remain constant. For example, an Item created on December 15 might show a transaction on December 14. An Item created on December 20, using the same seed, would show that same transaction occurring on December 19.
     * @type {string}
     * @memberof UserCustomPassword
     */
    seed: string;
    /**
     * An array of account overrides to configure the accounts for the Item. By default, if no override is specified, transactions and account data will be randomly generated based on the account type and subtype, and other products will have fixed or empty data.
     * @type {Array<OverrideAccounts>}
     * @memberof UserCustomPassword
     */
    override_accounts: Array<OverrideAccounts>;
    /**
     * 
     * @type {MFA}
     * @memberof UserCustomPassword
     */
    mfa: MFA;
    /**
     * You may trigger a reCAPTCHA in Plaid Link in the Sandbox environment by using the recaptcha field. Possible values are `good` or `bad`. A value of `good` will result in successful Item creation and `bad` will result in a `RECAPTCHA_BAD` error to simulate a failed reCAPTCHA. Both values require the reCAPTCHA to be manually solved within Plaid Link.
     * @type {string}
     * @memberof UserCustomPassword
     */
    recaptcha: string;
    /**
     * An error code to force on Item creation. Possible values are:  `\"INSTITUTION_NOT_RESPONDING\"` `\"INSTITUTION_NO_LONGER_SUPPORTED\"` `\"INVALID_CREDENTIALS\"` `\"INVALID_MFA\"` `\"ITEM_LOCKED\"` `\"ITEM_LOGIN_REQUIRED\"` `\"ITEM_NOT_SUPPORTED\"` `\"INVALID_LINK_TOKEN\"` `\"MFA_NOT_SUPPORTED\"` `\"NO_ACCOUNTS\"` `\"PLAID_ERROR\"` `\"USER_INPUT_TIMEOUT\"` `\"USER_SETUP_REQUIRED\"`
     * @type {string}
     * @memberof UserCustomPassword
     */
    force_error: string;
}
/**
 * ID number submitted by the user, currently used only for the Identity Verification product. If the user has not submitted this data yet, this field will be `null`. Otherwise, both fields are guaranteed to be filled.
 * @export
 * @interface UserIDNumber
 */
// Edited by Plaid, line 9. any to unknown
export interface UserIDNumber {
    [key: string]: object | unknown;

    /**
     * Value of identity document value typed in by user. Alpha-numeric, with all formatting characters stripped.
     * @type {string}
     * @memberof UserIDNumber
     */
    value: string;
    /**
     * 
     * @type {IDNumberType}
     * @memberof UserIDNumber
     */
    type: IDNumberType;
}
/**
 * The `USER_PERMISSION_REVOKED` webhook may be fired when an end user has used either the [my.plaid.com portal](https://my.plaid.com) or the financial institution’s OAuth consent portal to revoke the permission that they previously granted to access an Item. This webhook is not guaranteed to always be fired upon consent revocation, since some institutions’ consent portals do not trigger this webhook. Once access to an Item has been revoked, it cannot be restored. If the user subsequently returns to your application, a new Item must be created for the user.
 * @export
 * @interface UserPermissionRevokedWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface UserPermissionRevokedWebhook {
    [key: string]: object | unknown;

    /**
     * `ITEM`
     * @type {string}
     * @memberof UserPermissionRevokedWebhook
     */
    webhook_type: string;
    /**
     * `USER_PERMISSION_REVOKED`
     * @type {string}
     * @memberof UserPermissionRevokedWebhook
     */
    webhook_code: string;
    /**
     * The `item_id` of the Item associated with this webhook, warning, or error
     * @type {string}
     * @memberof UserPermissionRevokedWebhook
     */
    item_id: string;
    /**
     * 
     * @type {PlaidError}
     * @memberof UserPermissionRevokedWebhook
     */
    error?: PlaidError | null;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof UserPermissionRevokedWebhook
     */
    environment: WebhookEnvironmentValues;
}
/**
 * The income category for a specified income source
 * @export
 * @enum {string}
 */
export enum UserStatedIncomeSourceCategory {
    Other = 'OTHER',
    Salary = 'SALARY',
    Unemployment = 'UNEMPLOYMENT',
    Cash = 'CASH',
    GigEconomy = 'GIG_ECONOMY',
    Rental = 'RENTAL',
    ChildSupport = 'CHILD_SUPPORT',
    Military = 'MILITARY',
    Retirement = 'RETIREMENT',
    LongTermDisability = 'LONG_TERM_DISABILITY',
    BankInterest = 'BANK_INTEREST'
}

/**
 * The pay frequency of a specified income source
 * @export
 * @enum {string}
 */
export enum UserStatedIncomeSourceFrequency {
    Unknown = 'UNKNOWN',
    Weekly = 'WEEKLY',
    Biweekly = 'BIWEEKLY',
    SemiMonthly = 'SEMI_MONTHLY',
    Monthly = 'MONTHLY'
}

/**
 * The pay type - `GROSS`, `NET`, or `UNKNOWN` for a specified income source
 * @export
 * @enum {string}
 */
export enum UserStatedIncomeSourcePayType {
    Unknown = 'UNKNOWN',
    Gross = 'GROSS',
    Net = 'NET'
}

/**
 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
 * @export
 * @interface ValidationSource
 */
// Edited by Plaid, line 9. any to unknown
export interface ValidationSource {
    [key: string]: object | unknown;

    /**
     * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
     * @type {string}
     * @memberof ValidationSource
     */
    ValidationSourceName: string | null;
    /**
     * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
     * @type {string}
     * @memberof ValidationSource
     */
    ValidationSourceReferenceIdentifier: string | null;
}
/**
 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
 * @export
 * @interface ValidationSources
 */
// Edited by Plaid, line 9. any to unknown
export interface ValidationSources {
    [key: string]: object | unknown;

    /**
     * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
     * @type {Array<ValidationSource>}
     * @memberof ValidationSources
     */
    VALIDATION_SOURCE: Array<ValidationSource>;
}
/**
 * Fired when an Item was not verified via automated micro-deposits after seven days since the automated micro-deposit was made.
 * @export
 * @interface VerificationExpiredWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface VerificationExpiredWebhook {
    [key: string]: object | unknown;

    /**
     * `AUTH`
     * @type {string}
     * @memberof VerificationExpiredWebhook
     */
    webhook_type: string;
    /**
     * `VERIFICATION_EXPIRED`
     * @type {string}
     * @memberof VerificationExpiredWebhook
     */
    webhook_code: string;
    /**
     * The `item_id` of the Item associated with this webhook, warning, or error
     * @type {string}
     * @memberof VerificationExpiredWebhook
     */
    item_id: string;
    /**
     * The `account_id` of the account associated with the webhook
     * @type {string}
     * @memberof VerificationExpiredWebhook
     */
    account_id: string;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof VerificationExpiredWebhook
     */
    environment: WebhookEnvironmentValues;
}
/**
 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
 * @export
 * @interface VerificationOfAsset
 */
// Edited by Plaid, line 9. any to unknown
export interface VerificationOfAsset {
    [key: string]: object | unknown;

    /**
     * 
     * @type {ReportingInformation}
     * @memberof VerificationOfAsset
     */
    REPORTING_INFORMATION: ReportingInformation;
    /**
     * 
     * @type {ServiceProductFulfillment}
     * @memberof VerificationOfAsset
     */
    SERVICE_PRODUCT_FULFILLMENT: ServiceProductFulfillment;
    /**
     * 
     * @type {VerificationOfAssetResponse}
     * @memberof VerificationOfAsset
     */
    VERIFICATION_OF_ASSET_RESPONSE: VerificationOfAssetResponse;
}
/**
 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
 * @export
 * @interface VerificationOfAssetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface VerificationOfAssetResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {Assets}
     * @memberof VerificationOfAssetResponse
     */
    ASSETS: Assets;
}
/**
 * The verification refresh status. One of the following:  `\"VERIFICATION_REFRESH_STATUS_USER_PRESENCE_REQUIRED\"` User presence is required to refresh an income verification. `\"VERIFICATION_REFRESH_SUCCESSFUL\"` The income verification refresh was successful. `\"VERIFICATION_REFRESH_NOT_FOUND\"` No new data was found after the income verification refresh.
 * @export
 * @enum {string}
 */
export enum VerificationRefreshStatus {
    StatusUserPresenceRequired = 'VERIFICATION_REFRESH_STATUS_USER_PRESENCE_REQUIRED',
    Successful = 'VERIFICATION_REFRESH_SUCCESSFUL',
    NotFound = 'VERIFICATION_REFRESH_NOT_FOUND'
}

/**
 * The verification status. One of the following:  `\"VERIFIED\"`: The information was successfully verified.  `\"UNVERIFIED\"`: The verification has not yet been performed.  `\"NEEDS_INFO\"`: The verification was attempted but could not be completed due to missing information.  \"`UNABLE_TO_VERIFY`\": The verification was performed and the information could not be verified.  `\"UNKNOWN\"`: The verification status is unknown.
 * @export
 * @enum {string}
 */
export enum VerificationStatus {
    Verified = 'VERIFIED',
    Unverified = 'UNVERIFIED',
    NeedsInfo = 'NEEDS_INFO',
    UnableToVerify = 'UNABLE_TO_VERIFY',
    Unknown = 'UNKNOWN'
}

/**
 * W2 is an object that represents income data taken from a W2 tax document.
 * @export
 * @interface W2
 */
// Edited by Plaid, line 9. any to unknown
export interface W2 {
    [key: string]: object | unknown;

    /**
     * 
     * @type {PaystubEmployer}
     * @memberof W2
     */
    employer?: PaystubEmployer;
    /**
     * 
     * @type {Employee}
     * @memberof W2
     */
    employee?: Employee;
    /**
     * The tax year of the W2 document.
     * @type {string}
     * @memberof W2
     */
    tax_year?: string | null;
    /**
     * An employee identification number or EIN.
     * @type {string}
     * @memberof W2
     */
    employer_id_number?: string | null;
    /**
     * Wages from tips and other compensation.
     * @type {string}
     * @memberof W2
     */
    wages_tips_other_comp?: string | null;
    /**
     * Federal income tax withheld for the tax year.
     * @type {string}
     * @memberof W2
     */
    federal_income_tax_withheld?: string | null;
    /**
     * Wages from social security.
     * @type {string}
     * @memberof W2
     */
    social_security_wages?: string | null;
    /**
     * Social security tax withheld for the tax year.
     * @type {string}
     * @memberof W2
     */
    social_security_tax_withheld?: string | null;
    /**
     * Wages and tips from medicare.
     * @type {string}
     * @memberof W2
     */
    medicare_wages_and_tips?: string | null;
    /**
     * Medicare tax withheld for the tax year.
     * @type {string}
     * @memberof W2
     */
    medicare_tax_withheld?: string | null;
    /**
     * Tips from social security.
     * @type {string}
     * @memberof W2
     */
    social_security_tips?: string | null;
    /**
     * Allocated tips.
     * @type {string}
     * @memberof W2
     */
    allocated_tips?: string | null;
    /**
     * Contents from box 9 on the W2.
     * @type {string}
     * @memberof W2
     */
    box_9?: string | null;
    /**
     * Dependent care benefits.
     * @type {string}
     * @memberof W2
     */
    dependent_care_benefits?: string | null;
    /**
     * Nonqualified plans.
     * @type {string}
     * @memberof W2
     */
    nonqualified_plans?: string | null;
    /**
     * 
     * @type {Array<W2Box12>}
     * @memberof W2
     */
    box_12?: Array<W2Box12>;
    /**
     * Statutory employee.
     * @type {string}
     * @memberof W2
     */
    statutory_employee?: string | null;
    /**
     * Retirement plan.
     * @type {string}
     * @memberof W2
     */
    retirement_plan?: string | null;
    /**
     * Third party sick pay.
     * @type {string}
     * @memberof W2
     */
    third_party_sick_pay?: string | null;
    /**
     * Other.
     * @type {string}
     * @memberof W2
     */
    other?: string | null;
    /**
     * 
     * @type {Array<W2StateAndLocalWages>}
     * @memberof W2
     */
    state_and_local_wages?: Array<W2StateAndLocalWages>;
}
/**
 * Data on the W2 Box 12
 * @export
 * @interface W2Box12
 */
// Edited by Plaid, line 9. any to unknown
export interface W2Box12 {
    [key: string]: object | unknown;

    /**
     * W2 Box 12 code.
     * @type {string}
     * @memberof W2Box12
     */
    code?: string | null;
    /**
     * W2 Box 12 amount.
     * @type {string}
     * @memberof W2Box12
     */
    amount?: string | null;
}
/**
 * W2 state and local wages
 * @export
 * @interface W2StateAndLocalWages
 */
// Edited by Plaid, line 9. any to unknown
export interface W2StateAndLocalWages {
    [key: string]: object | unknown;

    /**
     * State associated with the wage.
     * @type {string}
     * @memberof W2StateAndLocalWages
     */
    state?: string | null;
    /**
     * State identification number of the employer.
     * @type {string}
     * @memberof W2StateAndLocalWages
     */
    employer_state_id_number?: string | null;
    /**
     * Wages and tips from the specified state.
     * @type {string}
     * @memberof W2StateAndLocalWages
     */
    state_wages_tips?: string | null;
    /**
     * Income tax from the specified state.
     * @type {string}
     * @memberof W2StateAndLocalWages
     */
    state_income_tax?: string | null;
    /**
     * Wages and tips from the locality.
     * @type {string}
     * @memberof W2StateAndLocalWages
     */
    local_wages_tips?: string | null;
    /**
     * Income tax from the locality.
     * @type {string}
     * @memberof W2StateAndLocalWages
     */
    local_income_tax?: string | null;
    /**
     * Name of the locality.
     * @type {string}
     * @memberof W2StateAndLocalWages
     */
    locality_name?: string | null;
}
/**
 * An object representing the e-wallet
 * @export
 * @interface Wallet
 */
// Edited by Plaid, line 9. any to unknown
export interface Wallet {
    [key: string]: object | unknown;

    /**
     * A unique ID identifying the e-wallet
     * @type {string}
     * @memberof Wallet
     */
    wallet_id: string;
    /**
     * 
     * @type {WalletBalance}
     * @memberof Wallet
     */
    balance: WalletBalance;
    /**
     * 
     * @type {WalletNumbers}
     * @memberof Wallet
     */
    numbers: WalletNumbers;
    /**
     * The ID of the recipient that corresponds to the e-wallet account numbers
     * @type {string}
     * @memberof Wallet
     */
    recipient_id?: string;
    /**
     * 
     * @type {WalletStatus}
     * @memberof Wallet
     */
    status: WalletStatus;
}
/**
 * An object representing the e-wallet balance
 * @export
 * @interface WalletBalance
 */
// Edited by Plaid, line 9. any to unknown
export interface WalletBalance {
    [key: string]: object | unknown;

    /**
     * The ISO-4217 currency code of the balance
     * @type {string}
     * @memberof WalletBalance
     */
    iso_currency_code: string;
    /**
     * The total amount of funds in the account
     * @type {number}
     * @memberof WalletBalance
     */
    current: number;
}
/**
 * WalletCreateRequest defines the request schema for `/wallet/create`
 * @export
 * @interface WalletCreateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface WalletCreateRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof WalletCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof WalletCreateRequest
     */
    secret?: string;
    /**
     * 
     * @type {WalletISOCurrencyCode}
     * @memberof WalletCreateRequest
     */
    iso_currency_code: WalletISOCurrencyCode;
}
/**
 * WalletCreateResponse defines the response schema for `/wallet/create`
 * @export
 * @interface WalletCreateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface WalletCreateResponse {
    /**
     * A unique ID identifying the e-wallet
     * @type {string}
     * @memberof WalletCreateResponse
     */
    wallet_id: string;
    /**
     * 
     * @type {WalletBalance}
     * @memberof WalletCreateResponse
     */
    balance: WalletBalance;
    /**
     * 
     * @type {WalletNumbers}
     * @memberof WalletCreateResponse
     */
    numbers: WalletNumbers;
    /**
     * The ID of the recipient that corresponds to the e-wallet account numbers
     * @type {string}
     * @memberof WalletCreateResponse
     */
    recipient_id?: string;
    /**
     * 
     * @type {WalletStatus}
     * @memberof WalletCreateResponse
     */
    status: WalletStatus;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof WalletCreateResponse
     */
    request_id: string;
}
/**
 * WalletGetRequest defines the request schema for `/wallet/get`
 * @export
 * @interface WalletGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface WalletGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof WalletGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof WalletGetRequest
     */
    secret?: string;
    /**
     * The ID of the e-wallet
     * @type {string}
     * @memberof WalletGetRequest
     */
    wallet_id: string;
}
/**
 * WalletGetResponse defines the response schema for `/wallet/get`
 * @export
 * @interface WalletGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface WalletGetResponse {
    /**
     * A unique ID identifying the e-wallet
     * @type {string}
     * @memberof WalletGetResponse
     */
    wallet_id: string;
    /**
     * 
     * @type {WalletBalance}
     * @memberof WalletGetResponse
     */
    balance: WalletBalance;
    /**
     * 
     * @type {WalletNumbers}
     * @memberof WalletGetResponse
     */
    numbers: WalletNumbers;
    /**
     * The ID of the recipient that corresponds to the e-wallet account numbers
     * @type {string}
     * @memberof WalletGetResponse
     */
    recipient_id?: string;
    /**
     * 
     * @type {WalletStatus}
     * @memberof WalletGetResponse
     */
    status: WalletStatus;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof WalletGetResponse
     */
    request_id: string;
}
/**
 * An ISO-4217 currency code, used with e-wallets and transactions.
 * @export
 * @enum {string}
 */
export enum WalletISOCurrencyCode {
    Gbp = 'GBP',
    Eur = 'EUR'
}

/**
 * WalletListRequest defines the request schema for `/wallet/list`
 * @export
 * @interface WalletListRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface WalletListRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof WalletListRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof WalletListRequest
     */
    secret?: string;
    /**
     * 
     * @type {WalletISOCurrencyCode}
     * @memberof WalletListRequest
     */
    iso_currency_code?: WalletISOCurrencyCode;
    /**
     * A base64 value representing the latest e-wallet that has already been requested. Set this to `next_cursor` received from the previous `/wallet/list` request. If provided, the response will only contain e-wallets created before that e-wallet. If omitted, the response will contain e-wallets starting from the most recent, and in descending order.
     * @type {string}
     * @memberof WalletListRequest
     */
    cursor?: string;
    /**
     * The number of e-wallets to fetch
     * @type {number}
     * @memberof WalletListRequest
     */
    count?: number;
}
/**
 * WalletListResponse defines the response schema for `/wallet/list`
 * @export
 * @interface WalletListResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface WalletListResponse {
    [key: string]: object | unknown;

    /**
     * An array of e-wallets
     * @type {Array<Wallet>}
     * @memberof WalletListResponse
     */
    wallets: Array<Wallet>;
    /**
     * Cursor used for fetching e-wallets created before the latest e-wallet provided in this response
     * @type {string}
     * @memberof WalletListResponse
     */
    next_cursor?: string;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof WalletListResponse
     */
    request_id: string;
}
/**
 * An object representing the e-wallet account numbers
 * @export
 * @interface WalletNumbers
 */
// Edited by Plaid, line 9. any to unknown
export interface WalletNumbers {
    [key: string]: object | unknown;

    /**
     * 
     * @type {RecipientBACS}
     * @memberof WalletNumbers
     */
    bacs?: RecipientBACS | null;
    /**
     * 
     * @type {NumbersInternationalIBAN}
     * @memberof WalletNumbers
     */
    international?: NumbersInternationalIBAN | null;
}
/**
 * The payment scheme used to execute this transaction. This is present only for transaction types `PAYOUT` and `REFUND`.  `FASTER_PAYMENTS`: The standard payment scheme within the UK.  `SEPA_CREDIT_TRANSFER`: The standard payment to a beneficiary within the SEPA area.  `SEPA_CREDIT_TRANSFER_INSTANT`: Instant payment to a beneficiary within the SEPA area.
 * @export
 * @enum {string}
 */
export enum WalletPaymentScheme {
    Null = 'null',
    FasterPayments = 'FASTER_PAYMENTS',
    SepaCreditTransfer = 'SEPA_CREDIT_TRANSFER',
    SepaCreditTransferInstant = 'SEPA_CREDIT_TRANSFER_INSTANT'
}

/**
 * The status of the wallet.  `UNKNOWN`: The wallet status is unknown.  `ACTIVE`: The wallet is active and ready to send money to and receive money from.  `CLOSED`: The wallet is closed. Any transactions made to or from this wallet will error.
 * @export
 * @enum {string}
 */
export enum WalletStatus {
    Unknown = 'UNKNOWN',
    Active = 'ACTIVE',
    Closed = 'CLOSED'
}

/**
 * The transaction details
 * @export
 * @interface WalletTransaction
 */
// Edited by Plaid, line 9. any to unknown
export interface WalletTransaction {
    [key: string]: object | unknown;

    /**
     * A unique ID identifying the transaction
     * @type {string}
     * @memberof WalletTransaction
     */
    transaction_id: string;
    /**
     * The EMI (E-Money Institution) wallet that this payment is associated with, if any. This wallet is used as an intermediary account to enable Plaid to reconcile the settlement of funds for Payment Initiation requests.
     * @type {string}
     * @memberof WalletTransaction
     */
    wallet_id: string;
    /**
     * A reference for the transaction
     * @type {string}
     * @memberof WalletTransaction
     */
    reference: string;
    /**
     * The type of the transaction. The supported transaction types that are returned are: `BANK_TRANSFER:` a transaction which credits an e-wallet through an external bank transfer.  `PAYOUT:` a transaction which debits an e-wallet by disbursing funds to a counterparty.  `PIS_PAY_IN:` a payment which credits an e-wallet through Plaid\'s Payment Initiation Services (PIS) APIs. For more information see the [Payment Initiation endpoints](https://plaid.com/docs/api/products/payment-initiation/).  `REFUND:` a transaction which debits an e-wallet by refunding a previously initiated payment made through Plaid\'s [PIS APIs](https://plaid.com/docs/api/products/payment-initiation/).  `FUNDS_SWEEP`: an automated transaction which debits funds from an e-wallet to a designated client-owned account.
     * @type {string}
     * @memberof WalletTransaction
     */
    type: WalletTransactionTypeEnum;
    /**
     * 
     * @type {WalletPaymentScheme}
     * @memberof WalletTransaction
     */
    scheme?: WalletPaymentScheme | null;
    /**
     * 
     * @type {WalletTransactionAmount}
     * @memberof WalletTransaction
     */
    amount: WalletTransactionAmount;
    /**
     * 
     * @type {WalletTransactionCounterparty}
     * @memberof WalletTransaction
     */
    counterparty: WalletTransactionCounterparty;
    /**
     * 
     * @type {WalletTransactionStatus}
     * @memberof WalletTransaction
     */
    status: WalletTransactionStatus;
    /**
     * Timestamp when the transaction was created, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
     * @type {string}
     * @memberof WalletTransaction
     */
    created_at: string;
    /**
     * The date and time of the last time the `status` was updated, in IS0 8601 format
     * @type {string}
     * @memberof WalletTransaction
     */
    last_status_update: string;
    /**
     * The payment id that this transaction is associated with, if any. This is present only for transaction types `PIS_PAY_IN` and `REFUND`.
     * @type {string}
     * @memberof WalletTransaction
     */
    payment_id?: string | null;
}

/**
    * @export
    * @enum {string}
    */
export enum WalletTransactionTypeEnum {
    BankTransfer = 'BANK_TRANSFER',
    Payout = 'PAYOUT',
    PisPayIn = 'PIS_PAY_IN',
    Refund = 'REFUND',
    FundsSweep = 'FUNDS_SWEEP'
}

/**
 * The amount and currency of a transaction
 * @export
 * @interface WalletTransactionAmount
 */
// Edited by Plaid, line 9. any to unknown
export interface WalletTransactionAmount {
    [key: string]: object | unknown;

    /**
     * 
     * @type {WalletISOCurrencyCode}
     * @memberof WalletTransactionAmount
     */
    iso_currency_code: WalletISOCurrencyCode;
    /**
     * The amount of the transaction. Must contain at most two digits of precision e.g. `1.23`.
     * @type {number}
     * @memberof WalletTransactionAmount
     */
    value: number;
}
/**
 * An object representing the e-wallet transaction\'s counterparty
 * @export
 * @interface WalletTransactionCounterparty
 */
// Edited by Plaid, line 9. any to unknown
export interface WalletTransactionCounterparty {
    [key: string]: object | unknown;

    /**
     * The name of the counterparty
     * @type {string}
     * @memberof WalletTransactionCounterparty
     */
    name: string;
    /**
     * 
     * @type {WalletTransactionCounterpartyNumbers}
     * @memberof WalletTransactionCounterparty
     */
    numbers: WalletTransactionCounterpartyNumbers;
    /**
     * 
     * @type {PaymentInitiationAddress}
     * @memberof WalletTransactionCounterparty
     */
    address?: PaymentInitiationAddress | null;
    /**
     * The counterparty\'s birthdate, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format.
     * @type {string}
     * @memberof WalletTransactionCounterparty
     */
    date_of_birth?: string | null;
}
/**
 * The account number and sort code of the counterparty\'s account
 * @export
 * @interface WalletTransactionCounterpartyBACS
 */
// Edited by Plaid, line 9. any to unknown
export interface WalletTransactionCounterpartyBACS {
    /**
     * The account number of the account. Maximum of 10 characters.
     * @type {string}
     * @memberof WalletTransactionCounterpartyBACS
     */
    account?: string;
    /**
     * The 6-character sort code of the account.
     * @type {string}
     * @memberof WalletTransactionCounterpartyBACS
     */
    sort_code?: string;
}
/**
 * International Bank Account Number for a Wallet Transaction
 * @export
 * @interface WalletTransactionCounterpartyInternational
 */
// Edited by Plaid, line 9. any to unknown
export interface WalletTransactionCounterpartyInternational {
    [key: string]: object | unknown;

    /**
     * International Bank Account Number (IBAN).
     * @type {string}
     * @memberof WalletTransactionCounterpartyInternational
     */
    iban?: string;
}
/**
 * The counterparty\'s bank account numbers. Exactly one of IBAN or BACS data is required.
 * @export
 * @interface WalletTransactionCounterpartyNumbers
 */
// Edited by Plaid, line 9. any to unknown
export interface WalletTransactionCounterpartyNumbers {
    [key: string]: object | unknown;

    /**
     * 
     * @type {WalletTransactionCounterpartyBACS}
     * @memberof WalletTransactionCounterpartyNumbers
     */
    bacs?: WalletTransactionCounterpartyBACS;
    /**
     * 
     * @type {WalletTransactionCounterpartyInternational}
     * @memberof WalletTransactionCounterpartyNumbers
     */
    international?: WalletTransactionCounterpartyInternational | null;
}
/**
 * WalletTransactionExecuteRequest defines the request schema for `/wallet/transaction/execute`
 * @export
 * @interface WalletTransactionExecuteRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface WalletTransactionExecuteRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof WalletTransactionExecuteRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof WalletTransactionExecuteRequest
     */
    secret?: string;
    /**
     * A random key provided by the client, per unique wallet transaction. Maximum of 128 characters.  The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. If a request to execute a wallet transaction fails due to a network connection error, then after a minimum delay of one minute, you can retry the request with the same idempotency key to guarantee that only a single wallet transaction is created. If the request was successfully processed, it will prevent any transaction that uses the same idempotency key, and was received within 24 hours of the first request, from being processed.
     * @type {string}
     * @memberof WalletTransactionExecuteRequest
     */
    idempotency_key: string;
    /**
     * The ID of the e-wallet to debit from
     * @type {string}
     * @memberof WalletTransactionExecuteRequest
     */
    wallet_id: string;
    /**
     * 
     * @type {WalletTransactionCounterparty}
     * @memberof WalletTransactionExecuteRequest
     */
    counterparty: WalletTransactionCounterparty;
    /**
     * 
     * @type {WalletTransactionAmount}
     * @memberof WalletTransactionExecuteRequest
     */
    amount: WalletTransactionAmount;
    /**
     * A reference for the transaction. This must be an alphanumeric string with 6 to 18 characters and must not contain any special characters or spaces. Ensure that the `reference` field is unique for each transaction.
     * @type {string}
     * @memberof WalletTransactionExecuteRequest
     */
    reference: string;
}
/**
 * WalletTransactionExecuteResponse defines the response schema for `/wallet/transaction/execute`
 * @export
 * @interface WalletTransactionExecuteResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface WalletTransactionExecuteResponse {
    [key: string]: object | unknown;

    /**
     * A unique ID identifying the transaction
     * @type {string}
     * @memberof WalletTransactionExecuteResponse
     */
    transaction_id: string;
    /**
     * 
     * @type {WalletTransactionStatus}
     * @memberof WalletTransactionExecuteResponse
     */
    status: WalletTransactionStatus;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof WalletTransactionExecuteResponse
     */
    request_id: string;
}
/**
 * WalletTransactionGetRequest defines the request schema for `/wallet/transaction/get`
 * @export
 * @interface WalletTransactionGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface WalletTransactionGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof WalletTransactionGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof WalletTransactionGetRequest
     */
    secret?: string;
    /**
     * The ID of the transaction to fetch
     * @type {string}
     * @memberof WalletTransactionGetRequest
     */
    transaction_id: string;
}
/**
 * WalletTransactionGetResponse defines the response schema for `/wallet/transaction/get`
 * @export
 * @interface WalletTransactionGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface WalletTransactionGetResponse {
    /**
     * A unique ID identifying the transaction
     * @type {string}
     * @memberof WalletTransactionGetResponse
     */
    transaction_id: string;
    /**
     * The EMI (E-Money Institution) wallet that this payment is associated with, if any. This wallet is used as an intermediary account to enable Plaid to reconcile the settlement of funds for Payment Initiation requests.
     * @type {string}
     * @memberof WalletTransactionGetResponse
     */
    wallet_id: string;
    /**
     * A reference for the transaction
     * @type {string}
     * @memberof WalletTransactionGetResponse
     */
    reference: string;
    /**
     * The type of the transaction. The supported transaction types that are returned are: `BANK_TRANSFER:` a transaction which credits an e-wallet through an external bank transfer.  `PAYOUT:` a transaction which debits an e-wallet by disbursing funds to a counterparty.  `PIS_PAY_IN:` a payment which credits an e-wallet through Plaid\'s Payment Initiation Services (PIS) APIs. For more information see the [Payment Initiation endpoints](https://plaid.com/docs/api/products/payment-initiation/).  `REFUND:` a transaction which debits an e-wallet by refunding a previously initiated payment made through Plaid\'s [PIS APIs](https://plaid.com/docs/api/products/payment-initiation/).  `FUNDS_SWEEP`: an automated transaction which debits funds from an e-wallet to a designated client-owned account.
     * @type {string}
     * @memberof WalletTransactionGetResponse
     */
    type: WalletTransactionGetResponseTypeEnum;
    /**
     * 
     * @type {WalletPaymentScheme}
     * @memberof WalletTransactionGetResponse
     */
    scheme?: WalletPaymentScheme | null;
    /**
     * 
     * @type {WalletTransactionAmount}
     * @memberof WalletTransactionGetResponse
     */
    amount: WalletTransactionAmount;
    /**
     * 
     * @type {WalletTransactionCounterparty}
     * @memberof WalletTransactionGetResponse
     */
    counterparty: WalletTransactionCounterparty;
    /**
     * 
     * @type {WalletTransactionStatus}
     * @memberof WalletTransactionGetResponse
     */
    status: WalletTransactionStatus;
    /**
     * Timestamp when the transaction was created, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
     * @type {string}
     * @memberof WalletTransactionGetResponse
     */
    created_at: string;
    /**
     * The date and time of the last time the `status` was updated, in IS0 8601 format
     * @type {string}
     * @memberof WalletTransactionGetResponse
     */
    last_status_update: string;
    /**
     * The payment id that this transaction is associated with, if any. This is present only for transaction types `PIS_PAY_IN` and `REFUND`.
     * @type {string}
     * @memberof WalletTransactionGetResponse
     */
    payment_id?: string | null;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof WalletTransactionGetResponse
     */
    request_id: string;
}

/**
    * @export
    * @enum {string}
    */
export enum WalletTransactionGetResponseTypeEnum {
    BankTransfer = 'BANK_TRANSFER',
    Payout = 'PAYOUT',
    PisPayIn = 'PIS_PAY_IN',
    Refund = 'REFUND',
    FundsSweep = 'FUNDS_SWEEP'
}

/**
 * WalletTransactionListRequest defines the request schema for `/wallet/transaction/list`
 * @export
 * @interface WalletTransactionListRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface WalletTransactionListRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof WalletTransactionListRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof WalletTransactionListRequest
     */
    secret?: string;
    /**
     * The ID of the e-wallet to fetch transactions from
     * @type {string}
     * @memberof WalletTransactionListRequest
     */
    wallet_id: string;
    /**
     * A base64 value representing the latest transaction that has already been requested. Set this to `next_cursor` received from the previous `/wallet/transaction/list` request. If provided, the response will only contain transactions created before that transaction. If omitted, the response will contain transactions starting from the most recent, and in descending order by the `created_at` time.
     * @type {string}
     * @memberof WalletTransactionListRequest
     */
    cursor?: string;
    /**
     * The number of transactions to fetch
     * @type {number}
     * @memberof WalletTransactionListRequest
     */
    count?: number;
    /**
     * 
     * @type {WalletTransactionListRequestOptions}
     * @memberof WalletTransactionListRequest
     */
    options?: WalletTransactionListRequestOptions | null;
}
/**
 * Additional wallet transaction options
 * @export
 * @interface WalletTransactionListRequestOptions
 */
// Edited by Plaid, line 9. any to unknown
export interface WalletTransactionListRequestOptions {
    /**
     * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DDThh:mm:ssZ) for filtering transactions, inclusive of the provided date.
     * @type {string}
     * @memberof WalletTransactionListRequestOptions
     */
    start_time?: string;
    /**
     * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DDThh:mm:ssZ) for filtering transactions, inclusive of the provided date.
     * @type {string}
     * @memberof WalletTransactionListRequestOptions
     */
    end_time?: string;
}
/**
 * WalletTransactionListResponse defines the response schema for `/wallet/transaction/list`
 * @export
 * @interface WalletTransactionListResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface WalletTransactionListResponse {
    [key: string]: object | unknown;

    /**
     * An array of transactions of an e-wallet, associated with the given `wallet_id`
     * @type {Array<WalletTransaction>}
     * @memberof WalletTransactionListResponse
     */
    transactions: Array<WalletTransaction>;
    /**
     * Cursor used for fetching transactions created before the latest transaction provided in this response
     * @type {string}
     * @memberof WalletTransactionListResponse
     */
    next_cursor?: string;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof WalletTransactionListResponse
     */
    request_id: string;
}
/**
 * The status of the transaction.  `AUTHORISING`: The transaction is being processed for validation and compliance.  `INITIATED`: The transaction has been initiated and is currently being processed.  `EXECUTED`: The transaction has been successfully executed and is considered complete. This is only applicable for debit transactions.  `SETTLED`: The transaction has settled and funds are available for use. This is only applicable for credit transactions. A transaction will typically settle within seconds to several days, depending on which payment rail is used.  `FAILED`: The transaction failed to process successfully. This is a terminal status.  `BLOCKED`: The transaction has been blocked for violating compliance rules. This is a terminal status.
 * @export
 * @enum {string}
 */
export enum WalletTransactionStatus {
    Authorising = 'AUTHORISING',
    Initiated = 'INITIATED',
    Executed = 'EXECUTED',
    Settled = 'SETTLED',
    Blocked = 'BLOCKED',
    Failed = 'FAILED'
}

/**
 * Fired when the status of a wallet transaction has changed.
 * @export
 * @interface WalletTransactionStatusUpdateWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface WalletTransactionStatusUpdateWebhook {
    [key: string]: object | unknown;

    /**
     * `WALLET`
     * @type {string}
     * @memberof WalletTransactionStatusUpdateWebhook
     */
    webhook_type: string;
    /**
     * `WALLET_TRANSACTION_STATUS_UPDATE`
     * @type {string}
     * @memberof WalletTransactionStatusUpdateWebhook
     */
    webhook_code: string;
    /**
     * The `transaction_id` for the wallet transaction being updated
     * @type {string}
     * @memberof WalletTransactionStatusUpdateWebhook
     */
    transaction_id: string;
    /**
     * The `payment_id` associated with the transaction. This will be present in case of `REFUND` and `PIS_PAY_IN`
     * @type {string}
     * @memberof WalletTransactionStatusUpdateWebhook
     */
    payment_id?: string | null;
    /**
     * The EMI (E-Money Institution) wallet that this payment is associated with. This wallet is used as an intermediary account to enable Plaid to reconcile the settlement of funds for Payment Initiation requests.
     * @type {string}
     * @memberof WalletTransactionStatusUpdateWebhook
     */
    wallet_id?: string;
    /**
     * 
     * @type {WalletTransactionStatus}
     * @memberof WalletTransactionStatusUpdateWebhook
     */
    new_status: WalletTransactionStatus;
    /**
     * 
     * @type {WalletTransactionStatus}
     * @memberof WalletTransactionStatusUpdateWebhook
     */
    old_status: WalletTransactionStatus;
    /**
     * The timestamp of the update, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format, e.g. `\"2017-09-14T14:42:19.350Z\"`
     * @type {string}
     * @memberof WalletTransactionStatusUpdateWebhook
     */
    timestamp: string;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof WalletTransactionStatusUpdateWebhook
     */
    environment: WebhookEnvironmentValues;
}
/**
 * WalletTransactionListRequest defines the request schema for `/wallet/transaction/list`
 * @export
 * @interface WalletTransactionsListRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface WalletTransactionsListRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof WalletTransactionsListRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof WalletTransactionsListRequest
     */
    secret?: string;
    /**
     * The ID of the e-wallet to fetch transactions from
     * @type {string}
     * @memberof WalletTransactionsListRequest
     */
    wallet_id: string;
    /**
     * A base64 value representing the latest transaction that has already been requested. Set this to `next_cursor` received from the previous `/wallet/transaction/list` request. If provided, the response will only contain transactions created before that transaction. If omitted, the response will contain transactions starting from the most recent, and in descending order by the `created_at` time.
     * @type {string}
     * @memberof WalletTransactionsListRequest
     */
    cursor?: string;
    /**
     * The number of transactions to fetch
     * @type {number}
     * @memberof WalletTransactionsListRequest
     */
    count?: number;
    /**
     * 
     * @type {WalletTransactionListRequestOptions}
     * @memberof WalletTransactionsListRequest
     */
    options?: WalletTransactionListRequestOptions | null;
}
/**
 * It is possible for an Asset Report to be returned with missing account owner information. In such cases, the Asset Report will contain warning data in the response, indicating why obtaining the owner information failed.
 * @export
 * @interface Warning
 */
// Edited by Plaid, line 9. any to unknown
export interface Warning {
    [key: string]: object | unknown;

    /**
     * The warning type, which will always be `ASSET_REPORT_WARNING`
     * @type {string}
     * @memberof Warning
     */
    warning_type: string;
    /**
     * The warning code identifies a specific kind of warning. `OWNERS_UNAVAILABLE` indicates that account-owner information is not available.`INVESTMENTS_UNAVAILABLE` indicates that Investments specific information is not available. `TRANSACTIONS_UNAVAILABLE` indicates that transactions information associated with Credit and Depository accounts are unavailable.
     * @type {string}
     * @memberof Warning
     */
    warning_code: WarningWarningCodeEnum;
    /**
     * 
     * @type {Cause}
     * @memberof Warning
     */
    cause: Cause;
}

/**
    * @export
    * @enum {string}
    */
export enum WarningWarningCodeEnum {
    OwnersUnavailable = 'OWNERS_UNAVAILABLE',
    InvestmentsUnavailable = 'INVESTMENTS_UNAVAILABLE',
    TransactionsUnavailable = 'TRANSACTIONS_UNAVAILABLE'
}

/**
 * Information about the last change made to the parent object specifying what caused the change as well as when it occurred.
 * @export
 * @interface WatchlistScreeningAuditTrail
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningAuditTrail {
    [key: string]: object | unknown;

    /**
     * 
     * @type {Source}
     * @memberof WatchlistScreeningAuditTrail
     */
    source: Source;
    /**
     * ID of the associated user.
     * @type {string}
     * @memberof WatchlistScreeningAuditTrail
     */
    dashboard_user_id: string | null;
    /**
     * An ISO8601 formatted timestamp.
     * @type {string}
     * @memberof WatchlistScreeningAuditTrail
     */
    timestamp: string;
}
/**
 * An official document, usually issued by a governing body or institution, with an associated identifier.
 * @export
 * @interface WatchlistScreeningDocument
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningDocument {
    [key: string]: object | unknown;

    /**
     * 
     * @type {WatchlistScreeningDocumentType}
     * @memberof WatchlistScreeningDocument
     */
    type: WatchlistScreeningDocumentType;
    /**
     * The numeric or alphanumeric identifier associated with this document.
     * @type {string}
     * @memberof WatchlistScreeningDocument
     */
    number: string;
}
/**
 * The kind of official document represented by this object.  `birth_certificate` - A certificate of birth  `drivers_license` - A license to operate a motor vehicle  `immigration_number` - Immigration or residence documents  `military_id` - Identification issued by a military group  `other` - Any document not covered by other categories  `passport` - An official passport issue by a government  `personal_identification` - Any generic personal identification that is not covered by other categories  `ration_card` - Identification that entitles the holder to rations  `ssn` - United States Social Security Number  `student_id` - Identification issued by an educational institution  `tax_id` - Identification issued for the purpose of collecting taxes  `travel_document` - Visas, entry permits, refugee documents, etc.  `voter_id` - Identification issued for the purpose of voting
 * @export
 * @enum {string}
 */
export enum WatchlistScreeningDocumentType {
    BirthCertificate = 'birth_certificate',
    DriversLicense = 'drivers_license',
    ImmigrationNumber = 'immigration_number',
    MilitaryId = 'military_id',
    Other = 'other',
    Passport = 'passport',
    PersonalIdentification = 'personal_identification',
    RationCard = 'ration_card',
    Ssn = 'ssn',
    StudentId = 'student_id',
    TaxId = 'tax_id',
    TravelDocument = 'travel_document',
    VoterId = 'voter_id'
}

/**
 * Request input for creating an entity screening review
 * @export
 * @interface WatchlistScreeningEntityCreateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningEntityCreateRequest {
    /**
     * 
     * @type {EntityWatchlistSearchTerms}
     * @memberof WatchlistScreeningEntityCreateRequest
     */
    search_terms: EntityWatchlistSearchTerms;
    /**
     * A unique ID that identifies the end user in your system. This ID can also be used to associate user-specific data from other Plaid products. Financial Account Matching requires this field and the Link Token Create `client_user_id` to be consistent. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`.
     * @type {string}
     * @memberof WatchlistScreeningEntityCreateRequest
     */
    client_user_id?: string;
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof WatchlistScreeningEntityCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof WatchlistScreeningEntityCreateRequest
     */
    secret?: string;
}
/**
 * The entity screening object allows you to represent an entity in your system, update its profile, and search for it on various watchlists. Note: Rejected entity screenings will not receive new hits, regardless of entity program configuration.
 * @export
 * @interface WatchlistScreeningEntityCreateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningEntityCreateResponse {
    [key: string]: object | unknown;

    /**
     * ID of the associated entity screening.
     * @type {string}
     * @memberof WatchlistScreeningEntityCreateResponse
     */
    id: string;
    /**
     * 
     * @type {EntityWatchlistScreeningSearchTerms}
     * @memberof WatchlistScreeningEntityCreateResponse
     */
    search_terms: EntityWatchlistScreeningSearchTerms;
    /**
     * ID of the associated user.
     * @type {string}
     * @memberof WatchlistScreeningEntityCreateResponse
     */
    assignee: string | null;
    /**
     * 
     * @type {WatchlistScreeningStatus}
     * @memberof WatchlistScreeningEntityCreateResponse
     */
    status: WatchlistScreeningStatus;
    /**
     * A unique ID that identifies the end user in your system. This ID can also be used to associate user-specific data from other Plaid products. Financial Account Matching requires this field and the Link Token Create `client_user_id` to be consistent. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`.
     * @type {string}
     * @memberof WatchlistScreeningEntityCreateResponse
     */
    client_user_id: string | null;
    /**
     * 
     * @type {WatchlistScreeningAuditTrail}
     * @memberof WatchlistScreeningEntityCreateResponse
     */
    audit_trail: WatchlistScreeningAuditTrail;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof WatchlistScreeningEntityCreateResponse
     */
    request_id: string;
}
/**
 * Request input for fetching an entity watchlist screening
 * @export
 * @interface WatchlistScreeningEntityGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningEntityGetRequest {
    /**
     * ID of the associated entity screening.
     * @type {string}
     * @memberof WatchlistScreeningEntityGetRequest
     */
    entity_watchlist_screening_id: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof WatchlistScreeningEntityGetRequest
     */
    secret?: string;
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof WatchlistScreeningEntityGetRequest
     */
    client_id?: string;
}
/**
 * The entity screening object allows you to represent an entity in your system, update its profile, and search for it on various watchlists. Note: Rejected entity screenings will not receive new hits, regardless of entity program configuration.
 * @export
 * @interface WatchlistScreeningEntityGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningEntityGetResponse {
    [key: string]: object | unknown;

    /**
     * ID of the associated entity screening.
     * @type {string}
     * @memberof WatchlistScreeningEntityGetResponse
     */
    id: string;
    /**
     * 
     * @type {EntityWatchlistScreeningSearchTerms}
     * @memberof WatchlistScreeningEntityGetResponse
     */
    search_terms: EntityWatchlistScreeningSearchTerms;
    /**
     * ID of the associated user.
     * @type {string}
     * @memberof WatchlistScreeningEntityGetResponse
     */
    assignee: string | null;
    /**
     * 
     * @type {WatchlistScreeningStatus}
     * @memberof WatchlistScreeningEntityGetResponse
     */
    status: WatchlistScreeningStatus;
    /**
     * A unique ID that identifies the end user in your system. This ID can also be used to associate user-specific data from other Plaid products. Financial Account Matching requires this field and the Link Token Create `client_user_id` to be consistent. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`.
     * @type {string}
     * @memberof WatchlistScreeningEntityGetResponse
     */
    client_user_id: string | null;
    /**
     * 
     * @type {WatchlistScreeningAuditTrail}
     * @memberof WatchlistScreeningEntityGetResponse
     */
    audit_trail: WatchlistScreeningAuditTrail;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof WatchlistScreeningEntityGetResponse
     */
    request_id: string;
}
/**
 * Request input for listing changes to entity watchlist screenings
 * @export
 * @interface WatchlistScreeningEntityHistoryListRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningEntityHistoryListRequest {
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof WatchlistScreeningEntityHistoryListRequest
     */
    secret?: string;
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof WatchlistScreeningEntityHistoryListRequest
     */
    client_id?: string;
    /**
     * ID of the associated entity screening.
     * @type {string}
     * @memberof WatchlistScreeningEntityHistoryListRequest
     */
    entity_watchlist_screening_id: string;
    /**
     * An identifier that determines which page of results you receive.
     * @type {string}
     * @memberof WatchlistScreeningEntityHistoryListRequest
     */
    cursor?: string | null;
}
/**
 * Paginated list of entity watchlist screenings
 * @export
 * @interface WatchlistScreeningEntityHistoryListResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningEntityHistoryListResponse {
    [key: string]: object | unknown;

    /**
     * List of entity watchlist screening
     * @type {Array<EntityWatchlistScreening>}
     * @memberof WatchlistScreeningEntityHistoryListResponse
     */
    entity_watchlist_screenings: Array<EntityWatchlistScreening>;
    /**
     * An identifier that determines which page of results you receive.
     * @type {string}
     * @memberof WatchlistScreeningEntityHistoryListResponse
     */
    next_cursor: string | null;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof WatchlistScreeningEntityHistoryListResponse
     */
    request_id: string;
}
/**
 * Request input for listing hits for an entity watchlist screening
 * @export
 * @interface WatchlistScreeningEntityHitListRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningEntityHitListRequest {
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof WatchlistScreeningEntityHitListRequest
     */
    secret?: string;
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof WatchlistScreeningEntityHitListRequest
     */
    client_id?: string;
    /**
     * ID of the associated entity screening.
     * @type {string}
     * @memberof WatchlistScreeningEntityHitListRequest
     */
    entity_watchlist_screening_id: string;
    /**
     * An identifier that determines which page of results you receive.
     * @type {string}
     * @memberof WatchlistScreeningEntityHitListRequest
     */
    cursor?: string | null;
}
/**
 * Paginated list of entity watchlist screening hits
 * @export
 * @interface WatchlistScreeningEntityHitListResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningEntityHitListResponse {
    [key: string]: object | unknown;

    /**
     * List of entity watchlist screening hits
     * @type {Array<EntityWatchlistScreeningHit>}
     * @memberof WatchlistScreeningEntityHitListResponse
     */
    entity_watchlist_screening_hits: Array<EntityWatchlistScreeningHit>;
    /**
     * An identifier that determines which page of results you receive.
     * @type {string}
     * @memberof WatchlistScreeningEntityHitListResponse
     */
    next_cursor: string | null;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof WatchlistScreeningEntityHitListResponse
     */
    request_id: string;
}
/**
 * Request input for listing entity watchlist screenings
 * @export
 * @interface WatchlistScreeningEntityListRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningEntityListRequest {
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof WatchlistScreeningEntityListRequest
     */
    secret?: string;
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof WatchlistScreeningEntityListRequest
     */
    client_id?: string;
    /**
     * ID of the associated entity program.
     * @type {string}
     * @memberof WatchlistScreeningEntityListRequest
     */
    entity_watchlist_program_id: string;
    /**
     * A unique ID that identifies the end user in your system. This ID can also be used to associate user-specific data from other Plaid products. Financial Account Matching requires this field and the Link Token Create `client_user_id` to be consistent. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`.
     * @type {string}
     * @memberof WatchlistScreeningEntityListRequest
     */
    client_user_id?: string;
    /**
     * 
     * @type {WatchlistScreeningStatus}
     * @memberof WatchlistScreeningEntityListRequest
     */
    status?: WatchlistScreeningStatus;
    /**
     * ID of the associated user.
     * @type {string}
     * @memberof WatchlistScreeningEntityListRequest
     */
    assignee?: string;
    /**
     * An identifier that determines which page of results you receive.
     * @type {string}
     * @memberof WatchlistScreeningEntityListRequest
     */
    cursor?: string | null;
}
/**
 * Paginated list of entity watchlist screenings
 * @export
 * @interface WatchlistScreeningEntityListResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningEntityListResponse {
    [key: string]: object | unknown;

    /**
     * List of entity watchlist screening
     * @type {Array<EntityWatchlistScreening>}
     * @memberof WatchlistScreeningEntityListResponse
     */
    entity_watchlist_screenings: Array<EntityWatchlistScreening>;
    /**
     * An identifier that determines which page of results you receive.
     * @type {string}
     * @memberof WatchlistScreeningEntityListResponse
     */
    next_cursor: string | null;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof WatchlistScreeningEntityListResponse
     */
    request_id: string;
}
/**
 * Request input for fetching an entity watchlist program
 * @export
 * @interface WatchlistScreeningEntityProgramGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningEntityProgramGetRequest {
    /**
     * ID of the associated entity program.
     * @type {string}
     * @memberof WatchlistScreeningEntityProgramGetRequest
     */
    entity_watchlist_program_id: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof WatchlistScreeningEntityProgramGetRequest
     */
    secret?: string;
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof WatchlistScreeningEntityProgramGetRequest
     */
    client_id?: string;
}
/**
 * A program that configures the active lists, search parameters, and other behavior for initial and ongoing screening of entities.
 * @export
 * @interface WatchlistScreeningEntityProgramGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningEntityProgramGetResponse {
    [key: string]: object | unknown;

    /**
     * ID of the associated entity program.
     * @type {string}
     * @memberof WatchlistScreeningEntityProgramGetResponse
     */
    id: string;
    /**
     * An ISO8601 formatted timestamp.
     * @type {string}
     * @memberof WatchlistScreeningEntityProgramGetResponse
     */
    created_at: string;
    /**
     * Indicator specifying whether the program is enabled and will perform daily rescans.
     * @type {boolean}
     * @memberof WatchlistScreeningEntityProgramGetResponse
     */
    is_rescanning_enabled: boolean;
    /**
     * Watchlists enabled for the associated program
     * @type {Set<EntityWatchlistCode>}
     * @memberof WatchlistScreeningEntityProgramGetResponse
     */
    lists_enabled: Set<EntityWatchlistCode>;
    /**
     * A name for the entity program to define its purpose. For example, \"High Risk Organizations\" or \"Applicants\".
     * @type {string}
     * @memberof WatchlistScreeningEntityProgramGetResponse
     */
    name: string;
    /**
     * 
     * @type {ProgramNameSensitivity}
     * @memberof WatchlistScreeningEntityProgramGetResponse
     */
    name_sensitivity: ProgramNameSensitivity;
    /**
     * 
     * @type {WatchlistScreeningAuditTrail}
     * @memberof WatchlistScreeningEntityProgramGetResponse
     */
    audit_trail: WatchlistScreeningAuditTrail;
    /**
     * Archived programs are read-only and cannot screen new customers nor participate in ongoing monitoring.
     * @type {boolean}
     * @memberof WatchlistScreeningEntityProgramGetResponse
     */
    is_archived: boolean;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof WatchlistScreeningEntityProgramGetResponse
     */
    request_id: string;
}
/**
 * Request input for listing entity watchlist screening programs
 * @export
 * @interface WatchlistScreeningEntityProgramListRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningEntityProgramListRequest {
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof WatchlistScreeningEntityProgramListRequest
     */
    secret?: string;
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof WatchlistScreeningEntityProgramListRequest
     */
    client_id?: string;
    /**
     * An identifier that determines which page of results you receive.
     * @type {string}
     * @memberof WatchlistScreeningEntityProgramListRequest
     */
    cursor?: string | null;
}
/**
 * Paginated list of entity watchlist screening programs
 * @export
 * @interface WatchlistScreeningEntityProgramListResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningEntityProgramListResponse {
    [key: string]: object | unknown;

    /**
     * List of entity watchlist screening programs
     * @type {Array<EntityWatchlistProgram>}
     * @memberof WatchlistScreeningEntityProgramListResponse
     */
    entity_watchlist_programs: Array<EntityWatchlistProgram>;
    /**
     * An identifier that determines which page of results you receive.
     * @type {string}
     * @memberof WatchlistScreeningEntityProgramListResponse
     */
    next_cursor: string | null;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof WatchlistScreeningEntityProgramListResponse
     */
    request_id: string;
}
/**
 * Request input for creating a review for an entity screening
 * @export
 * @interface WatchlistScreeningEntityReviewCreateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningEntityReviewCreateRequest {
    /**
     * Hits to mark as a true positive after thorough manual review. These hits will never recur or be updated once dismissed. In most cases, confirmed hits indicate that the customer should be rejected.
     * @type {Array<string>}
     * @memberof WatchlistScreeningEntityReviewCreateRequest
     */
    confirmed_hits: Array<string>;
    /**
     * Hits to mark as a false positive after thorough manual review. These hits will never recur or be updated once dismissed.
     * @type {Array<string>}
     * @memberof WatchlistScreeningEntityReviewCreateRequest
     */
    dismissed_hits: Array<string>;
    /**
     * A comment submitted by a team member as part of reviewing a watchlist screening.
     * @type {string}
     * @memberof WatchlistScreeningEntityReviewCreateRequest
     */
    comment?: string | null;
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof WatchlistScreeningEntityReviewCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof WatchlistScreeningEntityReviewCreateRequest
     */
    secret?: string;
    /**
     * ID of the associated entity screening.
     * @type {string}
     * @memberof WatchlistScreeningEntityReviewCreateRequest
     */
    entity_watchlist_screening_id: string;
}
/**
 * A review submitted by a team member for an entity watchlist screening. A review can be either a comment on the current screening state, actions taken against hits attached to the watchlist screening, or both.
 * @export
 * @interface WatchlistScreeningEntityReviewCreateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningEntityReviewCreateResponse {
    [key: string]: object | unknown;

    /**
     * ID of the associated entity review.
     * @type {string}
     * @memberof WatchlistScreeningEntityReviewCreateResponse
     */
    id: string;
    /**
     * Hits marked as a true positive after thorough manual review. These hits will never recur or be updated once dismissed. In most cases, confirmed hits indicate that the customer should be rejected.
     * @type {Array<string>}
     * @memberof WatchlistScreeningEntityReviewCreateResponse
     */
    confirmed_hits: Array<string>;
    /**
     * Hits marked as a false positive after thorough manual review. These hits will never recur or be updated once dismissed.
     * @type {Array<string>}
     * @memberof WatchlistScreeningEntityReviewCreateResponse
     */
    dismissed_hits: Array<string>;
    /**
     * A comment submitted by a team member as part of reviewing a watchlist screening.
     * @type {string}
     * @memberof WatchlistScreeningEntityReviewCreateResponse
     */
    comment: string | null;
    /**
     * 
     * @type {WatchlistScreeningAuditTrail}
     * @memberof WatchlistScreeningEntityReviewCreateResponse
     */
    audit_trail: WatchlistScreeningAuditTrail;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof WatchlistScreeningEntityReviewCreateResponse
     */
    request_id: string;
}
/**
 * Request input for listing reviews for an entity watchlist screening
 * @export
 * @interface WatchlistScreeningEntityReviewListRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningEntityReviewListRequest {
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof WatchlistScreeningEntityReviewListRequest
     */
    secret?: string;
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof WatchlistScreeningEntityReviewListRequest
     */
    client_id?: string;
    /**
     * ID of the associated entity screening.
     * @type {string}
     * @memberof WatchlistScreeningEntityReviewListRequest
     */
    entity_watchlist_screening_id: string;
    /**
     * An identifier that determines which page of results you receive.
     * @type {string}
     * @memberof WatchlistScreeningEntityReviewListRequest
     */
    cursor?: string | null;
}
/**
 * Paginated list of entity watchlist screening reviews
 * @export
 * @interface WatchlistScreeningEntityReviewListResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningEntityReviewListResponse {
    [key: string]: object | unknown;

    /**
     * List of entity watchlist screening reviews
     * @type {Array<EntityWatchlistScreeningReview>}
     * @memberof WatchlistScreeningEntityReviewListResponse
     */
    entity_watchlist_screening_reviews: Array<EntityWatchlistScreeningReview>;
    /**
     * An identifier that determines which page of results you receive.
     * @type {string}
     * @memberof WatchlistScreeningEntityReviewListResponse
     */
    next_cursor: string | null;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof WatchlistScreeningEntityReviewListResponse
     */
    request_id: string;
}
/**
 * Request input for editing an entity watchlist screening
 * @export
 * @interface WatchlistScreeningEntityUpdateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningEntityUpdateRequest {
    /**
     * ID of the associated entity screening.
     * @type {string}
     * @memberof WatchlistScreeningEntityUpdateRequest
     */
    entity_watchlist_screening_id: string;
    /**
     * 
     * @type {UpdateEntityScreeningRequestSearchTerms}
     * @memberof WatchlistScreeningEntityUpdateRequest
     */
    search_terms?: UpdateEntityScreeningRequestSearchTerms | null;
    /**
     * ID of the associated user.
     * @type {string}
     * @memberof WatchlistScreeningEntityUpdateRequest
     */
    assignee?: string;
    /**
     * 
     * @type {WatchlistScreeningStatus}
     * @memberof WatchlistScreeningEntityUpdateRequest
     */
    status?: WatchlistScreeningStatus;
    /**
     * A unique ID that identifies the end user in your system. This ID can also be used to associate user-specific data from other Plaid products. Financial Account Matching requires this field and the Link Token Create `client_user_id` to be consistent. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`.
     * @type {string}
     * @memberof WatchlistScreeningEntityUpdateRequest
     */
    client_user_id?: string;
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof WatchlistScreeningEntityUpdateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof WatchlistScreeningEntityUpdateRequest
     */
    secret?: string;
    /**
     * A list of fields to reset back to null
     * @type {Array<WatchlistScreeningEntityUpdateRequestResettableField>}
     * @memberof WatchlistScreeningEntityUpdateRequest
     */
    reset_fields?: Array<WatchlistScreeningEntityUpdateRequestResettableField> | null;
}
/**
 * The name of a field that can be reset back to null
 * @export
 * @enum {string}
 */
export enum WatchlistScreeningEntityUpdateRequestResettableField {
    Assignee = 'assignee'
}

/**
 * The entity screening object allows you to represent an entity in your system, update its profile, and search for it on various watchlists. Note: Rejected entity screenings will not receive new hits, regardless of entity program configuration.
 * @export
 * @interface WatchlistScreeningEntityUpdateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningEntityUpdateResponse {
    [key: string]: object | unknown;

    /**
     * ID of the associated entity screening.
     * @type {string}
     * @memberof WatchlistScreeningEntityUpdateResponse
     */
    id: string;
    /**
     * 
     * @type {EntityWatchlistScreeningSearchTerms}
     * @memberof WatchlistScreeningEntityUpdateResponse
     */
    search_terms: EntityWatchlistScreeningSearchTerms;
    /**
     * ID of the associated user.
     * @type {string}
     * @memberof WatchlistScreeningEntityUpdateResponse
     */
    assignee: string | null;
    /**
     * 
     * @type {WatchlistScreeningStatus}
     * @memberof WatchlistScreeningEntityUpdateResponse
     */
    status: WatchlistScreeningStatus;
    /**
     * A unique ID that identifies the end user in your system. This ID can also be used to associate user-specific data from other Plaid products. Financial Account Matching requires this field and the Link Token Create `client_user_id` to be consistent. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`.
     * @type {string}
     * @memberof WatchlistScreeningEntityUpdateResponse
     */
    client_user_id: string | null;
    /**
     * 
     * @type {WatchlistScreeningAuditTrail}
     * @memberof WatchlistScreeningEntityUpdateResponse
     */
    audit_trail: WatchlistScreeningAuditTrail;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof WatchlistScreeningEntityUpdateResponse
     */
    request_id: string;
}
/**
 * Data from a government watchlist or PEP list that has been attached to the screening.
 * @export
 * @interface WatchlistScreeningHit
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningHit {
    [key: string]: object | unknown;

    /**
     * ID of the associated screening hit.
     * @type {string}
     * @memberof WatchlistScreeningHit
     */
    id: string;
    /**
     * 
     * @type {WatchlistScreeningHitStatus}
     * @memberof WatchlistScreeningHit
     */
    review_status: WatchlistScreeningHitStatus;
    /**
     * An ISO8601 formatted timestamp.
     * @type {string}
     * @memberof WatchlistScreeningHit
     */
    first_active: string;
    /**
     * An ISO8601 formatted timestamp.
     * @type {string}
     * @memberof WatchlistScreeningHit
     */
    inactive_since: string | null;
    /**
     * An ISO8601 formatted timestamp.
     * @type {string}
     * @memberof WatchlistScreeningHit
     */
    historical_since: string | null;
    /**
     * 
     * @type {IndividualWatchlistCode}
     * @memberof WatchlistScreeningHit
     */
    list_code: IndividualWatchlistCode;
    /**
     * A universal identifier for a watchlist individual that is stable across searches and updates.
     * @type {string}
     * @memberof WatchlistScreeningHit
     */
    plaid_uid: string;
    /**
     * The identifier provided by the source sanction or watchlist. When one is not provided by the source, this is `null`.
     * @type {string}
     * @memberof WatchlistScreeningHit
     */
    source_uid: string | null;
    /**
     * 
     * @type {ScreeningHitAnalysis}
     * @memberof WatchlistScreeningHit
     */
    analysis?: ScreeningHitAnalysis;
    /**
     * 
     * @type {ScreeningHitData}
     * @memberof WatchlistScreeningHit
     */
    data?: ScreeningHitData;
}
/**
 * Location information for the associated individual watchlist hit
 * @export
 * @interface WatchlistScreeningHitLocations
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningHitLocations {
    [key: string]: object | unknown;

    /**
     * The full location string, potentially including elements like street, city, postal codes and country codes. Note that this is not necessarily a complete or well-formatted address.
     * @type {string}
     * @memberof WatchlistScreeningHitLocations
     */
    full: string;
    /**
     * Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form.
     * @type {string}
     * @memberof WatchlistScreeningHitLocations
     */
    country: string;
}
/**
 * The current state of review. All watchlist screening hits begin in a `pending_review` state but can be changed by creating a review. When a hit is in the `pending_review` state, it will always show the latest version of the watchlist data Plaid has available and be compared against the latest customer information saved in the watchlist screening. Once a hit has been marked as `confirmed` or `dismissed` it will no longer be updated so that the state is as it was when the review was first conducted.
 * @export
 * @enum {string}
 */
export enum WatchlistScreeningHitStatus {
    Confirmed = 'confirmed',
    PendingReview = 'pending_review',
    Dismissed = 'dismissed'
}

/**
 * The screening object allows you to represent a customer in your system, update their profile, and search for them on various watchlists. Note: Rejected customers will not receive new hits, regardless of program configuration.
 * @export
 * @interface WatchlistScreeningIndividual
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningIndividual {
    [key: string]: object | unknown;

    /**
     * ID of the associated screening.
     * @type {string}
     * @memberof WatchlistScreeningIndividual
     */
    id: string;
    /**
     * 
     * @type {WatchlistScreeningSearchTerms}
     * @memberof WatchlistScreeningIndividual
     */
    search_terms: WatchlistScreeningSearchTerms;
    /**
     * ID of the associated user.
     * @type {string}
     * @memberof WatchlistScreeningIndividual
     */
    assignee: string | null;
    /**
     * 
     * @type {WatchlistScreeningStatus}
     * @memberof WatchlistScreeningIndividual
     */
    status: WatchlistScreeningStatus;
    /**
     * A unique ID that identifies the end user in your system. This ID can also be used to associate user-specific data from other Plaid products. Financial Account Matching requires this field and the Link Token Create `client_user_id` to be consistent. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`.
     * @type {string}
     * @memberof WatchlistScreeningIndividual
     */
    client_user_id: string | null;
    /**
     * 
     * @type {WatchlistScreeningAuditTrail}
     * @memberof WatchlistScreeningIndividual
     */
    audit_trail: WatchlistScreeningAuditTrail;
}
/**
 * Request input for creating an individual watchlist screening
 * @export
 * @interface WatchlistScreeningIndividualCreateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningIndividualCreateRequest {
    /**
     * 
     * @type {WatchlistScreeningRequestSearchTerms}
     * @memberof WatchlistScreeningIndividualCreateRequest
     */
    search_terms: WatchlistScreeningRequestSearchTerms;
    /**
     * A unique ID that identifies the end user in your system. This ID can also be used to associate user-specific data from other Plaid products. Financial Account Matching requires this field and the Link Token Create `client_user_id` to be consistent. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`.
     * @type {string}
     * @memberof WatchlistScreeningIndividualCreateRequest
     */
    client_user_id?: string;
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof WatchlistScreeningIndividualCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof WatchlistScreeningIndividualCreateRequest
     */
    secret?: string;
}
/**
 * The screening object allows you to represent a customer in your system, update their profile, and search for them on various watchlists. Note: Rejected customers will not receive new hits, regardless of program configuration.
 * @export
 * @interface WatchlistScreeningIndividualCreateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningIndividualCreateResponse {
    [key: string]: object | unknown;

    /**
     * ID of the associated screening.
     * @type {string}
     * @memberof WatchlistScreeningIndividualCreateResponse
     */
    id: string;
    /**
     * 
     * @type {WatchlistScreeningSearchTerms}
     * @memberof WatchlistScreeningIndividualCreateResponse
     */
    search_terms: WatchlistScreeningSearchTerms;
    /**
     * ID of the associated user.
     * @type {string}
     * @memberof WatchlistScreeningIndividualCreateResponse
     */
    assignee: string | null;
    /**
     * 
     * @type {WatchlistScreeningStatus}
     * @memberof WatchlistScreeningIndividualCreateResponse
     */
    status: WatchlistScreeningStatus;
    /**
     * A unique ID that identifies the end user in your system. This ID can also be used to associate user-specific data from other Plaid products. Financial Account Matching requires this field and the Link Token Create `client_user_id` to be consistent. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`.
     * @type {string}
     * @memberof WatchlistScreeningIndividualCreateResponse
     */
    client_user_id: string | null;
    /**
     * 
     * @type {WatchlistScreeningAuditTrail}
     * @memberof WatchlistScreeningIndividualCreateResponse
     */
    audit_trail: WatchlistScreeningAuditTrail;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof WatchlistScreeningIndividualCreateResponse
     */
    request_id: string;
}
/**
 * Request input for fetching an individual watchlist screening
 * @export
 * @interface WatchlistScreeningIndividualGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningIndividualGetRequest {
    /**
     * ID of the associated screening.
     * @type {string}
     * @memberof WatchlistScreeningIndividualGetRequest
     */
    watchlist_screening_id: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof WatchlistScreeningIndividualGetRequest
     */
    secret?: string;
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof WatchlistScreeningIndividualGetRequest
     */
    client_id?: string;
}
/**
 * The screening object allows you to represent a customer in your system, update their profile, and search for them on various watchlists. Note: Rejected customers will not receive new hits, regardless of program configuration.
 * @export
 * @interface WatchlistScreeningIndividualGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningIndividualGetResponse {
    [key: string]: object | unknown;

    /**
     * ID of the associated screening.
     * @type {string}
     * @memberof WatchlistScreeningIndividualGetResponse
     */
    id: string;
    /**
     * 
     * @type {WatchlistScreeningSearchTerms}
     * @memberof WatchlistScreeningIndividualGetResponse
     */
    search_terms: WatchlistScreeningSearchTerms;
    /**
     * ID of the associated user.
     * @type {string}
     * @memberof WatchlistScreeningIndividualGetResponse
     */
    assignee: string | null;
    /**
     * 
     * @type {WatchlistScreeningStatus}
     * @memberof WatchlistScreeningIndividualGetResponse
     */
    status: WatchlistScreeningStatus;
    /**
     * A unique ID that identifies the end user in your system. This ID can also be used to associate user-specific data from other Plaid products. Financial Account Matching requires this field and the Link Token Create `client_user_id` to be consistent. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`.
     * @type {string}
     * @memberof WatchlistScreeningIndividualGetResponse
     */
    client_user_id: string | null;
    /**
     * 
     * @type {WatchlistScreeningAuditTrail}
     * @memberof WatchlistScreeningIndividualGetResponse
     */
    audit_trail: WatchlistScreeningAuditTrail;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof WatchlistScreeningIndividualGetResponse
     */
    request_id: string;
}
/**
 * Request input for listing changes to watchlist screenings for individuals
 * @export
 * @interface WatchlistScreeningIndividualHistoryListRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningIndividualHistoryListRequest {
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof WatchlistScreeningIndividualHistoryListRequest
     */
    secret?: string;
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof WatchlistScreeningIndividualHistoryListRequest
     */
    client_id?: string;
    /**
     * ID of the associated screening.
     * @type {string}
     * @memberof WatchlistScreeningIndividualHistoryListRequest
     */
    watchlist_screening_id: string;
    /**
     * An identifier that determines which page of results you receive.
     * @type {string}
     * @memberof WatchlistScreeningIndividualHistoryListRequest
     */
    cursor?: string | null;
}
/**
 * Paginated list of individual watchlist screenings.
 * @export
 * @interface WatchlistScreeningIndividualHistoryListResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningIndividualHistoryListResponse {
    [key: string]: object | unknown;

    /**
     * List of individual watchlist screenings
     * @type {Array<WatchlistScreeningIndividual>}
     * @memberof WatchlistScreeningIndividualHistoryListResponse
     */
    watchlist_screenings: Array<WatchlistScreeningIndividual>;
    /**
     * An identifier that determines which page of results you receive.
     * @type {string}
     * @memberof WatchlistScreeningIndividualHistoryListResponse
     */
    next_cursor: string | null;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof WatchlistScreeningIndividualHistoryListResponse
     */
    request_id: string;
}
/**
 * Request input for listing hits for an individual watchlist screening
 * @export
 * @interface WatchlistScreeningIndividualHitListRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningIndividualHitListRequest {
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof WatchlistScreeningIndividualHitListRequest
     */
    secret?: string;
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof WatchlistScreeningIndividualHitListRequest
     */
    client_id?: string;
    /**
     * ID of the associated screening.
     * @type {string}
     * @memberof WatchlistScreeningIndividualHitListRequest
     */
    watchlist_screening_id: string;
    /**
     * An identifier that determines which page of results you receive.
     * @type {string}
     * @memberof WatchlistScreeningIndividualHitListRequest
     */
    cursor?: string | null;
}
/**
 * Paginated list of individual watchlist screening hits
 * @export
 * @interface WatchlistScreeningIndividualHitListResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningIndividualHitListResponse {
    [key: string]: object | unknown;

    /**
     * List of individual watchlist screening hits
     * @type {Array<WatchlistScreeningHit>}
     * @memberof WatchlistScreeningIndividualHitListResponse
     */
    watchlist_screening_hits: Array<WatchlistScreeningHit>;
    /**
     * An identifier that determines which page of results you receive.
     * @type {string}
     * @memberof WatchlistScreeningIndividualHitListResponse
     */
    next_cursor: string | null;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof WatchlistScreeningIndividualHitListResponse
     */
    request_id: string;
}
/**
 * Request input for listinging watchlist screenings for individuals
 * @export
 * @interface WatchlistScreeningIndividualListRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningIndividualListRequest {
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof WatchlistScreeningIndividualListRequest
     */
    secret?: string;
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof WatchlistScreeningIndividualListRequest
     */
    client_id?: string;
    /**
     * ID of the associated program.
     * @type {string}
     * @memberof WatchlistScreeningIndividualListRequest
     */
    watchlist_program_id: string;
    /**
     * A unique ID that identifies the end user in your system. This ID can also be used to associate user-specific data from other Plaid products. Financial Account Matching requires this field and the Link Token Create `client_user_id` to be consistent. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`.
     * @type {string}
     * @memberof WatchlistScreeningIndividualListRequest
     */
    client_user_id?: string;
    /**
     * 
     * @type {WatchlistScreeningStatus}
     * @memberof WatchlistScreeningIndividualListRequest
     */
    status?: WatchlistScreeningStatus;
    /**
     * ID of the associated user.
     * @type {string}
     * @memberof WatchlistScreeningIndividualListRequest
     */
    assignee?: string;
    /**
     * An identifier that determines which page of results you receive.
     * @type {string}
     * @memberof WatchlistScreeningIndividualListRequest
     */
    cursor?: string | null;
}
/**
 * Paginated list of individual watchlist screenings.
 * @export
 * @interface WatchlistScreeningIndividualListResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningIndividualListResponse {
    [key: string]: object | unknown;

    /**
     * List of individual watchlist screenings
     * @type {Array<WatchlistScreeningIndividual>}
     * @memberof WatchlistScreeningIndividualListResponse
     */
    watchlist_screenings: Array<WatchlistScreeningIndividual>;
    /**
     * An identifier that determines which page of results you receive.
     * @type {string}
     * @memberof WatchlistScreeningIndividualListResponse
     */
    next_cursor: string | null;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof WatchlistScreeningIndividualListResponse
     */
    request_id: string;
}
/**
 * Request input for fetching an individual watchlist program
 * @export
 * @interface WatchlistScreeningIndividualProgramGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningIndividualProgramGetRequest {
    /**
     * ID of the associated program.
     * @type {string}
     * @memberof WatchlistScreeningIndividualProgramGetRequest
     */
    watchlist_program_id: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof WatchlistScreeningIndividualProgramGetRequest
     */
    secret?: string;
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof WatchlistScreeningIndividualProgramGetRequest
     */
    client_id?: string;
}
/**
 * A program that configures the active lists, search parameters, and other behavior for initial and ongoing screening of individuals.
 * @export
 * @interface WatchlistScreeningIndividualProgramGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningIndividualProgramGetResponse {
    [key: string]: object | unknown;

    /**
     * ID of the associated program.
     * @type {string}
     * @memberof WatchlistScreeningIndividualProgramGetResponse
     */
    id: string;
    /**
     * An ISO8601 formatted timestamp.
     * @type {string}
     * @memberof WatchlistScreeningIndividualProgramGetResponse
     */
    created_at: string;
    /**
     * Indicator specifying whether the program is enabled and will perform daily rescans.
     * @type {boolean}
     * @memberof WatchlistScreeningIndividualProgramGetResponse
     */
    is_rescanning_enabled: boolean;
    /**
     * Watchlists enabled for the associated program
     * @type {Set<IndividualWatchlistCode>}
     * @memberof WatchlistScreeningIndividualProgramGetResponse
     */
    lists_enabled: Set<IndividualWatchlistCode>;
    /**
     * A name for the program to define its purpose. For example, \"High Risk Individuals\", \"US Cardholders\", or \"Applicants\".
     * @type {string}
     * @memberof WatchlistScreeningIndividualProgramGetResponse
     */
    name: string;
    /**
     * 
     * @type {ProgramNameSensitivity}
     * @memberof WatchlistScreeningIndividualProgramGetResponse
     */
    name_sensitivity: ProgramNameSensitivity;
    /**
     * 
     * @type {WatchlistScreeningAuditTrail}
     * @memberof WatchlistScreeningIndividualProgramGetResponse
     */
    audit_trail: WatchlistScreeningAuditTrail;
    /**
     * Archived programs are read-only and cannot screen new customers nor participate in ongoing monitoring.
     * @type {boolean}
     * @memberof WatchlistScreeningIndividualProgramGetResponse
     */
    is_archived: boolean;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof WatchlistScreeningIndividualProgramGetResponse
     */
    request_id: string;
}
/**
 * Request input for listing watchlist screening programs for individuals
 * @export
 * @interface WatchlistScreeningIndividualProgramListRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningIndividualProgramListRequest {
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof WatchlistScreeningIndividualProgramListRequest
     */
    secret?: string;
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof WatchlistScreeningIndividualProgramListRequest
     */
    client_id?: string;
    /**
     * An identifier that determines which page of results you receive.
     * @type {string}
     * @memberof WatchlistScreeningIndividualProgramListRequest
     */
    cursor?: string | null;
}
/**
 * Paginated list of individual watchlist screening programs
 * @export
 * @interface WatchlistScreeningIndividualProgramListResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningIndividualProgramListResponse {
    [key: string]: object | unknown;

    /**
     * List of individual watchlist screening programs
     * @type {Array<IndividualWatchlistProgram>}
     * @memberof WatchlistScreeningIndividualProgramListResponse
     */
    watchlist_programs: Array<IndividualWatchlistProgram>;
    /**
     * An identifier that determines which page of results you receive.
     * @type {string}
     * @memberof WatchlistScreeningIndividualProgramListResponse
     */
    next_cursor: string | null;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof WatchlistScreeningIndividualProgramListResponse
     */
    request_id: string;
}
/**
 * Request input for creating a screening review
 * @export
 * @interface WatchlistScreeningIndividualReviewCreateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningIndividualReviewCreateRequest {
    /**
     * Hits to mark as a true positive after thorough manual review. These hits will never recur or be updated once dismissed. In most cases, confirmed hits indicate that the customer should be rejected.
     * @type {Array<string>}
     * @memberof WatchlistScreeningIndividualReviewCreateRequest
     */
    confirmed_hits: Array<string>;
    /**
     * Hits to mark as a false positive after thorough manual review. These hits will never recur or be updated once dismissed.
     * @type {Array<string>}
     * @memberof WatchlistScreeningIndividualReviewCreateRequest
     */
    dismissed_hits: Array<string>;
    /**
     * A comment submitted by a team member as part of reviewing a watchlist screening.
     * @type {string}
     * @memberof WatchlistScreeningIndividualReviewCreateRequest
     */
    comment?: string | null;
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof WatchlistScreeningIndividualReviewCreateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof WatchlistScreeningIndividualReviewCreateRequest
     */
    secret?: string;
    /**
     * ID of the associated screening.
     * @type {string}
     * @memberof WatchlistScreeningIndividualReviewCreateRequest
     */
    watchlist_screening_id: string;
}
/**
 * A review submitted by a team member for an individual watchlist screening. A review can be either a comment on the current screening state, actions taken against hits attached to the watchlist screening, or both.
 * @export
 * @interface WatchlistScreeningIndividualReviewCreateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningIndividualReviewCreateResponse {
    [key: string]: object | unknown;

    /**
     * ID of the associated review.
     * @type {string}
     * @memberof WatchlistScreeningIndividualReviewCreateResponse
     */
    id: string;
    /**
     * Hits marked as a true positive after thorough manual review. These hits will never recur or be updated once dismissed. In most cases, confirmed hits indicate that the customer should be rejected.
     * @type {Array<string>}
     * @memberof WatchlistScreeningIndividualReviewCreateResponse
     */
    confirmed_hits: Array<string>;
    /**
     * Hits marked as a false positive after thorough manual review. These hits will never recur or be updated once dismissed.
     * @type {Array<string>}
     * @memberof WatchlistScreeningIndividualReviewCreateResponse
     */
    dismissed_hits: Array<string>;
    /**
     * A comment submitted by a team member as part of reviewing a watchlist screening.
     * @type {string}
     * @memberof WatchlistScreeningIndividualReviewCreateResponse
     */
    comment: string | null;
    /**
     * 
     * @type {WatchlistScreeningAuditTrail}
     * @memberof WatchlistScreeningIndividualReviewCreateResponse
     */
    audit_trail: WatchlistScreeningAuditTrail;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof WatchlistScreeningIndividualReviewCreateResponse
     */
    request_id: string;
}
/**
 * Request input for listing reviews for an individual watchlist screening
 * @export
 * @interface WatchlistScreeningIndividualReviewListRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningIndividualReviewListRequest {
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof WatchlistScreeningIndividualReviewListRequest
     */
    secret?: string;
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof WatchlistScreeningIndividualReviewListRequest
     */
    client_id?: string;
    /**
     * ID of the associated screening.
     * @type {string}
     * @memberof WatchlistScreeningIndividualReviewListRequest
     */
    watchlist_screening_id: string;
    /**
     * An identifier that determines which page of results you receive.
     * @type {string}
     * @memberof WatchlistScreeningIndividualReviewListRequest
     */
    cursor?: string | null;
}
/**
 * Paginated list of screening reviews
 * @export
 * @interface WatchlistScreeningIndividualReviewListResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningIndividualReviewListResponse {
    [key: string]: object | unknown;

    /**
     * List of screening reviews
     * @type {Array<WatchlistScreeningReview>}
     * @memberof WatchlistScreeningIndividualReviewListResponse
     */
    watchlist_screening_reviews: Array<WatchlistScreeningReview>;
    /**
     * An identifier that determines which page of results you receive.
     * @type {string}
     * @memberof WatchlistScreeningIndividualReviewListResponse
     */
    next_cursor: string | null;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof WatchlistScreeningIndividualReviewListResponse
     */
    request_id: string;
}
/**
 * Request input for editing an individual watchlist screening
 * @export
 * @interface WatchlistScreeningIndividualUpdateRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningIndividualUpdateRequest {
    /**
     * ID of the associated screening.
     * @type {string}
     * @memberof WatchlistScreeningIndividualUpdateRequest
     */
    watchlist_screening_id: string;
    /**
     * 
     * @type {UpdateIndividualScreeningRequestSearchTerms}
     * @memberof WatchlistScreeningIndividualUpdateRequest
     */
    search_terms?: UpdateIndividualScreeningRequestSearchTerms | null;
    /**
     * ID of the associated user.
     * @type {string}
     * @memberof WatchlistScreeningIndividualUpdateRequest
     */
    assignee?: string;
    /**
     * 
     * @type {WatchlistScreeningStatus}
     * @memberof WatchlistScreeningIndividualUpdateRequest
     */
    status?: WatchlistScreeningStatus;
    /**
     * A unique ID that identifies the end user in your system. This ID can also be used to associate user-specific data from other Plaid products. Financial Account Matching requires this field and the Link Token Create `client_user_id` to be consistent. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`.
     * @type {string}
     * @memberof WatchlistScreeningIndividualUpdateRequest
     */
    client_user_id?: string;
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof WatchlistScreeningIndividualUpdateRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof WatchlistScreeningIndividualUpdateRequest
     */
    secret?: string;
    /**
     * A list of fields to reset back to null
     * @type {Array<WatchlistScreeningIndividualUpdateRequestResettableField>}
     * @memberof WatchlistScreeningIndividualUpdateRequest
     */
    reset_fields?: Array<WatchlistScreeningIndividualUpdateRequestResettableField> | null;
}
/**
 * The name of a field that can be reset back to null
 * @export
 * @enum {string}
 */
export enum WatchlistScreeningIndividualUpdateRequestResettableField {
    Assignee = 'assignee'
}

/**
 * The screening object allows you to represent a customer in your system, update their profile, and search for them on various watchlists. Note: Rejected customers will not receive new hits, regardless of program configuration.
 * @export
 * @interface WatchlistScreeningIndividualUpdateResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningIndividualUpdateResponse {
    [key: string]: object | unknown;

    /**
     * ID of the associated screening.
     * @type {string}
     * @memberof WatchlistScreeningIndividualUpdateResponse
     */
    id: string;
    /**
     * 
     * @type {WatchlistScreeningSearchTerms}
     * @memberof WatchlistScreeningIndividualUpdateResponse
     */
    search_terms: WatchlistScreeningSearchTerms;
    /**
     * ID of the associated user.
     * @type {string}
     * @memberof WatchlistScreeningIndividualUpdateResponse
     */
    assignee: string | null;
    /**
     * 
     * @type {WatchlistScreeningStatus}
     * @memberof WatchlistScreeningIndividualUpdateResponse
     */
    status: WatchlistScreeningStatus;
    /**
     * A unique ID that identifies the end user in your system. This ID can also be used to associate user-specific data from other Plaid products. Financial Account Matching requires this field and the Link Token Create `client_user_id` to be consistent. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`.
     * @type {string}
     * @memberof WatchlistScreeningIndividualUpdateResponse
     */
    client_user_id: string | null;
    /**
     * 
     * @type {WatchlistScreeningAuditTrail}
     * @memberof WatchlistScreeningIndividualUpdateResponse
     */
    audit_trail: WatchlistScreeningAuditTrail;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof WatchlistScreeningIndividualUpdateResponse
     */
    request_id: string;
}
/**
 * Search inputs for creating a watchlist screening
 * @export
 * @interface WatchlistScreeningRequestSearchTerms
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningRequestSearchTerms {
    /**
     * ID of the associated program.
     * @type {string}
     * @memberof WatchlistScreeningRequestSearchTerms
     */
    watchlist_program_id: string;
    /**
     * The legal name of the individual being screened.
     * @type {string}
     * @memberof WatchlistScreeningRequestSearchTerms
     */
    legal_name: string;
    /**
     * A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
     * @type {string}
     * @memberof WatchlistScreeningRequestSearchTerms
     */
    date_of_birth?: string;
    /**
     * The numeric or alphanumeric identifier associated with this document.
     * @type {string}
     * @memberof WatchlistScreeningRequestSearchTerms
     */
    document_number?: string;
    /**
     * Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form.
     * @type {string}
     * @memberof WatchlistScreeningRequestSearchTerms
     */
    country?: string;
}
/**
 * A review submitted by a team member for an individual watchlist screening. A review can be either a comment on the current screening state, actions taken against hits attached to the watchlist screening, or both.
 * @export
 * @interface WatchlistScreeningReview
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningReview {
    [key: string]: object | unknown;

    /**
     * ID of the associated review.
     * @type {string}
     * @memberof WatchlistScreeningReview
     */
    id: string;
    /**
     * Hits marked as a true positive after thorough manual review. These hits will never recur or be updated once dismissed. In most cases, confirmed hits indicate that the customer should be rejected.
     * @type {Array<string>}
     * @memberof WatchlistScreeningReview
     */
    confirmed_hits: Array<string>;
    /**
     * Hits marked as a false positive after thorough manual review. These hits will never recur or be updated once dismissed.
     * @type {Array<string>}
     * @memberof WatchlistScreeningReview
     */
    dismissed_hits: Array<string>;
    /**
     * A comment submitted by a team member as part of reviewing a watchlist screening.
     * @type {string}
     * @memberof WatchlistScreeningReview
     */
    comment: string | null;
    /**
     * 
     * @type {WatchlistScreeningAuditTrail}
     * @memberof WatchlistScreeningReview
     */
    audit_trail: WatchlistScreeningAuditTrail;
}
/**
 * Search terms for creating an individual watchlist screening
 * @export
 * @interface WatchlistScreeningSearchTerms
 */
// Edited by Plaid, line 9. any to unknown
export interface WatchlistScreeningSearchTerms {
    [key: string]: object | unknown;

    /**
     * ID of the associated program.
     * @type {string}
     * @memberof WatchlistScreeningSearchTerms
     */
    watchlist_program_id: string;
    /**
     * The legal name of the individual being screened.
     * @type {string}
     * @memberof WatchlistScreeningSearchTerms
     */
    legal_name: string;
    /**
     * A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
     * @type {string}
     * @memberof WatchlistScreeningSearchTerms
     */
    date_of_birth: string | null;
    /**
     * The numeric or alphanumeric identifier associated with this document.
     * @type {string}
     * @memberof WatchlistScreeningSearchTerms
     */
    document_number: string | null;
    /**
     * Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form.
     * @type {string}
     * @memberof WatchlistScreeningSearchTerms
     */
    country: string | null;
    /**
     * The current version of the search terms. Starts at `1` and increments with each edit to `search_terms`.
     * @type {number}
     * @memberof WatchlistScreeningSearchTerms
     */
    version: number;
}
/**
 * A status enum indicating whether a screening is still pending review, has been rejected, or has been cleared.
 * @export
 * @enum {string}
 */
export enum WatchlistScreeningStatus {
    Rejected = 'rejected',
    PendingReview = 'pending_review',
    Cleared = 'cleared'
}

/**
 * Names that are explicitly marked as low quality either by their `source` list, or by `plaid` by a series of additional checks done by Plaid. Plaid does not ever surface a hit as a result of a weak name alone. If a name has no quality issues, this value will be `none`.
 * @export
 * @enum {string}
 */
export enum WeakAliasDetermination {
    None = 'none',
    Source = 'source',
    Plaid = 'plaid'
}

/**
 * The Plaid environment the webhook was sent from
 * @export
 * @enum {string}
 */
export enum WebhookEnvironmentValues {
    Development = 'development',
    Sandbox = 'sandbox',
    Production = 'production'
}

/**
 * The webhook types that can be fired by this test endpoint.
 * @export
 * @enum {string}
 */
export enum WebhookType {
    Auth = 'AUTH',
    Holdings = 'HOLDINGS',
    InvestmentsTransactions = 'INVESTMENTS_TRANSACTIONS',
    Item = 'ITEM',
    Liabilities = 'LIABILITIES',
    Transactions = 'TRANSACTIONS',
    Assets = 'ASSETS'
}

/**
 * Fired when an Item\'s webhook is updated. This will be sent to the newly specified webhook.
 * @export
 * @interface WebhookUpdateAcknowledgedWebhook
 */
// Edited by Plaid, line 9. any to unknown
export interface WebhookUpdateAcknowledgedWebhook {
    [key: string]: object | unknown;

    /**
     * `ITEM`
     * @type {string}
     * @memberof WebhookUpdateAcknowledgedWebhook
     */
    webhook_type: string;
    /**
     * `WEBHOOK_UPDATE_ACKNOWLEDGED`
     * @type {string}
     * @memberof WebhookUpdateAcknowledgedWebhook
     */
    webhook_code: string;
    /**
     * The `item_id` of the Item associated with this webhook, warning, or error
     * @type {string}
     * @memberof WebhookUpdateAcknowledgedWebhook
     */
    item_id: string;
    /**
     * The new webhook URL
     * @type {string}
     * @memberof WebhookUpdateAcknowledgedWebhook
     */
    new_webhook_url: string;
    /**
     * 
     * @type {PlaidError}
     * @memberof WebhookUpdateAcknowledgedWebhook
     */
    error?: PlaidError | null;
    /**
     * 
     * @type {WebhookEnvironmentValues}
     * @memberof WebhookUpdateAcknowledgedWebhook
     */
    environment: WebhookEnvironmentValues;
}
/**
 * WebhookVerificationKeyGetRequest defines the request schema for `/webhook_verification_key/get`
 * @export
 * @interface WebhookVerificationKeyGetRequest
 */
// Edited by Plaid, line 9. any to unknown
export interface WebhookVerificationKeyGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof WebhookVerificationKeyGetRequest
     */
    client_id?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof WebhookVerificationKeyGetRequest
     */
    secret?: string;
    /**
     * The key ID ( `kid` ) from the JWT header.
     * @type {string}
     * @memberof WebhookVerificationKeyGetRequest
     */
    key_id: string;
}
/**
 * WebhookVerificationKeyGetResponse defines the response schema for `/webhook_verification_key/get`
 * @export
 * @interface WebhookVerificationKeyGetResponse
 */
// Edited by Plaid, line 9. any to unknown
export interface WebhookVerificationKeyGetResponse {
    [key: string]: object | unknown;

    /**
     * 
     * @type {JWKPublicKey}
     * @memberof WebhookVerificationKeyGetResponse
     */
    key: JWKPublicKey;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof WebhookVerificationKeyGetResponse
     */
    request_id: string;
}
/**
 * Year-to-date pre-tax earnings, as reported on the paystub.
 * @export
 * @interface YTDGrossIncomeSummaryFieldNumber
 */
// Edited by Plaid, line 9. any to unknown
export interface YTDGrossIncomeSummaryFieldNumber {
    /**
     * The value of the field.
     * @type {number}
     * @memberof YTDGrossIncomeSummaryFieldNumber
     */
    value: number;
    /**
     * 
     * @type {VerificationStatus}
     * @memberof YTDGrossIncomeSummaryFieldNumber
     */
    verification_status: VerificationStatus;
}
/**
 * Year-to-date earnings after any tax withholdings, benefit payments or deductions, as reported on the paystub.
 * @export
 * @interface YTDNetIncomeSummaryFieldNumber
 */
// Edited by Plaid, line 9. any to unknown
export interface YTDNetIncomeSummaryFieldNumber {
    /**
     * The value of the field.
     * @type {number}
     * @memberof YTDNetIncomeSummaryFieldNumber
     */
    value: number;
    /**
     * 
     * @type {VerificationStatus}
     * @memberof YTDNetIncomeSummaryFieldNumber
     */
    verification_status: VerificationStatus;
}

/**
 * PlaidApi - axios parameter creator
 * @export
 */
export const PlaidApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The `/accounts/balance/get` endpoint returns the real-time balance for each of an Item\'s accounts. While other endpoints may return a balance object, only `/accounts/balance/get` forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, `balance` itself is not a product that can be used to initialize Link. As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints; if you encounter errors, you may find it necessary to adjust your timeout period when making requests.
         * @summary Retrieve real-time balance data
         * @param {AccountsBalanceGetRequest} accountsBalanceGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsBalanceGet: async (accountsBalanceGetRequest: AccountsBalanceGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountsBalanceGetRequest' is not null or undefined
            assertParamExists('accountsBalanceGet', 'accountsBalanceGetRequest', accountsBalanceGetRequest)
            const localVarPath = `/accounts/balance/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountsBalanceGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/accounts/get` endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance. For items that went through the updated account selection pane, this endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [`NEW_ACCOUNTS_AVAILABLE`](https://plaid.com/docs/api/items/#new_accounts_available) webhook and then use Link\'s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, balances returned may not be up-to-date; for realtime balance information, use `/accounts/balance/get` instead. Note that some information is nullable.
         * @summary Retrieve accounts
         * @param {AccountsGetRequest} accountsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsGet: async (accountsGetRequest: AccountsGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountsGetRequest' is not null or undefined
            assertParamExists('accountsGet', 'accountsGetRequest', accountsGetRequest)
            const localVarPath = `/accounts/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountsGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences
         * @summary Retrieve information about a Plaid application
         * @param {ApplicationGetRequest} applicationGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationGet: async (applicationGetRequest: ApplicationGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'applicationGetRequest' is not null or undefined
            assertParamExists('applicationGet', 'applicationGetRequest', applicationGetRequest)
            const localVarPath = `/application/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(applicationGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the `/asset_report/audit_copy/create` endpoint to create an `audit_copy_token` and then pass that token to the third party who needs access. Each third party has its own `auditor_id`, for example `fannie_mae`. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
         * @summary Create Asset Report Audit Copy
         * @param {AssetReportAuditCopyCreateRequest} assetReportAuditCopyCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportAuditCopyCreate: async (assetReportAuditCopyCreateRequest: AssetReportAuditCopyCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetReportAuditCopyCreateRequest' is not null or undefined
            assertParamExists('assetReportAuditCopyCreate', 'assetReportAuditCopyCreateRequest', assetReportAuditCopyCreateRequest)
            const localVarPath = `/asset_report/audit_copy/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(assetReportAuditCopyCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * `/asset_report/audit_copy/get` allows auditors to get a copy of an Asset Report that was previously shared via the `/asset_report/audit_copy/create` endpoint.  The caller of `/asset_report/audit_copy/create` must provide the `audit_copy_token` to the auditor.  This token can then be used to call `/asset_report/audit_copy/create`.
         * @summary Retrieve an Asset Report Audit Copy
         * @param {AssetReportAuditCopyGetRequest} assetReportAuditCopyGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportAuditCopyGet: async (assetReportAuditCopyGetRequest: AssetReportAuditCopyGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetReportAuditCopyGetRequest' is not null or undefined
            assertParamExists('assetReportAuditCopyGet', 'assetReportAuditCopyGetRequest', assetReportAuditCopyGetRequest)
            const localVarPath = `/asset_report/audit_copy/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(assetReportAuditCopyGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/asset_report/audit_copy/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
         * @summary Remove Asset Report Audit Copy
         * @param {AssetReportAuditCopyRemoveRequest} assetReportAuditCopyRemoveRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportAuditCopyRemove: async (assetReportAuditCopyRemoveRequest: AssetReportAuditCopyRemoveRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetReportAuditCopyRemoveRequest' is not null or undefined
            assertParamExists('assetReportAuditCopyRemove', 'assetReportAuditCopyRemoveRequest', assetReportAuditCopyRemoveRequest)
            const localVarPath = `/asset_report/audit_copy/remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(assetReportAuditCopyRemoveRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/asset_report/create` endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the `asset_report_token` return value to the `/asset_report/get` or `/asset_report/pdf/get` endpoints.  The Asset Report takes some time to be created and is not available immediately after calling `/asset_report/create`. When the Asset Report is ready to be retrieved using `/asset_report/get` or `/asset_report/pdf/get`, Plaid will fire a `PRODUCT_READY` webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/products/assets/#webhooks).  The `/asset_report/create` endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the `/asset_report/refresh` endpoint.
         * @summary Create an Asset Report
         * @param {AssetReportCreateRequest} assetReportCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportCreate: async (assetReportCreateRequest: AssetReportCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetReportCreateRequest' is not null or undefined
            assertParamExists('assetReportCreate', 'assetReportCreateRequest', assetReportCreateRequest)
            const localVarPath = `/asset_report/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(assetReportCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the `/accounts/get` endpoint. To narrow an Asset Report to only a subset of accounts, use the `/asset_report/filter` endpoint.  To exclude certain Accounts from an Asset Report, first use the `/asset_report/create` endpoint to create the report, then send the `asset_report_token` along with a list of `account_ids` to exclude to the `/asset_report/filter` endpoint, to create a new Asset Report which contains only a subset of the original Asset Report\'s data.  Because Asset Reports are immutable, calling `/asset_report/filter` does not alter the original Asset Report in any way; rather, `/asset_report/filter` creates a new Asset Report with a new token and id. Asset Reports created via `/asset_report/filter` do not contain new Asset data, and are not billed.  Plaid will fire a [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook once generation of the filtered Asset Report has completed.
         * @summary Filter Asset Report
         * @param {AssetReportFilterRequest} assetReportFilterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportFilter: async (assetReportFilterRequest: AssetReportFilterRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetReportFilterRequest' is not null or undefined
            assertParamExists('assetReportFilter', 'assetReportFilterRequest', assetReportFilterRequest)
            const localVarPath = `/asset_report/filter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(assetReportFilterRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/asset_report/get` endpoint retrieves the Asset Report in JSON format. Before calling `/asset_report/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report.  If report_type was set to `VERIFICATION_OF_EMPLOYMENT` when the Asset Report was created in asset_report/create, debit transactions and transaction amounts won’t be included in the report.  To retrieve an Asset Report with Insights, call the `/asset_report/get` endpoint with `include_insights` set to `true`.
         * @summary Retrieve an Asset Report
         * @param {AssetReportGetRequest} assetReportGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportGet: async (assetReportGetRequest: AssetReportGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetReportGetRequest' is not null or undefined
            assertParamExists('assetReportGet', 'assetReportGetRequest', assetReportGetRequest)
            const localVarPath = `/asset_report/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(assetReportGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/asset_report/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/asset_report/pdf/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/asset_report/pdf/get` is the PDF binary data. The `request_id`  is returned in the `Plaid-Request-ID` header.  If `report_type` was set to `VERIFICATION_OF_EMPLOYMENT` when the Asset Report was created in `/asset_report/create`, debit transactions and transaction amounts won’t be included in the report.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
         * @summary Retrieve a PDF Asset Report
         * @param {AssetReportPDFGetRequest} assetReportPDFGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportPdfGet: async (assetReportPDFGetRequest: AssetReportPDFGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetReportPDFGetRequest' is not null or undefined
            assertParamExists('assetReportPdfGet', 'assetReportPDFGetRequest', assetReportPDFGetRequest)
            const localVarPath = `/asset_report/pdf/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(assetReportPDFGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * An Asset Report is an immutable snapshot of a user\'s assets. In order to \"refresh\" an Asset Report you created previously, you can use the `/asset_report/refresh` endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to `/asset_report/filter`. By default, the new Asset Report will also use the same parameters you submitted with your original `/asset_report/create` request, but the original `days_requested` value and the values of any parameters in the `options` object can be overridden with new values. To change these arguments, simply supply new values for them in your request to `/asset_report/refresh`. Submit an empty string (\"\") for any previously-populated fields you would like set as empty.
         * @summary Refresh an Asset Report
         * @param {AssetReportRefreshRequest} assetReportRefreshRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportRefresh: async (assetReportRefreshRequest: AssetReportRefreshRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetReportRefreshRequest' is not null or undefined
            assertParamExists('assetReportRefresh', 'assetReportRefreshRequest', assetReportRefreshRequest)
            const localVarPath = `/asset_report/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(assetReportRefreshRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/item/remove` endpoint allows you to invalidate an `access_token`, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The `/asset_report/remove` endpoint allows you to remove an Asset Report. Removing an Asset Report invalidates its `asset_report_token`, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any `audit_copy_tokens` associated with the Asset Report.
         * @summary Delete an Asset Report
         * @param {AssetReportRemoveRequest} assetReportRemoveRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportRemove: async (assetReportRemoveRequest: AssetReportRemoveRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetReportRemoveRequest' is not null or undefined
            assertParamExists('assetReportRemove', 'assetReportRemoveRequest', assetReportRemoveRequest)
            const localVarPath = `/asset_report/remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(assetReportRemoveRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/auth/get` endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item\'s checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if `auth` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Versioning note: In API version 2017-03-08, the schema of the `numbers` object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
         * @summary Retrieve auth data
         * @param {AuthGetRequest} authGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGet: async (authGetRequest: AuthGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authGetRequest' is not null or undefined
            assertParamExists('authGet', 'authGetRequest', authGetRequest)
            const localVarPath = `/auth/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the `/bank_transfer/balance/get` endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
         * @summary Get balance of your Bank Transfer account
         * @param {BankTransferBalanceGetRequest} bankTransferBalanceGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferBalanceGet: async (bankTransferBalanceGetRequest: BankTransferBalanceGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bankTransferBalanceGetRequest' is not null or undefined
            assertParamExists('bankTransferBalanceGet', 'bankTransferBalanceGetRequest', bankTransferBalanceGetRequest)
            const localVarPath = `/bank_transfer/balance/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bankTransferBalanceGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the `/bank_transfer/cancel` endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/bank_transfer/get` is `true`.
         * @summary Cancel a bank transfer
         * @param {BankTransferCancelRequest} bankTransferCancelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferCancel: async (bankTransferCancelRequest: BankTransferCancelRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bankTransferCancelRequest' is not null or undefined
            assertParamExists('bankTransferCancel', 'bankTransferCancelRequest', bankTransferCancelRequest)
            const localVarPath = `/bank_transfer/cancel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bankTransferCancelRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the `/bank_transfer/create` endpoint to initiate a new bank transfer.
         * @summary Create a bank transfer
         * @param {BankTransferCreateRequest} bankTransferCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferCreate: async (bankTransferCreateRequest: BankTransferCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bankTransferCreateRequest' is not null or undefined
            assertParamExists('bankTransferCreate', 'bankTransferCreateRequest', bankTransferCreateRequest)
            const localVarPath = `/bank_transfer/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bankTransferCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the `/bank_transfer/event/list` endpoint to get a list of Plaid-initiated ACH or bank transfer events based on specified filter criteria. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://plaid.com/docs/auth/coverage/microdeposit-events/).
         * @summary List bank transfer events
         * @param {BankTransferEventListRequest} bankTransferEventListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferEventList: async (bankTransferEventListRequest: BankTransferEventListRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bankTransferEventListRequest' is not null or undefined
            assertParamExists('bankTransferEventList', 'bankTransferEventListRequest', bankTransferEventListRequest)
            const localVarPath = `/bank_transfer/event/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bankTransferEventListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * `/bank_transfer/event/sync` allows you to request up to the next 25 Plaid-initiated bank transfer events that happened after a specific `event_id`. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://www.plaid.com/docs/auth/coverage/microdeposit-events/).
         * @summary Sync bank transfer events
         * @param {BankTransferEventSyncRequest} bankTransferEventSyncRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferEventSync: async (bankTransferEventSyncRequest: BankTransferEventSyncRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bankTransferEventSyncRequest' is not null or undefined
            assertParamExists('bankTransferEventSync', 'bankTransferEventSyncRequest', bankTransferEventSyncRequest)
            const localVarPath = `/bank_transfer/event/sync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bankTransferEventSyncRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/bank_transfer/get` fetches information about the bank transfer corresponding to the given `bank_transfer_id`.
         * @summary Retrieve a bank transfer
         * @param {BankTransferGetRequest} bankTransferGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferGet: async (bankTransferGetRequest: BankTransferGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bankTransferGetRequest' is not null or undefined
            assertParamExists('bankTransferGet', 'bankTransferGetRequest', bankTransferGetRequest)
            const localVarPath = `/bank_transfer/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bankTransferGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the `/bank_transfer/list` endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired bank transfers. 
         * @summary List bank transfers
         * @param {BankTransferListRequest} bankTransferListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferList: async (bankTransferListRequest: BankTransferListRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bankTransferListRequest' is not null or undefined
            assertParamExists('bankTransferList', 'bankTransferListRequest', bankTransferListRequest)
            const localVarPath = `/bank_transfer/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bankTransferListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * As an alternative to adding Items via Link, you can also use the `/bank_transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/bank_transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
         * @summary Migrate account into Bank Transfers
         * @param {BankTransferMigrateAccountRequest} bankTransferMigrateAccountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferMigrateAccount: async (bankTransferMigrateAccountRequest: BankTransferMigrateAccountRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bankTransferMigrateAccountRequest' is not null or undefined
            assertParamExists('bankTransferMigrateAccount', 'bankTransferMigrateAccountRequest', bankTransferMigrateAccountRequest)
            const localVarPath = `/bank_transfer/migrate_account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bankTransferMigrateAccountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/bank_transfer/sweep/get` endpoint fetches information about the sweep corresponding to the given `sweep_id`.
         * @summary Retrieve a sweep
         * @param {BankTransferSweepGetRequest} bankTransferSweepGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferSweepGet: async (bankTransferSweepGetRequest: BankTransferSweepGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bankTransferSweepGetRequest' is not null or undefined
            assertParamExists('bankTransferSweepGet', 'bankTransferSweepGetRequest', bankTransferSweepGetRequest)
            const localVarPath = `/bank_transfer/sweep/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bankTransferSweepGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/bank_transfer/sweep/list` endpoint fetches information about the sweeps matching the given filters.
         * @summary List sweeps
         * @param {BankTransferSweepListRequest} bankTransferSweepListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferSweepList: async (bankTransferSweepListRequest: BankTransferSweepListRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bankTransferSweepListRequest' is not null or undefined
            assertParamExists('bankTransferSweepList', 'bankTransferSweepListRequest', bankTransferSweepListRequest)
            const localVarPath = `/bank_transfer/sweep/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bankTransferSweepListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send a request to the `/categories/get` endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.  All implementations are recommended to use the newer `personal_finance_category` taxonomy instead of the older `category` taxonomy supported by this endpoint. The [`personal_finance_category taxonomy` CSV file](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) is available for download and is not accessible via API.
         * @summary Get categories
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriesGet: async (body: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('categoriesGet', 'body', body)
            const localVarPath = `/categories/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/payment_initiation/payment/token/create` endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, `link_token`-based flow. The recommended flow is to provide the `payment_id` to `/link/token/create`, which returns a `link_token` used to initialize Link.  The `/payment_initiation/payment/token/create` is used to create a `payment_token`, which can then be used in Link initialization to enter a payment initiation flow. You can only use a `payment_token` once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
         * @summary Create payment token
         * @param {PaymentInitiationPaymentTokenCreateRequest} paymentInitiationPaymentTokenCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPaymentToken: async (paymentInitiationPaymentTokenCreateRequest: PaymentInitiationPaymentTokenCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentInitiationPaymentTokenCreateRequest' is not null or undefined
            assertParamExists('createPaymentToken', 'paymentInitiationPaymentTokenCreateRequest', paymentInitiationPaymentTokenCreateRequest)
            const localVarPath = `/payment_initiation/payment/token/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paymentInitiationPaymentTokenCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `credit/asset_report/freddie_mac/get` endpoint retrieves the Asset Report in Freddie Mac\'s JSON format.
         * @summary Retrieve an Asset Report with Freddie Mac format. Only Freddie Mac can use this endpoint.
         * @param {{ [key: string]: object; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditAssetReportFreddieMacGet: async (requestBody: { [key: string]: object; }, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('creditAssetReportFreddieMacGet', 'requestBody', requestBody)
            const localVarPath = `/credit/asset_report/freddie_mac/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Plaid can create an Audit Copy token of an Asset Report and/or Income Report to share with participating Government Sponsored Entity (GSE). If you participate in the Day 1 Certainty™ program, Plaid can supply an Audit Copy token directly to Fannie Mae on your behalf. An Audit Copy token contains the same underlying data as the Asset Report and/or Income Report (result of /credit/payroll_income/get).  Use the `/credit/audit_copy_token/create` endpoint to create an `audit_copy_token` and then pass that token to the GSE who needs access.
         * @summary Create Asset or Income Report Audit Copy Token
         * @param {CreditAuditCopyTokenCreateRequest} creditAuditCopyTokenCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditAuditCopyTokenCreate: async (creditAuditCopyTokenCreateRequest: CreditAuditCopyTokenCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditAuditCopyTokenCreateRequest' is not null or undefined
            assertParamExists('creditAuditCopyTokenCreate', 'creditAuditCopyTokenCreateRequest', creditAuditCopyTokenCreateRequest)
            const localVarPath = `/credit/audit_copy_token/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(creditAuditCopyTokenCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/credit/audit_copy_token/update` endpoint updates an existing  Audit Copy Token by adding the report tokens in the `report_tokens` field to the `audit_copy_token`. If the Audit Copy Token already contains a report of a certain type, it will be replaced with the token provided in the `report_tokens` field.
         * @summary Update an Audit Copy Token
         * @param {CreditAuditCopyTokenUpdateRequest} creditAuditCopyTokenUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditAuditCopyTokenUpdate: async (creditAuditCopyTokenUpdateRequest: CreditAuditCopyTokenUpdateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditAuditCopyTokenUpdateRequest' is not null or undefined
            assertParamExists('creditAuditCopyTokenUpdate', 'creditAuditCopyTokenUpdateRequest', creditAuditCopyTokenUpdateRequest)
            const localVarPath = `/credit/audit_copy_token/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(creditAuditCopyTokenUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * `/credit/bank_employment/get` returns the employment report(s) derived from bank transaction data for a specified user.
         * @summary Retrieve information from the bank accounts used for employment verification
         * @param {CreditBankEmploymentGetRequest} creditBankEmploymentGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankEmploymentGet: async (creditBankEmploymentGetRequest: CreditBankEmploymentGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditBankEmploymentGetRequest' is not null or undefined
            assertParamExists('creditBankEmploymentGet', 'creditBankEmploymentGetRequest', creditBankEmploymentGetRequest)
            const localVarPath = `/beta/credit/v1/bank_employment/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(creditBankEmploymentGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * `/credit/bank_income/get` returns the bank income report(s) for a specified user.
         * @summary Retrieve information from the bank accounts used for income verification
         * @param {CreditBankIncomeGetRequest} creditBankIncomeGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankIncomeGet: async (creditBankIncomeGetRequest: CreditBankIncomeGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditBankIncomeGetRequest' is not null or undefined
            assertParamExists('creditBankIncomeGet', 'creditBankIncomeGetRequest', creditBankIncomeGetRequest)
            const localVarPath = `/credit/bank_income/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(creditBankIncomeGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * `/credit/bank_income/pdf/get` returns the most recent bank income report for a specified user in PDF format.
         * @summary Retrieve information from the bank accounts used for income verification in PDF format
         * @param {CreditBankIncomePDFGetRequest} creditBankIncomePDFGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankIncomePdfGet: async (creditBankIncomePDFGetRequest: CreditBankIncomePDFGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditBankIncomePDFGetRequest' is not null or undefined
            assertParamExists('creditBankIncomePdfGet', 'creditBankIncomePDFGetRequest', creditBankIncomePDFGetRequest)
            const localVarPath = `/credit/bank_income/pdf/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(creditBankIncomePDFGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * `/credit/bank_income/refresh` refreshes the bank income report data for a specific user.
         * @summary Refresh a user\'s bank income information
         * @param {CreditBankIncomeRefreshRequest} creditBankIncomeRefreshRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankIncomeRefresh: async (creditBankIncomeRefreshRequest: CreditBankIncomeRefreshRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditBankIncomeRefreshRequest' is not null or undefined
            assertParamExists('creditBankIncomeRefresh', 'creditBankIncomeRefreshRequest', creditBankIncomeRefreshRequest)
            const localVarPath = `/credit/bank_income/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(creditBankIncomeRefreshRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * `/credit/bank_income/webhook/update` allows you to subscribe or unsubscribe a user for income webhook notifications.  If a user is subscribed, on significant changes to the user\'s income profile, you will receive a `BANK_INCOME_REFRESH_UPDATE` webhook, prompting you to refresh bank income data for the user.
         * @summary Subscribe and unsubscribe to proactive notifications for a user\'s income profile
         * @param {CreditBankIncomeWebhookUpdateRequest} creditBankIncomeWebhookUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankIncomeWebhookUpdate: async (creditBankIncomeWebhookUpdateRequest: CreditBankIncomeWebhookUpdateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditBankIncomeWebhookUpdateRequest' is not null or undefined
            assertParamExists('creditBankIncomeWebhookUpdate', 'creditBankIncomeWebhookUpdateRequest', creditBankIncomeWebhookUpdateRequest)
            const localVarPath = `/credit/bank_income/webhook/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(creditBankIncomeWebhookUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * `/credit/bank_statements/uploads/get` returns data from user-uploaded bank statements.
         * @summary Retrieve data for a user\'s uploaded bank statements
         * @param {CreditBankStatementsUploadsGetRequest} creditBankStatementsUploadsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankStatementsUploadsGet: async (creditBankStatementsUploadsGetRequest: CreditBankStatementsUploadsGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditBankStatementsUploadsGetRequest' is not null or undefined
            assertParamExists('creditBankStatementsUploadsGet', 'creditBankStatementsUploadsGetRequest', creditBankStatementsUploadsGetRequest)
            const localVarPath = `/credit/bank_statements/uploads/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(creditBankStatementsUploadsGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * `/credit/employment/get` returns a list of items with employment information from a user\'s payroll provider that was verified by an end user.
         * @summary Retrieve a summary of an individual\'s employment information
         * @param {CreditEmploymentGetRequest} creditEmploymentGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditEmploymentGet: async (creditEmploymentGetRequest: CreditEmploymentGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditEmploymentGetRequest' is not null or undefined
            assertParamExists('creditEmploymentGet', 'creditEmploymentGetRequest', creditEmploymentGetRequest)
            const localVarPath = `/credit/employment/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(creditEmploymentGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `credit/asset_report/freddie_mac/get` endpoint retrieves the Verification of Assets and Verification of Employment reports.
         * @summary Retrieve an Asset Report with Freddie Mac format (aka VOA - Verification Of Assets), and a Verification Of Employment (VOE) report if this one is available. Only Freddie Mac can use this endpoint.
         * @param {CreditFreddieMacReportsGetRequest} creditFreddieMacReportsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditFreddieMacReportsGet: async (creditFreddieMacReportsGetRequest: CreditFreddieMacReportsGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditFreddieMacReportsGetRequest' is not null or undefined
            assertParamExists('creditFreddieMacReportsGet', 'creditFreddieMacReportsGetRequest', creditFreddieMacReportsGetRequest)
            const localVarPath = `/credit/freddie_mac/reports/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(creditFreddieMacReportsGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint gets payroll income information for a specific user, either as a result of the user connecting to their payroll provider or uploading a pay related document.
         * @summary Retrieve a user\'s payroll information
         * @param {CreditPayrollIncomeGetRequest} creditPayrollIncomeGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomeGet: async (creditPayrollIncomeGetRequest: CreditPayrollIncomeGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditPayrollIncomeGetRequest' is not null or undefined
            assertParamExists('creditPayrollIncomeGet', 'creditPayrollIncomeGetRequest', creditPayrollIncomeGetRequest)
            const localVarPath = `/credit/payroll_income/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(creditPayrollIncomeGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * `/credit/payroll_income/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification. If the user is eligible for digital verification, that information will be associated with the user token, and in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing `employer` data will increase the chance of receiving a useful result.  When testing in Sandbox, you can control the results by providing special test values in the `employer` and `access_tokens` fields. `employer_good` and `employer_bad` will result in `HIGH` and `LOW` confidence values, respectively. `employer_multi` will result in a `HIGH` confidence with multiple payroll options. Likewise, `access_good` and `access_bad` will result in `HIGH` and `LOW` confidence values, respectively. Any other value for `employer` and `access_tokens` in Sandbox will result in `UNKNOWN` confidence.
         * @summary Check income verification eligibility and optimize conversion
         * @param {CreditPayrollIncomePrecheckRequest} creditPayrollIncomePrecheckRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomePrecheck: async (creditPayrollIncomePrecheckRequest: CreditPayrollIncomePrecheckRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditPayrollIncomePrecheckRequest' is not null or undefined
            assertParamExists('creditPayrollIncomePrecheck', 'creditPayrollIncomePrecheckRequest', creditPayrollIncomePrecheckRequest)
            const localVarPath = `/credit/payroll_income/precheck`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(creditPayrollIncomePrecheckRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * `/credit/payroll_income/refresh` refreshes a given digital payroll income verification.
         * @summary Refresh a digital payroll income verification
         * @param {CreditPayrollIncomeRefreshRequest} creditPayrollIncomeRefreshRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomeRefresh: async (creditPayrollIncomeRefreshRequest: CreditPayrollIncomeRefreshRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditPayrollIncomeRefreshRequest' is not null or undefined
            assertParamExists('creditPayrollIncomeRefresh', 'creditPayrollIncomeRefreshRequest', creditPayrollIncomeRefreshRequest)
            const localVarPath = `/credit/payroll_income/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(creditPayrollIncomeRefreshRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * `/credit/payroll_income/risk_signals/get` can be used as part of the Document Income flow to assess a user-uploaded document for signs of potential fraud or tampering. It returns a risk score for each uploaded document that indicates the likelihood of the document being fraudulent, in addition to details on the individual risk signals contributing to the score. `/credit/payroll_income/risk_signals/get` can be called at any time after the `INCOME_VERIFICATION_RISK_SIGNALS` webhook has been fired.  `/credit/payroll_income/risk_signals/get` is offered as an add-on to Document Income and is billed separately. To request access to this endpoint, submit a product access request or contact your Plaid account manager.
         * @summary Retrieve fraud insights for a user\'s manually uploaded document(s).
         * @param {CreditPayrollIncomeRiskSignalsGetRequest} creditPayrollIncomeRiskSignalsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomeRiskSignalsGet: async (creditPayrollIncomeRiskSignalsGetRequest: CreditPayrollIncomeRiskSignalsGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditPayrollIncomeRiskSignalsGetRequest' is not null or undefined
            assertParamExists('creditPayrollIncomeRiskSignalsGet', 'creditPayrollIncomeRiskSignalsGetRequest', creditPayrollIncomeRiskSignalsGetRequest)
            const localVarPath = `/credit/payroll_income/risk_signals/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(creditPayrollIncomeRiskSignalsGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Plaid can share an Asset Report directly with a participating third party on your behalf. The shared Asset Report is the exact same Asset Report originally created in `/asset_report/create`.  To grant a third party access to an Asset Report, use the `/credit/relay/create` endpoint to create a `relay_token` and then pass that token to your third party. Each third party has its own `secondary_client_id`; for example, `ce5bd328dcd34123456`. You\'ll need to create a separate `relay_token` for each third party that needs access to the report on your behalf.
         * @summary Create a relay token to share an Asset Report with a partner client (beta)
         * @param {CreditRelayCreateRequest} creditRelayCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditRelayCreate: async (creditRelayCreateRequest: CreditRelayCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditRelayCreateRequest' is not null or undefined
            assertParamExists('creditRelayCreate', 'creditRelayCreateRequest', creditRelayCreateRequest)
            const localVarPath = `/credit/relay/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(creditRelayCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * `/credit/relay/get` allows third parties to receive a report that was shared with them, using a `relay_token` that was created by the report owner.
         * @summary Retrieve the reports associated with a relay token that was shared with you (beta)
         * @param {CreditRelayGetRequest} creditRelayGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditRelayGet: async (creditRelayGetRequest: CreditRelayGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditRelayGetRequest' is not null or undefined
            assertParamExists('creditRelayGet', 'creditRelayGetRequest', creditRelayGetRequest)
            const localVarPath = `/credit/relay/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(creditRelayGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/credit/relay/refresh` endpoint allows third parties to refresh a report that was relayed to them, using a `relay_token` that was created by the report owner. A new report will be created with the original report parameters, but with the most recent data available based on the `days_requested` value of the original report.
         * @summary Refresh a report of a relay token (beta)
         * @param {CreditRelayRefreshRequest} creditRelayRefreshRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditRelayRefresh: async (creditRelayRefreshRequest: CreditRelayRefreshRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditRelayRefreshRequest' is not null or undefined
            assertParamExists('creditRelayRefresh', 'creditRelayRefreshRequest', creditRelayRefreshRequest)
            const localVarPath = `/credit/relay/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(creditRelayRefreshRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/credit/relay/remove` endpoint allows you to invalidate a `relay_token`. The third party holding the token will no longer be able to access or refresh the reports which the `relay_token` gives access to. The original report, associated Items, and other relay tokens that provide access to the same report are not affected and will remain accessible after removing the given `relay_token`.
         * @summary Remove relay token (beta)
         * @param {CreditRelayRemoveRequest} creditRelayRemoveRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditRelayRemove: async (creditRelayRemoveRequest: CreditRelayRemoveRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditRelayRemoveRequest' is not null or undefined
            assertParamExists('creditRelayRemove', 'creditRelayRemoveRequest', creditRelayRemoveRequest)
            const localVarPath = `/credit/relay/remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(creditRelayRemoveRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/credit/audit_copy_token/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Report data and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
         * @summary Remove an Audit Copy token
         * @param {CreditAuditCopyTokenRemoveRequest} creditAuditCopyTokenRemoveRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditReportAuditCopyRemove: async (creditAuditCopyTokenRemoveRequest: CreditAuditCopyTokenRemoveRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditAuditCopyTokenRemoveRequest' is not null or undefined
            assertParamExists('creditReportAuditCopyRemove', 'creditAuditCopyTokenRemoveRequest', creditAuditCopyTokenRemoveRequest)
            const localVarPath = `/credit/audit_copy_token/remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(creditAuditCopyTokenRemoveRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint can be used for your end users after they complete the Link flow. This endpoint returns a list of Link sessions that your user completed, where each session includes the results from the Link flow.  These results include details about the Item that was created and some product related metadata (showing, for example, whether the user finished the bank income verification step).
         * @summary Retrieve Link sessions for your user
         * @param {CreditSessionsGetRequest} creditSessionsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditSessionsGet: async (creditSessionsGetRequest: CreditSessionsGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditSessionsGetRequest' is not null or undefined
            assertParamExists('creditSessionsGet', 'creditSessionsGetRequest', creditSessionsGetRequest)
            const localVarPath = `/credit/sessions/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(creditSessionsGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve information about a dashboard user.
         * @summary Retrieve a dashboard user
         * @param {DashboardUserGetRequest} dashboardUserGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardUserGet: async (dashboardUserGetRequest: DashboardUserGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dashboardUserGetRequest' is not null or undefined
            assertParamExists('dashboardUserGet', 'dashboardUserGetRequest', dashboardUserGetRequest)
            const localVarPath = `/dashboard_user/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dashboardUserGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all dashboard users associated with your account.
         * @summary List dashboard users
         * @param {DashboardUserListRequest} dashboardUserListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardUserList: async (dashboardUserListRequest: DashboardUserListRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dashboardUserListRequest' is not null or undefined
            assertParamExists('dashboardUserList', 'dashboardUserListRequest', dashboardUserListRequest)
            const localVarPath = `/dashboard_user/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dashboardUserListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint provides an alternative to `/deposit_switch/create` for customers who have not yet fully integrated with Plaid Exchange. Like `/deposit_switch/create`, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
         * @summary Create a deposit switch without using Plaid Exchange
         * @param {DepositSwitchAltCreateRequest} depositSwitchAltCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchAltCreate: async (depositSwitchAltCreateRequest: DepositSwitchAltCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'depositSwitchAltCreateRequest' is not null or undefined
            assertParamExists('depositSwitchAltCreate', 'depositSwitchAltCreateRequest', depositSwitchAltCreateRequest)
            const localVarPath = `/deposit_switch/alt/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(depositSwitchAltCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
         * @summary Create a deposit switch
         * @param {DepositSwitchCreateRequest} depositSwitchCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchCreate: async (depositSwitchCreateRequest: DepositSwitchCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'depositSwitchCreateRequest' is not null or undefined
            assertParamExists('depositSwitchCreate', 'depositSwitchCreateRequest', depositSwitchCreateRequest)
            const localVarPath = `/deposit_switch/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(depositSwitchCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user\'s direct deposit allocation preferences.
         * @summary Retrieve a deposit switch
         * @param {DepositSwitchGetRequest} depositSwitchGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchGet: async (depositSwitchGetRequest: DepositSwitchGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'depositSwitchGetRequest' is not null or undefined
            assertParamExists('depositSwitchGet', 'depositSwitchGetRequest', depositSwitchGetRequest)
            const localVarPath = `/deposit_switch/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(depositSwitchGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes. 
         * @summary Create a deposit switch token
         * @param {DepositSwitchTokenCreateRequest} depositSwitchTokenCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchTokenCreate: async (depositSwitchTokenCreateRequest: DepositSwitchTokenCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'depositSwitchTokenCreateRequest' is not null or undefined
            assertParamExists('depositSwitchTokenCreate', 'depositSwitchTokenCreateRequest', depositSwitchTokenCreateRequest)
            const localVarPath = `/deposit_switch/token/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(depositSwitchTokenCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * `/employers/search` allows you the ability to search Plaid’s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user\'s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
         * @summary Search employer database
         * @param {EmployersSearchRequest} employersSearchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employersSearch: async (employersSearchRequest: EmployersSearchRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'employersSearchRequest' is not null or undefined
            assertParamExists('employersSearch', 'employersSearchRequest', employersSearchRequest)
            const localVarPath = `/employers/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(employersSearchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * `/employment/verification/get` returns a list of employments through a user payroll that was verified by an end user.  This endpoint has been deprecated; new integrations should use `/credit/employment/get` instead.
         * @summary (Deprecated) Retrieve a summary of an individual\'s employment information
         * @param {EmploymentVerificationGetRequest} employmentVerificationGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employmentVerificationGet: async (employmentVerificationGetRequest: EmploymentVerificationGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'employmentVerificationGetRequest' is not null or undefined
            assertParamExists('employmentVerificationGet', 'employmentVerificationGetRequest', employmentVerificationGetRequest)
            const localVarPath = `/employment/verification/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(employmentVerificationGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A generic webhook receiver endpoint for FDX Event Notifications
         * @summary Webhook receiver for fdx notifications
         * @param {FDXNotification} fDXNotification 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fdxNotifications: async (fDXNotification: FDXNotification, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fDXNotification' is not null or undefined
            assertParamExists('fdxNotifications', 'fDXNotification', fDXNotification)
            const localVarPath = `/fdx/notifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(fDXNotification, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Note: In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29).
         * @summary Retrieve identity data
         * @param {IdentityGetRequest} identityGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityGet: async (identityGetRequest: IdentityGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityGetRequest' is not null or undefined
            assertParamExists('identityGet', 'identityGetRequest', identityGetRequest)
            const localVarPath = `/identity/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(identityGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/identity/match` endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder\'s financial institution.  This request may take some time to complete if Identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
         * @summary Retrieve identity match score
         * @param {IdentityMatchRequest} identityMatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityMatch: async (identityMatchRequest: IdentityMatchRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityMatchRequest' is not null or undefined
            assertParamExists('identityMatch', 'identityMatchRequest', identityMatchRequest)
            const localVarPath = `/identity/match`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(identityMatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * `/identity/refresh` is an optional endpoint for users of the Identity product. It initiates an on-demand extraction to fetch the most up to date Identity information from the Financial Institution. This on-demand extraction takes place in addition to the periodic extractions that automatically occur any Identity-enabled Item. If changes to Identity are discovered after calling `/identity/refresh`, Plaid will fire a webhook [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/identity/#default_update). `/identity/refresh` is offered as an add-on to Identity and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
         * @summary Refresh identity data
         * @param {IdentityRefreshRequest} identityRefreshRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityRefresh: async (identityRefreshRequest: IdentityRefreshRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityRefreshRequest' is not null or undefined
            assertParamExists('identityRefresh', 'identityRefreshRequest', identityRefreshRequest)
            const localVarPath = `/identity/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(identityRefreshRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new Identity Verification for the user specified by the `client_user_id` field. The requirements and behavior of the verification are determined by the `template_id` provided. If you don\'t know whether the associated user already has an active Identity Verification, you can specify `\"is_idempotent\": true` in the request body. With idempotency enabled, a new Identity Verification will only be created if one does not already exist for the associated `client_user_id` and `template_id`. If an Identity Verification is found, it will be returned unmodified with an `200 OK` HTTP status code.  You can also use this endpoint to supply information you already have collected about the user; if any of these fields are specified, the screens prompting the user to enter them will be skipped during the Link flow. 
         * @summary Create a new identity verification
         * @param {IdentityVerificationCreateRequest} identityVerificationCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityVerificationCreate: async (identityVerificationCreateRequest: IdentityVerificationCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityVerificationCreateRequest' is not null or undefined
            assertParamExists('identityVerificationCreate', 'identityVerificationCreateRequest', identityVerificationCreateRequest)
            const localVarPath = `/identity_verification/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(identityVerificationCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a previously created identity verification.
         * @summary Retrieve Identity Verification
         * @param {IdentityVerificationGetRequest} identityVerificationGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityVerificationGet: async (identityVerificationGetRequest: IdentityVerificationGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityVerificationGetRequest' is not null or undefined
            assertParamExists('identityVerificationGet', 'identityVerificationGetRequest', identityVerificationGetRequest)
            const localVarPath = `/identity_verification/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(identityVerificationGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Filter and list Identity Verifications created by your account
         * @summary List Identity Verifications
         * @param {IdentityVerificationListRequest} identityVerificationListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityVerificationList: async (identityVerificationListRequest: IdentityVerificationListRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityVerificationListRequest' is not null or undefined
            assertParamExists('identityVerificationList', 'identityVerificationListRequest', identityVerificationListRequest)
            const localVarPath = `/identity_verification/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(identityVerificationListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allow a customer to retry their identity verification
         * @summary Retry an Identity Verification
         * @param {IdentityVerificationRetryRequest} identityVerificationRetryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityVerificationRetry: async (identityVerificationRetryRequest: IdentityVerificationRetryRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityVerificationRetryRequest' is not null or undefined
            assertParamExists('identityVerificationRetry', 'identityVerificationRetryRequest', identityVerificationRetryRequest)
            const localVarPath = `/identity_verification/retry`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(identityVerificationRetryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * `/income/verification/create` begins the income verification process by returning an `income_verification_id`. You can then provide the `income_verification_id` to `/link/token/create` under the `income_verification` parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an `INCOME` webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing. 
         * @summary (Deprecated) Create an income verification instance
         * @param {IncomeVerificationCreateRequest} incomeVerificationCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationCreate: async (incomeVerificationCreateRequest: IncomeVerificationCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'incomeVerificationCreateRequest' is not null or undefined
            assertParamExists('incomeVerificationCreate', 'incomeVerificationCreateRequest', incomeVerificationCreateRequest)
            const localVarPath = `/income/verification/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(incomeVerificationCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * `/income/verification/documents/download` provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to `/income/verification/documents/download` is a ZIP file in binary data. If a `document_id` is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The `request_id` is returned in the `Plaid-Request-ID` header.
         * @summary (Deprecated) Download the original documents used for income verification
         * @param {IncomeVerificationDocumentsDownloadRequest} incomeVerificationDocumentsDownloadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationDocumentsDownload: async (incomeVerificationDocumentsDownloadRequest: IncomeVerificationDocumentsDownloadRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'incomeVerificationDocumentsDownloadRequest' is not null or undefined
            assertParamExists('incomeVerificationDocumentsDownload', 'incomeVerificationDocumentsDownloadRequest', incomeVerificationDocumentsDownloadRequest)
            const localVarPath = `/income/verification/documents/download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(incomeVerificationDocumentsDownloadRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * `/income/verification/paystubs/get` returns the information collected from the paystubs that were used to verify an end user\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
         * @summary (Deprecated) Retrieve information from the paystubs used for income verification
         * @param {IncomeVerificationPaystubsGetRequest} incomeVerificationPaystubsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationPaystubsGet: async (incomeVerificationPaystubsGetRequest: IncomeVerificationPaystubsGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'incomeVerificationPaystubsGetRequest' is not null or undefined
            assertParamExists('incomeVerificationPaystubsGet', 'incomeVerificationPaystubsGetRequest', incomeVerificationPaystubsGetRequest)
            const localVarPath = `/income/verification/paystubs/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(incomeVerificationPaystubsGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * `/income/verification/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a `precheck_id` that can be provided to `/link/token/create`. If the user is eligible for digital verification, providing the `precheck_id` in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the `precheck_id` can still be provided to `/link/token/create` and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either `employer` or `transactions_access_tokens` data will increase the chance of receiving a useful result.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/precheck` instead.
         * @summary (Deprecated) Check digital income verification eligibility and optimize conversion
         * @param {IncomeVerificationPrecheckRequest} incomeVerificationPrecheckRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationPrecheck: async (incomeVerificationPrecheckRequest: IncomeVerificationPrecheckRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'incomeVerificationPrecheckRequest' is not null or undefined
            assertParamExists('incomeVerificationPrecheck', 'incomeVerificationPrecheckRequest', incomeVerificationPrecheckRequest)
            const localVarPath = `/income/verification/precheck`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(incomeVerificationPrecheckRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * `/income/verification/taxforms/get` returns the information collected from forms that were used to verify an end user\'\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
         * @summary (Deprecated) Retrieve information from the tax documents used for income verification
         * @param {IncomeVerificationTaxformsGetRequest} incomeVerificationTaxformsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationTaxformsGet: async (incomeVerificationTaxformsGetRequest: IncomeVerificationTaxformsGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'incomeVerificationTaxformsGetRequest' is not null or undefined
            assertParamExists('incomeVerificationTaxformsGet', 'incomeVerificationTaxformsGetRequest', incomeVerificationTaxformsGetRequest)
            const localVarPath = `/income/verification/taxforms/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(incomeVerificationTaxformsGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institution’s enabled products and a client’s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
         * @summary Get details of all supported institutions
         * @param {InstitutionsGetRequest} institutionsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        institutionsGet: async (institutionsGetRequest: InstitutionsGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'institutionsGetRequest' is not null or undefined
            assertParamExists('institutionsGet', 'institutionsGetRequest', institutionsGetRequest)
            const localVarPath = `/institutions/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(institutionsGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a JSON response containing details on a specified financial institution currently supported by Plaid.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` to authenticate to this endpoint. The `public_key` has been deprecated; all customers are encouraged to use `client_id` and `secret` instead. 
         * @summary Get details of an institution
         * @param {InstitutionsGetByIdRequest} institutionsGetByIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        institutionsGetById: async (institutionsGetByIdRequest: InstitutionsGetByIdRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'institutionsGetByIdRequest' is not null or undefined
            assertParamExists('institutionsGetById', 'institutionsGetByIdRequest', institutionsGetByIdRequest)
            const localVarPath = `/institutions/get_by_id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(institutionsGetByIdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` parameters to authenticate to this endpoint. The `public_key` parameter has since been deprecated; all customers are encouraged to use `client_id` and `secret` instead. 
         * @summary Search institutions
         * @param {InstitutionsSearchRequest} institutionsSearchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        institutionsSearch: async (institutionsSearchRequest: InstitutionsSearchRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'institutionsSearchRequest' is not null or undefined
            assertParamExists('institutionsSearch', 'institutionsSearchRequest', institutionsSearchRequest)
            const localVarPath = `/institutions/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(institutionsSearchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/investments/auth/get` endpoint allows developers to receive user-authorized data to facilitate the transfer of holdings
         * @summary Get data needed to authorize an investments transfer
         * @param {InvestmentsAuthGetRequest} investmentsAuthGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investmentsAuthGet: async (investmentsAuthGetRequest: InvestmentsAuthGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'investmentsAuthGetRequest' is not null or undefined
            assertParamExists('investmentsAuthGet', 'investmentsAuthGetRequest', investmentsAuthGetRequest)
            const localVarPath = `/investments/auth/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(investmentsAuthGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/investments/holdings/get` endpoint allows developers to receive user-authorized stock position data for `investment`-type accounts.
         * @summary Get Investment holdings
         * @param {InvestmentsHoldingsGetRequest} investmentsHoldingsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investmentsHoldingsGet: async (investmentsHoldingsGetRequest: InvestmentsHoldingsGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'investmentsHoldingsGetRequest' is not null or undefined
            assertParamExists('investmentsHoldingsGet', 'investmentsHoldingsGetRequest', investmentsHoldingsGetRequest)
            const localVarPath = `/investments/holdings/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(investmentsHoldingsGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * `/investments/refresh` is an optional endpoint for users of the Investments product. It initiates an on-demand extraction to fetch the newest investments, holdings and investment transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Investments-enabled Item. If changes to investments are discovered after calling `/investments/refresh`, Plaid will fire webhooks: [`HOLDINGS: DEFAULT_UPDATE`](https://plaid.com/docs/api/products/investments/#holdings-default_update) if any new holdings are detected, and [INVESTMENTS_TRANSACTIONS: DEFAULT_UPDATE](https://plaid.com/docs/api/products/investments/#investments_transactions-default_update) if any new investment transactions are detected. Updated holdings and investment transactions can be fetched by calling `/investments/holdings/get` and `/investments/transactions/get`. \"Note that the `/investments/refresh` endpoint is not supported by all institutions. If called on an Item from an institution that does not support this functionality, it will return a `PRODUCT_NOT_SUPPORTED` error. `/investments/refresh` is offered as an add-on to Investments and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
         * @summary Refresh investment data
         * @param {InvestmentsRefreshRequest} investmentsRefreshRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investmentsRefresh: async (investmentsRefreshRequest: InvestmentsRefreshRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'investmentsRefreshRequest' is not null or undefined
            assertParamExists('investmentsRefresh', 'investmentsRefreshRequest', investmentsRefreshRequest)
            const localVarPath = `/investments/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(investmentsRefreshRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/investments/transactions/get` endpoint allows developers to retrieve up to 24 months of user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the `total_investment_transactions` response body field to fetch all available investment transactions.  Note that Investments does not have a webhook to indicate when initial transaction data has loaded. Instead, if transactions data is not ready when `/investments/transactions/get` is first called, Plaid will wait for the data. For this reason, calling `/investments/transactions/get` immediately after Link may take up to one to two minutes to return.
         * @summary Get investment transactions
         * @param {InvestmentsTransactionsGetRequest} investmentsTransactionsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investmentsTransactionsGet: async (investmentsTransactionsGetRequest: InvestmentsTransactionsGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'investmentsTransactionsGetRequest' is not null or undefined
            assertParamExists('investmentsTransactionsGet', 'investmentsTransactionsGetRequest', investmentsTransactionsGetRequest)
            const localVarPath = `/investments/transactions/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(investmentsTransactionsGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * By default, the `access_token` associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the `/item/access_token/invalidate` endpoint to rotate the `access_token` associated with an Item. The endpoint returns a new `access_token` and immediately invalidates the previous `access_token`. 
         * @summary Invalidate access_token
         * @param {ItemAccessTokenInvalidateRequest} itemAccessTokenInvalidateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemAccessTokenInvalidate: async (itemAccessTokenInvalidateRequest: ItemAccessTokenInvalidateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemAccessTokenInvalidateRequest' is not null or undefined
            assertParamExists('itemAccessTokenInvalidate', 'itemAccessTokenInvalidateRequest', itemAccessTokenInvalidateRequest)
            const localVarPath = `/item/access_token/invalidate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(itemAccessTokenInvalidateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a historical log of user consent events
         * @summary List a historical log of user consent events
         * @param {ItemActivityListRequest} itemActivityListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemActivityList: async (itemActivityListRequest: ItemActivityListRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemActivityListRequest' is not null or undefined
            assertParamExists('itemActivityList', 'itemActivityListRequest', itemActivityListRequest)
            const localVarPath = `/item/activity/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(itemActivityListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user’s connected applications
         * @summary List a user’s connected applications
         * @param {ItemApplicationListRequest} itemApplicationListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemApplicationList: async (itemApplicationListRequest: ItemApplicationListRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemApplicationListRequest' is not null or undefined
            assertParamExists('itemApplicationList', 'itemApplicationListRequest', itemApplicationListRequest)
            const localVarPath = `/item/application/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(itemApplicationListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Enable consumers to update product access on selected accounts for an application.
         * @summary Update the scopes of access for a particular application
         * @param {ItemApplicationScopesUpdateRequest} itemApplicationScopesUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemApplicationScopesUpdate: async (itemApplicationScopesUpdateRequest: ItemApplicationScopesUpdateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemApplicationScopesUpdateRequest' is not null or undefined
            assertParamExists('itemApplicationScopesUpdate', 'itemApplicationScopesUpdateRequest', itemApplicationScopesUpdateRequest)
            const localVarPath = `/item/application/scopes/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(itemApplicationScopesUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Note: As of July 2020, the `/item/public_token/create` endpoint is deprecated. Instead, use `/link/token/create` with an `access_token` to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the `/item/public_token/create` endpoint and then initialize Link with that `public_token`.  A `public_token` is one-time use and expires after 30 minutes. You use a `public_token` to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a `public_token` for an Item even if you did not use Link to create the Item originally.  The `/item/public_token/create` endpoint is **not** used to create your initial `public_token`. If you have not already received an `access_token` for a specific Item, use Link to obtain your `public_token` instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
         * @summary Create public token
         * @param {ItemPublicTokenCreateRequest} itemPublicTokenCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemCreatePublicToken: async (itemPublicTokenCreateRequest: ItemPublicTokenCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemPublicTokenCreateRequest' is not null or undefined
            assertParamExists('itemCreatePublicToken', 'itemPublicTokenCreateRequest', itemPublicTokenCreateRequest)
            const localVarPath = `/item/public_token/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(itemPublicTokenCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information about the status of an Item.
         * @summary Retrieve an Item
         * @param {ItemGetRequest} itemGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemGet: async (itemGetRequest: ItemGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemGetRequest' is not null or undefined
            assertParamExists('itemGet', 'itemGetRequest', itemGetRequest)
            const localVarPath = `/item/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(itemGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * `/item/import` creates an Item via your Plaid Exchange Integration and returns an `access_token`. As part of an `/item/import` request, you will include a User ID (`user_auth.user_id`) and Authentication Token (`user_auth.auth_token`) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via `/item/import`, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated.
         * @summary Import Item
         * @param {ItemImportRequest} itemImportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemImport: async (itemImportRequest: ItemImportRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemImportRequest' is not null or undefined
            assertParamExists('itemImport', 'itemImportRequest', itemImportRequest)
            const localVarPath = `/item/import`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(itemImportRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Exchange a Link `public_token` for an API `access_token`. Link hands off the `public_token` client-side via the `onSuccess` callback once a user has successfully created an Item. The `public_token` is ephemeral and expires after 30 minutes. An `access_token` does not expire, but can be revoked by calling `/item/remove`.  The response also includes an `item_id` that should be stored with the `access_token`. The `item_id` is used to identify an Item in a webhook. The `item_id` can also be retrieved by making an `/item/get` request.
         * @summary Exchange public token for an access token
         * @param {ItemPublicTokenExchangeRequest} itemPublicTokenExchangeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemPublicTokenExchange: async (itemPublicTokenExchangeRequest: ItemPublicTokenExchangeRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemPublicTokenExchangeRequest' is not null or undefined
            assertParamExists('itemPublicTokenExchange', 'itemPublicTokenExchangeRequest', itemPublicTokenExchangeRequest)
            const localVarPath = `/item/public_token/exchange`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(itemPublicTokenExchangeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/item/remove` endpoint allows you to remove an Item. Once removed, the `access_token`, as well as any processor tokens or bank account tokens associated with the Item, is no longer valid and cannot be used to access any data that was associated with the Item.  Note that in the Development environment, issuing an `/item/remove`  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via `/item/remove` may still show as an active connection in the institution\'s OAuth permission manager.  API versions 2019-05-29 and earlier return a `removed` boolean as part of the response.
         * @summary Remove an Item
         * @param {ItemRemoveRequest} itemRemoveRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemRemove: async (itemRemoveRequest: ItemRemoveRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemRemoveRequest' is not null or undefined
            assertParamExists('itemRemove', 'itemRemoveRequest', itemRemoveRequest)
            const localVarPath = `/item/remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(itemRemoveRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The POST `/item/webhook/update` allows you to update the webhook URL associated with an Item. This request triggers a [`WEBHOOK_UPDATE_ACKNOWLEDGED`](https://plaid.com/docs/api/items/#webhook_update_acknowledged) webhook to the newly specified webhook URL.
         * @summary Update Webhook URL
         * @param {ItemWebhookUpdateRequest} itemWebhookUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemWebhookUpdate: async (itemWebhookUpdateRequest: ItemWebhookUpdateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemWebhookUpdateRequest' is not null or undefined
            assertParamExists('itemWebhookUpdate', 'itemWebhookUpdateRequest', itemWebhookUpdateRequest)
            const localVarPath = `/item/webhook/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(itemWebhookUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/liabilities/get` endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the `account_filters` parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/liabilities/get`.  Note: This request may take some time to complete if `liabilities` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.
         * @summary Retrieve Liabilities data
         * @param {LiabilitiesGetRequest} liabilitiesGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        liabilitiesGet: async (liabilitiesGetRequest: LiabilitiesGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'liabilitiesGetRequest' is not null or undefined
            assertParamExists('liabilitiesGet', 'liabilitiesGetRequest', liabilitiesGetRequest)
            const localVarPath = `/liabilities/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(liabilitiesGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the `/link_delivery/create` endpoint to create a Hosted Link session.
         * @summary Create Hosted Link session
         * @param {LinkDeliveryCreateRequest} linkDeliveryCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkDeliveryCreate: async (linkDeliveryCreateRequest: LinkDeliveryCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'linkDeliveryCreateRequest' is not null or undefined
            assertParamExists('linkDeliveryCreate', 'linkDeliveryCreateRequest', linkDeliveryCreateRequest)
            const localVarPath = `/link_delivery/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(linkDeliveryCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the `/link_delivery/get` endpoint to get the status of a Hosted Link session.
         * @summary Get Hosted Link session
         * @param {LinkDeliveryGetRequest} linkDeliveryGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkDeliveryGet: async (linkDeliveryGetRequest: LinkDeliveryGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'linkDeliveryGetRequest' is not null or undefined
            assertParamExists('linkDeliveryGet', 'linkDeliveryGetRequest', linkDeliveryGetRequest)
            const localVarPath = `/link_delivery/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(linkDeliveryGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Exchange an OAuth `link_correlation_id` for the corresponding `link_token`. The `link_correlation_id` is only available for \'payment_initiation\' products and is provided to the client via the OAuth `redirect_uri` as a query parameter. The `link_correlation_id` is ephemeral and expires in a brief period, after which it can no longer be exchanged for the \'link_token\'.
         * @summary Exchange the Link Correlation Id for a Link Token
         * @param {LinkOAuthCorrelationIdExchangeRequest} linkOAuthCorrelationIdExchangeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkOauthCorrelationIdExchange: async (linkOAuthCorrelationIdExchangeRequest: LinkOAuthCorrelationIdExchangeRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'linkOAuthCorrelationIdExchangeRequest' is not null or undefined
            assertParamExists('linkOauthCorrelationIdExchange', 'linkOAuthCorrelationIdExchangeRequest', linkOAuthCorrelationIdExchangeRequest)
            const localVarPath = `/link/oauth/correlation_id/exchange`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(linkOAuthCorrelationIdExchangeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/link/token/create` endpoint creates a `link_token`, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a `public_token`, which can then be exchanged for an `access_token` via `/item/public_token/exchange` as part of the main Link flow.  A `link_token` generated by `/link/token/create` is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.
         * @summary Create Link Token
         * @param {LinkTokenCreateRequest} linkTokenCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkTokenCreate: async (linkTokenCreateRequest: LinkTokenCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'linkTokenCreateRequest' is not null or undefined
            assertParamExists('linkTokenCreate', 'linkTokenCreateRequest', linkTokenCreateRequest)
            const localVarPath = `/link/token/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(linkTokenCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/link/token/get` endpoint gets information about a previously-created `link_token` using the `/link/token/create` endpoint. It can be useful for debugging purposes.
         * @summary Get Link Token
         * @param {LinkTokenGetRequest} linkTokenGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkTokenGet: async (linkTokenGetRequest: LinkTokenGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'linkTokenGetRequest' is not null or undefined
            assertParamExists('linkTokenGet', 'linkTokenGetRequest', linkTokenGetRequest)
            const localVarPath = `/link/token/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(linkTokenGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/partner/customer/create` endpoint is used by reseller partners to create end customers.
         * @summary Creates a new end customer for a Plaid reseller.
         * @param {PartnerCustomerCreateRequest} partnerCustomerCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnerCustomerCreate: async (partnerCustomerCreateRequest: PartnerCustomerCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'partnerCustomerCreateRequest' is not null or undefined
            assertParamExists('partnerCustomerCreate', 'partnerCustomerCreateRequest', partnerCustomerCreateRequest)
            const localVarPath = `/partner/customer/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(partnerCustomerCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/partner/customer/enable` endpoint is used by reseller partners to enable an end customer in the Production environment.
         * @summary Enables a Plaid reseller\'s end customer in the Production environment.
         * @param {PartnerCustomerEnableRequest} partnerCustomerEnableRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnerCustomerEnable: async (partnerCustomerEnableRequest: PartnerCustomerEnableRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'partnerCustomerEnableRequest' is not null or undefined
            assertParamExists('partnerCustomerEnable', 'partnerCustomerEnableRequest', partnerCustomerEnableRequest)
            const localVarPath = `/partner/customer/enable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(partnerCustomerEnableRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/partner/customer/get` endpoint is used by reseller partners to retrieve data about a single end customer.
         * @summary Returns a Plaid reseller\'s end customer.
         * @param {PartnerCustomerGetRequest} partnerCustomerGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnerCustomerGet: async (partnerCustomerGetRequest: PartnerCustomerGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'partnerCustomerGetRequest' is not null or undefined
            assertParamExists('partnerCustomerGet', 'partnerCustomerGetRequest', partnerCustomerGetRequest)
            const localVarPath = `/partner/customer/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(partnerCustomerGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/partner/customer/oauth_institutions/get` endpoint is used by reseller partners to retrieve OAuth-institution registration information about a single end customer. To learn how to set up a webhook to listen to status update events, visit the [reseller documentation](https://plaid.com/docs/account/resellers/#enabling-end-customers).
         * @summary Returns OAuth-institution registration information for a given end customer.
         * @param {PartnerCustomerOAuthInstitutionsGetRequest} partnerCustomerOAuthInstitutionsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnerCustomerOauthInstitutionsGet: async (partnerCustomerOAuthInstitutionsGetRequest: PartnerCustomerOAuthInstitutionsGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'partnerCustomerOAuthInstitutionsGetRequest' is not null or undefined
            assertParamExists('partnerCustomerOauthInstitutionsGet', 'partnerCustomerOAuthInstitutionsGetRequest', partnerCustomerOAuthInstitutionsGetRequest)
            const localVarPath = `/partner/customer/oauth_institutions/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(partnerCustomerOAuthInstitutionsGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/partner/customer/remove` endpoint is used by reseller partners to remove an end customer. Removing an end customer will remove it from view in the Plaid Dashboard and deactivate its API keys. This endpoint can only be used to remove an end customer that has not yet been enabled in Production.
         * @summary Removes a Plaid reseller\'s end customer.
         * @param {PartnerCustomerRemoveRequest} partnerCustomerRemoveRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnerCustomerRemove: async (partnerCustomerRemoveRequest: PartnerCustomerRemoveRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'partnerCustomerRemoveRequest' is not null or undefined
            assertParamExists('partnerCustomerRemove', 'partnerCustomerRemoveRequest', partnerCustomerRemoveRequest)
            const localVarPath = `/partner/customer/remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(partnerCustomerRemoveRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/payment_initiation/consent/create` endpoint is used to create a payment consent, which can be used to initiate payments on behalf of the user. Payment consents are created with `UNAUTHORISED` status by default and must be authorised by the user before payments can be initiated.  Consents can be limited in time and scope, and have constraints that describe limitations for payments.
         * @summary Create payment consent
         * @param {PaymentInitiationConsentCreateRequest} paymentInitiationConsentCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentCreate: async (paymentInitiationConsentCreateRequest: PaymentInitiationConsentCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentInitiationConsentCreateRequest' is not null or undefined
            assertParamExists('paymentInitiationConsentCreate', 'paymentInitiationConsentCreateRequest', paymentInitiationConsentCreateRequest)
            const localVarPath = `/payment_initiation/consent/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paymentInitiationConsentCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/payment_initiation/consent/get` endpoint can be used to check the status of a payment consent, as well as to receive basic information such as recipient and constraints.
         * @summary Get payment consent
         * @param {PaymentInitiationConsentGetRequest} paymentInitiationConsentGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentGet: async (paymentInitiationConsentGetRequest: PaymentInitiationConsentGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentInitiationConsentGetRequest' is not null or undefined
            assertParamExists('paymentInitiationConsentGet', 'paymentInitiationConsentGetRequest', paymentInitiationConsentGetRequest)
            const localVarPath = `/payment_initiation/consent/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paymentInitiationConsentGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/payment_initiation/consent/payment/execute` endpoint can be used to execute payments using payment consent.
         * @summary Execute a single payment using consent
         * @param {PaymentInitiationConsentPaymentExecuteRequest} paymentInitiationConsentPaymentExecuteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentPaymentExecute: async (paymentInitiationConsentPaymentExecuteRequest: PaymentInitiationConsentPaymentExecuteRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentInitiationConsentPaymentExecuteRequest' is not null or undefined
            assertParamExists('paymentInitiationConsentPaymentExecute', 'paymentInitiationConsentPaymentExecuteRequest', paymentInitiationConsentPaymentExecuteRequest)
            const localVarPath = `/payment_initiation/consent/payment/execute`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paymentInitiationConsentPaymentExecuteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/payment_initiation/consent/revoke` endpoint can be used to revoke the payment consent. Once the consent is revoked, it is not possible to initiate payments using it.
         * @summary Revoke payment consent
         * @param {PaymentInitiationConsentRevokeRequest} paymentInitiationConsentRevokeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentRevoke: async (paymentInitiationConsentRevokeRequest: PaymentInitiationConsentRevokeRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentInitiationConsentRevokeRequest' is not null or undefined
            assertParamExists('paymentInitiationConsentRevoke', 'paymentInitiationConsentRevokeRequest', paymentInitiationConsentRevokeRequest)
            const localVarPath = `/payment_initiation/consent/revoke`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paymentInitiationConsentRevokeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * After creating a payment recipient, you can use the `/payment_initiation/payment/create` endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR, GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency).  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer, GBP-denominated payments will be sent via the Faster Payments network and for non-Eurozone markets typically via the local payment scheme, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer or other local payment schemes will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipient’s account, although at least 90% of standing order payments are sent by 6am.  In the Development environment, payments must be below 5 GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency). For details on any payment limits in Production, contact your Plaid Account Manager.
         * @summary Create a payment
         * @param {PaymentInitiationPaymentCreateRequest} paymentInitiationPaymentCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentCreate: async (paymentInitiationPaymentCreateRequest: PaymentInitiationPaymentCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentInitiationPaymentCreateRequest' is not null or undefined
            assertParamExists('paymentInitiationPaymentCreate', 'paymentInitiationPaymentCreateRequest', paymentInitiationPaymentCreateRequest)
            const localVarPath = `/payment_initiation/payment/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paymentInitiationPaymentCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/payment_initiation/payment/get` endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the `/payment_initiation/payment/get` endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.
         * @summary Get payment details
         * @param {PaymentInitiationPaymentGetRequest} paymentInitiationPaymentGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentGet: async (paymentInitiationPaymentGetRequest: PaymentInitiationPaymentGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentInitiationPaymentGetRequest' is not null or undefined
            assertParamExists('paymentInitiationPaymentGet', 'paymentInitiationPaymentGetRequest', paymentInitiationPaymentGetRequest)
            const localVarPath = `/payment_initiation/payment/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paymentInitiationPaymentGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/payment_initiation/payment/list` endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional `count` and `cursor` parameters.
         * @summary List payments
         * @param {PaymentInitiationPaymentListRequest} paymentInitiationPaymentListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentList: async (paymentInitiationPaymentListRequest: PaymentInitiationPaymentListRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentInitiationPaymentListRequest' is not null or undefined
            assertParamExists('paymentInitiationPaymentList', 'paymentInitiationPaymentListRequest', paymentInitiationPaymentListRequest)
            const localVarPath = `/payment_initiation/payment/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paymentInitiationPaymentListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Reverse a settled payment from a Plaid virtual account.  The original payment must be in a settled state to be refunded. To refund partially, specify the amount as part of the request. If the amount is not specified, the refund amount will be equal to all of the remaining payment amount that has not been refunded yet.  The refund will go back to the source account that initiated the payment. The original payment must have been initiated to a Plaid virtual account so that this account can be used to initiate the refund. 
         * @summary Reverse an existing payment
         * @param {PaymentInitiationPaymentReverseRequest} paymentInitiationPaymentReverseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentReverse: async (paymentInitiationPaymentReverseRequest: PaymentInitiationPaymentReverseRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentInitiationPaymentReverseRequest' is not null or undefined
            assertParamExists('paymentInitiationPaymentReverse', 'paymentInitiationPaymentReverseRequest', paymentInitiationPaymentReverseRequest)
            const localVarPath = `/payment_initiation/payment/reverse`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paymentInitiationPaymentReverseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA) or a non-Eurozone country [supported](https://plaid.com/global) by Plaid. For a standing order (recurring) payment, the recipient must be in the UK.  It is recommended to use `bacs` in the UK and `iban` in EU.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same `recipient_id`. 
         * @summary Create payment recipient
         * @param {PaymentInitiationRecipientCreateRequest} paymentInitiationRecipientCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationRecipientCreate: async (paymentInitiationRecipientCreateRequest: PaymentInitiationRecipientCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentInitiationRecipientCreateRequest' is not null or undefined
            assertParamExists('paymentInitiationRecipientCreate', 'paymentInitiationRecipientCreateRequest', paymentInitiationRecipientCreateRequest)
            const localVarPath = `/payment_initiation/recipient/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paymentInitiationRecipientCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details about a payment recipient you have previously created.
         * @summary Get payment recipient
         * @param {PaymentInitiationRecipientGetRequest} paymentInitiationRecipientGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationRecipientGet: async (paymentInitiationRecipientGetRequest: PaymentInitiationRecipientGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentInitiationRecipientGetRequest' is not null or undefined
            assertParamExists('paymentInitiationRecipientGet', 'paymentInitiationRecipientGetRequest', paymentInitiationRecipientGetRequest)
            const localVarPath = `/payment_initiation/recipient/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paymentInitiationRecipientGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/payment_initiation/recipient/list` endpoint list the payment recipients that you have previously created.
         * @summary List payment recipients
         * @param {PaymentInitiationRecipientListRequest} paymentInitiationRecipientListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationRecipientList: async (paymentInitiationRecipientListRequest: PaymentInitiationRecipientListRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentInitiationRecipientListRequest' is not null or undefined
            assertParamExists('paymentInitiationRecipientList', 'paymentInitiationRecipientListRequest', paymentInitiationRecipientListRequest)
            const localVarPath = `/payment_initiation/recipient/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paymentInitiationRecipientListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use `/payment_profile/create` endpoint to create a new payment profile. To initiate the account linking experience, call `/link/token/create` and provide the `payment_profile_token` in the `transfer.payment_profile_token` field. You can then use the `payment_profile_token` when creating transfers using `/transfer/authorization/create` and `/transfer/create`.
         * @summary Create payment profile
         * @param {PaymentProfileCreateRequest} paymentProfileCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentProfileCreate: async (paymentProfileCreateRequest: PaymentProfileCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentProfileCreateRequest' is not null or undefined
            assertParamExists('paymentProfileCreate', 'paymentProfileCreateRequest', paymentProfileCreateRequest)
            const localVarPath = `/payment_profile/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paymentProfileCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use `/payment_profile/get` endpoint to get the status of a given Payment Profile.
         * @summary Get payment profile
         * @param {PaymentProfileGetRequest} paymentProfileGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentProfileGet: async (paymentProfileGetRequest: PaymentProfileGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentProfileGetRequest' is not null or undefined
            assertParamExists('paymentProfileGet', 'paymentProfileGetRequest', paymentProfileGetRequest)
            const localVarPath = `/payment_profile/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paymentProfileGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the `/payment_profile/remove` endpoint to remove a given Payment Profile. Once it’s removed, it can no longer be used to create transfers.
         * @summary Remove payment profile
         * @param {PaymentProfileRemoveRequest} paymentProfileRemoveRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentProfileRemove: async (paymentProfileRemoveRequest: PaymentProfileRemoveRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentProfileRemoveRequest' is not null or undefined
            assertParamExists('paymentProfileRemove', 'paymentProfileRemoveRequest', paymentProfileRemoveRequest)
            const localVarPath = `/payment_profile/remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paymentProfileRemoveRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.
         * @summary Create Apex bank account token
         * @param {ProcessorApexProcessorTokenCreateRequest} processorApexProcessorTokenCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorApexProcessorTokenCreate: async (processorApexProcessorTokenCreateRequest: ProcessorApexProcessorTokenCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'processorApexProcessorTokenCreateRequest' is not null or undefined
            assertParamExists('processorApexProcessorTokenCreate', 'processorApexProcessorTokenCreateRequest', processorApexProcessorTokenCreateRequest)
            const localVarPath = `/processor/apex/processor_token/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(processorApexProcessorTokenCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/processor/auth/get` endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that\'\'s associated with a given `processor_token`. The endpoint also returns high-level account data and balances when available.  Versioning note: API versions 2019-05-29 and earlier use a different schema for the `numbers` object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14). 
         * @summary Retrieve Auth data
         * @param {ProcessorAuthGetRequest} processorAuthGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorAuthGet: async (processorAuthGetRequest: ProcessorAuthGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'processorAuthGetRequest' is not null or undefined
            assertParamExists('processorAuthGet', 'processorAuthGetRequest', processorAuthGetRequest)
            const localVarPath = `/processor/auth/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(processorAuthGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/processor/balance/get` endpoint returns the real-time balance for each of an Item\'s accounts. While other endpoints may return a balance object, only `/processor/balance/get` forces the available and current balance fields to be refreshed rather than cached. 
         * @summary Retrieve Balance data
         * @param {ProcessorBalanceGetRequest} processorBalanceGetRequest The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorBalanceGet: async (processorBalanceGetRequest: ProcessorBalanceGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'processorBalanceGetRequest' is not null or undefined
            assertParamExists('processorBalanceGet', 'processorBalanceGetRequest', processorBalanceGetRequest)
            const localVarPath = `/processor/balance/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(processorBalanceGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the `/processor/bank_transfer/create` endpoint to initiate a new bank transfer as a processor
         * @summary Create a bank transfer as a processor
         * @param {ProcessorBankTransferCreateRequest} processorBankTransferCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorBankTransferCreate: async (processorBankTransferCreateRequest: ProcessorBankTransferCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'processorBankTransferCreateRequest' is not null or undefined
            assertParamExists('processorBankTransferCreate', 'processorBankTransferCreateRequest', processorBankTransferCreateRequest)
            const localVarPath = `/processor/bank_transfer/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(processorBankTransferCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/processor/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.
         * @summary Retrieve Identity data
         * @param {ProcessorIdentityGetRequest} processorIdentityGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorIdentityGet: async (processorIdentityGetRequest: ProcessorIdentityGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'processorIdentityGetRequest' is not null or undefined
            assertParamExists('processorIdentityGet', 'processorIdentityGetRequest', processorIdentityGetRequest)
            const localVarPath = `/processor/identity/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(processorIdentityGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/processor/identity/match` endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder\'s financial institution.  This request may take some time to complete if Identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
         * @summary Retrieve identity match score
         * @param {ProcessorIdentityMatchRequest} processorIdentityMatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorIdentityMatch: async (processorIdentityMatchRequest: ProcessorIdentityMatchRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'processorIdentityMatchRequest' is not null or undefined
            assertParamExists('processorIdentityMatch', 'processorIdentityMatchRequest', processorIdentityMatchRequest)
            const localVarPath = `/processor/identity/match`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(processorIdentityMatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * After calling `/processor/signal/evaluate`, call `/processor/signal/decision/report` to report whether the transaction was initiated. This endpoint will return an [`INVALID_FIELD`](/docs/errors/invalid-request/#invalid_field) error if called a second time with a different value for `initiated`.
         * @summary Report whether you initiated an ACH transaction
         * @param {ProcessorSignalDecisionReportRequest} processorSignalDecisionReportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorSignalDecisionReport: async (processorSignalDecisionReportRequest: ProcessorSignalDecisionReportRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'processorSignalDecisionReportRequest' is not null or undefined
            assertParamExists('processorSignalDecisionReport', 'processorSignalDecisionReportRequest', processorSignalDecisionReportRequest)
            const localVarPath = `/processor/signal/decision/report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(processorSignalDecisionReportRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use `/processor/signal/evaluate` to evaluate a planned ACH transaction as a processor to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/processor/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to our error documentation on [item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time. To reduce this latency, you can call `/signal/prepare` on the Item before you need to request Signal data.
         * @summary Evaluate a planned ACH transaction
         * @param {ProcessorSignalEvaluateRequest} processorSignalEvaluateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorSignalEvaluate: async (processorSignalEvaluateRequest: ProcessorSignalEvaluateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'processorSignalEvaluateRequest' is not null or undefined
            assertParamExists('processorSignalEvaluate', 'processorSignalEvaluateRequest', processorSignalEvaluateRequest)
            const localVarPath = `/processor/signal/evaluate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(processorSignalEvaluateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Call the `/processor/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/processor/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
         * @summary Report a return for an ACH transaction
         * @param {ProcessorSignalReturnReportRequest} processorSignalReturnReportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorSignalReturnReport: async (processorSignalReturnReportRequest: ProcessorSignalReturnReportRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'processorSignalReturnReportRequest' is not null or undefined
            assertParamExists('processorSignalReturnReport', 'processorSignalReturnReportRequest', processorSignalReturnReportRequest)
            const localVarPath = `/processor/signal/return/report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(processorSignalReturnReportRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).  Note that the Stripe bank account token is a one-time use token. To store bank account information for later use, you can use a Stripe customer object and create an associated bank account from the token, or you can use a Stripe Custom account and create an associated external bank account from the token. This bank account information should work indefinitely, unless the user\'s bank account information changes or they revoke Plaid\'s permissions to access their account. Stripe bank account information cannot be modified once the bank account token has been created. If you ever need to change the bank account details used by Stripe for a specific customer, have the user go through Link again and create a new bank account token from the new `access_token`.  Bank account tokens can also be revoked, using `/item/remove`.
         * @summary Create Stripe bank account token
         * @param {ProcessorStripeBankAccountTokenCreateRequest} processorStripeBankAccountTokenCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorStripeBankAccountTokenCreate: async (processorStripeBankAccountTokenCreateRequest: ProcessorStripeBankAccountTokenCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'processorStripeBankAccountTokenCreateRequest' is not null or undefined
            assertParamExists('processorStripeBankAccountTokenCreate', 'processorStripeBankAccountTokenCreateRequest', processorStripeBankAccountTokenCreateRequest)
            const localVarPath = `/processor/stripe/bank_account_token/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(processorStripeBankAccountTokenCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Used to create a token suitable for sending to one of Plaid\'s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see `/processor/stripe/bank_account_token/create` for creating tokens for use with Stripe integrations. Once created, a processor token for a given Item cannot be modified or updated. If the account must be linked to a new or different partner resource, create a new Item by having the user go through the Link flow again; a new processor token can then be created from the new `access_token`. Processor tokens can also be revoked, using `/item/remove`.
         * @summary Create processor token
         * @param {ProcessorTokenCreateRequest} processorTokenCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTokenCreate: async (processorTokenCreateRequest: ProcessorTokenCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'processorTokenCreateRequest' is not null or undefined
            assertParamExists('processorTokenCreate', 'processorTokenCreateRequest', processorTokenCreateRequest)
            const localVarPath = `/processor/token/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(processorTokenCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Used to get a processor token\'s product permissions. The `products` field will be an empty list if the processor can access all available products.
         * @summary Get a processor token\'s product permissions
         * @param {ProcessorTokenPermissionsGetRequest} processorTokenPermissionsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTokenPermissionsGet: async (processorTokenPermissionsGetRequest: ProcessorTokenPermissionsGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'processorTokenPermissionsGetRequest' is not null or undefined
            assertParamExists('processorTokenPermissionsGet', 'processorTokenPermissionsGetRequest', processorTokenPermissionsGetRequest)
            const localVarPath = `/processor/token/permissions/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(processorTokenPermissionsGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Used to control a processor\'s access to products on the given processor token. By default, a processor will have access to all available products on the corresponding item. To restrict access to a particular set of products, call this endpoint with the desired products. To restore access to all available products, call this endpoint with an empty list. This endpoint can be called multiple times as your needs and your processor\'s needs change.
         * @summary Control a processor\'s access to products
         * @param {ProcessorTokenPermissionsSetRequest} processorTokenPermissionsSetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTokenPermissionsSet: async (processorTokenPermissionsSetRequest: ProcessorTokenPermissionsSetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'processorTokenPermissionsSetRequest' is not null or undefined
            assertParamExists('processorTokenPermissionsSet', 'processorTokenPermissionsSetRequest', processorTokenPermissionsSetRequest)
            const localVarPath = `/processor/token/permissions/set`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(processorTokenPermissionsSetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/processor/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/processor/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/processor/transactions/get` will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item\'s `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the `/processor/transactions/refresh` endpoint.  Note that data may not be immediately available to `/processor/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/processor/transactions/get`, if it wasn\'t. If no transaction history is ready when `/processor/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
         * @summary Get transaction data
         * @param {ProcessorTransactionsGetRequest} processorTransactionsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTransactionsGet: async (processorTransactionsGetRequest: ProcessorTransactionsGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'processorTransactionsGetRequest' is not null or undefined
            assertParamExists('processorTransactionsGet', 'processorTransactionsGetRequest', processorTransactionsGetRequest)
            const localVarPath = `/processor/transactions/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(processorTransactionsGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/processor/transactions/recurring/get` endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.  This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  This endpoint can only be called on an Item that has already been initialized with Transactions (either during Link, by specifying it in `/link/token/create`; or after Link, by calling `/processor/transactions/get` or `/processor/transactions/sync`). Once all historical transactions have been fetched, call `/processor/transactions/recurring/get` to receive the Recurring Transactions streams and subscribe to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using `/transactions/sync` listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the `historical_update_complete` field in the payload is `true`. If using `/transactions/get`, listen for the [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.  After the initial call, you can call `/processor/transactions/recurring/get` endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.
         * @summary Fetch recurring transaction streams
         * @param {ProcessorTransactionsRecurringGetRequest} processorTransactionsRecurringGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTransactionsRecurringGet: async (processorTransactionsRecurringGetRequest: ProcessorTransactionsRecurringGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'processorTransactionsRecurringGetRequest' is not null or undefined
            assertParamExists('processorTransactionsRecurringGet', 'processorTransactionsRecurringGetRequest', processorTransactionsRecurringGetRequest)
            const localVarPath = `/processor/transactions/recurring/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(processorTransactionsRecurringGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * `/processor/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling `/processor/transactions/refresh`, Plaid will fire a webhook: for `/transactions/sync` users, [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both `/processor/transactions/sync` and `/processor/transactions/get`, [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/processor/transactions/get` or `/processor/transactions/sync`. Note that the `/processor/transactions/refresh` endpoint is not supported for Capital One (`ins_128026`) and will result in a `PRODUCT_NOT_SUPPORTED` error if called on an Item from that institution.  `/processor/transactions/refresh` is offered as an add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
         * @summary Refresh transaction data
         * @param {ProcessorTransactionsRefreshRequest} processorTransactionsRefreshRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTransactionsRefresh: async (processorTransactionsRefreshRequest: ProcessorTransactionsRefreshRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'processorTransactionsRefreshRequest' is not null or undefined
            assertParamExists('processorTransactionsRefresh', 'processorTransactionsRefreshRequest', processorTransactionsRefreshRequest)
            const localVarPath = `/processor/transactions/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(processorTransactionsRefreshRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint replaces `/processor/transactions/get` and its associated webhooks for most common use-cases.  The `/processor/transactions/sync` endpoint allows developers to subscribe to all transactions associated with an Item and get updates synchronously in a stream-like manner, using a cursor to track which updates have already been seen. `/processor/transactions/sync` provides the same functionality as `/processor/transactions/get` and can be used instead of `/processor/transactions/get` to simplify the process of tracking transactions updates.  This endpoint provides user-authorized transaction data for `credit`, `depository`, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from `investments` accounts, use `/investments/transactions/get` instead.  Returned transactions data is grouped into three types of update, indicating whether the transaction was added, removed, or modified since the last call to the API.  In the first call to `/processor/transactions/sync` for an Item, the endpoint will return all historical transactions data associated with that Item up until the time of the API call (as \"adds\"), which then generates a `next_cursor` for that Item. In subsequent calls, send the `next_cursor` to receive only the changes that have occurred since the previous call.  Due to the potentially large number of transactions associated with an Item, results are paginated. The `has_more` field specifies if additional calls are necessary to fetch all available transaction updates. Call `/processor/transactions/sync` with the new cursor, pulling all updates, until `has_more` is `false`.  When retrieving paginated updates, track both the `next_cursor` from the latest response and the original cursor from the first call in which `has_more` was `true`; if a call to `/processor/transactions/sync` fails when retrieving a paginated update, which can occur as a result of the [`TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION`](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error, the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.  Whenever new or updated transaction data becomes available, `/processor/transactions/sync` will provide these updates. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item\'s `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, use the `/processor/transactions/refresh` endpoint.  Note that for newly created Items, data may not be immediately available to `/processor/transactions/sync`. Plaid begins preparing transactions data when the Item is created, but the process can take anywhere from a few seconds to several minutes to complete, depending on the number of transactions available.
         * @summary Get incremental transaction updates on an Item
         * @param {ProcessorTransactionsSyncRequest} processorTransactionsSyncRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTransactionsSync: async (processorTransactionsSyncRequest: ProcessorTransactionsSyncRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'processorTransactionsSyncRequest' is not null or undefined
            assertParamExists('processorTransactionsSync', 'processorTransactionsSyncRequest', processorTransactionsSyncRequest)
            const localVarPath = `/processor/transactions/sync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(processorTransactionsSyncRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the `/sandbox/bank_income/fire_webhook` endpoint to manually trigger a Bank Income webhook in the Sandbox environment.
         * @summary Manually fire a bank income webhook in sandbox
         * @param {SandboxBankIncomeFireWebhookRequest} sandboxBankIncomeFireWebhookRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxBankIncomeFireWebhook: async (sandboxBankIncomeFireWebhookRequest: SandboxBankIncomeFireWebhookRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sandboxBankIncomeFireWebhookRequest' is not null or undefined
            assertParamExists('sandboxBankIncomeFireWebhook', 'sandboxBankIncomeFireWebhookRequest', sandboxBankIncomeFireWebhookRequest)
            const localVarPath = `/sandbox/bank_income/fire_webhook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sandboxBankIncomeFireWebhookRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the `/sandbox/bank_transfer/fire_webhook` endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.
         * @summary Manually fire a Bank Transfer webhook
         * @param {SandboxBankTransferFireWebhookRequest} sandboxBankTransferFireWebhookRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxBankTransferFireWebhook: async (sandboxBankTransferFireWebhookRequest: SandboxBankTransferFireWebhookRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sandboxBankTransferFireWebhookRequest' is not null or undefined
            assertParamExists('sandboxBankTransferFireWebhook', 'sandboxBankTransferFireWebhookRequest', sandboxBankTransferFireWebhookRequest)
            const localVarPath = `/sandbox/bank_transfer/fire_webhook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sandboxBankTransferFireWebhookRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the `/sandbox/bank_transfer/simulate` endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/bank_transfer/event/sync` or `/bank_transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
         * @summary Simulate a bank transfer event in Sandbox
         * @param {SandboxBankTransferSimulateRequest} sandboxBankTransferSimulateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxBankTransferSimulate: async (sandboxBankTransferSimulateRequest: SandboxBankTransferSimulateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sandboxBankTransferSimulateRequest' is not null or undefined
            assertParamExists('sandboxBankTransferSimulate', 'sandboxBankTransferSimulateRequest', sandboxBankTransferSimulateRequest)
            const localVarPath = `/sandbox/bank_transfer/simulate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sandboxBankTransferSimulateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the `/sandbox/income/fire_webhook` endpoint to manually trigger a Payroll Income webhook in the Sandbox environment.
         * @summary Manually fire an Income webhook
         * @param {SandboxIncomeFireWebhookRequest} sandboxIncomeFireWebhookRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxIncomeFireWebhook: async (sandboxIncomeFireWebhookRequest: SandboxIncomeFireWebhookRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sandboxIncomeFireWebhookRequest' is not null or undefined
            assertParamExists('sandboxIncomeFireWebhook', 'sandboxIncomeFireWebhookRequest', sandboxIncomeFireWebhookRequest)
            const localVarPath = `/sandbox/income/fire_webhook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sandboxIncomeFireWebhookRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/sandbox/item/fire_webhook` endpoint is used to test that code correctly handles webhooks. This endpoint can trigger the following webhooks:  `DEFAULT_UPDATE`: Transactions update webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `NEW_ACCOUNTS_AVAILABLE`: Webhook to be fired for a given Sandbox Item created with Account Select v2.  `AUTH_DATA_UPDATE`: Webhook to be fired for a given Sandbox Item created with Auth as an enabled product.  `RECURRING_TRANSACTIONS_UPDATE`: Recurring Transactions webhook to be fired for a given Sandbox Item. If the Item does not support Recurring Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `SYNC_UPDATES_AVAILABLE`: Transactions webhook to be fired for a given Sandbox Item.  If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `PRODUCT_READY`: Assets webhook to be fired when a given asset report has been successfully generated. If the Item does not support Assets, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `ERROR`: Assets webhook to be fired when asset report generation has failed. If the Item does not support Assets, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development.
         * @summary Fire a test webhook
         * @param {SandboxItemFireWebhookRequest} sandboxItemFireWebhookRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxItemFireWebhook: async (sandboxItemFireWebhookRequest: SandboxItemFireWebhookRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sandboxItemFireWebhookRequest' is not null or undefined
            assertParamExists('sandboxItemFireWebhook', 'sandboxItemFireWebhookRequest', sandboxItemFireWebhookRequest)
            const localVarPath = `/sandbox/item/fire_webhook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sandboxItemFireWebhookRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * `/sandbox/item/reset_login/` forces an Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link\'s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/item/reset_login`, You can then use Plaid Link update mode to restore the Item to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.
         * @summary Force a Sandbox Item into an error state
         * @param {SandboxItemResetLoginRequest} sandboxItemResetLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxItemResetLogin: async (sandboxItemResetLoginRequest: SandboxItemResetLoginRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sandboxItemResetLoginRequest' is not null or undefined
            assertParamExists('sandboxItemResetLogin', 'sandboxItemResetLoginRequest', sandboxItemResetLoginRequest)
            const localVarPath = `/sandbox/item/reset_login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sandboxItemResetLoginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/sandbox/item/set_verification_status` endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  Note that not all Plaid developer accounts are enabled for micro-deposit based verification by default. Your account must be enabled for this feature in order to test it in Sandbox. To enable this features or check your status, contact your account manager or [submit a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access).  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
         * @summary Set verification status for Sandbox account
         * @param {SandboxItemSetVerificationStatusRequest} sandboxItemSetVerificationStatusRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxItemSetVerificationStatus: async (sandboxItemSetVerificationStatusRequest: SandboxItemSetVerificationStatusRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sandboxItemSetVerificationStatusRequest' is not null or undefined
            assertParamExists('sandboxItemSetVerificationStatus', 'sandboxItemSetVerificationStatusRequest', sandboxItemSetVerificationStatusRequest)
            const localVarPath = `/sandbox/item/set_verification_status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sandboxItemSetVerificationStatusRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Save the selected accounts when connecting to the Platypus Oauth institution
         * @summary Save the selected accounts when connecting to the Platypus Oauth institution
         * @param {SandboxOauthSelectAccountsRequest} sandboxOauthSelectAccountsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxOauthSelectAccounts: async (sandboxOauthSelectAccountsRequest: SandboxOauthSelectAccountsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sandboxOauthSelectAccountsRequest' is not null or undefined
            assertParamExists('sandboxOauthSelectAccounts', 'sandboxOauthSelectAccountsRequest', sandboxOauthSelectAccountsRequest)
            const localVarPath = `/sandbox/oauth/select_accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sandboxOauthSelectAccountsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * `/sandbox/payment_profile/reset_login/` forces a Payment Profile into a state where the login is no longer valid. This makes it easy to test update mode for Payment Profile in the Sandbox environment.   After calling `/sandbox/payment_profile/reset_login`, calls to the `/transfer/authorization/create` with the Payment Profile will result in a `decision_rationale` `PAYMENT_PROFILE_LOGIN_REQUIRED`. You can then use update mode for Payment Profile to restore it into a good state.   In order to invoke this endpoint, you must first [create a Payment Profile](https://plaid.com/docs/transfer/add-to-app/#create-a-payment-profile-optional) and [go through the Link flow](https://plaid.com/docs/transfer/add-to-app/#create-a-link-token).
         * @summary Reset the login of a Payment Profile
         * @param {SandboxPaymentProfileResetLoginRequest} sandboxPaymentProfileResetLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxPaymentProfileResetLogin: async (sandboxPaymentProfileResetLoginRequest: SandboxPaymentProfileResetLoginRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sandboxPaymentProfileResetLoginRequest' is not null or undefined
            assertParamExists('sandboxPaymentProfileResetLogin', 'sandboxPaymentProfileResetLoginRequest', sandboxPaymentProfileResetLoginRequest)
            const localVarPath = `/sandbox/payment_profile/reset_login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sandboxPaymentProfileResetLoginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the `/sandbox/processor_token/create` endpoint to create a valid `processor_token` for an arbitrary institution ID and test credentials. The created `processor_token` corresponds to a new Sandbox Item. You can then use this `processor_token` with the `/processor/` API endpoints in Sandbox. You can also use `/sandbox/processor_token/create` with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.
         * @summary Create a test Item and processor token
         * @param {SandboxProcessorTokenCreateRequest} sandboxProcessorTokenCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxProcessorTokenCreate: async (sandboxProcessorTokenCreateRequest: SandboxProcessorTokenCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sandboxProcessorTokenCreateRequest' is not null or undefined
            assertParamExists('sandboxProcessorTokenCreate', 'sandboxProcessorTokenCreateRequest', sandboxProcessorTokenCreateRequest)
            const localVarPath = `/sandbox/processor_token/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sandboxProcessorTokenCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the `/sandbox/public_token/create` endpoint to create a valid `public_token`  for an arbitrary institution ID, initial products, and test credentials. The created `public_token` maps to a new Sandbox Item. You can then call `/item/public_token/exchange` to exchange the `public_token` for an `access_token` and perform all API actions. `/sandbox/public_token/create` can also be used with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. `/sandbox/public_token/create` cannot be used with OAuth institutions.
         * @summary Create a test Item
         * @param {SandboxPublicTokenCreateRequest} sandboxPublicTokenCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxPublicTokenCreate: async (sandboxPublicTokenCreateRequest: SandboxPublicTokenCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sandboxPublicTokenCreateRequest' is not null or undefined
            assertParamExists('sandboxPublicTokenCreate', 'sandboxPublicTokenCreateRequest', sandboxPublicTokenCreateRequest)
            const localVarPath = `/sandbox/public_token/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sandboxPublicTokenCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the `/sandbox/transfer/fire_webhook` endpoint to manually trigger a Transfer webhook in the Sandbox environment.
         * @summary Manually fire a Transfer webhook
         * @param {SandboxTransferFireWebhookRequest} sandboxTransferFireWebhookRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferFireWebhook: async (sandboxTransferFireWebhookRequest: SandboxTransferFireWebhookRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sandboxTransferFireWebhookRequest' is not null or undefined
            assertParamExists('sandboxTransferFireWebhook', 'sandboxTransferFireWebhookRequest', sandboxTransferFireWebhookRequest)
            const localVarPath = `/sandbox/transfer/fire_webhook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sandboxTransferFireWebhookRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the `/sandbox/transfer/repayment/simulate` endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.
         * @summary Trigger the creation of a repayment
         * @param {SandboxTransferRepaymentSimulateRequest} sandboxTransferRepaymentSimulateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferRepaymentSimulate: async (sandboxTransferRepaymentSimulateRequest: SandboxTransferRepaymentSimulateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sandboxTransferRepaymentSimulateRequest' is not null or undefined
            assertParamExists('sandboxTransferRepaymentSimulate', 'sandboxTransferRepaymentSimulateRequest', sandboxTransferRepaymentSimulateRequest)
            const localVarPath = `/sandbox/transfer/repayment/simulate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sandboxTransferRepaymentSimulateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the `/sandbox/transfer/simulate` endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
         * @summary Simulate a transfer event in Sandbox
         * @param {SandboxTransferSimulateRequest} sandboxTransferSimulateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferSimulate: async (sandboxTransferSimulateRequest: SandboxTransferSimulateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sandboxTransferSimulateRequest' is not null or undefined
            assertParamExists('sandboxTransferSimulate', 'sandboxTransferSimulateRequest', sandboxTransferSimulateRequest)
            const localVarPath = `/sandbox/transfer/simulate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sandboxTransferSimulateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the `/sandbox/transfer/sweep/simulate` endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all `posted` or `pending` transfers with a sweep status of `unswept` will become `swept`, and all `returned` transfers with a sweep status of `swept` will become `return_swept`.
         * @summary Simulate creating a sweep
         * @param {SandboxTransferSweepSimulateRequest} sandboxTransferSweepSimulateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferSweepSimulate: async (sandboxTransferSweepSimulateRequest: SandboxTransferSweepSimulateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sandboxTransferSweepSimulateRequest' is not null or undefined
            assertParamExists('sandboxTransferSweepSimulate', 'sandboxTransferSweepSimulateRequest', sandboxTransferSweepSimulateRequest)
            const localVarPath = `/sandbox/transfer/sweep/simulate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sandboxTransferSweepSimulateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the `/sandbox/transfer/test_clock/advance` endpoint to advance a `test_clock` in the Sandbox environment.  A test clock object represents an independent timeline and has a `virtual_time` field indicating the current timestamp of the timeline. A test clock can be advanced by incrementing `virtual_time`, but may never go back to a lower `virtual_time`.  If a test clock is advanced, we will simulate the changes that ought to occur during the time that elapsed. For instance, a client creates a weekly recurring transfer with a test clock set at t. When the client advances the test clock by setting `virtual_time` = t + 15 days, 2 new originations should be created, along with the webhook events.  The advancement of the test clock from its current `virtual_time` should be limited such that there are no more than 20 originations resulting from the advance operation on each `recurring_transfer` associated with the `test_clock`. For instance, if the recurring transfer associated with this test clock originates once every 4 weeks, you can advance the `virtual_time` up to 80 weeks on each API call.
         * @summary Advance a test clock
         * @param {SandboxTransferTestClockAdvanceRequest} sandboxTransferTestClockAdvanceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferTestClockAdvance: async (sandboxTransferTestClockAdvanceRequest: SandboxTransferTestClockAdvanceRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sandboxTransferTestClockAdvanceRequest' is not null or undefined
            assertParamExists('sandboxTransferTestClockAdvance', 'sandboxTransferTestClockAdvanceRequest', sandboxTransferTestClockAdvanceRequest)
            const localVarPath = `/sandbox/transfer/test_clock/advance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sandboxTransferTestClockAdvanceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the `/sandbox/transfer/test_clock/create` endpoint to create a `test_clock` in the Sandbox environment.  A test clock object represents an independent timeline and has a `virtual_time` field indicating the current timestamp of the timeline. Test clocks are used for testing recurring transfers in Sandbox.  A test clock can be associated with up to 5 recurring transfers.
         * @summary Create a test clock
         * @param {SandboxTransferTestClockCreateRequest} sandboxTransferTestClockCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferTestClockCreate: async (sandboxTransferTestClockCreateRequest: SandboxTransferTestClockCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sandboxTransferTestClockCreateRequest' is not null or undefined
            assertParamExists('sandboxTransferTestClockCreate', 'sandboxTransferTestClockCreateRequest', sandboxTransferTestClockCreateRequest)
            const localVarPath = `/sandbox/transfer/test_clock/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sandboxTransferTestClockCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the `/sandbox/transfer/test_clock/get` endpoint to get a `test_clock` in the Sandbox environment.
         * @summary Get a test clock
         * @param {SandboxTransferTestClockGetRequest} sandboxTransferTestClockGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferTestClockGet: async (sandboxTransferTestClockGetRequest: SandboxTransferTestClockGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sandboxTransferTestClockGetRequest' is not null or undefined
            assertParamExists('sandboxTransferTestClockGet', 'sandboxTransferTestClockGetRequest', sandboxTransferTestClockGetRequest)
            const localVarPath = `/sandbox/transfer/test_clock/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sandboxTransferTestClockGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the `/sandbox/transfer/test_clock/list` endpoint to see a list of all your test clocks in the Sandbox environment, by ascending `virtual_time`. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired test clocks.
         * @summary List test clocks
         * @param {SandboxTransferTestClockListRequest} sandboxTransferTestClockListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferTestClockList: async (sandboxTransferTestClockListRequest: SandboxTransferTestClockListRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sandboxTransferTestClockListRequest' is not null or undefined
            assertParamExists('sandboxTransferTestClockList', 'sandboxTransferTestClockListRequest', sandboxTransferTestClockListRequest)
            const localVarPath = `/sandbox/transfer/test_clock/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sandboxTransferTestClockListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * After calling `/signal/evaluate`, call `/signal/decision/report` to report whether the transaction was initiated. This endpoint will return an [`INVALID_FIELD`](/docs/errors/invalid-request/#invalid_field) error if called a second time with a different value for `initiated`.
         * @summary Report whether you initiated an ACH transaction
         * @param {SignalDecisionReportRequest} signalDecisionReportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalDecisionReport: async (signalDecisionReportRequest: SignalDecisionReportRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'signalDecisionReportRequest' is not null or undefined
            assertParamExists('signalDecisionReport', 'signalDecisionReportRequest', signalDecisionReportRequest)
            const localVarPath = `/signal/decision/report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signalDecisionReportRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use `/signal/evaluate` to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to the error documentation on [Item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time.
         * @summary Evaluate a planned ACH transaction
         * @param {SignalEvaluateRequest} signalEvaluateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalEvaluate: async (signalEvaluateRequest: SignalEvaluateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'signalEvaluateRequest' is not null or undefined
            assertParamExists('signalEvaluate', 'signalEvaluateRequest', signalEvaluateRequest)
            const localVarPath = `/signal/evaluate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signalEvaluateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * When Link is not initialized with Signal, call `/signal/prepare` to opt-in that Item to the Signal data collection process, developing a Signal score.  If you are using other Plaid products after Link, e.g. Identity or Assets, call `/signal/prepare` after those product calls are complete.  Example flow: Link is initialized with Auth, call `/auth/get` for the account and routing number, call `/identity/get` to retrieve bank ownership details, then call `/signal/prepare` to begin Signal data collection. Later, once you have obtained details about the proposed transaction from the user, call `/signal/evaluate` for a Signal score. For more information please see [Recommendations for initializing Link with specific product combinations](https://www.plaid.com/docs/link/initializing-products/#recommendations-for-initializing-link-with-specific-product-combinations).
         * @summary Opt-in an Item to Signal
         * @param {SignalPrepareRequest} signalPrepareRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalPrepare: async (signalPrepareRequest: SignalPrepareRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'signalPrepareRequest' is not null or undefined
            assertParamExists('signalPrepare', 'signalPrepareRequest', signalPrepareRequest)
            const localVarPath = `/signal/prepare`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signalPrepareRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Call the `/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
         * @summary Report a return for an ACH transaction
         * @param {SignalReturnReportRequest} signalReturnReportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalReturnReport: async (signalReturnReportRequest: SignalReturnReportRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'signalReturnReportRequest' is not null or undefined
            assertParamExists('signalReturnReport', 'signalReturnReportRequest', signalReturnReportRequest)
            const localVarPath = `/signal/return/report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signalReturnReportRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/beta/transactions/v1/enhance` endpoint enriches raw transaction data provided directly by clients.  The product is currently in beta.
         * @summary enhance locally-held transaction data
         * @param {TransactionsEnhanceGetRequest} transactionsEnhanceGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsEnhance: async (transactionsEnhanceGetRequest: TransactionsEnhanceGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionsEnhanceGetRequest' is not null or undefined
            assertParamExists('transactionsEnhance', 'transactionsEnhanceGetRequest', transactionsEnhanceGetRequest)
            const localVarPath = `/beta/transactions/v1/enhance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionsEnhanceGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/transactions/enrich` endpoint enriches raw transaction data generated by your own banking products or retrieved from other non-Plaid sources.
         * @summary Enrich locally-held transaction data
         * @param {TransactionsEnrichGetRequest} transactionsEnrichGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsEnrich: async (transactionsEnrichGetRequest: TransactionsEnrichGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionsEnrichGetRequest' is not null or undefined
            assertParamExists('transactionsEnrich', 'transactionsEnrichGetRequest', transactionsEnrichGetRequest)
            const localVarPath = `/transactions/enrich`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionsEnrichGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Note: All new implementations are encouraged to use `/transactions/sync` rather than `/transactions/get`. `/transactions/sync` provides the same functionality as `/transactions/get` and improves developer ease-of-use for handling transactions updates.  The `/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products/investments/) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/transactions/get` will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item\'s `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the `/transactions/refresh` endpoint.  Note that data may not be immediately available to `/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/transactions/get`, if it wasn\'t. To be alerted when transaction data is ready to be fetched, listen for the [`INITIAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#initial_update) and [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhooks. If no transaction history is ready when `/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
         * @summary Get transaction data
         * @param {TransactionsGetRequest} transactionsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsGet: async (transactionsGetRequest: TransactionsGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionsGetRequest' is not null or undefined
            assertParamExists('transactionsGet', 'transactionsGetRequest', transactionsGetRequest)
            const localVarPath = `/transactions/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionsGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/transactions/recurring/get` endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.  This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  This endpoint can only be called on an Item that has already been initialized with Transactions (either during Link, by specifying it in `/link/token/create`; or after Link, by calling `/transactions/get` or `/transactions/sync`). Once all historical transactions have been fetched, call `/transactions/recurring/get` to receive the Recurring Transactions streams and subscribe to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using `/transactions/sync` listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the `historical_update_complete` field in the payload is `true`. If using `/transactions/get`, listen for the [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.  After the initial call, you can call `/transactions/recurring/get` endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.
         * @summary Fetch recurring transaction streams
         * @param {TransactionsRecurringGetRequest} transactionsRecurringGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRecurringGet: async (transactionsRecurringGetRequest: TransactionsRecurringGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionsRecurringGetRequest' is not null or undefined
            assertParamExists('transactionsRecurringGet', 'transactionsRecurringGetRequest', transactionsRecurringGetRequest)
            const localVarPath = `/transactions/recurring/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionsRecurringGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * `/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling `/transactions/refresh`, Plaid will fire a webhook: for `/transactions/sync` users, [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both `/transactions/sync` and `/transactions/get`, [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/transactions/get` or `/transactions/sync`. Note that the `/transactions/refresh` endpoint is not supported for Capital One (`ins_128026`) and will result in a `PRODUCT_NOT_SUPPORTED` error if called on an Item from that institution.  `/transactions/refresh` is offered as an add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
         * @summary Refresh transaction data
         * @param {TransactionsRefreshRequest} transactionsRefreshRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRefresh: async (transactionsRefreshRequest: TransactionsRefreshRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionsRefreshRequest' is not null or undefined
            assertParamExists('transactionsRefresh', 'transactionsRefreshRequest', transactionsRefreshRequest)
            const localVarPath = `/transactions/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionsRefreshRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/transactions/rules/v1/create` endpoint creates transaction categorization rules.  Rules will be applied on the Item\'s transactions returned in `/transactions/get` response.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
         * @summary Create transaction category rule
         * @param {TransactionsRulesCreateRequest} transactionsRulesCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRulesCreate: async (transactionsRulesCreateRequest: TransactionsRulesCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionsRulesCreateRequest' is not null or undefined
            assertParamExists('transactionsRulesCreate', 'transactionsRulesCreateRequest', transactionsRulesCreateRequest)
            const localVarPath = `/beta/transactions/rules/v1/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionsRulesCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/transactions/rules/v1/list` returns a list of transaction rules created for the Item associated with the access token.
         * @summary Return a list of rules created for the Item associated with the access token.
         * @param {TransactionsRulesListRequest} transactionsRulesListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRulesList: async (transactionsRulesListRequest: TransactionsRulesListRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionsRulesListRequest' is not null or undefined
            assertParamExists('transactionsRulesList', 'transactionsRulesListRequest', transactionsRulesListRequest)
            const localVarPath = `/beta/transactions/rules/v1/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionsRulesListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/transactions/rules/v1/remove` endpoint is used to remove a transaction rule.
         * @summary Remove transaction rule
         * @param {TransactionsRulesRemoveRequest} transactionsRulesRemoveRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRulesRemove: async (transactionsRulesRemoveRequest: TransactionsRulesRemoveRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionsRulesRemoveRequest' is not null or undefined
            assertParamExists('transactionsRulesRemove', 'transactionsRulesRemoveRequest', transactionsRulesRemoveRequest)
            const localVarPath = `/beta/transactions/rules/v1/remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionsRulesRemoveRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint replaces `/transactions/get` and its associated webhooks for most common use-cases.  The `/transactions/sync` endpoint allows developers to subscribe to all transactions associated with an Item and get updates synchronously in a stream-like manner, using a cursor to track which updates have already been seen. `/transactions/sync` provides the same functionality as `/transactions/get` and can be used instead of `/transactions/get` to simplify the process of tracking transactions updates.  This endpoint provides user-authorized transaction data for `credit`, `depository`, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from `investments` accounts, use `/investments/transactions/get` instead.  Returned transactions data is grouped into three types of update, indicating whether the transaction was added, removed, or modified since the last call to the API.  In the first call to `/transactions/sync` for an Item, the endpoint will return all historical transactions data associated with that Item up until the time of the API call (as \"adds\"), which then generates a `next_cursor` for that Item. In subsequent calls, send the `next_cursor` to receive only the changes that have occurred since the previous call.  Due to the potentially large number of transactions associated with an Item, results are paginated. The `has_more` field specifies if additional calls are necessary to fetch all available transaction updates. Call `/transactions/sync` with the new cursor, pulling all updates, until `has_more` is `false`.  When retrieving paginated updates, track both the `next_cursor` from the latest response and the original cursor from the first call in which `has_more` was `true`; if a call to `/transactions/sync` fails due to the [`TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION`](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error, the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.  Whenever new or updated transaction data becomes available, `/transactions/sync` will provide these updates. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item\'s `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, use the `/transactions/refresh` endpoint.  Note that for newly created Items, data may not be immediately available to `/transactions/sync`. Plaid begins preparing transactions data when the Item is created, but the process can take anywhere from a few seconds to several minutes to complete, depending on the number of transactions available.  To be alerted when new data is available, listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) webhook.
         * @summary Get incremental transaction updates on an Item
         * @param {TransactionsSyncRequest} transactionsSyncRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsSync: async (transactionsSyncRequest: TransactionsSyncRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionsSyncRequest' is not null or undefined
            assertParamExists('transactionsSync', 'transactionsSyncRequest', transactionsSyncRequest)
            const localVarPath = `/transactions/sync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionsSyncRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the `/transfer/authorization/create` endpoint to determine transfer failure risk.  In Plaid\'s Sandbox environment the decisions will be returned as follows:    - To approve a transfer with null rationale code, make an authorization request with an `amount` less than the available balance in the account.    - To approve a transfer with the rationale code `MANUALLY_VERIFIED_ITEM`, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To approve a transfer with the rationale code `ITEM_LOGIN_REQUIRED`, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).    - To decline a transfer with the rationale code `NSF`, the available balance on the account must be less than the authorization `amount`. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code `RISK`, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.  The fields `device.ip_address` and `device.user_agent` are required for all sessions where the end-user is present. For example, when a user is authorizing a one-time payment from their device.
         * @summary Create a transfer authorization
         * @param {TransferAuthorizationCreateRequest} transferAuthorizationCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferAuthorizationCreate: async (transferAuthorizationCreateRequest: TransferAuthorizationCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transferAuthorizationCreateRequest' is not null or undefined
            assertParamExists('transferAuthorizationCreate', 'transferAuthorizationCreateRequest', transferAuthorizationCreateRequest)
            const localVarPath = `/transfer/authorization/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transferAuthorizationCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the `/transfer/balance/get` endpoint to view a balance held with Plaid.
         * @summary Retrieve a balance held with Plaid
         * @param {TransferBalanceGetRequest} transferBalanceGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferBalanceGet: async (transferBalanceGetRequest: TransferBalanceGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transferBalanceGetRequest' is not null or undefined
            assertParamExists('transferBalanceGet', 'transferBalanceGetRequest', transferBalanceGetRequest)
            const localVarPath = `/transfer/balance/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transferBalanceGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the `/transfer/cancel` endpoint to cancel a transfer.  A transfer is eligible for cancellation if the `cancellable` property returned by `/transfer/get` is `true`.
         * @summary Cancel a transfer
         * @param {TransferCancelRequest} transferCancelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferCancel: async (transferCancelRequest: TransferCancelRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transferCancelRequest' is not null or undefined
            assertParamExists('transferCancel', 'transferCancelRequest', transferCancelRequest)
            const localVarPath = `/transfer/cancel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transferCancelRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the `/transfer/capabilities/get` endpoint to determine the RTP eligibility information of a transfer.
         * @summary Get RTP eligibility information of a transfer
         * @param {TransferCapabilitiesGetRequest} transferCapabilitiesGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferCapabilitiesGet: async (transferCapabilitiesGetRequest: TransferCapabilitiesGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transferCapabilitiesGetRequest' is not null or undefined
            assertParamExists('transferCapabilitiesGet', 'transferCapabilitiesGetRequest', transferCapabilitiesGetRequest)
            const localVarPath = `/transfer/capabilities/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transferCapabilitiesGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the `/transfer/configuration/get` endpoint to view your transfer product configurations.
         * @summary Get transfer product configuration
         * @param {TransferConfigurationGetRequest} transferConfigurationGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferConfigurationGet: async (transferConfigurationGetRequest: TransferConfigurationGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transferConfigurationGetRequest' is not null or undefined
            assertParamExists('transferConfigurationGet', 'transferConfigurationGetRequest', transferConfigurationGetRequest)
            const localVarPath = `/transfer/configuration/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transferConfigurationGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the `/transfer/create` endpoint to initiate a new transfer.
         * @summary Create a transfer
         * @param {TransferCreateRequest} transferCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferCreate: async (transferCreateRequest: TransferCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transferCreateRequest' is not null or undefined
            assertParamExists('transferCreate', 'transferCreateRequest', transferCreateRequest)
            const localVarPath = `/transfer/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transferCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Third-party sender customers can use `/transfer/diligence/document/upload` endpoint to upload a document on behalf of its end customer (i.e. originator) to Plaid. You’ll need to send a request of type multipart/form-data. You must provide the `client_id` in the `PLAID-CLIENT-ID` header and `secret` in the `PLAID-SECRET` header.
         * @summary This endpoint allows third-party sender customers to upload a document on behalf of its end customer (i.e. originator) to Plaid. You’ll need to send a request of type multipart/form-data.
         * @param {TransferDiligenceDocumentUploadRequest} transferDiligenceDocumentUploadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferDiligenceDocumentUpload: async (transferDiligenceDocumentUploadRequest: TransferDiligenceDocumentUploadRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transferDiligenceDocumentUploadRequest' is not null or undefined
            assertParamExists('transferDiligenceDocumentUpload', 'transferDiligenceDocumentUploadRequest', transferDiligenceDocumentUploadRequest)
            const localVarPath = `/transfer/diligence/document/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transferDiligenceDocumentUploadRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the `/transfer/diligence/submit` endpoint to submit transfer diligence on behalf of the originator.
         * @summary Submit transfer diligence on behalf of the end customer (i.e. the originator).
         * @param {TransferDiligenceSubmitRequest} transferDiligenceSubmitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferDiligenceSubmit: async (transferDiligenceSubmitRequest: TransferDiligenceSubmitRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transferDiligenceSubmitRequest' is not null or undefined
            assertParamExists('transferDiligenceSubmit', 'transferDiligenceSubmitRequest', transferDiligenceSubmitRequest)
            const localVarPath = `/transfer/diligence/submit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transferDiligenceSubmitRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the `/transfer/event/list` endpoint to get a list of transfer events based on specified filter criteria.
         * @summary List transfer events
         * @param {TransferEventListRequest} transferEventListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferEventList: async (transferEventListRequest: TransferEventListRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transferEventListRequest' is not null or undefined
            assertParamExists('transferEventList', 'transferEventListRequest', transferEventListRequest)
            const localVarPath = `/transfer/event/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transferEventListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * `/transfer/event/sync` allows you to request up to the next 25 transfer events that happened after a specific `event_id`. Use the `/transfer/event/sync` endpoint to guarantee you have seen all transfer events.
         * @summary Sync transfer events
         * @param {TransferEventSyncRequest} transferEventSyncRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferEventSync: async (transferEventSyncRequest: TransferEventSyncRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transferEventSyncRequest' is not null or undefined
            assertParamExists('transferEventSync', 'transferEventSyncRequest', transferEventSyncRequest)
            const localVarPath = `/transfer/event/sync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transferEventSyncRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/transfer/get` endpoint fetches information about the transfer corresponding to the given `transfer_id`.
         * @summary Retrieve a transfer
         * @param {TransferGetRequest} transferGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferGet: async (transferGetRequest: TransferGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transferGetRequest' is not null or undefined
            assertParamExists('transferGet', 'transferGetRequest', transferGetRequest)
            const localVarPath = `/transfer/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transferGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the `/transfer/intent/create` endpoint to generate a transfer intent object and invoke the Transfer UI.
         * @summary Create a transfer intent object to invoke the Transfer UI
         * @param {TransferIntentCreateRequest} transferIntentCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferIntentCreate: async (transferIntentCreateRequest: TransferIntentCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transferIntentCreateRequest' is not null or undefined
            assertParamExists('transferIntentCreate', 'transferIntentCreateRequest', transferIntentCreateRequest)
            const localVarPath = `/transfer/intent/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transferIntentCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the `/transfer/intent/get` endpoint to retrieve more information about a transfer intent.
         * @summary Retrieve more information about a transfer intent
         * @param {{ [key: string]: object; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferIntentGet: async (requestBody: { [key: string]: object; }, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('transferIntentGet', 'requestBody', requestBody)
            const localVarPath = `/transfer/intent/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the `/transfer/list` endpoint to see a list of all your transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired transfers. 
         * @summary List transfers
         * @param {TransferListRequest} transferListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferList: async (transferListRequest: TransferListRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transferListRequest' is not null or undefined
            assertParamExists('transferList', 'transferListRequest', transferListRequest)
            const localVarPath = `/transfer/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transferListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the `/transfer/metrics/get` endpoint to view your transfer product usage metrics.
         * @summary Get transfer product usage metrics
         * @param {TransferMetricsGetRequest} transferMetricsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferMetricsGet: async (transferMetricsGetRequest: TransferMetricsGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transferMetricsGetRequest' is not null or undefined
            assertParamExists('transferMetricsGet', 'transferMetricsGetRequest', transferMetricsGetRequest)
            const localVarPath = `/transfer/metrics/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transferMetricsGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * As an alternative to adding Items via Link, you can also use the `/transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
         * @summary Migrate account into Transfers
         * @param {TransferMigrateAccountRequest} transferMigrateAccountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferMigrateAccount: async (transferMigrateAccountRequest: TransferMigrateAccountRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transferMigrateAccountRequest' is not null or undefined
            assertParamExists('transferMigrateAccount', 'transferMigrateAccountRequest', transferMigrateAccountRequest)
            const localVarPath = `/transfer/migrate_account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transferMigrateAccountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the `/transfer/originator/create` endpoint to create a new originator and return an `originator_client_id`.
         * @summary Create a new originator
         * @param {TransferOriginatorCreateRequest} transferOriginatorCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOriginatorCreate: async (transferOriginatorCreateRequest: TransferOriginatorCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transferOriginatorCreateRequest' is not null or undefined
            assertParamExists('transferOriginatorCreate', 'transferOriginatorCreateRequest', transferOriginatorCreateRequest)
            const localVarPath = `/transfer/originator/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transferOriginatorCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/transfer/originator/get` endpoint gets status updates for an originator\'s onboarding process. This information is also available via the Transfer page on the Plaid dashboard.
         * @summary Get status of an originator\'s onboarding
         * @param {TransferOriginatorGetRequest} transferOriginatorGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOriginatorGet: async (transferOriginatorGetRequest: TransferOriginatorGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transferOriginatorGetRequest' is not null or undefined
            assertParamExists('transferOriginatorGet', 'transferOriginatorGetRequest', transferOriginatorGetRequest)
            const localVarPath = `/transfer/originator/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transferOriginatorGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/transfer/originator/list` endpoint gets status updates for all of your originators\' onboarding. This information is also available via the Plaid dashboard.
         * @summary Get status of all originators\' onboarding
         * @param {TransferOriginatorListRequest} transferOriginatorListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOriginatorList: async (transferOriginatorListRequest: TransferOriginatorListRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transferOriginatorListRequest' is not null or undefined
            assertParamExists('transferOriginatorList', 'transferOriginatorListRequest', transferOriginatorListRequest)
            const localVarPath = `/transfer/originator/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transferOriginatorListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/transfer/questionnaire/create` endpoint generates a Plaid-hosted onboarding UI URL. Redirect the originator to this URL to provide their due diligence information and agree to Plaid’s terms for ACH money movement.
         * @summary Generate a Plaid-hosted onboarding UI URL.
         * @param {TransferQuestionnaireCreateRequest} transferQuestionnaireCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferQuestionnaireCreate: async (transferQuestionnaireCreateRequest: TransferQuestionnaireCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transferQuestionnaireCreateRequest' is not null or undefined
            assertParamExists('transferQuestionnaireCreate', 'transferQuestionnaireCreateRequest', transferQuestionnaireCreateRequest)
            const localVarPath = `/transfer/questionnaire/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transferQuestionnaireCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the `/transfer/recurring/cancel` endpoint to cancel a recurring transfer.  Scheduled transfer that hasn\'t been submitted to bank will be cancelled.
         * @summary Cancel a recurring transfer.
         * @param {TransferRecurringCancelRequest} transferRecurringCancelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRecurringCancel: async (transferRecurringCancelRequest: TransferRecurringCancelRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transferRecurringCancelRequest' is not null or undefined
            assertParamExists('transferRecurringCancel', 'transferRecurringCancelRequest', transferRecurringCancelRequest)
            const localVarPath = `/transfer/recurring/cancel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transferRecurringCancelRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the `/transfer/recurring/create` endpoint to initiate a new recurring transfer.
         * @summary Create a recurring transfer
         * @param {TransferRecurringCreateRequest} transferRecurringCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRecurringCreate: async (transferRecurringCreateRequest: TransferRecurringCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transferRecurringCreateRequest' is not null or undefined
            assertParamExists('transferRecurringCreate', 'transferRecurringCreateRequest', transferRecurringCreateRequest)
            const localVarPath = `/transfer/recurring/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transferRecurringCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/transfer/recurring/get` fetches information about the recurring transfer corresponding to the given `recurring_transfer_id`.
         * @summary Retrieve a recurring transfer
         * @param {TransferRecurringGetRequest} transferRecurringGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRecurringGet: async (transferRecurringGetRequest: TransferRecurringGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transferRecurringGetRequest' is not null or undefined
            assertParamExists('transferRecurringGet', 'transferRecurringGetRequest', transferRecurringGetRequest)
            const localVarPath = `/transfer/recurring/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transferRecurringGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the `/transfer/recurring/list` endpoint to see a list of all your recurring transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired recurring transfers. 
         * @summary List recurring transfers
         * @param {TransferRecurringListRequest} transferRecurringListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRecurringList: async (transferRecurringListRequest: TransferRecurringListRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transferRecurringListRequest' is not null or undefined
            assertParamExists('transferRecurringList', 'transferRecurringListRequest', transferRecurringListRequest)
            const localVarPath = `/transfer/recurring/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transferRecurringListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the `/transfer/refund/cancel` endpoint to cancel a refund.  A refund is eligible for cancellation if it has not yet been submitted to the payment network.
         * @summary Cancel a refund
         * @param {TransferRefundCancelRequest} transferRefundCancelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRefundCancel: async (transferRefundCancelRequest: TransferRefundCancelRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transferRefundCancelRequest' is not null or undefined
            assertParamExists('transferRefundCancel', 'transferRefundCancelRequest', transferRefundCancelRequest)
            const localVarPath = `/transfer/refund/cancel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transferRefundCancelRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the `/transfer/refund/create` endpoint to create a refund for a transfer. A transfer can be refunded if the transfer was initiated in the past 180 days.  Processing of the refund will not occur until at least 3 business days following the transfer\'s settlement date, plus any hold/settlement delays. This 3-day window helps better protect your business from regular ACH returns. Consumer initiated returns (unauthorized returns) could still happen for about 60 days from the settlement date. If the original transfer is canceled, returned or failed, all pending refunds will automatically be canceled. Processed refunds cannot be revoked.
         * @summary Create a refund
         * @param {TransferRefundCreateRequest} transferRefundCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRefundCreate: async (transferRefundCreateRequest: TransferRefundCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transferRefundCreateRequest' is not null or undefined
            assertParamExists('transferRefundCreate', 'transferRefundCreateRequest', transferRefundCreateRequest)
            const localVarPath = `/transfer/refund/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transferRefundCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/transfer/refund/get` endpoint fetches information about the refund corresponding to the given `refund_id`.
         * @summary Retrieve a refund
         * @param {TransferRefundGetRequest} transferRefundGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRefundGet: async (transferRefundGetRequest: TransferRefundGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transferRefundGetRequest' is not null or undefined
            assertParamExists('transferRefundGet', 'transferRefundGetRequest', transferRefundGetRequest)
            const localVarPath = `/transfer/refund/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transferRefundGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/transfer/repayment/list` endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given `start_time`.
         * @summary Lists historical repayments
         * @param {TransferRepaymentListRequest} transferRepaymentListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRepaymentList: async (transferRepaymentListRequest: TransferRepaymentListRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transferRepaymentListRequest' is not null or undefined
            assertParamExists('transferRepaymentList', 'transferRepaymentListRequest', transferRepaymentListRequest)
            const localVarPath = `/transfer/repayment/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transferRepaymentListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/transfer/repayment/return/list` endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.
         * @summary List the returns included in a repayment
         * @param {TransferRepaymentReturnListRequest} transferRepaymentReturnListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRepaymentReturnList: async (transferRepaymentReturnListRequest: TransferRepaymentReturnListRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transferRepaymentReturnListRequest' is not null or undefined
            assertParamExists('transferRepaymentReturnList', 'transferRepaymentReturnListRequest', transferRepaymentReturnListRequest)
            const localVarPath = `/transfer/repayment/return/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transferRepaymentReturnListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/transfer/sweep/get` endpoint fetches a sweep corresponding to the given `sweep_id`.
         * @summary Retrieve a sweep
         * @param {TransferSweepGetRequest} transferSweepGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferSweepGet: async (transferSweepGetRequest: TransferSweepGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transferSweepGetRequest' is not null or undefined
            assertParamExists('transferSweepGet', 'transferSweepGetRequest', transferSweepGetRequest)
            const localVarPath = `/transfer/sweep/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transferSweepGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/transfer/sweep/list` endpoint fetches sweeps matching the given filters.
         * @summary List sweeps
         * @param {TransferSweepListRequest} transferSweepListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferSweepList: async (transferSweepListRequest: TransferSweepListRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transferSweepListRequest' is not null or undefined
            assertParamExists('transferSweepList', 'transferSweepListRequest', transferSweepListRequest)
            const localVarPath = `/transfer/sweep/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transferSweepListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint should be called for each of your end users before they begin a Plaid income flow. This provides you a single token to access all income data associated with the user. You should only create one per end user.  If you call the endpoint multiple times with the same `client_user_id`, the first creation call will succeed and the rest will fail with an error message indicating that the user has been created for the given `client_user_id`.  Ensure that you store the `user_token` along with your user\'s identifier in your database, as it is not possible to retrieve a previously created `user_token`.
         * @summary Create user
         * @param {UserCreateRequest} userCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCreate: async (userCreateRequest: UserCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCreateRequest' is not null or undefined
            assertParamExists('userCreate', 'userCreateRequest', userCreateRequest)
            const localVarPath = `/user/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an e-wallet. The response is the newly created e-wallet object.
         * @summary Create an e-wallet
         * @param {WalletCreateRequest} walletCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletCreate: async (walletCreateRequest: WalletCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'walletCreateRequest' is not null or undefined
            assertParamExists('walletCreate', 'walletCreateRequest', walletCreateRequest)
            const localVarPath = `/wallet/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(walletCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch an e-wallet. The response includes the current balance.
         * @summary Fetch an e-wallet
         * @param {WalletGetRequest} walletGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGet: async (walletGetRequest: WalletGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'walletGetRequest' is not null or undefined
            assertParamExists('walletGet', 'walletGetRequest', walletGetRequest)
            const localVarPath = `/wallet/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(walletGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint lists all e-wallets in descending order of creation.
         * @summary Fetch a list of e-wallets
         * @param {WalletListRequest} walletListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletList: async (walletListRequest: WalletListRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'walletListRequest' is not null or undefined
            assertParamExists('walletList', 'walletListRequest', walletListRequest)
            const localVarPath = `/wallet/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(walletListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate transactions, the amount and reference for the transaction. Transactions will settle in seconds to several days, depending on the underlying payment rail.
         * @summary Execute a transaction using an e-wallet
         * @param {WalletTransactionExecuteRequest} walletTransactionExecuteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletTransactionExecute: async (walletTransactionExecuteRequest: WalletTransactionExecuteRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'walletTransactionExecuteRequest' is not null or undefined
            assertParamExists('walletTransactionExecute', 'walletTransactionExecuteRequest', walletTransactionExecuteRequest)
            const localVarPath = `/wallet/transaction/execute`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(walletTransactionExecuteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a specific e-wallet transaction
         * @summary Fetch an e-wallet transaction
         * @param {WalletTransactionGetRequest} walletTransactionGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletTransactionGet: async (walletTransactionGetRequest: WalletTransactionGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'walletTransactionGetRequest' is not null or undefined
            assertParamExists('walletTransactionGet', 'walletTransactionGetRequest', walletTransactionGetRequest)
            const localVarPath = `/wallet/transaction/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(walletTransactionGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the `created_at` time.
         * @summary List e-wallet transactions
         * @param {WalletTransactionListRequest} walletTransactionListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletTransactionList: async (walletTransactionListRequest: WalletTransactionListRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'walletTransactionListRequest' is not null or undefined
            assertParamExists('walletTransactionList', 'walletTransactionListRequest', walletTransactionListRequest)
            const localVarPath = `/wallet/transaction/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(walletTransactionListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new entity watchlist screening to check your customer against watchlists defined in the associated entity watchlist program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
         * @summary Create a watchlist screening for an entity
         * @param {WatchlistScreeningEntityCreateRequest} watchlistScreeningEntityCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityCreate: async (watchlistScreeningEntityCreateRequest: WatchlistScreeningEntityCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'watchlistScreeningEntityCreateRequest' is not null or undefined
            assertParamExists('watchlistScreeningEntityCreate', 'watchlistScreeningEntityCreateRequest', watchlistScreeningEntityCreateRequest)
            const localVarPath = `/watchlist_screening/entity/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(watchlistScreeningEntityCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve an entity watchlist screening.
         * @summary Get an entity screening
         * @param {WatchlistScreeningEntityGetRequest} watchlistScreeningEntityGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityGet: async (watchlistScreeningEntityGetRequest: WatchlistScreeningEntityGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'watchlistScreeningEntityGetRequest' is not null or undefined
            assertParamExists('watchlistScreeningEntityGet', 'watchlistScreeningEntityGetRequest', watchlistScreeningEntityGetRequest)
            const localVarPath = `/watchlist_screening/entity/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(watchlistScreeningEntityGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all changes to the entity watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
         * @summary List history for entity watchlist screenings
         * @param {WatchlistScreeningEntityHistoryListRequest} watchlistScreeningEntityHistoryListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityHistoryList: async (watchlistScreeningEntityHistoryListRequest: WatchlistScreeningEntityHistoryListRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'watchlistScreeningEntityHistoryListRequest' is not null or undefined
            assertParamExists('watchlistScreeningEntityHistoryList', 'watchlistScreeningEntityHistoryListRequest', watchlistScreeningEntityHistoryListRequest)
            const localVarPath = `/watchlist_screening/entity/history/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(watchlistScreeningEntityHistoryListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all hits for the entity watchlist screening.
         * @summary List hits for entity watchlist screenings
         * @param {WatchlistScreeningEntityHitListRequest} watchlistScreeningEntityHitListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityHitList: async (watchlistScreeningEntityHitListRequest: WatchlistScreeningEntityHitListRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'watchlistScreeningEntityHitListRequest' is not null or undefined
            assertParamExists('watchlistScreeningEntityHitList', 'watchlistScreeningEntityHitListRequest', watchlistScreeningEntityHitListRequest)
            const localVarPath = `/watchlist_screening/entity/hit/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(watchlistScreeningEntityHitListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all entity screenings.
         * @summary List entity watchlist screenings
         * @param {WatchlistScreeningEntityListRequest} watchlistScreeningEntityListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityList: async (watchlistScreeningEntityListRequest: WatchlistScreeningEntityListRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'watchlistScreeningEntityListRequest' is not null or undefined
            assertParamExists('watchlistScreeningEntityList', 'watchlistScreeningEntityListRequest', watchlistScreeningEntityListRequest)
            const localVarPath = `/watchlist_screening/entity/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(watchlistScreeningEntityListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an entity watchlist screening program
         * @summary Get entity watchlist screening program
         * @param {WatchlistScreeningEntityProgramGetRequest} watchlistScreeningEntityProgramGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityProgramGet: async (watchlistScreeningEntityProgramGetRequest: WatchlistScreeningEntityProgramGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'watchlistScreeningEntityProgramGetRequest' is not null or undefined
            assertParamExists('watchlistScreeningEntityProgramGet', 'watchlistScreeningEntityProgramGetRequest', watchlistScreeningEntityProgramGetRequest)
            const localVarPath = `/watchlist_screening/entity/program/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(watchlistScreeningEntityProgramGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all entity watchlist screening programs
         * @summary List entity watchlist screening programs
         * @param {WatchlistScreeningEntityProgramListRequest} watchlistScreeningEntityProgramListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityProgramList: async (watchlistScreeningEntityProgramListRequest: WatchlistScreeningEntityProgramListRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'watchlistScreeningEntityProgramListRequest' is not null or undefined
            assertParamExists('watchlistScreeningEntityProgramList', 'watchlistScreeningEntityProgramListRequest', watchlistScreeningEntityProgramListRequest)
            const localVarPath = `/watchlist_screening/entity/program/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(watchlistScreeningEntityProgramListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a review for an entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
         * @summary Create a review for an entity watchlist screening
         * @param {WatchlistScreeningEntityReviewCreateRequest} watchlistScreeningEntityReviewCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityReviewCreate: async (watchlistScreeningEntityReviewCreateRequest: WatchlistScreeningEntityReviewCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'watchlistScreeningEntityReviewCreateRequest' is not null or undefined
            assertParamExists('watchlistScreeningEntityReviewCreate', 'watchlistScreeningEntityReviewCreateRequest', watchlistScreeningEntityReviewCreateRequest)
            const localVarPath = `/watchlist_screening/entity/review/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(watchlistScreeningEntityReviewCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all reviews for a particular entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
         * @summary List reviews for entity watchlist screenings
         * @param {WatchlistScreeningEntityReviewListRequest} watchlistScreeningEntityReviewListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityReviewList: async (watchlistScreeningEntityReviewListRequest: WatchlistScreeningEntityReviewListRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'watchlistScreeningEntityReviewListRequest' is not null or undefined
            assertParamExists('watchlistScreeningEntityReviewList', 'watchlistScreeningEntityReviewListRequest', watchlistScreeningEntityReviewListRequest)
            const localVarPath = `/watchlist_screening/entity/review/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(watchlistScreeningEntityReviewListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an entity watchlist screening.
         * @summary Update an entity screening
         * @param {WatchlistScreeningEntityUpdateRequest} watchlistScreeningEntityUpdateRequest The entity screening was successfully updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityUpdate: async (watchlistScreeningEntityUpdateRequest: WatchlistScreeningEntityUpdateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'watchlistScreeningEntityUpdateRequest' is not null or undefined
            assertParamExists('watchlistScreeningEntityUpdate', 'watchlistScreeningEntityUpdateRequest', watchlistScreeningEntityUpdateRequest)
            const localVarPath = `/watchlist_screening/entity/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(watchlistScreeningEntityUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new Watchlist Screening to check your customer against watchlists defined in the associated Watchlist Program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
         * @summary Create a watchlist screening for a person
         * @param {WatchlistScreeningIndividualCreateRequest} watchlistScreeningIndividualCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualCreate: async (watchlistScreeningIndividualCreateRequest: WatchlistScreeningIndividualCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'watchlistScreeningIndividualCreateRequest' is not null or undefined
            assertParamExists('watchlistScreeningIndividualCreate', 'watchlistScreeningIndividualCreateRequest', watchlistScreeningIndividualCreateRequest)
            const localVarPath = `/watchlist_screening/individual/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(watchlistScreeningIndividualCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a previously created individual watchlist screening
         * @summary Retrieve an individual watchlist screening
         * @param {WatchlistScreeningIndividualGetRequest} watchlistScreeningIndividualGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualGet: async (watchlistScreeningIndividualGetRequest: WatchlistScreeningIndividualGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'watchlistScreeningIndividualGetRequest' is not null or undefined
            assertParamExists('watchlistScreeningIndividualGet', 'watchlistScreeningIndividualGetRequest', watchlistScreeningIndividualGetRequest)
            const localVarPath = `/watchlist_screening/individual/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(watchlistScreeningIndividualGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all changes to the individual watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
         * @summary List history for individual watchlist screenings
         * @param {WatchlistScreeningIndividualHistoryListRequest} watchlistScreeningIndividualHistoryListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualHistoryList: async (watchlistScreeningIndividualHistoryListRequest: WatchlistScreeningIndividualHistoryListRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'watchlistScreeningIndividualHistoryListRequest' is not null or undefined
            assertParamExists('watchlistScreeningIndividualHistoryList', 'watchlistScreeningIndividualHistoryListRequest', watchlistScreeningIndividualHistoryListRequest)
            const localVarPath = `/watchlist_screening/individual/history/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(watchlistScreeningIndividualHistoryListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all hits found by Plaid for a particular individual watchlist screening.
         * @summary List hits for individual watchlist screening
         * @param {WatchlistScreeningIndividualHitListRequest} watchlistScreeningIndividualHitListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualHitList: async (watchlistScreeningIndividualHitListRequest: WatchlistScreeningIndividualHitListRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'watchlistScreeningIndividualHitListRequest' is not null or undefined
            assertParamExists('watchlistScreeningIndividualHitList', 'watchlistScreeningIndividualHitListRequest', watchlistScreeningIndividualHitListRequest)
            const localVarPath = `/watchlist_screening/individual/hit/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(watchlistScreeningIndividualHitListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List previously created watchlist screenings for individuals
         * @summary List Individual Watchlist Screenings
         * @param {WatchlistScreeningIndividualListRequest} watchlistScreeningIndividualListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualList: async (watchlistScreeningIndividualListRequest: WatchlistScreeningIndividualListRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'watchlistScreeningIndividualListRequest' is not null or undefined
            assertParamExists('watchlistScreeningIndividualList', 'watchlistScreeningIndividualListRequest', watchlistScreeningIndividualListRequest)
            const localVarPath = `/watchlist_screening/individual/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(watchlistScreeningIndividualListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an individual watchlist screening program
         * @summary Get individual watchlist screening program
         * @param {WatchlistScreeningIndividualProgramGetRequest} watchlistScreeningIndividualProgramGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualProgramGet: async (watchlistScreeningIndividualProgramGetRequest: WatchlistScreeningIndividualProgramGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'watchlistScreeningIndividualProgramGetRequest' is not null or undefined
            assertParamExists('watchlistScreeningIndividualProgramGet', 'watchlistScreeningIndividualProgramGetRequest', watchlistScreeningIndividualProgramGetRequest)
            const localVarPath = `/watchlist_screening/individual/program/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(watchlistScreeningIndividualProgramGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all individual watchlist screening programs
         * @summary List individual watchlist screening programs
         * @param {WatchlistScreeningIndividualProgramListRequest} watchlistScreeningIndividualProgramListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualProgramList: async (watchlistScreeningIndividualProgramListRequest: WatchlistScreeningIndividualProgramListRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'watchlistScreeningIndividualProgramListRequest' is not null or undefined
            assertParamExists('watchlistScreeningIndividualProgramList', 'watchlistScreeningIndividualProgramListRequest', watchlistScreeningIndividualProgramListRequest)
            const localVarPath = `/watchlist_screening/individual/program/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(watchlistScreeningIndividualProgramListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a review for the individual watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
         * @summary Create a review for an individual watchlist screening
         * @param {WatchlistScreeningIndividualReviewCreateRequest} watchlistScreeningIndividualReviewCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualReviewCreate: async (watchlistScreeningIndividualReviewCreateRequest: WatchlistScreeningIndividualReviewCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'watchlistScreeningIndividualReviewCreateRequest' is not null or undefined
            assertParamExists('watchlistScreeningIndividualReviewCreate', 'watchlistScreeningIndividualReviewCreateRequest', watchlistScreeningIndividualReviewCreateRequest)
            const localVarPath = `/watchlist_screening/individual/review/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(watchlistScreeningIndividualReviewCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all reviews for the individual watchlist screening.
         * @summary List reviews for individual watchlist screenings
         * @param {WatchlistScreeningIndividualReviewListRequest} watchlistScreeningIndividualReviewListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualReviewList: async (watchlistScreeningIndividualReviewListRequest: WatchlistScreeningIndividualReviewListRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'watchlistScreeningIndividualReviewListRequest' is not null or undefined
            assertParamExists('watchlistScreeningIndividualReviewList', 'watchlistScreeningIndividualReviewListRequest', watchlistScreeningIndividualReviewListRequest)
            const localVarPath = `/watchlist_screening/individual/review/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(watchlistScreeningIndividualReviewListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a specific individual watchlist screening. This endpoint can be used to add additional customer information, correct outdated information, add a reference id, assign the individual to a reviewer, and update which program it is associated with. Please note that you may not update `search_terms` and `status` at the same time since editing `search_terms` may trigger an automatic `status` change.
         * @summary Update individual watchlist screening
         * @param {WatchlistScreeningIndividualUpdateRequest} watchlistScreeningIndividualUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualUpdate: async (watchlistScreeningIndividualUpdateRequest: WatchlistScreeningIndividualUpdateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'watchlistScreeningIndividualUpdateRequest' is not null or undefined
            assertParamExists('watchlistScreeningIndividualUpdate', 'watchlistScreeningIndividualUpdateRequest', watchlistScreeningIndividualUpdateRequest)
            const localVarPath = `/watchlist_screening/individual/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(watchlistScreeningIndividualUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the `Plaid-Verification` header.  The `/webhook_verification_key/get` endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
         * @summary Get webhook verification key
         * @param {WebhookVerificationKeyGetRequest} webhookVerificationKeyGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookVerificationKeyGet: async (webhookVerificationKeyGetRequest: WebhookVerificationKeyGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'webhookVerificationKeyGetRequest' is not null or undefined
            assertParamExists('webhookVerificationKeyGet', 'webhookVerificationKeyGetRequest', webhookVerificationKeyGetRequest)
            const localVarPath = `/webhook_verification_key/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration)

            // authentication plaidVersion required
            await setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(webhookVerificationKeyGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlaidApi - functional programming interface
 * @export
 */
export const PlaidApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlaidApiAxiosParamCreator(configuration)
    return {
        /**
         * The `/accounts/balance/get` endpoint returns the real-time balance for each of an Item\'s accounts. While other endpoints may return a balance object, only `/accounts/balance/get` forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, `balance` itself is not a product that can be used to initialize Link. As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints; if you encounter errors, you may find it necessary to adjust your timeout period when making requests.
         * @summary Retrieve real-time balance data
         * @param {AccountsBalanceGetRequest} accountsBalanceGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsBalanceGet(accountsBalanceGetRequest: AccountsBalanceGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsBalanceGet(accountsBalanceGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/accounts/get` endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance. For items that went through the updated account selection pane, this endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [`NEW_ACCOUNTS_AVAILABLE`](https://plaid.com/docs/api/items/#new_accounts_available) webhook and then use Link\'s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, balances returned may not be up-to-date; for realtime balance information, use `/accounts/balance/get` instead. Note that some information is nullable.
         * @summary Retrieve accounts
         * @param {AccountsGetRequest} accountsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsGet(accountsGetRequest: AccountsGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsGet(accountsGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences
         * @summary Retrieve information about a Plaid application
         * @param {ApplicationGetRequest} applicationGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicationGet(applicationGetRequest: ApplicationGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.applicationGet(applicationGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the `/asset_report/audit_copy/create` endpoint to create an `audit_copy_token` and then pass that token to the third party who needs access. Each third party has its own `auditor_id`, for example `fannie_mae`. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
         * @summary Create Asset Report Audit Copy
         * @param {AssetReportAuditCopyCreateRequest} assetReportAuditCopyCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assetReportAuditCopyCreate(assetReportAuditCopyCreateRequest: AssetReportAuditCopyCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetReportAuditCopyCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assetReportAuditCopyCreate(assetReportAuditCopyCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * `/asset_report/audit_copy/get` allows auditors to get a copy of an Asset Report that was previously shared via the `/asset_report/audit_copy/create` endpoint.  The caller of `/asset_report/audit_copy/create` must provide the `audit_copy_token` to the auditor.  This token can then be used to call `/asset_report/audit_copy/create`.
         * @summary Retrieve an Asset Report Audit Copy
         * @param {AssetReportAuditCopyGetRequest} assetReportAuditCopyGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assetReportAuditCopyGet(assetReportAuditCopyGetRequest: AssetReportAuditCopyGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetReportGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assetReportAuditCopyGet(assetReportAuditCopyGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/asset_report/audit_copy/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
         * @summary Remove Asset Report Audit Copy
         * @param {AssetReportAuditCopyRemoveRequest} assetReportAuditCopyRemoveRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assetReportAuditCopyRemove(assetReportAuditCopyRemoveRequest: AssetReportAuditCopyRemoveRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetReportAuditCopyRemoveResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assetReportAuditCopyRemove(assetReportAuditCopyRemoveRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/asset_report/create` endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the `asset_report_token` return value to the `/asset_report/get` or `/asset_report/pdf/get` endpoints.  The Asset Report takes some time to be created and is not available immediately after calling `/asset_report/create`. When the Asset Report is ready to be retrieved using `/asset_report/get` or `/asset_report/pdf/get`, Plaid will fire a `PRODUCT_READY` webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/products/assets/#webhooks).  The `/asset_report/create` endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the `/asset_report/refresh` endpoint.
         * @summary Create an Asset Report
         * @param {AssetReportCreateRequest} assetReportCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assetReportCreate(assetReportCreateRequest: AssetReportCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetReportCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assetReportCreate(assetReportCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the `/accounts/get` endpoint. To narrow an Asset Report to only a subset of accounts, use the `/asset_report/filter` endpoint.  To exclude certain Accounts from an Asset Report, first use the `/asset_report/create` endpoint to create the report, then send the `asset_report_token` along with a list of `account_ids` to exclude to the `/asset_report/filter` endpoint, to create a new Asset Report which contains only a subset of the original Asset Report\'s data.  Because Asset Reports are immutable, calling `/asset_report/filter` does not alter the original Asset Report in any way; rather, `/asset_report/filter` creates a new Asset Report with a new token and id. Asset Reports created via `/asset_report/filter` do not contain new Asset data, and are not billed.  Plaid will fire a [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook once generation of the filtered Asset Report has completed.
         * @summary Filter Asset Report
         * @param {AssetReportFilterRequest} assetReportFilterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assetReportFilter(assetReportFilterRequest: AssetReportFilterRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetReportFilterResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assetReportFilter(assetReportFilterRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/asset_report/get` endpoint retrieves the Asset Report in JSON format. Before calling `/asset_report/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report.  If report_type was set to `VERIFICATION_OF_EMPLOYMENT` when the Asset Report was created in asset_report/create, debit transactions and transaction amounts won’t be included in the report.  To retrieve an Asset Report with Insights, call the `/asset_report/get` endpoint with `include_insights` set to `true`.
         * @summary Retrieve an Asset Report
         * @param {AssetReportGetRequest} assetReportGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assetReportGet(assetReportGetRequest: AssetReportGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetReportGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assetReportGet(assetReportGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/asset_report/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/asset_report/pdf/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/asset_report/pdf/get` is the PDF binary data. The `request_id`  is returned in the `Plaid-Request-ID` header.  If `report_type` was set to `VERIFICATION_OF_EMPLOYMENT` when the Asset Report was created in `/asset_report/create`, debit transactions and transaction amounts won’t be included in the report.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
         * @summary Retrieve a PDF Asset Report
         * @param {AssetReportPDFGetRequest} assetReportPDFGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assetReportPdfGet(assetReportPDFGetRequest: AssetReportPDFGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assetReportPdfGet(assetReportPDFGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * An Asset Report is an immutable snapshot of a user\'s assets. In order to \"refresh\" an Asset Report you created previously, you can use the `/asset_report/refresh` endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to `/asset_report/filter`. By default, the new Asset Report will also use the same parameters you submitted with your original `/asset_report/create` request, but the original `days_requested` value and the values of any parameters in the `options` object can be overridden with new values. To change these arguments, simply supply new values for them in your request to `/asset_report/refresh`. Submit an empty string (\"\") for any previously-populated fields you would like set as empty.
         * @summary Refresh an Asset Report
         * @param {AssetReportRefreshRequest} assetReportRefreshRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assetReportRefresh(assetReportRefreshRequest: AssetReportRefreshRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetReportRefreshResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assetReportRefresh(assetReportRefreshRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/item/remove` endpoint allows you to invalidate an `access_token`, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The `/asset_report/remove` endpoint allows you to remove an Asset Report. Removing an Asset Report invalidates its `asset_report_token`, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any `audit_copy_tokens` associated with the Asset Report.
         * @summary Delete an Asset Report
         * @param {AssetReportRemoveRequest} assetReportRemoveRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assetReportRemove(assetReportRemoveRequest: AssetReportRemoveRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetReportRemoveResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assetReportRemove(assetReportRemoveRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/auth/get` endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item\'s checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if `auth` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Versioning note: In API version 2017-03-08, the schema of the `numbers` object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
         * @summary Retrieve auth data
         * @param {AuthGetRequest} authGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authGet(authGetRequest: AuthGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authGet(authGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use the `/bank_transfer/balance/get` endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
         * @summary Get balance of your Bank Transfer account
         * @param {BankTransferBalanceGetRequest} bankTransferBalanceGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bankTransferBalanceGet(bankTransferBalanceGetRequest: BankTransferBalanceGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankTransferBalanceGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bankTransferBalanceGet(bankTransferBalanceGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use the `/bank_transfer/cancel` endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/bank_transfer/get` is `true`.
         * @summary Cancel a bank transfer
         * @param {BankTransferCancelRequest} bankTransferCancelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bankTransferCancel(bankTransferCancelRequest: BankTransferCancelRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankTransferCancelResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bankTransferCancel(bankTransferCancelRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use the `/bank_transfer/create` endpoint to initiate a new bank transfer.
         * @summary Create a bank transfer
         * @param {BankTransferCreateRequest} bankTransferCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bankTransferCreate(bankTransferCreateRequest: BankTransferCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankTransferCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bankTransferCreate(bankTransferCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use the `/bank_transfer/event/list` endpoint to get a list of Plaid-initiated ACH or bank transfer events based on specified filter criteria. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://plaid.com/docs/auth/coverage/microdeposit-events/).
         * @summary List bank transfer events
         * @param {BankTransferEventListRequest} bankTransferEventListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bankTransferEventList(bankTransferEventListRequest: BankTransferEventListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankTransferEventListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bankTransferEventList(bankTransferEventListRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * `/bank_transfer/event/sync` allows you to request up to the next 25 Plaid-initiated bank transfer events that happened after a specific `event_id`. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://www.plaid.com/docs/auth/coverage/microdeposit-events/).
         * @summary Sync bank transfer events
         * @param {BankTransferEventSyncRequest} bankTransferEventSyncRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bankTransferEventSync(bankTransferEventSyncRequest: BankTransferEventSyncRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankTransferEventSyncResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bankTransferEventSync(bankTransferEventSyncRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/bank_transfer/get` fetches information about the bank transfer corresponding to the given `bank_transfer_id`.
         * @summary Retrieve a bank transfer
         * @param {BankTransferGetRequest} bankTransferGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bankTransferGet(bankTransferGetRequest: BankTransferGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankTransferGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bankTransferGet(bankTransferGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use the `/bank_transfer/list` endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired bank transfers. 
         * @summary List bank transfers
         * @param {BankTransferListRequest} bankTransferListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bankTransferList(bankTransferListRequest: BankTransferListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankTransferListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bankTransferList(bankTransferListRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * As an alternative to adding Items via Link, you can also use the `/bank_transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/bank_transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
         * @summary Migrate account into Bank Transfers
         * @param {BankTransferMigrateAccountRequest} bankTransferMigrateAccountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bankTransferMigrateAccount(bankTransferMigrateAccountRequest: BankTransferMigrateAccountRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankTransferMigrateAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bankTransferMigrateAccount(bankTransferMigrateAccountRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/bank_transfer/sweep/get` endpoint fetches information about the sweep corresponding to the given `sweep_id`.
         * @summary Retrieve a sweep
         * @param {BankTransferSweepGetRequest} bankTransferSweepGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bankTransferSweepGet(bankTransferSweepGetRequest: BankTransferSweepGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankTransferSweepGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bankTransferSweepGet(bankTransferSweepGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/bank_transfer/sweep/list` endpoint fetches information about the sweeps matching the given filters.
         * @summary List sweeps
         * @param {BankTransferSweepListRequest} bankTransferSweepListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bankTransferSweepList(bankTransferSweepListRequest: BankTransferSweepListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankTransferSweepListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bankTransferSweepList(bankTransferSweepListRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Send a request to the `/categories/get` endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.  All implementations are recommended to use the newer `personal_finance_category` taxonomy instead of the older `category` taxonomy supported by this endpoint. The [`personal_finance_category taxonomy` CSV file](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) is available for download and is not accessible via API.
         * @summary Get categories
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoriesGet(body: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoriesGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoriesGet(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/payment_initiation/payment/token/create` endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, `link_token`-based flow. The recommended flow is to provide the `payment_id` to `/link/token/create`, which returns a `link_token` used to initialize Link.  The `/payment_initiation/payment/token/create` is used to create a `payment_token`, which can then be used in Link initialization to enter a payment initiation flow. You can only use a `payment_token` once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
         * @summary Create payment token
         * @param {PaymentInitiationPaymentTokenCreateRequest} paymentInitiationPaymentTokenCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPaymentToken(paymentInitiationPaymentTokenCreateRequest: PaymentInitiationPaymentTokenCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentInitiationPaymentTokenCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPaymentToken(paymentInitiationPaymentTokenCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `credit/asset_report/freddie_mac/get` endpoint retrieves the Asset Report in Freddie Mac\'s JSON format.
         * @summary Retrieve an Asset Report with Freddie Mac format. Only Freddie Mac can use this endpoint.
         * @param {{ [key: string]: object; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async creditAssetReportFreddieMacGet(requestBody: { [key: string]: object; }, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetReportFreddieGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.creditAssetReportFreddieMacGet(requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Plaid can create an Audit Copy token of an Asset Report and/or Income Report to share with participating Government Sponsored Entity (GSE). If you participate in the Day 1 Certainty™ program, Plaid can supply an Audit Copy token directly to Fannie Mae on your behalf. An Audit Copy token contains the same underlying data as the Asset Report and/or Income Report (result of /credit/payroll_income/get).  Use the `/credit/audit_copy_token/create` endpoint to create an `audit_copy_token` and then pass that token to the GSE who needs access.
         * @summary Create Asset or Income Report Audit Copy Token
         * @param {CreditAuditCopyTokenCreateRequest} creditAuditCopyTokenCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async creditAuditCopyTokenCreate(creditAuditCopyTokenCreateRequest: CreditAuditCopyTokenCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreditAuditCopyTokenCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.creditAuditCopyTokenCreate(creditAuditCopyTokenCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/credit/audit_copy_token/update` endpoint updates an existing  Audit Copy Token by adding the report tokens in the `report_tokens` field to the `audit_copy_token`. If the Audit Copy Token already contains a report of a certain type, it will be replaced with the token provided in the `report_tokens` field.
         * @summary Update an Audit Copy Token
         * @param {CreditAuditCopyTokenUpdateRequest} creditAuditCopyTokenUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async creditAuditCopyTokenUpdate(creditAuditCopyTokenUpdateRequest: CreditAuditCopyTokenUpdateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreditAuditCopyTokenUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.creditAuditCopyTokenUpdate(creditAuditCopyTokenUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * `/credit/bank_employment/get` returns the employment report(s) derived from bank transaction data for a specified user.
         * @summary Retrieve information from the bank accounts used for employment verification
         * @param {CreditBankEmploymentGetRequest} creditBankEmploymentGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async creditBankEmploymentGet(creditBankEmploymentGetRequest: CreditBankEmploymentGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreditBankEmploymentGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.creditBankEmploymentGet(creditBankEmploymentGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * `/credit/bank_income/get` returns the bank income report(s) for a specified user.
         * @summary Retrieve information from the bank accounts used for income verification
         * @param {CreditBankIncomeGetRequest} creditBankIncomeGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async creditBankIncomeGet(creditBankIncomeGetRequest: CreditBankIncomeGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreditBankIncomeGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.creditBankIncomeGet(creditBankIncomeGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * `/credit/bank_income/pdf/get` returns the most recent bank income report for a specified user in PDF format.
         * @summary Retrieve information from the bank accounts used for income verification in PDF format
         * @param {CreditBankIncomePDFGetRequest} creditBankIncomePDFGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async creditBankIncomePdfGet(creditBankIncomePDFGetRequest: CreditBankIncomePDFGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.creditBankIncomePdfGet(creditBankIncomePDFGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * `/credit/bank_income/refresh` refreshes the bank income report data for a specific user.
         * @summary Refresh a user\'s bank income information
         * @param {CreditBankIncomeRefreshRequest} creditBankIncomeRefreshRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async creditBankIncomeRefresh(creditBankIncomeRefreshRequest: CreditBankIncomeRefreshRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreditBankIncomeRefreshResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.creditBankIncomeRefresh(creditBankIncomeRefreshRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * `/credit/bank_income/webhook/update` allows you to subscribe or unsubscribe a user for income webhook notifications.  If a user is subscribed, on significant changes to the user\'s income profile, you will receive a `BANK_INCOME_REFRESH_UPDATE` webhook, prompting you to refresh bank income data for the user.
         * @summary Subscribe and unsubscribe to proactive notifications for a user\'s income profile
         * @param {CreditBankIncomeWebhookUpdateRequest} creditBankIncomeWebhookUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async creditBankIncomeWebhookUpdate(creditBankIncomeWebhookUpdateRequest: CreditBankIncomeWebhookUpdateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.creditBankIncomeWebhookUpdate(creditBankIncomeWebhookUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * `/credit/bank_statements/uploads/get` returns data from user-uploaded bank statements.
         * @summary Retrieve data for a user\'s uploaded bank statements
         * @param {CreditBankStatementsUploadsGetRequest} creditBankStatementsUploadsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async creditBankStatementsUploadsGet(creditBankStatementsUploadsGetRequest: CreditBankStatementsUploadsGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreditBankStatementsUploadsGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.creditBankStatementsUploadsGet(creditBankStatementsUploadsGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * `/credit/employment/get` returns a list of items with employment information from a user\'s payroll provider that was verified by an end user.
         * @summary Retrieve a summary of an individual\'s employment information
         * @param {CreditEmploymentGetRequest} creditEmploymentGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async creditEmploymentGet(creditEmploymentGetRequest: CreditEmploymentGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreditEmploymentGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.creditEmploymentGet(creditEmploymentGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `credit/asset_report/freddie_mac/get` endpoint retrieves the Verification of Assets and Verification of Employment reports.
         * @summary Retrieve an Asset Report with Freddie Mac format (aka VOA - Verification Of Assets), and a Verification Of Employment (VOE) report if this one is available. Only Freddie Mac can use this endpoint.
         * @param {CreditFreddieMacReportsGetRequest} creditFreddieMacReportsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async creditFreddieMacReportsGet(creditFreddieMacReportsGetRequest: CreditFreddieMacReportsGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreditFreddieMacReportsGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.creditFreddieMacReportsGet(creditFreddieMacReportsGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint gets payroll income information for a specific user, either as a result of the user connecting to their payroll provider or uploading a pay related document.
         * @summary Retrieve a user\'s payroll information
         * @param {CreditPayrollIncomeGetRequest} creditPayrollIncomeGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async creditPayrollIncomeGet(creditPayrollIncomeGetRequest: CreditPayrollIncomeGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreditPayrollIncomeGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.creditPayrollIncomeGet(creditPayrollIncomeGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * `/credit/payroll_income/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification. If the user is eligible for digital verification, that information will be associated with the user token, and in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing `employer` data will increase the chance of receiving a useful result.  When testing in Sandbox, you can control the results by providing special test values in the `employer` and `access_tokens` fields. `employer_good` and `employer_bad` will result in `HIGH` and `LOW` confidence values, respectively. `employer_multi` will result in a `HIGH` confidence with multiple payroll options. Likewise, `access_good` and `access_bad` will result in `HIGH` and `LOW` confidence values, respectively. Any other value for `employer` and `access_tokens` in Sandbox will result in `UNKNOWN` confidence.
         * @summary Check income verification eligibility and optimize conversion
         * @param {CreditPayrollIncomePrecheckRequest} creditPayrollIncomePrecheckRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async creditPayrollIncomePrecheck(creditPayrollIncomePrecheckRequest: CreditPayrollIncomePrecheckRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreditPayrollIncomePrecheckResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.creditPayrollIncomePrecheck(creditPayrollIncomePrecheckRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * `/credit/payroll_income/refresh` refreshes a given digital payroll income verification.
         * @summary Refresh a digital payroll income verification
         * @param {CreditPayrollIncomeRefreshRequest} creditPayrollIncomeRefreshRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async creditPayrollIncomeRefresh(creditPayrollIncomeRefreshRequest: CreditPayrollIncomeRefreshRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreditPayrollIncomeRefreshResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.creditPayrollIncomeRefresh(creditPayrollIncomeRefreshRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * `/credit/payroll_income/risk_signals/get` can be used as part of the Document Income flow to assess a user-uploaded document for signs of potential fraud or tampering. It returns a risk score for each uploaded document that indicates the likelihood of the document being fraudulent, in addition to details on the individual risk signals contributing to the score. `/credit/payroll_income/risk_signals/get` can be called at any time after the `INCOME_VERIFICATION_RISK_SIGNALS` webhook has been fired.  `/credit/payroll_income/risk_signals/get` is offered as an add-on to Document Income and is billed separately. To request access to this endpoint, submit a product access request or contact your Plaid account manager.
         * @summary Retrieve fraud insights for a user\'s manually uploaded document(s).
         * @param {CreditPayrollIncomeRiskSignalsGetRequest} creditPayrollIncomeRiskSignalsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async creditPayrollIncomeRiskSignalsGet(creditPayrollIncomeRiskSignalsGetRequest: CreditPayrollIncomeRiskSignalsGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreditPayrollIncomeRiskSignalsGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.creditPayrollIncomeRiskSignalsGet(creditPayrollIncomeRiskSignalsGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Plaid can share an Asset Report directly with a participating third party on your behalf. The shared Asset Report is the exact same Asset Report originally created in `/asset_report/create`.  To grant a third party access to an Asset Report, use the `/credit/relay/create` endpoint to create a `relay_token` and then pass that token to your third party. Each third party has its own `secondary_client_id`; for example, `ce5bd328dcd34123456`. You\'ll need to create a separate `relay_token` for each third party that needs access to the report on your behalf.
         * @summary Create a relay token to share an Asset Report with a partner client (beta)
         * @param {CreditRelayCreateRequest} creditRelayCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async creditRelayCreate(creditRelayCreateRequest: CreditRelayCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreditRelayCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.creditRelayCreate(creditRelayCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * `/credit/relay/get` allows third parties to receive a report that was shared with them, using a `relay_token` that was created by the report owner.
         * @summary Retrieve the reports associated with a relay token that was shared with you (beta)
         * @param {CreditRelayGetRequest} creditRelayGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async creditRelayGet(creditRelayGetRequest: CreditRelayGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetReportGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.creditRelayGet(creditRelayGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/credit/relay/refresh` endpoint allows third parties to refresh a report that was relayed to them, using a `relay_token` that was created by the report owner. A new report will be created with the original report parameters, but with the most recent data available based on the `days_requested` value of the original report.
         * @summary Refresh a report of a relay token (beta)
         * @param {CreditRelayRefreshRequest} creditRelayRefreshRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async creditRelayRefresh(creditRelayRefreshRequest: CreditRelayRefreshRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreditRelayRefreshResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.creditRelayRefresh(creditRelayRefreshRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/credit/relay/remove` endpoint allows you to invalidate a `relay_token`. The third party holding the token will no longer be able to access or refresh the reports which the `relay_token` gives access to. The original report, associated Items, and other relay tokens that provide access to the same report are not affected and will remain accessible after removing the given `relay_token`.
         * @summary Remove relay token (beta)
         * @param {CreditRelayRemoveRequest} creditRelayRemoveRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async creditRelayRemove(creditRelayRemoveRequest: CreditRelayRemoveRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreditRelayRemoveResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.creditRelayRemove(creditRelayRemoveRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/credit/audit_copy_token/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Report data and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
         * @summary Remove an Audit Copy token
         * @param {CreditAuditCopyTokenRemoveRequest} creditAuditCopyTokenRemoveRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async creditReportAuditCopyRemove(creditAuditCopyTokenRemoveRequest: CreditAuditCopyTokenRemoveRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreditAuditCopyTokenRemoveResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.creditReportAuditCopyRemove(creditAuditCopyTokenRemoveRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint can be used for your end users after they complete the Link flow. This endpoint returns a list of Link sessions that your user completed, where each session includes the results from the Link flow.  These results include details about the Item that was created and some product related metadata (showing, for example, whether the user finished the bank income verification step).
         * @summary Retrieve Link sessions for your user
         * @param {CreditSessionsGetRequest} creditSessionsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async creditSessionsGet(creditSessionsGetRequest: CreditSessionsGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreditSessionsGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.creditSessionsGet(creditSessionsGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve information about a dashboard user.
         * @summary Retrieve a dashboard user
         * @param {DashboardUserGetRequest} dashboardUserGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dashboardUserGet(dashboardUserGetRequest: DashboardUserGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DashboardUserGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dashboardUserGet(dashboardUserGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all dashboard users associated with your account.
         * @summary List dashboard users
         * @param {DashboardUserListRequest} dashboardUserListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dashboardUserList(dashboardUserListRequest: DashboardUserListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DashboardUserListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dashboardUserList(dashboardUserListRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint provides an alternative to `/deposit_switch/create` for customers who have not yet fully integrated with Plaid Exchange. Like `/deposit_switch/create`, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
         * @summary Create a deposit switch without using Plaid Exchange
         * @param {DepositSwitchAltCreateRequest} depositSwitchAltCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async depositSwitchAltCreate(depositSwitchAltCreateRequest: DepositSwitchAltCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepositSwitchAltCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.depositSwitchAltCreate(depositSwitchAltCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
         * @summary Create a deposit switch
         * @param {DepositSwitchCreateRequest} depositSwitchCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async depositSwitchCreate(depositSwitchCreateRequest: DepositSwitchCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepositSwitchCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.depositSwitchCreate(depositSwitchCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user\'s direct deposit allocation preferences.
         * @summary Retrieve a deposit switch
         * @param {DepositSwitchGetRequest} depositSwitchGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async depositSwitchGet(depositSwitchGetRequest: DepositSwitchGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepositSwitchGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.depositSwitchGet(depositSwitchGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes. 
         * @summary Create a deposit switch token
         * @param {DepositSwitchTokenCreateRequest} depositSwitchTokenCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async depositSwitchTokenCreate(depositSwitchTokenCreateRequest: DepositSwitchTokenCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepositSwitchTokenCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.depositSwitchTokenCreate(depositSwitchTokenCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * `/employers/search` allows you the ability to search Plaid’s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user\'s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
         * @summary Search employer database
         * @param {EmployersSearchRequest} employersSearchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async employersSearch(employersSearchRequest: EmployersSearchRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployersSearchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.employersSearch(employersSearchRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * `/employment/verification/get` returns a list of employments through a user payroll that was verified by an end user.  This endpoint has been deprecated; new integrations should use `/credit/employment/get` instead.
         * @summary (Deprecated) Retrieve a summary of an individual\'s employment information
         * @param {EmploymentVerificationGetRequest} employmentVerificationGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async employmentVerificationGet(employmentVerificationGetRequest: EmploymentVerificationGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmploymentVerificationGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.employmentVerificationGet(employmentVerificationGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A generic webhook receiver endpoint for FDX Event Notifications
         * @summary Webhook receiver for fdx notifications
         * @param {FDXNotification} fDXNotification 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fdxNotifications(fDXNotification: FDXNotification, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fdxNotifications(fDXNotification, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Note: In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29).
         * @summary Retrieve identity data
         * @param {IdentityGetRequest} identityGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async identityGet(identityGetRequest: IdentityGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.identityGet(identityGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/identity/match` endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder\'s financial institution.  This request may take some time to complete if Identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
         * @summary Retrieve identity match score
         * @param {IdentityMatchRequest} identityMatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async identityMatch(identityMatchRequest: IdentityMatchRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityMatchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.identityMatch(identityMatchRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * `/identity/refresh` is an optional endpoint for users of the Identity product. It initiates an on-demand extraction to fetch the most up to date Identity information from the Financial Institution. This on-demand extraction takes place in addition to the periodic extractions that automatically occur any Identity-enabled Item. If changes to Identity are discovered after calling `/identity/refresh`, Plaid will fire a webhook [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/identity/#default_update). `/identity/refresh` is offered as an add-on to Identity and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
         * @summary Refresh identity data
         * @param {IdentityRefreshRequest} identityRefreshRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async identityRefresh(identityRefreshRequest: IdentityRefreshRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityRefreshResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.identityRefresh(identityRefreshRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new Identity Verification for the user specified by the `client_user_id` field. The requirements and behavior of the verification are determined by the `template_id` provided. If you don\'t know whether the associated user already has an active Identity Verification, you can specify `\"is_idempotent\": true` in the request body. With idempotency enabled, a new Identity Verification will only be created if one does not already exist for the associated `client_user_id` and `template_id`. If an Identity Verification is found, it will be returned unmodified with an `200 OK` HTTP status code.  You can also use this endpoint to supply information you already have collected about the user; if any of these fields are specified, the screens prompting the user to enter them will be skipped during the Link flow. 
         * @summary Create a new identity verification
         * @param {IdentityVerificationCreateRequest} identityVerificationCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async identityVerificationCreate(identityVerificationCreateRequest: IdentityVerificationCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityVerificationCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.identityVerificationCreate(identityVerificationCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a previously created identity verification.
         * @summary Retrieve Identity Verification
         * @param {IdentityVerificationGetRequest} identityVerificationGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async identityVerificationGet(identityVerificationGetRequest: IdentityVerificationGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityVerificationGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.identityVerificationGet(identityVerificationGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Filter and list Identity Verifications created by your account
         * @summary List Identity Verifications
         * @param {IdentityVerificationListRequest} identityVerificationListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async identityVerificationList(identityVerificationListRequest: IdentityVerificationListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityVerificationListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.identityVerificationList(identityVerificationListRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Allow a customer to retry their identity verification
         * @summary Retry an Identity Verification
         * @param {IdentityVerificationRetryRequest} identityVerificationRetryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async identityVerificationRetry(identityVerificationRetryRequest: IdentityVerificationRetryRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityVerificationRetryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.identityVerificationRetry(identityVerificationRetryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * `/income/verification/create` begins the income verification process by returning an `income_verification_id`. You can then provide the `income_verification_id` to `/link/token/create` under the `income_verification` parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an `INCOME` webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing. 
         * @summary (Deprecated) Create an income verification instance
         * @param {IncomeVerificationCreateRequest} incomeVerificationCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async incomeVerificationCreate(incomeVerificationCreateRequest: IncomeVerificationCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IncomeVerificationCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.incomeVerificationCreate(incomeVerificationCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * `/income/verification/documents/download` provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to `/income/verification/documents/download` is a ZIP file in binary data. If a `document_id` is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The `request_id` is returned in the `Plaid-Request-ID` header.
         * @summary (Deprecated) Download the original documents used for income verification
         * @param {IncomeVerificationDocumentsDownloadRequest} incomeVerificationDocumentsDownloadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async incomeVerificationDocumentsDownload(incomeVerificationDocumentsDownloadRequest: IncomeVerificationDocumentsDownloadRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.incomeVerificationDocumentsDownload(incomeVerificationDocumentsDownloadRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * `/income/verification/paystubs/get` returns the information collected from the paystubs that were used to verify an end user\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
         * @summary (Deprecated) Retrieve information from the paystubs used for income verification
         * @param {IncomeVerificationPaystubsGetRequest} incomeVerificationPaystubsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async incomeVerificationPaystubsGet(incomeVerificationPaystubsGetRequest: IncomeVerificationPaystubsGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IncomeVerificationPaystubsGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.incomeVerificationPaystubsGet(incomeVerificationPaystubsGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * `/income/verification/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a `precheck_id` that can be provided to `/link/token/create`. If the user is eligible for digital verification, providing the `precheck_id` in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the `precheck_id` can still be provided to `/link/token/create` and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either `employer` or `transactions_access_tokens` data will increase the chance of receiving a useful result.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/precheck` instead.
         * @summary (Deprecated) Check digital income verification eligibility and optimize conversion
         * @param {IncomeVerificationPrecheckRequest} incomeVerificationPrecheckRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async incomeVerificationPrecheck(incomeVerificationPrecheckRequest: IncomeVerificationPrecheckRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IncomeVerificationPrecheckResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.incomeVerificationPrecheck(incomeVerificationPrecheckRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * `/income/verification/taxforms/get` returns the information collected from forms that were used to verify an end user\'\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
         * @summary (Deprecated) Retrieve information from the tax documents used for income verification
         * @param {IncomeVerificationTaxformsGetRequest} incomeVerificationTaxformsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async incomeVerificationTaxformsGet(incomeVerificationTaxformsGetRequest: IncomeVerificationTaxformsGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IncomeVerificationTaxformsGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.incomeVerificationTaxformsGet(incomeVerificationTaxformsGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institution’s enabled products and a client’s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
         * @summary Get details of all supported institutions
         * @param {InstitutionsGetRequest} institutionsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async institutionsGet(institutionsGetRequest: InstitutionsGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstitutionsGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.institutionsGet(institutionsGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a JSON response containing details on a specified financial institution currently supported by Plaid.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` to authenticate to this endpoint. The `public_key` has been deprecated; all customers are encouraged to use `client_id` and `secret` instead. 
         * @summary Get details of an institution
         * @param {InstitutionsGetByIdRequest} institutionsGetByIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async institutionsGetById(institutionsGetByIdRequest: InstitutionsGetByIdRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstitutionsGetByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.institutionsGetById(institutionsGetByIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` parameters to authenticate to this endpoint. The `public_key` parameter has since been deprecated; all customers are encouraged to use `client_id` and `secret` instead. 
         * @summary Search institutions
         * @param {InstitutionsSearchRequest} institutionsSearchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async institutionsSearch(institutionsSearchRequest: InstitutionsSearchRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstitutionsSearchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.institutionsSearch(institutionsSearchRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/investments/auth/get` endpoint allows developers to receive user-authorized data to facilitate the transfer of holdings
         * @summary Get data needed to authorize an investments transfer
         * @param {InvestmentsAuthGetRequest} investmentsAuthGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async investmentsAuthGet(investmentsAuthGetRequest: InvestmentsAuthGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvestmentsAuthGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.investmentsAuthGet(investmentsAuthGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/investments/holdings/get` endpoint allows developers to receive user-authorized stock position data for `investment`-type accounts.
         * @summary Get Investment holdings
         * @param {InvestmentsHoldingsGetRequest} investmentsHoldingsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async investmentsHoldingsGet(investmentsHoldingsGetRequest: InvestmentsHoldingsGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvestmentsHoldingsGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.investmentsHoldingsGet(investmentsHoldingsGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * `/investments/refresh` is an optional endpoint for users of the Investments product. It initiates an on-demand extraction to fetch the newest investments, holdings and investment transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Investments-enabled Item. If changes to investments are discovered after calling `/investments/refresh`, Plaid will fire webhooks: [`HOLDINGS: DEFAULT_UPDATE`](https://plaid.com/docs/api/products/investments/#holdings-default_update) if any new holdings are detected, and [INVESTMENTS_TRANSACTIONS: DEFAULT_UPDATE](https://plaid.com/docs/api/products/investments/#investments_transactions-default_update) if any new investment transactions are detected. Updated holdings and investment transactions can be fetched by calling `/investments/holdings/get` and `/investments/transactions/get`. \"Note that the `/investments/refresh` endpoint is not supported by all institutions. If called on an Item from an institution that does not support this functionality, it will return a `PRODUCT_NOT_SUPPORTED` error. `/investments/refresh` is offered as an add-on to Investments and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
         * @summary Refresh investment data
         * @param {InvestmentsRefreshRequest} investmentsRefreshRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async investmentsRefresh(investmentsRefreshRequest: InvestmentsRefreshRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvestmentsRefreshResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.investmentsRefresh(investmentsRefreshRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/investments/transactions/get` endpoint allows developers to retrieve up to 24 months of user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the `total_investment_transactions` response body field to fetch all available investment transactions.  Note that Investments does not have a webhook to indicate when initial transaction data has loaded. Instead, if transactions data is not ready when `/investments/transactions/get` is first called, Plaid will wait for the data. For this reason, calling `/investments/transactions/get` immediately after Link may take up to one to two minutes to return.
         * @summary Get investment transactions
         * @param {InvestmentsTransactionsGetRequest} investmentsTransactionsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async investmentsTransactionsGet(investmentsTransactionsGetRequest: InvestmentsTransactionsGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvestmentsTransactionsGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.investmentsTransactionsGet(investmentsTransactionsGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * By default, the `access_token` associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the `/item/access_token/invalidate` endpoint to rotate the `access_token` associated with an Item. The endpoint returns a new `access_token` and immediately invalidates the previous `access_token`. 
         * @summary Invalidate access_token
         * @param {ItemAccessTokenInvalidateRequest} itemAccessTokenInvalidateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemAccessTokenInvalidate(itemAccessTokenInvalidateRequest: ItemAccessTokenInvalidateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemAccessTokenInvalidateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemAccessTokenInvalidate(itemAccessTokenInvalidateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a historical log of user consent events
         * @summary List a historical log of user consent events
         * @param {ItemActivityListRequest} itemActivityListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemActivityList(itemActivityListRequest: ItemActivityListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemActivityListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemActivityList(itemActivityListRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a user’s connected applications
         * @summary List a user’s connected applications
         * @param {ItemApplicationListRequest} itemApplicationListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemApplicationList(itemApplicationListRequest: ItemApplicationListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemApplicationListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemApplicationList(itemApplicationListRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Enable consumers to update product access on selected accounts for an application.
         * @summary Update the scopes of access for a particular application
         * @param {ItemApplicationScopesUpdateRequest} itemApplicationScopesUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemApplicationScopesUpdate(itemApplicationScopesUpdateRequest: ItemApplicationScopesUpdateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemApplicationScopesUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemApplicationScopesUpdate(itemApplicationScopesUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Note: As of July 2020, the `/item/public_token/create` endpoint is deprecated. Instead, use `/link/token/create` with an `access_token` to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the `/item/public_token/create` endpoint and then initialize Link with that `public_token`.  A `public_token` is one-time use and expires after 30 minutes. You use a `public_token` to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a `public_token` for an Item even if you did not use Link to create the Item originally.  The `/item/public_token/create` endpoint is **not** used to create your initial `public_token`. If you have not already received an `access_token` for a specific Item, use Link to obtain your `public_token` instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
         * @summary Create public token
         * @param {ItemPublicTokenCreateRequest} itemPublicTokenCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemCreatePublicToken(itemPublicTokenCreateRequest: ItemPublicTokenCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemPublicTokenCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemCreatePublicToken(itemPublicTokenCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns information about the status of an Item.
         * @summary Retrieve an Item
         * @param {ItemGetRequest} itemGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemGet(itemGetRequest: ItemGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemGet(itemGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * `/item/import` creates an Item via your Plaid Exchange Integration and returns an `access_token`. As part of an `/item/import` request, you will include a User ID (`user_auth.user_id`) and Authentication Token (`user_auth.auth_token`) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via `/item/import`, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated.
         * @summary Import Item
         * @param {ItemImportRequest} itemImportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemImport(itemImportRequest: ItemImportRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemImportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemImport(itemImportRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Exchange a Link `public_token` for an API `access_token`. Link hands off the `public_token` client-side via the `onSuccess` callback once a user has successfully created an Item. The `public_token` is ephemeral and expires after 30 minutes. An `access_token` does not expire, but can be revoked by calling `/item/remove`.  The response also includes an `item_id` that should be stored with the `access_token`. The `item_id` is used to identify an Item in a webhook. The `item_id` can also be retrieved by making an `/item/get` request.
         * @summary Exchange public token for an access token
         * @param {ItemPublicTokenExchangeRequest} itemPublicTokenExchangeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemPublicTokenExchange(itemPublicTokenExchangeRequest: ItemPublicTokenExchangeRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemPublicTokenExchangeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemPublicTokenExchange(itemPublicTokenExchangeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/item/remove` endpoint allows you to remove an Item. Once removed, the `access_token`, as well as any processor tokens or bank account tokens associated with the Item, is no longer valid and cannot be used to access any data that was associated with the Item.  Note that in the Development environment, issuing an `/item/remove`  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via `/item/remove` may still show as an active connection in the institution\'s OAuth permission manager.  API versions 2019-05-29 and earlier return a `removed` boolean as part of the response.
         * @summary Remove an Item
         * @param {ItemRemoveRequest} itemRemoveRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemRemove(itemRemoveRequest: ItemRemoveRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemRemoveResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemRemove(itemRemoveRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The POST `/item/webhook/update` allows you to update the webhook URL associated with an Item. This request triggers a [`WEBHOOK_UPDATE_ACKNOWLEDGED`](https://plaid.com/docs/api/items/#webhook_update_acknowledged) webhook to the newly specified webhook URL.
         * @summary Update Webhook URL
         * @param {ItemWebhookUpdateRequest} itemWebhookUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemWebhookUpdate(itemWebhookUpdateRequest: ItemWebhookUpdateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemWebhookUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemWebhookUpdate(itemWebhookUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/liabilities/get` endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the `account_filters` parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/liabilities/get`.  Note: This request may take some time to complete if `liabilities` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.
         * @summary Retrieve Liabilities data
         * @param {LiabilitiesGetRequest} liabilitiesGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async liabilitiesGet(liabilitiesGetRequest: LiabilitiesGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiabilitiesGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.liabilitiesGet(liabilitiesGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use the `/link_delivery/create` endpoint to create a Hosted Link session.
         * @summary Create Hosted Link session
         * @param {LinkDeliveryCreateRequest} linkDeliveryCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async linkDeliveryCreate(linkDeliveryCreateRequest: LinkDeliveryCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LinkDeliveryCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.linkDeliveryCreate(linkDeliveryCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use the `/link_delivery/get` endpoint to get the status of a Hosted Link session.
         * @summary Get Hosted Link session
         * @param {LinkDeliveryGetRequest} linkDeliveryGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async linkDeliveryGet(linkDeliveryGetRequest: LinkDeliveryGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LinkDeliveryGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.linkDeliveryGet(linkDeliveryGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Exchange an OAuth `link_correlation_id` for the corresponding `link_token`. The `link_correlation_id` is only available for \'payment_initiation\' products and is provided to the client via the OAuth `redirect_uri` as a query parameter. The `link_correlation_id` is ephemeral and expires in a brief period, after which it can no longer be exchanged for the \'link_token\'.
         * @summary Exchange the Link Correlation Id for a Link Token
         * @param {LinkOAuthCorrelationIdExchangeRequest} linkOAuthCorrelationIdExchangeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async linkOauthCorrelationIdExchange(linkOAuthCorrelationIdExchangeRequest: LinkOAuthCorrelationIdExchangeRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LinkOAuthCorrelationIdExchangeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.linkOauthCorrelationIdExchange(linkOAuthCorrelationIdExchangeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/link/token/create` endpoint creates a `link_token`, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a `public_token`, which can then be exchanged for an `access_token` via `/item/public_token/exchange` as part of the main Link flow.  A `link_token` generated by `/link/token/create` is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.
         * @summary Create Link Token
         * @param {LinkTokenCreateRequest} linkTokenCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async linkTokenCreate(linkTokenCreateRequest: LinkTokenCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LinkTokenCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.linkTokenCreate(linkTokenCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/link/token/get` endpoint gets information about a previously-created `link_token` using the `/link/token/create` endpoint. It can be useful for debugging purposes.
         * @summary Get Link Token
         * @param {LinkTokenGetRequest} linkTokenGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async linkTokenGet(linkTokenGetRequest: LinkTokenGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LinkTokenGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.linkTokenGet(linkTokenGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/partner/customer/create` endpoint is used by reseller partners to create end customers.
         * @summary Creates a new end customer for a Plaid reseller.
         * @param {PartnerCustomerCreateRequest} partnerCustomerCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partnerCustomerCreate(partnerCustomerCreateRequest: PartnerCustomerCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartnerCustomerCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partnerCustomerCreate(partnerCustomerCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/partner/customer/enable` endpoint is used by reseller partners to enable an end customer in the Production environment.
         * @summary Enables a Plaid reseller\'s end customer in the Production environment.
         * @param {PartnerCustomerEnableRequest} partnerCustomerEnableRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partnerCustomerEnable(partnerCustomerEnableRequest: PartnerCustomerEnableRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartnerCustomerEnableResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partnerCustomerEnable(partnerCustomerEnableRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/partner/customer/get` endpoint is used by reseller partners to retrieve data about a single end customer.
         * @summary Returns a Plaid reseller\'s end customer.
         * @param {PartnerCustomerGetRequest} partnerCustomerGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partnerCustomerGet(partnerCustomerGetRequest: PartnerCustomerGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartnerCustomerGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partnerCustomerGet(partnerCustomerGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/partner/customer/oauth_institutions/get` endpoint is used by reseller partners to retrieve OAuth-institution registration information about a single end customer. To learn how to set up a webhook to listen to status update events, visit the [reseller documentation](https://plaid.com/docs/account/resellers/#enabling-end-customers).
         * @summary Returns OAuth-institution registration information for a given end customer.
         * @param {PartnerCustomerOAuthInstitutionsGetRequest} partnerCustomerOAuthInstitutionsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partnerCustomerOauthInstitutionsGet(partnerCustomerOAuthInstitutionsGetRequest: PartnerCustomerOAuthInstitutionsGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartnerCustomerOAuthInstitutionsGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partnerCustomerOauthInstitutionsGet(partnerCustomerOAuthInstitutionsGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/partner/customer/remove` endpoint is used by reseller partners to remove an end customer. Removing an end customer will remove it from view in the Plaid Dashboard and deactivate its API keys. This endpoint can only be used to remove an end customer that has not yet been enabled in Production.
         * @summary Removes a Plaid reseller\'s end customer.
         * @param {PartnerCustomerRemoveRequest} partnerCustomerRemoveRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partnerCustomerRemove(partnerCustomerRemoveRequest: PartnerCustomerRemoveRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartnerCustomerRemoveResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partnerCustomerRemove(partnerCustomerRemoveRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/payment_initiation/consent/create` endpoint is used to create a payment consent, which can be used to initiate payments on behalf of the user. Payment consents are created with `UNAUTHORISED` status by default and must be authorised by the user before payments can be initiated.  Consents can be limited in time and scope, and have constraints that describe limitations for payments.
         * @summary Create payment consent
         * @param {PaymentInitiationConsentCreateRequest} paymentInitiationConsentCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentInitiationConsentCreate(paymentInitiationConsentCreateRequest: PaymentInitiationConsentCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentInitiationConsentCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentInitiationConsentCreate(paymentInitiationConsentCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/payment_initiation/consent/get` endpoint can be used to check the status of a payment consent, as well as to receive basic information such as recipient and constraints.
         * @summary Get payment consent
         * @param {PaymentInitiationConsentGetRequest} paymentInitiationConsentGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentInitiationConsentGet(paymentInitiationConsentGetRequest: PaymentInitiationConsentGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentInitiationConsentGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentInitiationConsentGet(paymentInitiationConsentGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/payment_initiation/consent/payment/execute` endpoint can be used to execute payments using payment consent.
         * @summary Execute a single payment using consent
         * @param {PaymentInitiationConsentPaymentExecuteRequest} paymentInitiationConsentPaymentExecuteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentInitiationConsentPaymentExecute(paymentInitiationConsentPaymentExecuteRequest: PaymentInitiationConsentPaymentExecuteRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentInitiationConsentPaymentExecuteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentInitiationConsentPaymentExecute(paymentInitiationConsentPaymentExecuteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/payment_initiation/consent/revoke` endpoint can be used to revoke the payment consent. Once the consent is revoked, it is not possible to initiate payments using it.
         * @summary Revoke payment consent
         * @param {PaymentInitiationConsentRevokeRequest} paymentInitiationConsentRevokeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentInitiationConsentRevoke(paymentInitiationConsentRevokeRequest: PaymentInitiationConsentRevokeRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentInitiationConsentRevokeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentInitiationConsentRevoke(paymentInitiationConsentRevokeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * After creating a payment recipient, you can use the `/payment_initiation/payment/create` endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR, GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency).  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer, GBP-denominated payments will be sent via the Faster Payments network and for non-Eurozone markets typically via the local payment scheme, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer or other local payment schemes will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipient’s account, although at least 90% of standing order payments are sent by 6am.  In the Development environment, payments must be below 5 GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency). For details on any payment limits in Production, contact your Plaid Account Manager.
         * @summary Create a payment
         * @param {PaymentInitiationPaymentCreateRequest} paymentInitiationPaymentCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentInitiationPaymentCreate(paymentInitiationPaymentCreateRequest: PaymentInitiationPaymentCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentInitiationPaymentCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentInitiationPaymentCreate(paymentInitiationPaymentCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/payment_initiation/payment/get` endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the `/payment_initiation/payment/get` endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.
         * @summary Get payment details
         * @param {PaymentInitiationPaymentGetRequest} paymentInitiationPaymentGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentInitiationPaymentGet(paymentInitiationPaymentGetRequest: PaymentInitiationPaymentGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentInitiationPaymentGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentInitiationPaymentGet(paymentInitiationPaymentGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/payment_initiation/payment/list` endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional `count` and `cursor` parameters.
         * @summary List payments
         * @param {PaymentInitiationPaymentListRequest} paymentInitiationPaymentListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentInitiationPaymentList(paymentInitiationPaymentListRequest: PaymentInitiationPaymentListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentInitiationPaymentListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentInitiationPaymentList(paymentInitiationPaymentListRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Reverse a settled payment from a Plaid virtual account.  The original payment must be in a settled state to be refunded. To refund partially, specify the amount as part of the request. If the amount is not specified, the refund amount will be equal to all of the remaining payment amount that has not been refunded yet.  The refund will go back to the source account that initiated the payment. The original payment must have been initiated to a Plaid virtual account so that this account can be used to initiate the refund. 
         * @summary Reverse an existing payment
         * @param {PaymentInitiationPaymentReverseRequest} paymentInitiationPaymentReverseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentInitiationPaymentReverse(paymentInitiationPaymentReverseRequest: PaymentInitiationPaymentReverseRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentInitiationPaymentReverseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentInitiationPaymentReverse(paymentInitiationPaymentReverseRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA) or a non-Eurozone country [supported](https://plaid.com/global) by Plaid. For a standing order (recurring) payment, the recipient must be in the UK.  It is recommended to use `bacs` in the UK and `iban` in EU.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same `recipient_id`. 
         * @summary Create payment recipient
         * @param {PaymentInitiationRecipientCreateRequest} paymentInitiationRecipientCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentInitiationRecipientCreate(paymentInitiationRecipientCreateRequest: PaymentInitiationRecipientCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentInitiationRecipientCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentInitiationRecipientCreate(paymentInitiationRecipientCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get details about a payment recipient you have previously created.
         * @summary Get payment recipient
         * @param {PaymentInitiationRecipientGetRequest} paymentInitiationRecipientGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentInitiationRecipientGet(paymentInitiationRecipientGetRequest: PaymentInitiationRecipientGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentInitiationRecipientGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentInitiationRecipientGet(paymentInitiationRecipientGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/payment_initiation/recipient/list` endpoint list the payment recipients that you have previously created.
         * @summary List payment recipients
         * @param {PaymentInitiationRecipientListRequest} paymentInitiationRecipientListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentInitiationRecipientList(paymentInitiationRecipientListRequest: PaymentInitiationRecipientListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentInitiationRecipientListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentInitiationRecipientList(paymentInitiationRecipientListRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use `/payment_profile/create` endpoint to create a new payment profile. To initiate the account linking experience, call `/link/token/create` and provide the `payment_profile_token` in the `transfer.payment_profile_token` field. You can then use the `payment_profile_token` when creating transfers using `/transfer/authorization/create` and `/transfer/create`.
         * @summary Create payment profile
         * @param {PaymentProfileCreateRequest} paymentProfileCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentProfileCreate(paymentProfileCreateRequest: PaymentProfileCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentProfileCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentProfileCreate(paymentProfileCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use `/payment_profile/get` endpoint to get the status of a given Payment Profile.
         * @summary Get payment profile
         * @param {PaymentProfileGetRequest} paymentProfileGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentProfileGet(paymentProfileGetRequest: PaymentProfileGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentProfileGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentProfileGet(paymentProfileGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use the `/payment_profile/remove` endpoint to remove a given Payment Profile. Once it’s removed, it can no longer be used to create transfers.
         * @summary Remove payment profile
         * @param {PaymentProfileRemoveRequest} paymentProfileRemoveRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentProfileRemove(paymentProfileRemoveRequest: PaymentProfileRemoveRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentProfileRemoveResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentProfileRemove(paymentProfileRemoveRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.
         * @summary Create Apex bank account token
         * @param {ProcessorApexProcessorTokenCreateRequest} processorApexProcessorTokenCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processorApexProcessorTokenCreate(processorApexProcessorTokenCreateRequest: ProcessorApexProcessorTokenCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessorTokenCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processorApexProcessorTokenCreate(processorApexProcessorTokenCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/processor/auth/get` endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that\'\'s associated with a given `processor_token`. The endpoint also returns high-level account data and balances when available.  Versioning note: API versions 2019-05-29 and earlier use a different schema for the `numbers` object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14). 
         * @summary Retrieve Auth data
         * @param {ProcessorAuthGetRequest} processorAuthGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processorAuthGet(processorAuthGetRequest: ProcessorAuthGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessorAuthGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processorAuthGet(processorAuthGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/processor/balance/get` endpoint returns the real-time balance for each of an Item\'s accounts. While other endpoints may return a balance object, only `/processor/balance/get` forces the available and current balance fields to be refreshed rather than cached. 
         * @summary Retrieve Balance data
         * @param {ProcessorBalanceGetRequest} processorBalanceGetRequest The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processorBalanceGet(processorBalanceGetRequest: ProcessorBalanceGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessorBalanceGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processorBalanceGet(processorBalanceGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use the `/processor/bank_transfer/create` endpoint to initiate a new bank transfer as a processor
         * @summary Create a bank transfer as a processor
         * @param {ProcessorBankTransferCreateRequest} processorBankTransferCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processorBankTransferCreate(processorBankTransferCreateRequest: ProcessorBankTransferCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessorBankTransferCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processorBankTransferCreate(processorBankTransferCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/processor/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.
         * @summary Retrieve Identity data
         * @param {ProcessorIdentityGetRequest} processorIdentityGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processorIdentityGet(processorIdentityGetRequest: ProcessorIdentityGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessorIdentityGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processorIdentityGet(processorIdentityGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/processor/identity/match` endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder\'s financial institution.  This request may take some time to complete if Identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
         * @summary Retrieve identity match score
         * @param {ProcessorIdentityMatchRequest} processorIdentityMatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processorIdentityMatch(processorIdentityMatchRequest: ProcessorIdentityMatchRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessorIdentityMatchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processorIdentityMatch(processorIdentityMatchRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * After calling `/processor/signal/evaluate`, call `/processor/signal/decision/report` to report whether the transaction was initiated. This endpoint will return an [`INVALID_FIELD`](/docs/errors/invalid-request/#invalid_field) error if called a second time with a different value for `initiated`.
         * @summary Report whether you initiated an ACH transaction
         * @param {ProcessorSignalDecisionReportRequest} processorSignalDecisionReportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processorSignalDecisionReport(processorSignalDecisionReportRequest: ProcessorSignalDecisionReportRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessorSignalDecisionReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processorSignalDecisionReport(processorSignalDecisionReportRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use `/processor/signal/evaluate` to evaluate a planned ACH transaction as a processor to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/processor/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to our error documentation on [item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time. To reduce this latency, you can call `/signal/prepare` on the Item before you need to request Signal data.
         * @summary Evaluate a planned ACH transaction
         * @param {ProcessorSignalEvaluateRequest} processorSignalEvaluateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processorSignalEvaluate(processorSignalEvaluateRequest: ProcessorSignalEvaluateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessorSignalEvaluateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processorSignalEvaluate(processorSignalEvaluateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Call the `/processor/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/processor/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
         * @summary Report a return for an ACH transaction
         * @param {ProcessorSignalReturnReportRequest} processorSignalReturnReportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processorSignalReturnReport(processorSignalReturnReportRequest: ProcessorSignalReturnReportRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessorSignalReturnReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processorSignalReturnReport(processorSignalReturnReportRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).  Note that the Stripe bank account token is a one-time use token. To store bank account information for later use, you can use a Stripe customer object and create an associated bank account from the token, or you can use a Stripe Custom account and create an associated external bank account from the token. This bank account information should work indefinitely, unless the user\'s bank account information changes or they revoke Plaid\'s permissions to access their account. Stripe bank account information cannot be modified once the bank account token has been created. If you ever need to change the bank account details used by Stripe for a specific customer, have the user go through Link again and create a new bank account token from the new `access_token`.  Bank account tokens can also be revoked, using `/item/remove`.
         * @summary Create Stripe bank account token
         * @param {ProcessorStripeBankAccountTokenCreateRequest} processorStripeBankAccountTokenCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processorStripeBankAccountTokenCreate(processorStripeBankAccountTokenCreateRequest: ProcessorStripeBankAccountTokenCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessorStripeBankAccountTokenCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processorStripeBankAccountTokenCreate(processorStripeBankAccountTokenCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Used to create a token suitable for sending to one of Plaid\'s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see `/processor/stripe/bank_account_token/create` for creating tokens for use with Stripe integrations. Once created, a processor token for a given Item cannot be modified or updated. If the account must be linked to a new or different partner resource, create a new Item by having the user go through the Link flow again; a new processor token can then be created from the new `access_token`. Processor tokens can also be revoked, using `/item/remove`.
         * @summary Create processor token
         * @param {ProcessorTokenCreateRequest} processorTokenCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processorTokenCreate(processorTokenCreateRequest: ProcessorTokenCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessorTokenCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processorTokenCreate(processorTokenCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Used to get a processor token\'s product permissions. The `products` field will be an empty list if the processor can access all available products.
         * @summary Get a processor token\'s product permissions
         * @param {ProcessorTokenPermissionsGetRequest} processorTokenPermissionsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processorTokenPermissionsGet(processorTokenPermissionsGetRequest: ProcessorTokenPermissionsGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessorTokenPermissionsGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processorTokenPermissionsGet(processorTokenPermissionsGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Used to control a processor\'s access to products on the given processor token. By default, a processor will have access to all available products on the corresponding item. To restrict access to a particular set of products, call this endpoint with the desired products. To restore access to all available products, call this endpoint with an empty list. This endpoint can be called multiple times as your needs and your processor\'s needs change.
         * @summary Control a processor\'s access to products
         * @param {ProcessorTokenPermissionsSetRequest} processorTokenPermissionsSetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processorTokenPermissionsSet(processorTokenPermissionsSetRequest: ProcessorTokenPermissionsSetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessorTokenPermissionsSetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processorTokenPermissionsSet(processorTokenPermissionsSetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/processor/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/processor/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/processor/transactions/get` will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item\'s `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the `/processor/transactions/refresh` endpoint.  Note that data may not be immediately available to `/processor/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/processor/transactions/get`, if it wasn\'t. If no transaction history is ready when `/processor/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
         * @summary Get transaction data
         * @param {ProcessorTransactionsGetRequest} processorTransactionsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processorTransactionsGet(processorTransactionsGetRequest: ProcessorTransactionsGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessorTransactionsGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processorTransactionsGet(processorTransactionsGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/processor/transactions/recurring/get` endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.  This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  This endpoint can only be called on an Item that has already been initialized with Transactions (either during Link, by specifying it in `/link/token/create`; or after Link, by calling `/processor/transactions/get` or `/processor/transactions/sync`). Once all historical transactions have been fetched, call `/processor/transactions/recurring/get` to receive the Recurring Transactions streams and subscribe to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using `/transactions/sync` listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the `historical_update_complete` field in the payload is `true`. If using `/transactions/get`, listen for the [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.  After the initial call, you can call `/processor/transactions/recurring/get` endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.
         * @summary Fetch recurring transaction streams
         * @param {ProcessorTransactionsRecurringGetRequest} processorTransactionsRecurringGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processorTransactionsRecurringGet(processorTransactionsRecurringGetRequest: ProcessorTransactionsRecurringGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessorTransactionsRecurringGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processorTransactionsRecurringGet(processorTransactionsRecurringGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * `/processor/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling `/processor/transactions/refresh`, Plaid will fire a webhook: for `/transactions/sync` users, [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both `/processor/transactions/sync` and `/processor/transactions/get`, [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/processor/transactions/get` or `/processor/transactions/sync`. Note that the `/processor/transactions/refresh` endpoint is not supported for Capital One (`ins_128026`) and will result in a `PRODUCT_NOT_SUPPORTED` error if called on an Item from that institution.  `/processor/transactions/refresh` is offered as an add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
         * @summary Refresh transaction data
         * @param {ProcessorTransactionsRefreshRequest} processorTransactionsRefreshRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processorTransactionsRefresh(processorTransactionsRefreshRequest: ProcessorTransactionsRefreshRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessorTransactionsRefreshResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processorTransactionsRefresh(processorTransactionsRefreshRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint replaces `/processor/transactions/get` and its associated webhooks for most common use-cases.  The `/processor/transactions/sync` endpoint allows developers to subscribe to all transactions associated with an Item and get updates synchronously in a stream-like manner, using a cursor to track which updates have already been seen. `/processor/transactions/sync` provides the same functionality as `/processor/transactions/get` and can be used instead of `/processor/transactions/get` to simplify the process of tracking transactions updates.  This endpoint provides user-authorized transaction data for `credit`, `depository`, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from `investments` accounts, use `/investments/transactions/get` instead.  Returned transactions data is grouped into three types of update, indicating whether the transaction was added, removed, or modified since the last call to the API.  In the first call to `/processor/transactions/sync` for an Item, the endpoint will return all historical transactions data associated with that Item up until the time of the API call (as \"adds\"), which then generates a `next_cursor` for that Item. In subsequent calls, send the `next_cursor` to receive only the changes that have occurred since the previous call.  Due to the potentially large number of transactions associated with an Item, results are paginated. The `has_more` field specifies if additional calls are necessary to fetch all available transaction updates. Call `/processor/transactions/sync` with the new cursor, pulling all updates, until `has_more` is `false`.  When retrieving paginated updates, track both the `next_cursor` from the latest response and the original cursor from the first call in which `has_more` was `true`; if a call to `/processor/transactions/sync` fails when retrieving a paginated update, which can occur as a result of the [`TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION`](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error, the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.  Whenever new or updated transaction data becomes available, `/processor/transactions/sync` will provide these updates. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item\'s `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, use the `/processor/transactions/refresh` endpoint.  Note that for newly created Items, data may not be immediately available to `/processor/transactions/sync`. Plaid begins preparing transactions data when the Item is created, but the process can take anywhere from a few seconds to several minutes to complete, depending on the number of transactions available.
         * @summary Get incremental transaction updates on an Item
         * @param {ProcessorTransactionsSyncRequest} processorTransactionsSyncRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processorTransactionsSync(processorTransactionsSyncRequest: ProcessorTransactionsSyncRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessorTransactionsSyncResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processorTransactionsSync(processorTransactionsSyncRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use the `/sandbox/bank_income/fire_webhook` endpoint to manually trigger a Bank Income webhook in the Sandbox environment.
         * @summary Manually fire a bank income webhook in sandbox
         * @param {SandboxBankIncomeFireWebhookRequest} sandboxBankIncomeFireWebhookRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sandboxBankIncomeFireWebhook(sandboxBankIncomeFireWebhookRequest: SandboxBankIncomeFireWebhookRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SandboxBankIncomeFireWebhookResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sandboxBankIncomeFireWebhook(sandboxBankIncomeFireWebhookRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use the `/sandbox/bank_transfer/fire_webhook` endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.
         * @summary Manually fire a Bank Transfer webhook
         * @param {SandboxBankTransferFireWebhookRequest} sandboxBankTransferFireWebhookRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sandboxBankTransferFireWebhook(sandboxBankTransferFireWebhookRequest: SandboxBankTransferFireWebhookRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SandboxBankTransferFireWebhookResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sandboxBankTransferFireWebhook(sandboxBankTransferFireWebhookRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use the `/sandbox/bank_transfer/simulate` endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/bank_transfer/event/sync` or `/bank_transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
         * @summary Simulate a bank transfer event in Sandbox
         * @param {SandboxBankTransferSimulateRequest} sandboxBankTransferSimulateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sandboxBankTransferSimulate(sandboxBankTransferSimulateRequest: SandboxBankTransferSimulateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SandboxBankTransferSimulateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sandboxBankTransferSimulate(sandboxBankTransferSimulateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use the `/sandbox/income/fire_webhook` endpoint to manually trigger a Payroll Income webhook in the Sandbox environment.
         * @summary Manually fire an Income webhook
         * @param {SandboxIncomeFireWebhookRequest} sandboxIncomeFireWebhookRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sandboxIncomeFireWebhook(sandboxIncomeFireWebhookRequest: SandboxIncomeFireWebhookRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SandboxIncomeFireWebhookResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sandboxIncomeFireWebhook(sandboxIncomeFireWebhookRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/sandbox/item/fire_webhook` endpoint is used to test that code correctly handles webhooks. This endpoint can trigger the following webhooks:  `DEFAULT_UPDATE`: Transactions update webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `NEW_ACCOUNTS_AVAILABLE`: Webhook to be fired for a given Sandbox Item created with Account Select v2.  `AUTH_DATA_UPDATE`: Webhook to be fired for a given Sandbox Item created with Auth as an enabled product.  `RECURRING_TRANSACTIONS_UPDATE`: Recurring Transactions webhook to be fired for a given Sandbox Item. If the Item does not support Recurring Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `SYNC_UPDATES_AVAILABLE`: Transactions webhook to be fired for a given Sandbox Item.  If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `PRODUCT_READY`: Assets webhook to be fired when a given asset report has been successfully generated. If the Item does not support Assets, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `ERROR`: Assets webhook to be fired when asset report generation has failed. If the Item does not support Assets, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development.
         * @summary Fire a test webhook
         * @param {SandboxItemFireWebhookRequest} sandboxItemFireWebhookRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sandboxItemFireWebhook(sandboxItemFireWebhookRequest: SandboxItemFireWebhookRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SandboxItemFireWebhookResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sandboxItemFireWebhook(sandboxItemFireWebhookRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * `/sandbox/item/reset_login/` forces an Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link\'s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/item/reset_login`, You can then use Plaid Link update mode to restore the Item to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.
         * @summary Force a Sandbox Item into an error state
         * @param {SandboxItemResetLoginRequest} sandboxItemResetLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sandboxItemResetLogin(sandboxItemResetLoginRequest: SandboxItemResetLoginRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SandboxItemResetLoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sandboxItemResetLogin(sandboxItemResetLoginRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/sandbox/item/set_verification_status` endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  Note that not all Plaid developer accounts are enabled for micro-deposit based verification by default. Your account must be enabled for this feature in order to test it in Sandbox. To enable this features or check your status, contact your account manager or [submit a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access).  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
         * @summary Set verification status for Sandbox account
         * @param {SandboxItemSetVerificationStatusRequest} sandboxItemSetVerificationStatusRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sandboxItemSetVerificationStatus(sandboxItemSetVerificationStatusRequest: SandboxItemSetVerificationStatusRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SandboxItemSetVerificationStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sandboxItemSetVerificationStatus(sandboxItemSetVerificationStatusRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Save the selected accounts when connecting to the Platypus Oauth institution
         * @summary Save the selected accounts when connecting to the Platypus Oauth institution
         * @param {SandboxOauthSelectAccountsRequest} sandboxOauthSelectAccountsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sandboxOauthSelectAccounts(sandboxOauthSelectAccountsRequest: SandboxOauthSelectAccountsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sandboxOauthSelectAccounts(sandboxOauthSelectAccountsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * `/sandbox/payment_profile/reset_login/` forces a Payment Profile into a state where the login is no longer valid. This makes it easy to test update mode for Payment Profile in the Sandbox environment.   After calling `/sandbox/payment_profile/reset_login`, calls to the `/transfer/authorization/create` with the Payment Profile will result in a `decision_rationale` `PAYMENT_PROFILE_LOGIN_REQUIRED`. You can then use update mode for Payment Profile to restore it into a good state.   In order to invoke this endpoint, you must first [create a Payment Profile](https://plaid.com/docs/transfer/add-to-app/#create-a-payment-profile-optional) and [go through the Link flow](https://plaid.com/docs/transfer/add-to-app/#create-a-link-token).
         * @summary Reset the login of a Payment Profile
         * @param {SandboxPaymentProfileResetLoginRequest} sandboxPaymentProfileResetLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sandboxPaymentProfileResetLogin(sandboxPaymentProfileResetLoginRequest: SandboxPaymentProfileResetLoginRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SandboxPaymentProfileResetLoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sandboxPaymentProfileResetLogin(sandboxPaymentProfileResetLoginRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use the `/sandbox/processor_token/create` endpoint to create a valid `processor_token` for an arbitrary institution ID and test credentials. The created `processor_token` corresponds to a new Sandbox Item. You can then use this `processor_token` with the `/processor/` API endpoints in Sandbox. You can also use `/sandbox/processor_token/create` with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.
         * @summary Create a test Item and processor token
         * @param {SandboxProcessorTokenCreateRequest} sandboxProcessorTokenCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sandboxProcessorTokenCreate(sandboxProcessorTokenCreateRequest: SandboxProcessorTokenCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SandboxProcessorTokenCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sandboxProcessorTokenCreate(sandboxProcessorTokenCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use the `/sandbox/public_token/create` endpoint to create a valid `public_token`  for an arbitrary institution ID, initial products, and test credentials. The created `public_token` maps to a new Sandbox Item. You can then call `/item/public_token/exchange` to exchange the `public_token` for an `access_token` and perform all API actions. `/sandbox/public_token/create` can also be used with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. `/sandbox/public_token/create` cannot be used with OAuth institutions.
         * @summary Create a test Item
         * @param {SandboxPublicTokenCreateRequest} sandboxPublicTokenCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sandboxPublicTokenCreate(sandboxPublicTokenCreateRequest: SandboxPublicTokenCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SandboxPublicTokenCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sandboxPublicTokenCreate(sandboxPublicTokenCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use the `/sandbox/transfer/fire_webhook` endpoint to manually trigger a Transfer webhook in the Sandbox environment.
         * @summary Manually fire a Transfer webhook
         * @param {SandboxTransferFireWebhookRequest} sandboxTransferFireWebhookRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sandboxTransferFireWebhook(sandboxTransferFireWebhookRequest: SandboxTransferFireWebhookRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SandboxTransferFireWebhookResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sandboxTransferFireWebhook(sandboxTransferFireWebhookRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use the `/sandbox/transfer/repayment/simulate` endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.
         * @summary Trigger the creation of a repayment
         * @param {SandboxTransferRepaymentSimulateRequest} sandboxTransferRepaymentSimulateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sandboxTransferRepaymentSimulate(sandboxTransferRepaymentSimulateRequest: SandboxTransferRepaymentSimulateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SandboxTransferRepaymentSimulateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sandboxTransferRepaymentSimulate(sandboxTransferRepaymentSimulateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use the `/sandbox/transfer/simulate` endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
         * @summary Simulate a transfer event in Sandbox
         * @param {SandboxTransferSimulateRequest} sandboxTransferSimulateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sandboxTransferSimulate(sandboxTransferSimulateRequest: SandboxTransferSimulateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SandboxTransferSimulateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sandboxTransferSimulate(sandboxTransferSimulateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use the `/sandbox/transfer/sweep/simulate` endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all `posted` or `pending` transfers with a sweep status of `unswept` will become `swept`, and all `returned` transfers with a sweep status of `swept` will become `return_swept`.
         * @summary Simulate creating a sweep
         * @param {SandboxTransferSweepSimulateRequest} sandboxTransferSweepSimulateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sandboxTransferSweepSimulate(sandboxTransferSweepSimulateRequest: SandboxTransferSweepSimulateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SandboxTransferSweepSimulateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sandboxTransferSweepSimulate(sandboxTransferSweepSimulateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use the `/sandbox/transfer/test_clock/advance` endpoint to advance a `test_clock` in the Sandbox environment.  A test clock object represents an independent timeline and has a `virtual_time` field indicating the current timestamp of the timeline. A test clock can be advanced by incrementing `virtual_time`, but may never go back to a lower `virtual_time`.  If a test clock is advanced, we will simulate the changes that ought to occur during the time that elapsed. For instance, a client creates a weekly recurring transfer with a test clock set at t. When the client advances the test clock by setting `virtual_time` = t + 15 days, 2 new originations should be created, along with the webhook events.  The advancement of the test clock from its current `virtual_time` should be limited such that there are no more than 20 originations resulting from the advance operation on each `recurring_transfer` associated with the `test_clock`. For instance, if the recurring transfer associated with this test clock originates once every 4 weeks, you can advance the `virtual_time` up to 80 weeks on each API call.
         * @summary Advance a test clock
         * @param {SandboxTransferTestClockAdvanceRequest} sandboxTransferTestClockAdvanceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sandboxTransferTestClockAdvance(sandboxTransferTestClockAdvanceRequest: SandboxTransferTestClockAdvanceRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SandboxTransferTestClockAdvanceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sandboxTransferTestClockAdvance(sandboxTransferTestClockAdvanceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use the `/sandbox/transfer/test_clock/create` endpoint to create a `test_clock` in the Sandbox environment.  A test clock object represents an independent timeline and has a `virtual_time` field indicating the current timestamp of the timeline. Test clocks are used for testing recurring transfers in Sandbox.  A test clock can be associated with up to 5 recurring transfers.
         * @summary Create a test clock
         * @param {SandboxTransferTestClockCreateRequest} sandboxTransferTestClockCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sandboxTransferTestClockCreate(sandboxTransferTestClockCreateRequest: SandboxTransferTestClockCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SandboxTransferTestClockCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sandboxTransferTestClockCreate(sandboxTransferTestClockCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use the `/sandbox/transfer/test_clock/get` endpoint to get a `test_clock` in the Sandbox environment.
         * @summary Get a test clock
         * @param {SandboxTransferTestClockGetRequest} sandboxTransferTestClockGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sandboxTransferTestClockGet(sandboxTransferTestClockGetRequest: SandboxTransferTestClockGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SandboxTransferTestClockGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sandboxTransferTestClockGet(sandboxTransferTestClockGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use the `/sandbox/transfer/test_clock/list` endpoint to see a list of all your test clocks in the Sandbox environment, by ascending `virtual_time`. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired test clocks.
         * @summary List test clocks
         * @param {SandboxTransferTestClockListRequest} sandboxTransferTestClockListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sandboxTransferTestClockList(sandboxTransferTestClockListRequest: SandboxTransferTestClockListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SandboxTransferTestClockListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sandboxTransferTestClockList(sandboxTransferTestClockListRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * After calling `/signal/evaluate`, call `/signal/decision/report` to report whether the transaction was initiated. This endpoint will return an [`INVALID_FIELD`](/docs/errors/invalid-request/#invalid_field) error if called a second time with a different value for `initiated`.
         * @summary Report whether you initiated an ACH transaction
         * @param {SignalDecisionReportRequest} signalDecisionReportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signalDecisionReport(signalDecisionReportRequest: SignalDecisionReportRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignalDecisionReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signalDecisionReport(signalDecisionReportRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use `/signal/evaluate` to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to the error documentation on [Item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time.
         * @summary Evaluate a planned ACH transaction
         * @param {SignalEvaluateRequest} signalEvaluateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signalEvaluate(signalEvaluateRequest: SignalEvaluateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignalEvaluateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signalEvaluate(signalEvaluateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * When Link is not initialized with Signal, call `/signal/prepare` to opt-in that Item to the Signal data collection process, developing a Signal score.  If you are using other Plaid products after Link, e.g. Identity or Assets, call `/signal/prepare` after those product calls are complete.  Example flow: Link is initialized with Auth, call `/auth/get` for the account and routing number, call `/identity/get` to retrieve bank ownership details, then call `/signal/prepare` to begin Signal data collection. Later, once you have obtained details about the proposed transaction from the user, call `/signal/evaluate` for a Signal score. For more information please see [Recommendations for initializing Link with specific product combinations](https://www.plaid.com/docs/link/initializing-products/#recommendations-for-initializing-link-with-specific-product-combinations).
         * @summary Opt-in an Item to Signal
         * @param {SignalPrepareRequest} signalPrepareRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signalPrepare(signalPrepareRequest: SignalPrepareRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignalPrepareResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signalPrepare(signalPrepareRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Call the `/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
         * @summary Report a return for an ACH transaction
         * @param {SignalReturnReportRequest} signalReturnReportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signalReturnReport(signalReturnReportRequest: SignalReturnReportRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignalReturnReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signalReturnReport(signalReturnReportRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/beta/transactions/v1/enhance` endpoint enriches raw transaction data provided directly by clients.  The product is currently in beta.
         * @summary enhance locally-held transaction data
         * @param {TransactionsEnhanceGetRequest} transactionsEnhanceGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsEnhance(transactionsEnhanceGetRequest: TransactionsEnhanceGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionsEnhanceGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsEnhance(transactionsEnhanceGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/transactions/enrich` endpoint enriches raw transaction data generated by your own banking products or retrieved from other non-Plaid sources.
         * @summary Enrich locally-held transaction data
         * @param {TransactionsEnrichGetRequest} transactionsEnrichGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsEnrich(transactionsEnrichGetRequest: TransactionsEnrichGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionsEnrichGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsEnrich(transactionsEnrichGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Note: All new implementations are encouraged to use `/transactions/sync` rather than `/transactions/get`. `/transactions/sync` provides the same functionality as `/transactions/get` and improves developer ease-of-use for handling transactions updates.  The `/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products/investments/) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/transactions/get` will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item\'s `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the `/transactions/refresh` endpoint.  Note that data may not be immediately available to `/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/transactions/get`, if it wasn\'t. To be alerted when transaction data is ready to be fetched, listen for the [`INITIAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#initial_update) and [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhooks. If no transaction history is ready when `/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
         * @summary Get transaction data
         * @param {TransactionsGetRequest} transactionsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsGet(transactionsGetRequest: TransactionsGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionsGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsGet(transactionsGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/transactions/recurring/get` endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.  This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  This endpoint can only be called on an Item that has already been initialized with Transactions (either during Link, by specifying it in `/link/token/create`; or after Link, by calling `/transactions/get` or `/transactions/sync`). Once all historical transactions have been fetched, call `/transactions/recurring/get` to receive the Recurring Transactions streams and subscribe to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using `/transactions/sync` listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the `historical_update_complete` field in the payload is `true`. If using `/transactions/get`, listen for the [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.  After the initial call, you can call `/transactions/recurring/get` endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.
         * @summary Fetch recurring transaction streams
         * @param {TransactionsRecurringGetRequest} transactionsRecurringGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsRecurringGet(transactionsRecurringGetRequest: TransactionsRecurringGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionsRecurringGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsRecurringGet(transactionsRecurringGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * `/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling `/transactions/refresh`, Plaid will fire a webhook: for `/transactions/sync` users, [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both `/transactions/sync` and `/transactions/get`, [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/transactions/get` or `/transactions/sync`. Note that the `/transactions/refresh` endpoint is not supported for Capital One (`ins_128026`) and will result in a `PRODUCT_NOT_SUPPORTED` error if called on an Item from that institution.  `/transactions/refresh` is offered as an add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
         * @summary Refresh transaction data
         * @param {TransactionsRefreshRequest} transactionsRefreshRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsRefresh(transactionsRefreshRequest: TransactionsRefreshRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionsRefreshResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsRefresh(transactionsRefreshRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/transactions/rules/v1/create` endpoint creates transaction categorization rules.  Rules will be applied on the Item\'s transactions returned in `/transactions/get` response.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
         * @summary Create transaction category rule
         * @param {TransactionsRulesCreateRequest} transactionsRulesCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsRulesCreate(transactionsRulesCreateRequest: TransactionsRulesCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionsRulesCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsRulesCreate(transactionsRulesCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/transactions/rules/v1/list` returns a list of transaction rules created for the Item associated with the access token.
         * @summary Return a list of rules created for the Item associated with the access token.
         * @param {TransactionsRulesListRequest} transactionsRulesListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsRulesList(transactionsRulesListRequest: TransactionsRulesListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionsRulesListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsRulesList(transactionsRulesListRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/transactions/rules/v1/remove` endpoint is used to remove a transaction rule.
         * @summary Remove transaction rule
         * @param {TransactionsRulesRemoveRequest} transactionsRulesRemoveRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsRulesRemove(transactionsRulesRemoveRequest: TransactionsRulesRemoveRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionsRulesRemoveResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsRulesRemove(transactionsRulesRemoveRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint replaces `/transactions/get` and its associated webhooks for most common use-cases.  The `/transactions/sync` endpoint allows developers to subscribe to all transactions associated with an Item and get updates synchronously in a stream-like manner, using a cursor to track which updates have already been seen. `/transactions/sync` provides the same functionality as `/transactions/get` and can be used instead of `/transactions/get` to simplify the process of tracking transactions updates.  This endpoint provides user-authorized transaction data for `credit`, `depository`, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from `investments` accounts, use `/investments/transactions/get` instead.  Returned transactions data is grouped into three types of update, indicating whether the transaction was added, removed, or modified since the last call to the API.  In the first call to `/transactions/sync` for an Item, the endpoint will return all historical transactions data associated with that Item up until the time of the API call (as \"adds\"), which then generates a `next_cursor` for that Item. In subsequent calls, send the `next_cursor` to receive only the changes that have occurred since the previous call.  Due to the potentially large number of transactions associated with an Item, results are paginated. The `has_more` field specifies if additional calls are necessary to fetch all available transaction updates. Call `/transactions/sync` with the new cursor, pulling all updates, until `has_more` is `false`.  When retrieving paginated updates, track both the `next_cursor` from the latest response and the original cursor from the first call in which `has_more` was `true`; if a call to `/transactions/sync` fails due to the [`TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION`](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error, the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.  Whenever new or updated transaction data becomes available, `/transactions/sync` will provide these updates. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item\'s `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, use the `/transactions/refresh` endpoint.  Note that for newly created Items, data may not be immediately available to `/transactions/sync`. Plaid begins preparing transactions data when the Item is created, but the process can take anywhere from a few seconds to several minutes to complete, depending on the number of transactions available.  To be alerted when new data is available, listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) webhook.
         * @summary Get incremental transaction updates on an Item
         * @param {TransactionsSyncRequest} transactionsSyncRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsSync(transactionsSyncRequest: TransactionsSyncRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionsSyncResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsSync(transactionsSyncRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use the `/transfer/authorization/create` endpoint to determine transfer failure risk.  In Plaid\'s Sandbox environment the decisions will be returned as follows:    - To approve a transfer with null rationale code, make an authorization request with an `amount` less than the available balance in the account.    - To approve a transfer with the rationale code `MANUALLY_VERIFIED_ITEM`, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To approve a transfer with the rationale code `ITEM_LOGIN_REQUIRED`, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).    - To decline a transfer with the rationale code `NSF`, the available balance on the account must be less than the authorization `amount`. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code `RISK`, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.  The fields `device.ip_address` and `device.user_agent` are required for all sessions where the end-user is present. For example, when a user is authorizing a one-time payment from their device.
         * @summary Create a transfer authorization
         * @param {TransferAuthorizationCreateRequest} transferAuthorizationCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferAuthorizationCreate(transferAuthorizationCreateRequest: TransferAuthorizationCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferAuthorizationCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferAuthorizationCreate(transferAuthorizationCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use the `/transfer/balance/get` endpoint to view a balance held with Plaid.
         * @summary Retrieve a balance held with Plaid
         * @param {TransferBalanceGetRequest} transferBalanceGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferBalanceGet(transferBalanceGetRequest: TransferBalanceGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferBalanceGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferBalanceGet(transferBalanceGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use the `/transfer/cancel` endpoint to cancel a transfer.  A transfer is eligible for cancellation if the `cancellable` property returned by `/transfer/get` is `true`.
         * @summary Cancel a transfer
         * @param {TransferCancelRequest} transferCancelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferCancel(transferCancelRequest: TransferCancelRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferCancelResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferCancel(transferCancelRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use the `/transfer/capabilities/get` endpoint to determine the RTP eligibility information of a transfer.
         * @summary Get RTP eligibility information of a transfer
         * @param {TransferCapabilitiesGetRequest} transferCapabilitiesGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferCapabilitiesGet(transferCapabilitiesGetRequest: TransferCapabilitiesGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferCapabilitiesGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferCapabilitiesGet(transferCapabilitiesGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use the `/transfer/configuration/get` endpoint to view your transfer product configurations.
         * @summary Get transfer product configuration
         * @param {TransferConfigurationGetRequest} transferConfigurationGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferConfigurationGet(transferConfigurationGetRequest: TransferConfigurationGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferConfigurationGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferConfigurationGet(transferConfigurationGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use the `/transfer/create` endpoint to initiate a new transfer.
         * @summary Create a transfer
         * @param {TransferCreateRequest} transferCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferCreate(transferCreateRequest: TransferCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferCreate(transferCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Third-party sender customers can use `/transfer/diligence/document/upload` endpoint to upload a document on behalf of its end customer (i.e. originator) to Plaid. You’ll need to send a request of type multipart/form-data. You must provide the `client_id` in the `PLAID-CLIENT-ID` header and `secret` in the `PLAID-SECRET` header.
         * @summary This endpoint allows third-party sender customers to upload a document on behalf of its end customer (i.e. originator) to Plaid. You’ll need to send a request of type multipart/form-data.
         * @param {TransferDiligenceDocumentUploadRequest} transferDiligenceDocumentUploadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferDiligenceDocumentUpload(transferDiligenceDocumentUploadRequest: TransferDiligenceDocumentUploadRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferDiligenceDocumentUploadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferDiligenceDocumentUpload(transferDiligenceDocumentUploadRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use the `/transfer/diligence/submit` endpoint to submit transfer diligence on behalf of the originator.
         * @summary Submit transfer diligence on behalf of the end customer (i.e. the originator).
         * @param {TransferDiligenceSubmitRequest} transferDiligenceSubmitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferDiligenceSubmit(transferDiligenceSubmitRequest: TransferDiligenceSubmitRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferDiligenceSubmitResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferDiligenceSubmit(transferDiligenceSubmitRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use the `/transfer/event/list` endpoint to get a list of transfer events based on specified filter criteria.
         * @summary List transfer events
         * @param {TransferEventListRequest} transferEventListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferEventList(transferEventListRequest: TransferEventListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferEventListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferEventList(transferEventListRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * `/transfer/event/sync` allows you to request up to the next 25 transfer events that happened after a specific `event_id`. Use the `/transfer/event/sync` endpoint to guarantee you have seen all transfer events.
         * @summary Sync transfer events
         * @param {TransferEventSyncRequest} transferEventSyncRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferEventSync(transferEventSyncRequest: TransferEventSyncRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferEventSyncResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferEventSync(transferEventSyncRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/transfer/get` endpoint fetches information about the transfer corresponding to the given `transfer_id`.
         * @summary Retrieve a transfer
         * @param {TransferGetRequest} transferGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferGet(transferGetRequest: TransferGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferGet(transferGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use the `/transfer/intent/create` endpoint to generate a transfer intent object and invoke the Transfer UI.
         * @summary Create a transfer intent object to invoke the Transfer UI
         * @param {TransferIntentCreateRequest} transferIntentCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferIntentCreate(transferIntentCreateRequest: TransferIntentCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferIntentCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferIntentCreate(transferIntentCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use the `/transfer/intent/get` endpoint to retrieve more information about a transfer intent.
         * @summary Retrieve more information about a transfer intent
         * @param {{ [key: string]: object; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferIntentGet(requestBody: { [key: string]: object; }, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferIntentGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferIntentGet(requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use the `/transfer/list` endpoint to see a list of all your transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired transfers. 
         * @summary List transfers
         * @param {TransferListRequest} transferListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferList(transferListRequest: TransferListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferList(transferListRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use the `/transfer/metrics/get` endpoint to view your transfer product usage metrics.
         * @summary Get transfer product usage metrics
         * @param {TransferMetricsGetRequest} transferMetricsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferMetricsGet(transferMetricsGetRequest: TransferMetricsGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferMetricsGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferMetricsGet(transferMetricsGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * As an alternative to adding Items via Link, you can also use the `/transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
         * @summary Migrate account into Transfers
         * @param {TransferMigrateAccountRequest} transferMigrateAccountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferMigrateAccount(transferMigrateAccountRequest: TransferMigrateAccountRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferMigrateAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferMigrateAccount(transferMigrateAccountRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use the `/transfer/originator/create` endpoint to create a new originator and return an `originator_client_id`.
         * @summary Create a new originator
         * @param {TransferOriginatorCreateRequest} transferOriginatorCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferOriginatorCreate(transferOriginatorCreateRequest: TransferOriginatorCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferOriginatorCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferOriginatorCreate(transferOriginatorCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/transfer/originator/get` endpoint gets status updates for an originator\'s onboarding process. This information is also available via the Transfer page on the Plaid dashboard.
         * @summary Get status of an originator\'s onboarding
         * @param {TransferOriginatorGetRequest} transferOriginatorGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferOriginatorGet(transferOriginatorGetRequest: TransferOriginatorGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferOriginatorGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferOriginatorGet(transferOriginatorGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/transfer/originator/list` endpoint gets status updates for all of your originators\' onboarding. This information is also available via the Plaid dashboard.
         * @summary Get status of all originators\' onboarding
         * @param {TransferOriginatorListRequest} transferOriginatorListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferOriginatorList(transferOriginatorListRequest: TransferOriginatorListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferOriginatorListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferOriginatorList(transferOriginatorListRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/transfer/questionnaire/create` endpoint generates a Plaid-hosted onboarding UI URL. Redirect the originator to this URL to provide their due diligence information and agree to Plaid’s terms for ACH money movement.
         * @summary Generate a Plaid-hosted onboarding UI URL.
         * @param {TransferQuestionnaireCreateRequest} transferQuestionnaireCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferQuestionnaireCreate(transferQuestionnaireCreateRequest: TransferQuestionnaireCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferQuestionnaireCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferQuestionnaireCreate(transferQuestionnaireCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use the `/transfer/recurring/cancel` endpoint to cancel a recurring transfer.  Scheduled transfer that hasn\'t been submitted to bank will be cancelled.
         * @summary Cancel a recurring transfer.
         * @param {TransferRecurringCancelRequest} transferRecurringCancelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferRecurringCancel(transferRecurringCancelRequest: TransferRecurringCancelRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferRecurringCancelResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferRecurringCancel(transferRecurringCancelRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use the `/transfer/recurring/create` endpoint to initiate a new recurring transfer.
         * @summary Create a recurring transfer
         * @param {TransferRecurringCreateRequest} transferRecurringCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferRecurringCreate(transferRecurringCreateRequest: TransferRecurringCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferRecurringCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferRecurringCreate(transferRecurringCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/transfer/recurring/get` fetches information about the recurring transfer corresponding to the given `recurring_transfer_id`.
         * @summary Retrieve a recurring transfer
         * @param {TransferRecurringGetRequest} transferRecurringGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferRecurringGet(transferRecurringGetRequest: TransferRecurringGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferRecurringGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferRecurringGet(transferRecurringGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use the `/transfer/recurring/list` endpoint to see a list of all your recurring transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired recurring transfers. 
         * @summary List recurring transfers
         * @param {TransferRecurringListRequest} transferRecurringListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferRecurringList(transferRecurringListRequest: TransferRecurringListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferRecurringListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferRecurringList(transferRecurringListRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use the `/transfer/refund/cancel` endpoint to cancel a refund.  A refund is eligible for cancellation if it has not yet been submitted to the payment network.
         * @summary Cancel a refund
         * @param {TransferRefundCancelRequest} transferRefundCancelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferRefundCancel(transferRefundCancelRequest: TransferRefundCancelRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferRefundCancelResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferRefundCancel(transferRefundCancelRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use the `/transfer/refund/create` endpoint to create a refund for a transfer. A transfer can be refunded if the transfer was initiated in the past 180 days.  Processing of the refund will not occur until at least 3 business days following the transfer\'s settlement date, plus any hold/settlement delays. This 3-day window helps better protect your business from regular ACH returns. Consumer initiated returns (unauthorized returns) could still happen for about 60 days from the settlement date. If the original transfer is canceled, returned or failed, all pending refunds will automatically be canceled. Processed refunds cannot be revoked.
         * @summary Create a refund
         * @param {TransferRefundCreateRequest} transferRefundCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferRefundCreate(transferRefundCreateRequest: TransferRefundCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferRefundCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferRefundCreate(transferRefundCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/transfer/refund/get` endpoint fetches information about the refund corresponding to the given `refund_id`.
         * @summary Retrieve a refund
         * @param {TransferRefundGetRequest} transferRefundGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferRefundGet(transferRefundGetRequest: TransferRefundGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferRefundGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferRefundGet(transferRefundGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/transfer/repayment/list` endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given `start_time`.
         * @summary Lists historical repayments
         * @param {TransferRepaymentListRequest} transferRepaymentListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferRepaymentList(transferRepaymentListRequest: TransferRepaymentListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferRepaymentListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferRepaymentList(transferRepaymentListRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/transfer/repayment/return/list` endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.
         * @summary List the returns included in a repayment
         * @param {TransferRepaymentReturnListRequest} transferRepaymentReturnListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferRepaymentReturnList(transferRepaymentReturnListRequest: TransferRepaymentReturnListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferRepaymentReturnListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferRepaymentReturnList(transferRepaymentReturnListRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/transfer/sweep/get` endpoint fetches a sweep corresponding to the given `sweep_id`.
         * @summary Retrieve a sweep
         * @param {TransferSweepGetRequest} transferSweepGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferSweepGet(transferSweepGetRequest: TransferSweepGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferSweepGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferSweepGet(transferSweepGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/transfer/sweep/list` endpoint fetches sweeps matching the given filters.
         * @summary List sweeps
         * @param {TransferSweepListRequest} transferSweepListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferSweepList(transferSweepListRequest: TransferSweepListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferSweepListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferSweepList(transferSweepListRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint should be called for each of your end users before they begin a Plaid income flow. This provides you a single token to access all income data associated with the user. You should only create one per end user.  If you call the endpoint multiple times with the same `client_user_id`, the first creation call will succeed and the rest will fail with an error message indicating that the user has been created for the given `client_user_id`.  Ensure that you store the `user_token` along with your user\'s identifier in your database, as it is not possible to retrieve a previously created `user_token`.
         * @summary Create user
         * @param {UserCreateRequest} userCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userCreate(userCreateRequest: UserCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userCreate(userCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create an e-wallet. The response is the newly created e-wallet object.
         * @summary Create an e-wallet
         * @param {WalletCreateRequest} walletCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletCreate(walletCreateRequest: WalletCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletCreate(walletCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch an e-wallet. The response includes the current balance.
         * @summary Fetch an e-wallet
         * @param {WalletGetRequest} walletGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletGet(walletGetRequest: WalletGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletGet(walletGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint lists all e-wallets in descending order of creation.
         * @summary Fetch a list of e-wallets
         * @param {WalletListRequest} walletListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletList(walletListRequest: WalletListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletList(walletListRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate transactions, the amount and reference for the transaction. Transactions will settle in seconds to several days, depending on the underlying payment rail.
         * @summary Execute a transaction using an e-wallet
         * @param {WalletTransactionExecuteRequest} walletTransactionExecuteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletTransactionExecute(walletTransactionExecuteRequest: WalletTransactionExecuteRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletTransactionExecuteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletTransactionExecute(walletTransactionExecuteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch a specific e-wallet transaction
         * @summary Fetch an e-wallet transaction
         * @param {WalletTransactionGetRequest} walletTransactionGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletTransactionGet(walletTransactionGetRequest: WalletTransactionGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletTransactionGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletTransactionGet(walletTransactionGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the `created_at` time.
         * @summary List e-wallet transactions
         * @param {WalletTransactionListRequest} walletTransactionListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletTransactionList(walletTransactionListRequest: WalletTransactionListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletTransactionListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletTransactionList(walletTransactionListRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new entity watchlist screening to check your customer against watchlists defined in the associated entity watchlist program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
         * @summary Create a watchlist screening for an entity
         * @param {WatchlistScreeningEntityCreateRequest} watchlistScreeningEntityCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async watchlistScreeningEntityCreate(watchlistScreeningEntityCreateRequest: WatchlistScreeningEntityCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WatchlistScreeningEntityCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.watchlistScreeningEntityCreate(watchlistScreeningEntityCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve an entity watchlist screening.
         * @summary Get an entity screening
         * @param {WatchlistScreeningEntityGetRequest} watchlistScreeningEntityGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async watchlistScreeningEntityGet(watchlistScreeningEntityGetRequest: WatchlistScreeningEntityGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WatchlistScreeningEntityGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.watchlistScreeningEntityGet(watchlistScreeningEntityGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all changes to the entity watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
         * @summary List history for entity watchlist screenings
         * @param {WatchlistScreeningEntityHistoryListRequest} watchlistScreeningEntityHistoryListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async watchlistScreeningEntityHistoryList(watchlistScreeningEntityHistoryListRequest: WatchlistScreeningEntityHistoryListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WatchlistScreeningEntityHistoryListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.watchlistScreeningEntityHistoryList(watchlistScreeningEntityHistoryListRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all hits for the entity watchlist screening.
         * @summary List hits for entity watchlist screenings
         * @param {WatchlistScreeningEntityHitListRequest} watchlistScreeningEntityHitListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async watchlistScreeningEntityHitList(watchlistScreeningEntityHitListRequest: WatchlistScreeningEntityHitListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WatchlistScreeningEntityHitListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.watchlistScreeningEntityHitList(watchlistScreeningEntityHitListRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all entity screenings.
         * @summary List entity watchlist screenings
         * @param {WatchlistScreeningEntityListRequest} watchlistScreeningEntityListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async watchlistScreeningEntityList(watchlistScreeningEntityListRequest: WatchlistScreeningEntityListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WatchlistScreeningEntityListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.watchlistScreeningEntityList(watchlistScreeningEntityListRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an entity watchlist screening program
         * @summary Get entity watchlist screening program
         * @param {WatchlistScreeningEntityProgramGetRequest} watchlistScreeningEntityProgramGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async watchlistScreeningEntityProgramGet(watchlistScreeningEntityProgramGetRequest: WatchlistScreeningEntityProgramGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WatchlistScreeningEntityProgramGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.watchlistScreeningEntityProgramGet(watchlistScreeningEntityProgramGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all entity watchlist screening programs
         * @summary List entity watchlist screening programs
         * @param {WatchlistScreeningEntityProgramListRequest} watchlistScreeningEntityProgramListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async watchlistScreeningEntityProgramList(watchlistScreeningEntityProgramListRequest: WatchlistScreeningEntityProgramListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WatchlistScreeningEntityProgramListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.watchlistScreeningEntityProgramList(watchlistScreeningEntityProgramListRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a review for an entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
         * @summary Create a review for an entity watchlist screening
         * @param {WatchlistScreeningEntityReviewCreateRequest} watchlistScreeningEntityReviewCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async watchlistScreeningEntityReviewCreate(watchlistScreeningEntityReviewCreateRequest: WatchlistScreeningEntityReviewCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WatchlistScreeningEntityReviewCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.watchlistScreeningEntityReviewCreate(watchlistScreeningEntityReviewCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all reviews for a particular entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
         * @summary List reviews for entity watchlist screenings
         * @param {WatchlistScreeningEntityReviewListRequest} watchlistScreeningEntityReviewListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async watchlistScreeningEntityReviewList(watchlistScreeningEntityReviewListRequest: WatchlistScreeningEntityReviewListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WatchlistScreeningEntityReviewListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.watchlistScreeningEntityReviewList(watchlistScreeningEntityReviewListRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an entity watchlist screening.
         * @summary Update an entity screening
         * @param {WatchlistScreeningEntityUpdateRequest} watchlistScreeningEntityUpdateRequest The entity screening was successfully updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async watchlistScreeningEntityUpdate(watchlistScreeningEntityUpdateRequest: WatchlistScreeningEntityUpdateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WatchlistScreeningEntityUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.watchlistScreeningEntityUpdate(watchlistScreeningEntityUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new Watchlist Screening to check your customer against watchlists defined in the associated Watchlist Program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
         * @summary Create a watchlist screening for a person
         * @param {WatchlistScreeningIndividualCreateRequest} watchlistScreeningIndividualCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async watchlistScreeningIndividualCreate(watchlistScreeningIndividualCreateRequest: WatchlistScreeningIndividualCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WatchlistScreeningIndividualCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.watchlistScreeningIndividualCreate(watchlistScreeningIndividualCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a previously created individual watchlist screening
         * @summary Retrieve an individual watchlist screening
         * @param {WatchlistScreeningIndividualGetRequest} watchlistScreeningIndividualGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async watchlistScreeningIndividualGet(watchlistScreeningIndividualGetRequest: WatchlistScreeningIndividualGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WatchlistScreeningIndividualGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.watchlistScreeningIndividualGet(watchlistScreeningIndividualGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all changes to the individual watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
         * @summary List history for individual watchlist screenings
         * @param {WatchlistScreeningIndividualHistoryListRequest} watchlistScreeningIndividualHistoryListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async watchlistScreeningIndividualHistoryList(watchlistScreeningIndividualHistoryListRequest: WatchlistScreeningIndividualHistoryListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WatchlistScreeningIndividualHistoryListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.watchlistScreeningIndividualHistoryList(watchlistScreeningIndividualHistoryListRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all hits found by Plaid for a particular individual watchlist screening.
         * @summary List hits for individual watchlist screening
         * @param {WatchlistScreeningIndividualHitListRequest} watchlistScreeningIndividualHitListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async watchlistScreeningIndividualHitList(watchlistScreeningIndividualHitListRequest: WatchlistScreeningIndividualHitListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WatchlistScreeningIndividualHitListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.watchlistScreeningIndividualHitList(watchlistScreeningIndividualHitListRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List previously created watchlist screenings for individuals
         * @summary List Individual Watchlist Screenings
         * @param {WatchlistScreeningIndividualListRequest} watchlistScreeningIndividualListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async watchlistScreeningIndividualList(watchlistScreeningIndividualListRequest: WatchlistScreeningIndividualListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WatchlistScreeningIndividualListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.watchlistScreeningIndividualList(watchlistScreeningIndividualListRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an individual watchlist screening program
         * @summary Get individual watchlist screening program
         * @param {WatchlistScreeningIndividualProgramGetRequest} watchlistScreeningIndividualProgramGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async watchlistScreeningIndividualProgramGet(watchlistScreeningIndividualProgramGetRequest: WatchlistScreeningIndividualProgramGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WatchlistScreeningIndividualProgramGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.watchlistScreeningIndividualProgramGet(watchlistScreeningIndividualProgramGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all individual watchlist screening programs
         * @summary List individual watchlist screening programs
         * @param {WatchlistScreeningIndividualProgramListRequest} watchlistScreeningIndividualProgramListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async watchlistScreeningIndividualProgramList(watchlistScreeningIndividualProgramListRequest: WatchlistScreeningIndividualProgramListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WatchlistScreeningIndividualProgramListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.watchlistScreeningIndividualProgramList(watchlistScreeningIndividualProgramListRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a review for the individual watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
         * @summary Create a review for an individual watchlist screening
         * @param {WatchlistScreeningIndividualReviewCreateRequest} watchlistScreeningIndividualReviewCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async watchlistScreeningIndividualReviewCreate(watchlistScreeningIndividualReviewCreateRequest: WatchlistScreeningIndividualReviewCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WatchlistScreeningIndividualReviewCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.watchlistScreeningIndividualReviewCreate(watchlistScreeningIndividualReviewCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all reviews for the individual watchlist screening.
         * @summary List reviews for individual watchlist screenings
         * @param {WatchlistScreeningIndividualReviewListRequest} watchlistScreeningIndividualReviewListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async watchlistScreeningIndividualReviewList(watchlistScreeningIndividualReviewListRequest: WatchlistScreeningIndividualReviewListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WatchlistScreeningIndividualReviewListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.watchlistScreeningIndividualReviewList(watchlistScreeningIndividualReviewListRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a specific individual watchlist screening. This endpoint can be used to add additional customer information, correct outdated information, add a reference id, assign the individual to a reviewer, and update which program it is associated with. Please note that you may not update `search_terms` and `status` at the same time since editing `search_terms` may trigger an automatic `status` change.
         * @summary Update individual watchlist screening
         * @param {WatchlistScreeningIndividualUpdateRequest} watchlistScreeningIndividualUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async watchlistScreeningIndividualUpdate(watchlistScreeningIndividualUpdateRequest: WatchlistScreeningIndividualUpdateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WatchlistScreeningIndividualUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.watchlistScreeningIndividualUpdate(watchlistScreeningIndividualUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the `Plaid-Verification` header.  The `/webhook_verification_key/get` endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
         * @summary Get webhook verification key
         * @param {WebhookVerificationKeyGetRequest} webhookVerificationKeyGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhookVerificationKeyGet(webhookVerificationKeyGetRequest: WebhookVerificationKeyGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookVerificationKeyGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookVerificationKeyGet(webhookVerificationKeyGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PlaidApi - factory interface
 * @export
 */
export const PlaidApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlaidApiFp(configuration)
    return {
        /**
         * The `/accounts/balance/get` endpoint returns the real-time balance for each of an Item\'s accounts. While other endpoints may return a balance object, only `/accounts/balance/get` forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, `balance` itself is not a product that can be used to initialize Link. As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints; if you encounter errors, you may find it necessary to adjust your timeout period when making requests.
         * @summary Retrieve real-time balance data
         * @param {AccountsBalanceGetRequest} accountsBalanceGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsBalanceGet(accountsBalanceGetRequest: AccountsBalanceGetRequest, options?: any): AxiosPromise<AccountsGetResponse> {
            return localVarFp.accountsBalanceGet(accountsBalanceGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/accounts/get` endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance. For items that went through the updated account selection pane, this endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [`NEW_ACCOUNTS_AVAILABLE`](https://plaid.com/docs/api/items/#new_accounts_available) webhook and then use Link\'s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, balances returned may not be up-to-date; for realtime balance information, use `/accounts/balance/get` instead. Note that some information is nullable.
         * @summary Retrieve accounts
         * @param {AccountsGetRequest} accountsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsGet(accountsGetRequest: AccountsGetRequest, options?: any): AxiosPromise<AccountsGetResponse> {
            return localVarFp.accountsGet(accountsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences
         * @summary Retrieve information about a Plaid application
         * @param {ApplicationGetRequest} applicationGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationGet(applicationGetRequest: ApplicationGetRequest, options?: any): AxiosPromise<ApplicationGetResponse> {
            return localVarFp.applicationGet(applicationGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the `/asset_report/audit_copy/create` endpoint to create an `audit_copy_token` and then pass that token to the third party who needs access. Each third party has its own `auditor_id`, for example `fannie_mae`. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
         * @summary Create Asset Report Audit Copy
         * @param {AssetReportAuditCopyCreateRequest} assetReportAuditCopyCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportAuditCopyCreate(assetReportAuditCopyCreateRequest: AssetReportAuditCopyCreateRequest, options?: any): AxiosPromise<AssetReportAuditCopyCreateResponse> {
            return localVarFp.assetReportAuditCopyCreate(assetReportAuditCopyCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/asset_report/audit_copy/get` allows auditors to get a copy of an Asset Report that was previously shared via the `/asset_report/audit_copy/create` endpoint.  The caller of `/asset_report/audit_copy/create` must provide the `audit_copy_token` to the auditor.  This token can then be used to call `/asset_report/audit_copy/create`.
         * @summary Retrieve an Asset Report Audit Copy
         * @param {AssetReportAuditCopyGetRequest} assetReportAuditCopyGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportAuditCopyGet(assetReportAuditCopyGetRequest: AssetReportAuditCopyGetRequest, options?: any): AxiosPromise<AssetReportGetResponse> {
            return localVarFp.assetReportAuditCopyGet(assetReportAuditCopyGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/asset_report/audit_copy/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
         * @summary Remove Asset Report Audit Copy
         * @param {AssetReportAuditCopyRemoveRequest} assetReportAuditCopyRemoveRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportAuditCopyRemove(assetReportAuditCopyRemoveRequest: AssetReportAuditCopyRemoveRequest, options?: any): AxiosPromise<AssetReportAuditCopyRemoveResponse> {
            return localVarFp.assetReportAuditCopyRemove(assetReportAuditCopyRemoveRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/asset_report/create` endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the `asset_report_token` return value to the `/asset_report/get` or `/asset_report/pdf/get` endpoints.  The Asset Report takes some time to be created and is not available immediately after calling `/asset_report/create`. When the Asset Report is ready to be retrieved using `/asset_report/get` or `/asset_report/pdf/get`, Plaid will fire a `PRODUCT_READY` webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/products/assets/#webhooks).  The `/asset_report/create` endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the `/asset_report/refresh` endpoint.
         * @summary Create an Asset Report
         * @param {AssetReportCreateRequest} assetReportCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportCreate(assetReportCreateRequest: AssetReportCreateRequest, options?: any): AxiosPromise<AssetReportCreateResponse> {
            return localVarFp.assetReportCreate(assetReportCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the `/accounts/get` endpoint. To narrow an Asset Report to only a subset of accounts, use the `/asset_report/filter` endpoint.  To exclude certain Accounts from an Asset Report, first use the `/asset_report/create` endpoint to create the report, then send the `asset_report_token` along with a list of `account_ids` to exclude to the `/asset_report/filter` endpoint, to create a new Asset Report which contains only a subset of the original Asset Report\'s data.  Because Asset Reports are immutable, calling `/asset_report/filter` does not alter the original Asset Report in any way; rather, `/asset_report/filter` creates a new Asset Report with a new token and id. Asset Reports created via `/asset_report/filter` do not contain new Asset data, and are not billed.  Plaid will fire a [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook once generation of the filtered Asset Report has completed.
         * @summary Filter Asset Report
         * @param {AssetReportFilterRequest} assetReportFilterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportFilter(assetReportFilterRequest: AssetReportFilterRequest, options?: any): AxiosPromise<AssetReportFilterResponse> {
            return localVarFp.assetReportFilter(assetReportFilterRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/asset_report/get` endpoint retrieves the Asset Report in JSON format. Before calling `/asset_report/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report.  If report_type was set to `VERIFICATION_OF_EMPLOYMENT` when the Asset Report was created in asset_report/create, debit transactions and transaction amounts won’t be included in the report.  To retrieve an Asset Report with Insights, call the `/asset_report/get` endpoint with `include_insights` set to `true`.
         * @summary Retrieve an Asset Report
         * @param {AssetReportGetRequest} assetReportGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportGet(assetReportGetRequest: AssetReportGetRequest, options?: any): AxiosPromise<AssetReportGetResponse> {
            return localVarFp.assetReportGet(assetReportGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/asset_report/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/asset_report/pdf/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/asset_report/pdf/get` is the PDF binary data. The `request_id`  is returned in the `Plaid-Request-ID` header.  If `report_type` was set to `VERIFICATION_OF_EMPLOYMENT` when the Asset Report was created in `/asset_report/create`, debit transactions and transaction amounts won’t be included in the report.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
         * @summary Retrieve a PDF Asset Report
         * @param {AssetReportPDFGetRequest} assetReportPDFGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportPdfGet(assetReportPDFGetRequest: AssetReportPDFGetRequest, options?: any): AxiosPromise<any> {
            return localVarFp.assetReportPdfGet(assetReportPDFGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * An Asset Report is an immutable snapshot of a user\'s assets. In order to \"refresh\" an Asset Report you created previously, you can use the `/asset_report/refresh` endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to `/asset_report/filter`. By default, the new Asset Report will also use the same parameters you submitted with your original `/asset_report/create` request, but the original `days_requested` value and the values of any parameters in the `options` object can be overridden with new values. To change these arguments, simply supply new values for them in your request to `/asset_report/refresh`. Submit an empty string (\"\") for any previously-populated fields you would like set as empty.
         * @summary Refresh an Asset Report
         * @param {AssetReportRefreshRequest} assetReportRefreshRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportRefresh(assetReportRefreshRequest: AssetReportRefreshRequest, options?: any): AxiosPromise<AssetReportRefreshResponse> {
            return localVarFp.assetReportRefresh(assetReportRefreshRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/item/remove` endpoint allows you to invalidate an `access_token`, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The `/asset_report/remove` endpoint allows you to remove an Asset Report. Removing an Asset Report invalidates its `asset_report_token`, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any `audit_copy_tokens` associated with the Asset Report.
         * @summary Delete an Asset Report
         * @param {AssetReportRemoveRequest} assetReportRemoveRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportRemove(assetReportRemoveRequest: AssetReportRemoveRequest, options?: any): AxiosPromise<AssetReportRemoveResponse> {
            return localVarFp.assetReportRemove(assetReportRemoveRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/auth/get` endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item\'s checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if `auth` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Versioning note: In API version 2017-03-08, the schema of the `numbers` object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
         * @summary Retrieve auth data
         * @param {AuthGetRequest} authGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGet(authGetRequest: AuthGetRequest, options?: any): AxiosPromise<AuthGetResponse> {
            return localVarFp.authGet(authGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/bank_transfer/balance/get` endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
         * @summary Get balance of your Bank Transfer account
         * @param {BankTransferBalanceGetRequest} bankTransferBalanceGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferBalanceGet(bankTransferBalanceGetRequest: BankTransferBalanceGetRequest, options?: any): AxiosPromise<BankTransferBalanceGetResponse> {
            return localVarFp.bankTransferBalanceGet(bankTransferBalanceGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/bank_transfer/cancel` endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/bank_transfer/get` is `true`.
         * @summary Cancel a bank transfer
         * @param {BankTransferCancelRequest} bankTransferCancelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferCancel(bankTransferCancelRequest: BankTransferCancelRequest, options?: any): AxiosPromise<BankTransferCancelResponse> {
            return localVarFp.bankTransferCancel(bankTransferCancelRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/bank_transfer/create` endpoint to initiate a new bank transfer.
         * @summary Create a bank transfer
         * @param {BankTransferCreateRequest} bankTransferCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferCreate(bankTransferCreateRequest: BankTransferCreateRequest, options?: any): AxiosPromise<BankTransferCreateResponse> {
            return localVarFp.bankTransferCreate(bankTransferCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/bank_transfer/event/list` endpoint to get a list of Plaid-initiated ACH or bank transfer events based on specified filter criteria. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://plaid.com/docs/auth/coverage/microdeposit-events/).
         * @summary List bank transfer events
         * @param {BankTransferEventListRequest} bankTransferEventListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferEventList(bankTransferEventListRequest: BankTransferEventListRequest, options?: any): AxiosPromise<BankTransferEventListResponse> {
            return localVarFp.bankTransferEventList(bankTransferEventListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/bank_transfer/event/sync` allows you to request up to the next 25 Plaid-initiated bank transfer events that happened after a specific `event_id`. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://www.plaid.com/docs/auth/coverage/microdeposit-events/).
         * @summary Sync bank transfer events
         * @param {BankTransferEventSyncRequest} bankTransferEventSyncRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferEventSync(bankTransferEventSyncRequest: BankTransferEventSyncRequest, options?: any): AxiosPromise<BankTransferEventSyncResponse> {
            return localVarFp.bankTransferEventSync(bankTransferEventSyncRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/bank_transfer/get` fetches information about the bank transfer corresponding to the given `bank_transfer_id`.
         * @summary Retrieve a bank transfer
         * @param {BankTransferGetRequest} bankTransferGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferGet(bankTransferGetRequest: BankTransferGetRequest, options?: any): AxiosPromise<BankTransferGetResponse> {
            return localVarFp.bankTransferGet(bankTransferGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/bank_transfer/list` endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired bank transfers. 
         * @summary List bank transfers
         * @param {BankTransferListRequest} bankTransferListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferList(bankTransferListRequest: BankTransferListRequest, options?: any): AxiosPromise<BankTransferListResponse> {
            return localVarFp.bankTransferList(bankTransferListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * As an alternative to adding Items via Link, you can also use the `/bank_transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/bank_transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
         * @summary Migrate account into Bank Transfers
         * @param {BankTransferMigrateAccountRequest} bankTransferMigrateAccountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferMigrateAccount(bankTransferMigrateAccountRequest: BankTransferMigrateAccountRequest, options?: any): AxiosPromise<BankTransferMigrateAccountResponse> {
            return localVarFp.bankTransferMigrateAccount(bankTransferMigrateAccountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/bank_transfer/sweep/get` endpoint fetches information about the sweep corresponding to the given `sweep_id`.
         * @summary Retrieve a sweep
         * @param {BankTransferSweepGetRequest} bankTransferSweepGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferSweepGet(bankTransferSweepGetRequest: BankTransferSweepGetRequest, options?: any): AxiosPromise<BankTransferSweepGetResponse> {
            return localVarFp.bankTransferSweepGet(bankTransferSweepGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/bank_transfer/sweep/list` endpoint fetches information about the sweeps matching the given filters.
         * @summary List sweeps
         * @param {BankTransferSweepListRequest} bankTransferSweepListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferSweepList(bankTransferSweepListRequest: BankTransferSweepListRequest, options?: any): AxiosPromise<BankTransferSweepListResponse> {
            return localVarFp.bankTransferSweepList(bankTransferSweepListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Send a request to the `/categories/get` endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.  All implementations are recommended to use the newer `personal_finance_category` taxonomy instead of the older `category` taxonomy supported by this endpoint. The [`personal_finance_category taxonomy` CSV file](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) is available for download and is not accessible via API.
         * @summary Get categories
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriesGet(body: object, options?: any): AxiosPromise<CategoriesGetResponse> {
            return localVarFp.categoriesGet(body, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/payment_initiation/payment/token/create` endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, `link_token`-based flow. The recommended flow is to provide the `payment_id` to `/link/token/create`, which returns a `link_token` used to initialize Link.  The `/payment_initiation/payment/token/create` is used to create a `payment_token`, which can then be used in Link initialization to enter a payment initiation flow. You can only use a `payment_token` once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
         * @summary Create payment token
         * @param {PaymentInitiationPaymentTokenCreateRequest} paymentInitiationPaymentTokenCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPaymentToken(paymentInitiationPaymentTokenCreateRequest: PaymentInitiationPaymentTokenCreateRequest, options?: any): AxiosPromise<PaymentInitiationPaymentTokenCreateResponse> {
            return localVarFp.createPaymentToken(paymentInitiationPaymentTokenCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `credit/asset_report/freddie_mac/get` endpoint retrieves the Asset Report in Freddie Mac\'s JSON format.
         * @summary Retrieve an Asset Report with Freddie Mac format. Only Freddie Mac can use this endpoint.
         * @param {{ [key: string]: object; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditAssetReportFreddieMacGet(requestBody: { [key: string]: object; }, options?: any): AxiosPromise<AssetReportFreddieGetResponse> {
            return localVarFp.creditAssetReportFreddieMacGet(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Plaid can create an Audit Copy token of an Asset Report and/or Income Report to share with participating Government Sponsored Entity (GSE). If you participate in the Day 1 Certainty™ program, Plaid can supply an Audit Copy token directly to Fannie Mae on your behalf. An Audit Copy token contains the same underlying data as the Asset Report and/or Income Report (result of /credit/payroll_income/get).  Use the `/credit/audit_copy_token/create` endpoint to create an `audit_copy_token` and then pass that token to the GSE who needs access.
         * @summary Create Asset or Income Report Audit Copy Token
         * @param {CreditAuditCopyTokenCreateRequest} creditAuditCopyTokenCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditAuditCopyTokenCreate(creditAuditCopyTokenCreateRequest: CreditAuditCopyTokenCreateRequest, options?: any): AxiosPromise<CreditAuditCopyTokenCreateResponse> {
            return localVarFp.creditAuditCopyTokenCreate(creditAuditCopyTokenCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/credit/audit_copy_token/update` endpoint updates an existing  Audit Copy Token by adding the report tokens in the `report_tokens` field to the `audit_copy_token`. If the Audit Copy Token already contains a report of a certain type, it will be replaced with the token provided in the `report_tokens` field.
         * @summary Update an Audit Copy Token
         * @param {CreditAuditCopyTokenUpdateRequest} creditAuditCopyTokenUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditAuditCopyTokenUpdate(creditAuditCopyTokenUpdateRequest: CreditAuditCopyTokenUpdateRequest, options?: any): AxiosPromise<CreditAuditCopyTokenUpdateResponse> {
            return localVarFp.creditAuditCopyTokenUpdate(creditAuditCopyTokenUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/credit/bank_employment/get` returns the employment report(s) derived from bank transaction data for a specified user.
         * @summary Retrieve information from the bank accounts used for employment verification
         * @param {CreditBankEmploymentGetRequest} creditBankEmploymentGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankEmploymentGet(creditBankEmploymentGetRequest: CreditBankEmploymentGetRequest, options?: any): AxiosPromise<CreditBankEmploymentGetResponse> {
            return localVarFp.creditBankEmploymentGet(creditBankEmploymentGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/credit/bank_income/get` returns the bank income report(s) for a specified user.
         * @summary Retrieve information from the bank accounts used for income verification
         * @param {CreditBankIncomeGetRequest} creditBankIncomeGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankIncomeGet(creditBankIncomeGetRequest: CreditBankIncomeGetRequest, options?: any): AxiosPromise<CreditBankIncomeGetResponse> {
            return localVarFp.creditBankIncomeGet(creditBankIncomeGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/credit/bank_income/pdf/get` returns the most recent bank income report for a specified user in PDF format.
         * @summary Retrieve information from the bank accounts used for income verification in PDF format
         * @param {CreditBankIncomePDFGetRequest} creditBankIncomePDFGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankIncomePdfGet(creditBankIncomePDFGetRequest: CreditBankIncomePDFGetRequest, options?: any): AxiosPromise<any> {
            return localVarFp.creditBankIncomePdfGet(creditBankIncomePDFGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/credit/bank_income/refresh` refreshes the bank income report data for a specific user.
         * @summary Refresh a user\'s bank income information
         * @param {CreditBankIncomeRefreshRequest} creditBankIncomeRefreshRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankIncomeRefresh(creditBankIncomeRefreshRequest: CreditBankIncomeRefreshRequest, options?: any): AxiosPromise<CreditBankIncomeRefreshResponse> {
            return localVarFp.creditBankIncomeRefresh(creditBankIncomeRefreshRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/credit/bank_income/webhook/update` allows you to subscribe or unsubscribe a user for income webhook notifications.  If a user is subscribed, on significant changes to the user\'s income profile, you will receive a `BANK_INCOME_REFRESH_UPDATE` webhook, prompting you to refresh bank income data for the user.
         * @summary Subscribe and unsubscribe to proactive notifications for a user\'s income profile
         * @param {CreditBankIncomeWebhookUpdateRequest} creditBankIncomeWebhookUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankIncomeWebhookUpdate(creditBankIncomeWebhookUpdateRequest: CreditBankIncomeWebhookUpdateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.creditBankIncomeWebhookUpdate(creditBankIncomeWebhookUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/credit/bank_statements/uploads/get` returns data from user-uploaded bank statements.
         * @summary Retrieve data for a user\'s uploaded bank statements
         * @param {CreditBankStatementsUploadsGetRequest} creditBankStatementsUploadsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankStatementsUploadsGet(creditBankStatementsUploadsGetRequest: CreditBankStatementsUploadsGetRequest, options?: any): AxiosPromise<CreditBankStatementsUploadsGetResponse> {
            return localVarFp.creditBankStatementsUploadsGet(creditBankStatementsUploadsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/credit/employment/get` returns a list of items with employment information from a user\'s payroll provider that was verified by an end user.
         * @summary Retrieve a summary of an individual\'s employment information
         * @param {CreditEmploymentGetRequest} creditEmploymentGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditEmploymentGet(creditEmploymentGetRequest: CreditEmploymentGetRequest, options?: any): AxiosPromise<CreditEmploymentGetResponse> {
            return localVarFp.creditEmploymentGet(creditEmploymentGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `credit/asset_report/freddie_mac/get` endpoint retrieves the Verification of Assets and Verification of Employment reports.
         * @summary Retrieve an Asset Report with Freddie Mac format (aka VOA - Verification Of Assets), and a Verification Of Employment (VOE) report if this one is available. Only Freddie Mac can use this endpoint.
         * @param {CreditFreddieMacReportsGetRequest} creditFreddieMacReportsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditFreddieMacReportsGet(creditFreddieMacReportsGetRequest: CreditFreddieMacReportsGetRequest, options?: any): AxiosPromise<CreditFreddieMacReportsGetResponse> {
            return localVarFp.creditFreddieMacReportsGet(creditFreddieMacReportsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint gets payroll income information for a specific user, either as a result of the user connecting to their payroll provider or uploading a pay related document.
         * @summary Retrieve a user\'s payroll information
         * @param {CreditPayrollIncomeGetRequest} creditPayrollIncomeGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomeGet(creditPayrollIncomeGetRequest: CreditPayrollIncomeGetRequest, options?: any): AxiosPromise<CreditPayrollIncomeGetResponse> {
            return localVarFp.creditPayrollIncomeGet(creditPayrollIncomeGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/credit/payroll_income/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification. If the user is eligible for digital verification, that information will be associated with the user token, and in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing `employer` data will increase the chance of receiving a useful result.  When testing in Sandbox, you can control the results by providing special test values in the `employer` and `access_tokens` fields. `employer_good` and `employer_bad` will result in `HIGH` and `LOW` confidence values, respectively. `employer_multi` will result in a `HIGH` confidence with multiple payroll options. Likewise, `access_good` and `access_bad` will result in `HIGH` and `LOW` confidence values, respectively. Any other value for `employer` and `access_tokens` in Sandbox will result in `UNKNOWN` confidence.
         * @summary Check income verification eligibility and optimize conversion
         * @param {CreditPayrollIncomePrecheckRequest} creditPayrollIncomePrecheckRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomePrecheck(creditPayrollIncomePrecheckRequest: CreditPayrollIncomePrecheckRequest, options?: any): AxiosPromise<CreditPayrollIncomePrecheckResponse> {
            return localVarFp.creditPayrollIncomePrecheck(creditPayrollIncomePrecheckRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/credit/payroll_income/refresh` refreshes a given digital payroll income verification.
         * @summary Refresh a digital payroll income verification
         * @param {CreditPayrollIncomeRefreshRequest} creditPayrollIncomeRefreshRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomeRefresh(creditPayrollIncomeRefreshRequest: CreditPayrollIncomeRefreshRequest, options?: any): AxiosPromise<CreditPayrollIncomeRefreshResponse> {
            return localVarFp.creditPayrollIncomeRefresh(creditPayrollIncomeRefreshRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/credit/payroll_income/risk_signals/get` can be used as part of the Document Income flow to assess a user-uploaded document for signs of potential fraud or tampering. It returns a risk score for each uploaded document that indicates the likelihood of the document being fraudulent, in addition to details on the individual risk signals contributing to the score. `/credit/payroll_income/risk_signals/get` can be called at any time after the `INCOME_VERIFICATION_RISK_SIGNALS` webhook has been fired.  `/credit/payroll_income/risk_signals/get` is offered as an add-on to Document Income and is billed separately. To request access to this endpoint, submit a product access request or contact your Plaid account manager.
         * @summary Retrieve fraud insights for a user\'s manually uploaded document(s).
         * @param {CreditPayrollIncomeRiskSignalsGetRequest} creditPayrollIncomeRiskSignalsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomeRiskSignalsGet(creditPayrollIncomeRiskSignalsGetRequest: CreditPayrollIncomeRiskSignalsGetRequest, options?: any): AxiosPromise<CreditPayrollIncomeRiskSignalsGetResponse> {
            return localVarFp.creditPayrollIncomeRiskSignalsGet(creditPayrollIncomeRiskSignalsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Plaid can share an Asset Report directly with a participating third party on your behalf. The shared Asset Report is the exact same Asset Report originally created in `/asset_report/create`.  To grant a third party access to an Asset Report, use the `/credit/relay/create` endpoint to create a `relay_token` and then pass that token to your third party. Each third party has its own `secondary_client_id`; for example, `ce5bd328dcd34123456`. You\'ll need to create a separate `relay_token` for each third party that needs access to the report on your behalf.
         * @summary Create a relay token to share an Asset Report with a partner client (beta)
         * @param {CreditRelayCreateRequest} creditRelayCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditRelayCreate(creditRelayCreateRequest: CreditRelayCreateRequest, options?: any): AxiosPromise<CreditRelayCreateResponse> {
            return localVarFp.creditRelayCreate(creditRelayCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/credit/relay/get` allows third parties to receive a report that was shared with them, using a `relay_token` that was created by the report owner.
         * @summary Retrieve the reports associated with a relay token that was shared with you (beta)
         * @param {CreditRelayGetRequest} creditRelayGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditRelayGet(creditRelayGetRequest: CreditRelayGetRequest, options?: any): AxiosPromise<AssetReportGetResponse> {
            return localVarFp.creditRelayGet(creditRelayGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/credit/relay/refresh` endpoint allows third parties to refresh a report that was relayed to them, using a `relay_token` that was created by the report owner. A new report will be created with the original report parameters, but with the most recent data available based on the `days_requested` value of the original report.
         * @summary Refresh a report of a relay token (beta)
         * @param {CreditRelayRefreshRequest} creditRelayRefreshRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditRelayRefresh(creditRelayRefreshRequest: CreditRelayRefreshRequest, options?: any): AxiosPromise<CreditRelayRefreshResponse> {
            return localVarFp.creditRelayRefresh(creditRelayRefreshRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/credit/relay/remove` endpoint allows you to invalidate a `relay_token`. The third party holding the token will no longer be able to access or refresh the reports which the `relay_token` gives access to. The original report, associated Items, and other relay tokens that provide access to the same report are not affected and will remain accessible after removing the given `relay_token`.
         * @summary Remove relay token (beta)
         * @param {CreditRelayRemoveRequest} creditRelayRemoveRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditRelayRemove(creditRelayRemoveRequest: CreditRelayRemoveRequest, options?: any): AxiosPromise<CreditRelayRemoveResponse> {
            return localVarFp.creditRelayRemove(creditRelayRemoveRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/credit/audit_copy_token/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Report data and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
         * @summary Remove an Audit Copy token
         * @param {CreditAuditCopyTokenRemoveRequest} creditAuditCopyTokenRemoveRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditReportAuditCopyRemove(creditAuditCopyTokenRemoveRequest: CreditAuditCopyTokenRemoveRequest, options?: any): AxiosPromise<CreditAuditCopyTokenRemoveResponse> {
            return localVarFp.creditReportAuditCopyRemove(creditAuditCopyTokenRemoveRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint can be used for your end users after they complete the Link flow. This endpoint returns a list of Link sessions that your user completed, where each session includes the results from the Link flow.  These results include details about the Item that was created and some product related metadata (showing, for example, whether the user finished the bank income verification step).
         * @summary Retrieve Link sessions for your user
         * @param {CreditSessionsGetRequest} creditSessionsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditSessionsGet(creditSessionsGetRequest: CreditSessionsGetRequest, options?: any): AxiosPromise<CreditSessionsGetResponse> {
            return localVarFp.creditSessionsGet(creditSessionsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve information about a dashboard user.
         * @summary Retrieve a dashboard user
         * @param {DashboardUserGetRequest} dashboardUserGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardUserGet(dashboardUserGetRequest: DashboardUserGetRequest, options?: any): AxiosPromise<DashboardUserGetResponse> {
            return localVarFp.dashboardUserGet(dashboardUserGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * List all dashboard users associated with your account.
         * @summary List dashboard users
         * @param {DashboardUserListRequest} dashboardUserListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardUserList(dashboardUserListRequest: DashboardUserListRequest, options?: any): AxiosPromise<DashboardUserListResponse> {
            return localVarFp.dashboardUserList(dashboardUserListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint provides an alternative to `/deposit_switch/create` for customers who have not yet fully integrated with Plaid Exchange. Like `/deposit_switch/create`, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
         * @summary Create a deposit switch without using Plaid Exchange
         * @param {DepositSwitchAltCreateRequest} depositSwitchAltCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchAltCreate(depositSwitchAltCreateRequest: DepositSwitchAltCreateRequest, options?: any): AxiosPromise<DepositSwitchAltCreateResponse> {
            return localVarFp.depositSwitchAltCreate(depositSwitchAltCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
         * @summary Create a deposit switch
         * @param {DepositSwitchCreateRequest} depositSwitchCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchCreate(depositSwitchCreateRequest: DepositSwitchCreateRequest, options?: any): AxiosPromise<DepositSwitchCreateResponse> {
            return localVarFp.depositSwitchCreate(depositSwitchCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user\'s direct deposit allocation preferences.
         * @summary Retrieve a deposit switch
         * @param {DepositSwitchGetRequest} depositSwitchGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchGet(depositSwitchGetRequest: DepositSwitchGetRequest, options?: any): AxiosPromise<DepositSwitchGetResponse> {
            return localVarFp.depositSwitchGet(depositSwitchGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes. 
         * @summary Create a deposit switch token
         * @param {DepositSwitchTokenCreateRequest} depositSwitchTokenCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchTokenCreate(depositSwitchTokenCreateRequest: DepositSwitchTokenCreateRequest, options?: any): AxiosPromise<DepositSwitchTokenCreateResponse> {
            return localVarFp.depositSwitchTokenCreate(depositSwitchTokenCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/employers/search` allows you the ability to search Plaid’s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user\'s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
         * @summary Search employer database
         * @param {EmployersSearchRequest} employersSearchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employersSearch(employersSearchRequest: EmployersSearchRequest, options?: any): AxiosPromise<EmployersSearchResponse> {
            return localVarFp.employersSearch(employersSearchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/employment/verification/get` returns a list of employments through a user payroll that was verified by an end user.  This endpoint has been deprecated; new integrations should use `/credit/employment/get` instead.
         * @summary (Deprecated) Retrieve a summary of an individual\'s employment information
         * @param {EmploymentVerificationGetRequest} employmentVerificationGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employmentVerificationGet(employmentVerificationGetRequest: EmploymentVerificationGetRequest, options?: any): AxiosPromise<EmploymentVerificationGetResponse> {
            return localVarFp.employmentVerificationGet(employmentVerificationGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A generic webhook receiver endpoint for FDX Event Notifications
         * @summary Webhook receiver for fdx notifications
         * @param {FDXNotification} fDXNotification 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fdxNotifications(fDXNotification: FDXNotification, options?: any): AxiosPromise<void> {
            return localVarFp.fdxNotifications(fDXNotification, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Note: In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29).
         * @summary Retrieve identity data
         * @param {IdentityGetRequest} identityGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityGet(identityGetRequest: IdentityGetRequest, options?: any): AxiosPromise<IdentityGetResponse> {
            return localVarFp.identityGet(identityGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/identity/match` endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder\'s financial institution.  This request may take some time to complete if Identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
         * @summary Retrieve identity match score
         * @param {IdentityMatchRequest} identityMatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityMatch(identityMatchRequest: IdentityMatchRequest, options?: any): AxiosPromise<IdentityMatchResponse> {
            return localVarFp.identityMatch(identityMatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/identity/refresh` is an optional endpoint for users of the Identity product. It initiates an on-demand extraction to fetch the most up to date Identity information from the Financial Institution. This on-demand extraction takes place in addition to the periodic extractions that automatically occur any Identity-enabled Item. If changes to Identity are discovered after calling `/identity/refresh`, Plaid will fire a webhook [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/identity/#default_update). `/identity/refresh` is offered as an add-on to Identity and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
         * @summary Refresh identity data
         * @param {IdentityRefreshRequest} identityRefreshRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityRefresh(identityRefreshRequest: IdentityRefreshRequest, options?: any): AxiosPromise<IdentityRefreshResponse> {
            return localVarFp.identityRefresh(identityRefreshRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Identity Verification for the user specified by the `client_user_id` field. The requirements and behavior of the verification are determined by the `template_id` provided. If you don\'t know whether the associated user already has an active Identity Verification, you can specify `\"is_idempotent\": true` in the request body. With idempotency enabled, a new Identity Verification will only be created if one does not already exist for the associated `client_user_id` and `template_id`. If an Identity Verification is found, it will be returned unmodified with an `200 OK` HTTP status code.  You can also use this endpoint to supply information you already have collected about the user; if any of these fields are specified, the screens prompting the user to enter them will be skipped during the Link flow. 
         * @summary Create a new identity verification
         * @param {IdentityVerificationCreateRequest} identityVerificationCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityVerificationCreate(identityVerificationCreateRequest: IdentityVerificationCreateRequest, options?: any): AxiosPromise<IdentityVerificationCreateResponse> {
            return localVarFp.identityVerificationCreate(identityVerificationCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a previously created identity verification.
         * @summary Retrieve Identity Verification
         * @param {IdentityVerificationGetRequest} identityVerificationGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityVerificationGet(identityVerificationGetRequest: IdentityVerificationGetRequest, options?: any): AxiosPromise<IdentityVerificationGetResponse> {
            return localVarFp.identityVerificationGet(identityVerificationGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Filter and list Identity Verifications created by your account
         * @summary List Identity Verifications
         * @param {IdentityVerificationListRequest} identityVerificationListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityVerificationList(identityVerificationListRequest: IdentityVerificationListRequest, options?: any): AxiosPromise<IdentityVerificationListResponse> {
            return localVarFp.identityVerificationList(identityVerificationListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Allow a customer to retry their identity verification
         * @summary Retry an Identity Verification
         * @param {IdentityVerificationRetryRequest} identityVerificationRetryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityVerificationRetry(identityVerificationRetryRequest: IdentityVerificationRetryRequest, options?: any): AxiosPromise<IdentityVerificationRetryResponse> {
            return localVarFp.identityVerificationRetry(identityVerificationRetryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/income/verification/create` begins the income verification process by returning an `income_verification_id`. You can then provide the `income_verification_id` to `/link/token/create` under the `income_verification` parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an `INCOME` webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing. 
         * @summary (Deprecated) Create an income verification instance
         * @param {IncomeVerificationCreateRequest} incomeVerificationCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationCreate(incomeVerificationCreateRequest: IncomeVerificationCreateRequest, options?: any): AxiosPromise<IncomeVerificationCreateResponse> {
            return localVarFp.incomeVerificationCreate(incomeVerificationCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/income/verification/documents/download` provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to `/income/verification/documents/download` is a ZIP file in binary data. If a `document_id` is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The `request_id` is returned in the `Plaid-Request-ID` header.
         * @summary (Deprecated) Download the original documents used for income verification
         * @param {IncomeVerificationDocumentsDownloadRequest} incomeVerificationDocumentsDownloadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationDocumentsDownload(incomeVerificationDocumentsDownloadRequest: IncomeVerificationDocumentsDownloadRequest, options?: any): AxiosPromise<any> {
            return localVarFp.incomeVerificationDocumentsDownload(incomeVerificationDocumentsDownloadRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/income/verification/paystubs/get` returns the information collected from the paystubs that were used to verify an end user\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
         * @summary (Deprecated) Retrieve information from the paystubs used for income verification
         * @param {IncomeVerificationPaystubsGetRequest} incomeVerificationPaystubsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationPaystubsGet(incomeVerificationPaystubsGetRequest: IncomeVerificationPaystubsGetRequest, options?: any): AxiosPromise<IncomeVerificationPaystubsGetResponse> {
            return localVarFp.incomeVerificationPaystubsGet(incomeVerificationPaystubsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/income/verification/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a `precheck_id` that can be provided to `/link/token/create`. If the user is eligible for digital verification, providing the `precheck_id` in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the `precheck_id` can still be provided to `/link/token/create` and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either `employer` or `transactions_access_tokens` data will increase the chance of receiving a useful result.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/precheck` instead.
         * @summary (Deprecated) Check digital income verification eligibility and optimize conversion
         * @param {IncomeVerificationPrecheckRequest} incomeVerificationPrecheckRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationPrecheck(incomeVerificationPrecheckRequest: IncomeVerificationPrecheckRequest, options?: any): AxiosPromise<IncomeVerificationPrecheckResponse> {
            return localVarFp.incomeVerificationPrecheck(incomeVerificationPrecheckRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/income/verification/taxforms/get` returns the information collected from forms that were used to verify an end user\'\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
         * @summary (Deprecated) Retrieve information from the tax documents used for income verification
         * @param {IncomeVerificationTaxformsGetRequest} incomeVerificationTaxformsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationTaxformsGet(incomeVerificationTaxformsGetRequest: IncomeVerificationTaxformsGetRequest, options?: any): AxiosPromise<IncomeVerificationTaxformsGetResponse> {
            return localVarFp.incomeVerificationTaxformsGet(incomeVerificationTaxformsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institution’s enabled products and a client’s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
         * @summary Get details of all supported institutions
         * @param {InstitutionsGetRequest} institutionsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        institutionsGet(institutionsGetRequest: InstitutionsGetRequest, options?: any): AxiosPromise<InstitutionsGetResponse> {
            return localVarFp.institutionsGet(institutionsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a JSON response containing details on a specified financial institution currently supported by Plaid.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` to authenticate to this endpoint. The `public_key` has been deprecated; all customers are encouraged to use `client_id` and `secret` instead. 
         * @summary Get details of an institution
         * @param {InstitutionsGetByIdRequest} institutionsGetByIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        institutionsGetById(institutionsGetByIdRequest: InstitutionsGetByIdRequest, options?: any): AxiosPromise<InstitutionsGetByIdResponse> {
            return localVarFp.institutionsGetById(institutionsGetByIdRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` parameters to authenticate to this endpoint. The `public_key` parameter has since been deprecated; all customers are encouraged to use `client_id` and `secret` instead. 
         * @summary Search institutions
         * @param {InstitutionsSearchRequest} institutionsSearchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        institutionsSearch(institutionsSearchRequest: InstitutionsSearchRequest, options?: any): AxiosPromise<InstitutionsSearchResponse> {
            return localVarFp.institutionsSearch(institutionsSearchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/investments/auth/get` endpoint allows developers to receive user-authorized data to facilitate the transfer of holdings
         * @summary Get data needed to authorize an investments transfer
         * @param {InvestmentsAuthGetRequest} investmentsAuthGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investmentsAuthGet(investmentsAuthGetRequest: InvestmentsAuthGetRequest, options?: any): AxiosPromise<InvestmentsAuthGetResponse> {
            return localVarFp.investmentsAuthGet(investmentsAuthGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/investments/holdings/get` endpoint allows developers to receive user-authorized stock position data for `investment`-type accounts.
         * @summary Get Investment holdings
         * @param {InvestmentsHoldingsGetRequest} investmentsHoldingsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investmentsHoldingsGet(investmentsHoldingsGetRequest: InvestmentsHoldingsGetRequest, options?: any): AxiosPromise<InvestmentsHoldingsGetResponse> {
            return localVarFp.investmentsHoldingsGet(investmentsHoldingsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/investments/refresh` is an optional endpoint for users of the Investments product. It initiates an on-demand extraction to fetch the newest investments, holdings and investment transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Investments-enabled Item. If changes to investments are discovered after calling `/investments/refresh`, Plaid will fire webhooks: [`HOLDINGS: DEFAULT_UPDATE`](https://plaid.com/docs/api/products/investments/#holdings-default_update) if any new holdings are detected, and [INVESTMENTS_TRANSACTIONS: DEFAULT_UPDATE](https://plaid.com/docs/api/products/investments/#investments_transactions-default_update) if any new investment transactions are detected. Updated holdings and investment transactions can be fetched by calling `/investments/holdings/get` and `/investments/transactions/get`. \"Note that the `/investments/refresh` endpoint is not supported by all institutions. If called on an Item from an institution that does not support this functionality, it will return a `PRODUCT_NOT_SUPPORTED` error. `/investments/refresh` is offered as an add-on to Investments and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
         * @summary Refresh investment data
         * @param {InvestmentsRefreshRequest} investmentsRefreshRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investmentsRefresh(investmentsRefreshRequest: InvestmentsRefreshRequest, options?: any): AxiosPromise<InvestmentsRefreshResponse> {
            return localVarFp.investmentsRefresh(investmentsRefreshRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/investments/transactions/get` endpoint allows developers to retrieve up to 24 months of user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the `total_investment_transactions` response body field to fetch all available investment transactions.  Note that Investments does not have a webhook to indicate when initial transaction data has loaded. Instead, if transactions data is not ready when `/investments/transactions/get` is first called, Plaid will wait for the data. For this reason, calling `/investments/transactions/get` immediately after Link may take up to one to two minutes to return.
         * @summary Get investment transactions
         * @param {InvestmentsTransactionsGetRequest} investmentsTransactionsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investmentsTransactionsGet(investmentsTransactionsGetRequest: InvestmentsTransactionsGetRequest, options?: any): AxiosPromise<InvestmentsTransactionsGetResponse> {
            return localVarFp.investmentsTransactionsGet(investmentsTransactionsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * By default, the `access_token` associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the `/item/access_token/invalidate` endpoint to rotate the `access_token` associated with an Item. The endpoint returns a new `access_token` and immediately invalidates the previous `access_token`. 
         * @summary Invalidate access_token
         * @param {ItemAccessTokenInvalidateRequest} itemAccessTokenInvalidateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemAccessTokenInvalidate(itemAccessTokenInvalidateRequest: ItemAccessTokenInvalidateRequest, options?: any): AxiosPromise<ItemAccessTokenInvalidateResponse> {
            return localVarFp.itemAccessTokenInvalidate(itemAccessTokenInvalidateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * List a historical log of user consent events
         * @summary List a historical log of user consent events
         * @param {ItemActivityListRequest} itemActivityListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemActivityList(itemActivityListRequest: ItemActivityListRequest, options?: any): AxiosPromise<ItemActivityListResponse> {
            return localVarFp.itemActivityList(itemActivityListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user’s connected applications
         * @summary List a user’s connected applications
         * @param {ItemApplicationListRequest} itemApplicationListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemApplicationList(itemApplicationListRequest: ItemApplicationListRequest, options?: any): AxiosPromise<ItemApplicationListResponse> {
            return localVarFp.itemApplicationList(itemApplicationListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Enable consumers to update product access on selected accounts for an application.
         * @summary Update the scopes of access for a particular application
         * @param {ItemApplicationScopesUpdateRequest} itemApplicationScopesUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemApplicationScopesUpdate(itemApplicationScopesUpdateRequest: ItemApplicationScopesUpdateRequest, options?: any): AxiosPromise<ItemApplicationScopesUpdateResponse> {
            return localVarFp.itemApplicationScopesUpdate(itemApplicationScopesUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Note: As of July 2020, the `/item/public_token/create` endpoint is deprecated. Instead, use `/link/token/create` with an `access_token` to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the `/item/public_token/create` endpoint and then initialize Link with that `public_token`.  A `public_token` is one-time use and expires after 30 minutes. You use a `public_token` to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a `public_token` for an Item even if you did not use Link to create the Item originally.  The `/item/public_token/create` endpoint is **not** used to create your initial `public_token`. If you have not already received an `access_token` for a specific Item, use Link to obtain your `public_token` instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
         * @summary Create public token
         * @param {ItemPublicTokenCreateRequest} itemPublicTokenCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemCreatePublicToken(itemPublicTokenCreateRequest: ItemPublicTokenCreateRequest, options?: any): AxiosPromise<ItemPublicTokenCreateResponse> {
            return localVarFp.itemCreatePublicToken(itemPublicTokenCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns information about the status of an Item.
         * @summary Retrieve an Item
         * @param {ItemGetRequest} itemGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemGet(itemGetRequest: ItemGetRequest, options?: any): AxiosPromise<ItemGetResponse> {
            return localVarFp.itemGet(itemGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/item/import` creates an Item via your Plaid Exchange Integration and returns an `access_token`. As part of an `/item/import` request, you will include a User ID (`user_auth.user_id`) and Authentication Token (`user_auth.auth_token`) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via `/item/import`, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated.
         * @summary Import Item
         * @param {ItemImportRequest} itemImportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemImport(itemImportRequest: ItemImportRequest, options?: any): AxiosPromise<ItemImportResponse> {
            return localVarFp.itemImport(itemImportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Exchange a Link `public_token` for an API `access_token`. Link hands off the `public_token` client-side via the `onSuccess` callback once a user has successfully created an Item. The `public_token` is ephemeral and expires after 30 minutes. An `access_token` does not expire, but can be revoked by calling `/item/remove`.  The response also includes an `item_id` that should be stored with the `access_token`. The `item_id` is used to identify an Item in a webhook. The `item_id` can also be retrieved by making an `/item/get` request.
         * @summary Exchange public token for an access token
         * @param {ItemPublicTokenExchangeRequest} itemPublicTokenExchangeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemPublicTokenExchange(itemPublicTokenExchangeRequest: ItemPublicTokenExchangeRequest, options?: any): AxiosPromise<ItemPublicTokenExchangeResponse> {
            return localVarFp.itemPublicTokenExchange(itemPublicTokenExchangeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/item/remove` endpoint allows you to remove an Item. Once removed, the `access_token`, as well as any processor tokens or bank account tokens associated with the Item, is no longer valid and cannot be used to access any data that was associated with the Item.  Note that in the Development environment, issuing an `/item/remove`  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via `/item/remove` may still show as an active connection in the institution\'s OAuth permission manager.  API versions 2019-05-29 and earlier return a `removed` boolean as part of the response.
         * @summary Remove an Item
         * @param {ItemRemoveRequest} itemRemoveRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemRemove(itemRemoveRequest: ItemRemoveRequest, options?: any): AxiosPromise<ItemRemoveResponse> {
            return localVarFp.itemRemove(itemRemoveRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The POST `/item/webhook/update` allows you to update the webhook URL associated with an Item. This request triggers a [`WEBHOOK_UPDATE_ACKNOWLEDGED`](https://plaid.com/docs/api/items/#webhook_update_acknowledged) webhook to the newly specified webhook URL.
         * @summary Update Webhook URL
         * @param {ItemWebhookUpdateRequest} itemWebhookUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemWebhookUpdate(itemWebhookUpdateRequest: ItemWebhookUpdateRequest, options?: any): AxiosPromise<ItemWebhookUpdateResponse> {
            return localVarFp.itemWebhookUpdate(itemWebhookUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/liabilities/get` endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the `account_filters` parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/liabilities/get`.  Note: This request may take some time to complete if `liabilities` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.
         * @summary Retrieve Liabilities data
         * @param {LiabilitiesGetRequest} liabilitiesGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        liabilitiesGet(liabilitiesGetRequest: LiabilitiesGetRequest, options?: any): AxiosPromise<LiabilitiesGetResponse> {
            return localVarFp.liabilitiesGet(liabilitiesGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/link_delivery/create` endpoint to create a Hosted Link session.
         * @summary Create Hosted Link session
         * @param {LinkDeliveryCreateRequest} linkDeliveryCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkDeliveryCreate(linkDeliveryCreateRequest: LinkDeliveryCreateRequest, options?: any): AxiosPromise<LinkDeliveryCreateResponse> {
            return localVarFp.linkDeliveryCreate(linkDeliveryCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/link_delivery/get` endpoint to get the status of a Hosted Link session.
         * @summary Get Hosted Link session
         * @param {LinkDeliveryGetRequest} linkDeliveryGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkDeliveryGet(linkDeliveryGetRequest: LinkDeliveryGetRequest, options?: any): AxiosPromise<LinkDeliveryGetResponse> {
            return localVarFp.linkDeliveryGet(linkDeliveryGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Exchange an OAuth `link_correlation_id` for the corresponding `link_token`. The `link_correlation_id` is only available for \'payment_initiation\' products and is provided to the client via the OAuth `redirect_uri` as a query parameter. The `link_correlation_id` is ephemeral and expires in a brief period, after which it can no longer be exchanged for the \'link_token\'.
         * @summary Exchange the Link Correlation Id for a Link Token
         * @param {LinkOAuthCorrelationIdExchangeRequest} linkOAuthCorrelationIdExchangeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkOauthCorrelationIdExchange(linkOAuthCorrelationIdExchangeRequest: LinkOAuthCorrelationIdExchangeRequest, options?: any): AxiosPromise<LinkOAuthCorrelationIdExchangeResponse> {
            return localVarFp.linkOauthCorrelationIdExchange(linkOAuthCorrelationIdExchangeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/link/token/create` endpoint creates a `link_token`, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a `public_token`, which can then be exchanged for an `access_token` via `/item/public_token/exchange` as part of the main Link flow.  A `link_token` generated by `/link/token/create` is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.
         * @summary Create Link Token
         * @param {LinkTokenCreateRequest} linkTokenCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkTokenCreate(linkTokenCreateRequest: LinkTokenCreateRequest, options?: any): AxiosPromise<LinkTokenCreateResponse> {
            return localVarFp.linkTokenCreate(linkTokenCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/link/token/get` endpoint gets information about a previously-created `link_token` using the `/link/token/create` endpoint. It can be useful for debugging purposes.
         * @summary Get Link Token
         * @param {LinkTokenGetRequest} linkTokenGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkTokenGet(linkTokenGetRequest: LinkTokenGetRequest, options?: any): AxiosPromise<LinkTokenGetResponse> {
            return localVarFp.linkTokenGet(linkTokenGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/partner/customer/create` endpoint is used by reseller partners to create end customers.
         * @summary Creates a new end customer for a Plaid reseller.
         * @param {PartnerCustomerCreateRequest} partnerCustomerCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnerCustomerCreate(partnerCustomerCreateRequest: PartnerCustomerCreateRequest, options?: any): AxiosPromise<PartnerCustomerCreateResponse> {
            return localVarFp.partnerCustomerCreate(partnerCustomerCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/partner/customer/enable` endpoint is used by reseller partners to enable an end customer in the Production environment.
         * @summary Enables a Plaid reseller\'s end customer in the Production environment.
         * @param {PartnerCustomerEnableRequest} partnerCustomerEnableRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnerCustomerEnable(partnerCustomerEnableRequest: PartnerCustomerEnableRequest, options?: any): AxiosPromise<PartnerCustomerEnableResponse> {
            return localVarFp.partnerCustomerEnable(partnerCustomerEnableRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/partner/customer/get` endpoint is used by reseller partners to retrieve data about a single end customer.
         * @summary Returns a Plaid reseller\'s end customer.
         * @param {PartnerCustomerGetRequest} partnerCustomerGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnerCustomerGet(partnerCustomerGetRequest: PartnerCustomerGetRequest, options?: any): AxiosPromise<PartnerCustomerGetResponse> {
            return localVarFp.partnerCustomerGet(partnerCustomerGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/partner/customer/oauth_institutions/get` endpoint is used by reseller partners to retrieve OAuth-institution registration information about a single end customer. To learn how to set up a webhook to listen to status update events, visit the [reseller documentation](https://plaid.com/docs/account/resellers/#enabling-end-customers).
         * @summary Returns OAuth-institution registration information for a given end customer.
         * @param {PartnerCustomerOAuthInstitutionsGetRequest} partnerCustomerOAuthInstitutionsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnerCustomerOauthInstitutionsGet(partnerCustomerOAuthInstitutionsGetRequest: PartnerCustomerOAuthInstitutionsGetRequest, options?: any): AxiosPromise<PartnerCustomerOAuthInstitutionsGetResponse> {
            return localVarFp.partnerCustomerOauthInstitutionsGet(partnerCustomerOAuthInstitutionsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/partner/customer/remove` endpoint is used by reseller partners to remove an end customer. Removing an end customer will remove it from view in the Plaid Dashboard and deactivate its API keys. This endpoint can only be used to remove an end customer that has not yet been enabled in Production.
         * @summary Removes a Plaid reseller\'s end customer.
         * @param {PartnerCustomerRemoveRequest} partnerCustomerRemoveRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnerCustomerRemove(partnerCustomerRemoveRequest: PartnerCustomerRemoveRequest, options?: any): AxiosPromise<PartnerCustomerRemoveResponse> {
            return localVarFp.partnerCustomerRemove(partnerCustomerRemoveRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/payment_initiation/consent/create` endpoint is used to create a payment consent, which can be used to initiate payments on behalf of the user. Payment consents are created with `UNAUTHORISED` status by default and must be authorised by the user before payments can be initiated.  Consents can be limited in time and scope, and have constraints that describe limitations for payments.
         * @summary Create payment consent
         * @param {PaymentInitiationConsentCreateRequest} paymentInitiationConsentCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentCreate(paymentInitiationConsentCreateRequest: PaymentInitiationConsentCreateRequest, options?: any): AxiosPromise<PaymentInitiationConsentCreateResponse> {
            return localVarFp.paymentInitiationConsentCreate(paymentInitiationConsentCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/payment_initiation/consent/get` endpoint can be used to check the status of a payment consent, as well as to receive basic information such as recipient and constraints.
         * @summary Get payment consent
         * @param {PaymentInitiationConsentGetRequest} paymentInitiationConsentGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentGet(paymentInitiationConsentGetRequest: PaymentInitiationConsentGetRequest, options?: any): AxiosPromise<PaymentInitiationConsentGetResponse> {
            return localVarFp.paymentInitiationConsentGet(paymentInitiationConsentGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/payment_initiation/consent/payment/execute` endpoint can be used to execute payments using payment consent.
         * @summary Execute a single payment using consent
         * @param {PaymentInitiationConsentPaymentExecuteRequest} paymentInitiationConsentPaymentExecuteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentPaymentExecute(paymentInitiationConsentPaymentExecuteRequest: PaymentInitiationConsentPaymentExecuteRequest, options?: any): AxiosPromise<PaymentInitiationConsentPaymentExecuteResponse> {
            return localVarFp.paymentInitiationConsentPaymentExecute(paymentInitiationConsentPaymentExecuteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/payment_initiation/consent/revoke` endpoint can be used to revoke the payment consent. Once the consent is revoked, it is not possible to initiate payments using it.
         * @summary Revoke payment consent
         * @param {PaymentInitiationConsentRevokeRequest} paymentInitiationConsentRevokeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentRevoke(paymentInitiationConsentRevokeRequest: PaymentInitiationConsentRevokeRequest, options?: any): AxiosPromise<PaymentInitiationConsentRevokeResponse> {
            return localVarFp.paymentInitiationConsentRevoke(paymentInitiationConsentRevokeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * After creating a payment recipient, you can use the `/payment_initiation/payment/create` endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR, GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency).  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer, GBP-denominated payments will be sent via the Faster Payments network and for non-Eurozone markets typically via the local payment scheme, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer or other local payment schemes will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipient’s account, although at least 90% of standing order payments are sent by 6am.  In the Development environment, payments must be below 5 GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency). For details on any payment limits in Production, contact your Plaid Account Manager.
         * @summary Create a payment
         * @param {PaymentInitiationPaymentCreateRequest} paymentInitiationPaymentCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentCreate(paymentInitiationPaymentCreateRequest: PaymentInitiationPaymentCreateRequest, options?: any): AxiosPromise<PaymentInitiationPaymentCreateResponse> {
            return localVarFp.paymentInitiationPaymentCreate(paymentInitiationPaymentCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/payment_initiation/payment/get` endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the `/payment_initiation/payment/get` endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.
         * @summary Get payment details
         * @param {PaymentInitiationPaymentGetRequest} paymentInitiationPaymentGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentGet(paymentInitiationPaymentGetRequest: PaymentInitiationPaymentGetRequest, options?: any): AxiosPromise<PaymentInitiationPaymentGetResponse> {
            return localVarFp.paymentInitiationPaymentGet(paymentInitiationPaymentGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/payment_initiation/payment/list` endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional `count` and `cursor` parameters.
         * @summary List payments
         * @param {PaymentInitiationPaymentListRequest} paymentInitiationPaymentListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentList(paymentInitiationPaymentListRequest: PaymentInitiationPaymentListRequest, options?: any): AxiosPromise<PaymentInitiationPaymentListResponse> {
            return localVarFp.paymentInitiationPaymentList(paymentInitiationPaymentListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Reverse a settled payment from a Plaid virtual account.  The original payment must be in a settled state to be refunded. To refund partially, specify the amount as part of the request. If the amount is not specified, the refund amount will be equal to all of the remaining payment amount that has not been refunded yet.  The refund will go back to the source account that initiated the payment. The original payment must have been initiated to a Plaid virtual account so that this account can be used to initiate the refund. 
         * @summary Reverse an existing payment
         * @param {PaymentInitiationPaymentReverseRequest} paymentInitiationPaymentReverseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentReverse(paymentInitiationPaymentReverseRequest: PaymentInitiationPaymentReverseRequest, options?: any): AxiosPromise<PaymentInitiationPaymentReverseResponse> {
            return localVarFp.paymentInitiationPaymentReverse(paymentInitiationPaymentReverseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA) or a non-Eurozone country [supported](https://plaid.com/global) by Plaid. For a standing order (recurring) payment, the recipient must be in the UK.  It is recommended to use `bacs` in the UK and `iban` in EU.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same `recipient_id`. 
         * @summary Create payment recipient
         * @param {PaymentInitiationRecipientCreateRequest} paymentInitiationRecipientCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationRecipientCreate(paymentInitiationRecipientCreateRequest: PaymentInitiationRecipientCreateRequest, options?: any): AxiosPromise<PaymentInitiationRecipientCreateResponse> {
            return localVarFp.paymentInitiationRecipientCreate(paymentInitiationRecipientCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get details about a payment recipient you have previously created.
         * @summary Get payment recipient
         * @param {PaymentInitiationRecipientGetRequest} paymentInitiationRecipientGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationRecipientGet(paymentInitiationRecipientGetRequest: PaymentInitiationRecipientGetRequest, options?: any): AxiosPromise<PaymentInitiationRecipientGetResponse> {
            return localVarFp.paymentInitiationRecipientGet(paymentInitiationRecipientGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/payment_initiation/recipient/list` endpoint list the payment recipients that you have previously created.
         * @summary List payment recipients
         * @param {PaymentInitiationRecipientListRequest} paymentInitiationRecipientListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationRecipientList(paymentInitiationRecipientListRequest: PaymentInitiationRecipientListRequest, options?: any): AxiosPromise<PaymentInitiationRecipientListResponse> {
            return localVarFp.paymentInitiationRecipientList(paymentInitiationRecipientListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use `/payment_profile/create` endpoint to create a new payment profile. To initiate the account linking experience, call `/link/token/create` and provide the `payment_profile_token` in the `transfer.payment_profile_token` field. You can then use the `payment_profile_token` when creating transfers using `/transfer/authorization/create` and `/transfer/create`.
         * @summary Create payment profile
         * @param {PaymentProfileCreateRequest} paymentProfileCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentProfileCreate(paymentProfileCreateRequest: PaymentProfileCreateRequest, options?: any): AxiosPromise<PaymentProfileCreateResponse> {
            return localVarFp.paymentProfileCreate(paymentProfileCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use `/payment_profile/get` endpoint to get the status of a given Payment Profile.
         * @summary Get payment profile
         * @param {PaymentProfileGetRequest} paymentProfileGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentProfileGet(paymentProfileGetRequest: PaymentProfileGetRequest, options?: any): AxiosPromise<PaymentProfileGetResponse> {
            return localVarFp.paymentProfileGet(paymentProfileGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/payment_profile/remove` endpoint to remove a given Payment Profile. Once it’s removed, it can no longer be used to create transfers.
         * @summary Remove payment profile
         * @param {PaymentProfileRemoveRequest} paymentProfileRemoveRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentProfileRemove(paymentProfileRemoveRequest: PaymentProfileRemoveRequest, options?: any): AxiosPromise<PaymentProfileRemoveResponse> {
            return localVarFp.paymentProfileRemove(paymentProfileRemoveRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.
         * @summary Create Apex bank account token
         * @param {ProcessorApexProcessorTokenCreateRequest} processorApexProcessorTokenCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorApexProcessorTokenCreate(processorApexProcessorTokenCreateRequest: ProcessorApexProcessorTokenCreateRequest, options?: any): AxiosPromise<ProcessorTokenCreateResponse> {
            return localVarFp.processorApexProcessorTokenCreate(processorApexProcessorTokenCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/processor/auth/get` endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that\'\'s associated with a given `processor_token`. The endpoint also returns high-level account data and balances when available.  Versioning note: API versions 2019-05-29 and earlier use a different schema for the `numbers` object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14). 
         * @summary Retrieve Auth data
         * @param {ProcessorAuthGetRequest} processorAuthGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorAuthGet(processorAuthGetRequest: ProcessorAuthGetRequest, options?: any): AxiosPromise<ProcessorAuthGetResponse> {
            return localVarFp.processorAuthGet(processorAuthGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/processor/balance/get` endpoint returns the real-time balance for each of an Item\'s accounts. While other endpoints may return a balance object, only `/processor/balance/get` forces the available and current balance fields to be refreshed rather than cached. 
         * @summary Retrieve Balance data
         * @param {ProcessorBalanceGetRequest} processorBalanceGetRequest The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorBalanceGet(processorBalanceGetRequest: ProcessorBalanceGetRequest, options?: any): AxiosPromise<ProcessorBalanceGetResponse> {
            return localVarFp.processorBalanceGet(processorBalanceGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/processor/bank_transfer/create` endpoint to initiate a new bank transfer as a processor
         * @summary Create a bank transfer as a processor
         * @param {ProcessorBankTransferCreateRequest} processorBankTransferCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorBankTransferCreate(processorBankTransferCreateRequest: ProcessorBankTransferCreateRequest, options?: any): AxiosPromise<ProcessorBankTransferCreateResponse> {
            return localVarFp.processorBankTransferCreate(processorBankTransferCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/processor/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.
         * @summary Retrieve Identity data
         * @param {ProcessorIdentityGetRequest} processorIdentityGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorIdentityGet(processorIdentityGetRequest: ProcessorIdentityGetRequest, options?: any): AxiosPromise<ProcessorIdentityGetResponse> {
            return localVarFp.processorIdentityGet(processorIdentityGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/processor/identity/match` endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder\'s financial institution.  This request may take some time to complete if Identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
         * @summary Retrieve identity match score
         * @param {ProcessorIdentityMatchRequest} processorIdentityMatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorIdentityMatch(processorIdentityMatchRequest: ProcessorIdentityMatchRequest, options?: any): AxiosPromise<ProcessorIdentityMatchResponse> {
            return localVarFp.processorIdentityMatch(processorIdentityMatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * After calling `/processor/signal/evaluate`, call `/processor/signal/decision/report` to report whether the transaction was initiated. This endpoint will return an [`INVALID_FIELD`](/docs/errors/invalid-request/#invalid_field) error if called a second time with a different value for `initiated`.
         * @summary Report whether you initiated an ACH transaction
         * @param {ProcessorSignalDecisionReportRequest} processorSignalDecisionReportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorSignalDecisionReport(processorSignalDecisionReportRequest: ProcessorSignalDecisionReportRequest, options?: any): AxiosPromise<ProcessorSignalDecisionReportResponse> {
            return localVarFp.processorSignalDecisionReport(processorSignalDecisionReportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use `/processor/signal/evaluate` to evaluate a planned ACH transaction as a processor to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/processor/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to our error documentation on [item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time. To reduce this latency, you can call `/signal/prepare` on the Item before you need to request Signal data.
         * @summary Evaluate a planned ACH transaction
         * @param {ProcessorSignalEvaluateRequest} processorSignalEvaluateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorSignalEvaluate(processorSignalEvaluateRequest: ProcessorSignalEvaluateRequest, options?: any): AxiosPromise<ProcessorSignalEvaluateResponse> {
            return localVarFp.processorSignalEvaluate(processorSignalEvaluateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Call the `/processor/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/processor/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
         * @summary Report a return for an ACH transaction
         * @param {ProcessorSignalReturnReportRequest} processorSignalReturnReportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorSignalReturnReport(processorSignalReturnReportRequest: ProcessorSignalReturnReportRequest, options?: any): AxiosPromise<ProcessorSignalReturnReportResponse> {
            return localVarFp.processorSignalReturnReport(processorSignalReturnReportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *  Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).  Note that the Stripe bank account token is a one-time use token. To store bank account information for later use, you can use a Stripe customer object and create an associated bank account from the token, or you can use a Stripe Custom account and create an associated external bank account from the token. This bank account information should work indefinitely, unless the user\'s bank account information changes or they revoke Plaid\'s permissions to access their account. Stripe bank account information cannot be modified once the bank account token has been created. If you ever need to change the bank account details used by Stripe for a specific customer, have the user go through Link again and create a new bank account token from the new `access_token`.  Bank account tokens can also be revoked, using `/item/remove`.
         * @summary Create Stripe bank account token
         * @param {ProcessorStripeBankAccountTokenCreateRequest} processorStripeBankAccountTokenCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorStripeBankAccountTokenCreate(processorStripeBankAccountTokenCreateRequest: ProcessorStripeBankAccountTokenCreateRequest, options?: any): AxiosPromise<ProcessorStripeBankAccountTokenCreateResponse> {
            return localVarFp.processorStripeBankAccountTokenCreate(processorStripeBankAccountTokenCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Used to create a token suitable for sending to one of Plaid\'s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see `/processor/stripe/bank_account_token/create` for creating tokens for use with Stripe integrations. Once created, a processor token for a given Item cannot be modified or updated. If the account must be linked to a new or different partner resource, create a new Item by having the user go through the Link flow again; a new processor token can then be created from the new `access_token`. Processor tokens can also be revoked, using `/item/remove`.
         * @summary Create processor token
         * @param {ProcessorTokenCreateRequest} processorTokenCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTokenCreate(processorTokenCreateRequest: ProcessorTokenCreateRequest, options?: any): AxiosPromise<ProcessorTokenCreateResponse> {
            return localVarFp.processorTokenCreate(processorTokenCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Used to get a processor token\'s product permissions. The `products` field will be an empty list if the processor can access all available products.
         * @summary Get a processor token\'s product permissions
         * @param {ProcessorTokenPermissionsGetRequest} processorTokenPermissionsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTokenPermissionsGet(processorTokenPermissionsGetRequest: ProcessorTokenPermissionsGetRequest, options?: any): AxiosPromise<ProcessorTokenPermissionsGetResponse> {
            return localVarFp.processorTokenPermissionsGet(processorTokenPermissionsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Used to control a processor\'s access to products on the given processor token. By default, a processor will have access to all available products on the corresponding item. To restrict access to a particular set of products, call this endpoint with the desired products. To restore access to all available products, call this endpoint with an empty list. This endpoint can be called multiple times as your needs and your processor\'s needs change.
         * @summary Control a processor\'s access to products
         * @param {ProcessorTokenPermissionsSetRequest} processorTokenPermissionsSetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTokenPermissionsSet(processorTokenPermissionsSetRequest: ProcessorTokenPermissionsSetRequest, options?: any): AxiosPromise<ProcessorTokenPermissionsSetResponse> {
            return localVarFp.processorTokenPermissionsSet(processorTokenPermissionsSetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/processor/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/processor/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/processor/transactions/get` will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item\'s `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the `/processor/transactions/refresh` endpoint.  Note that data may not be immediately available to `/processor/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/processor/transactions/get`, if it wasn\'t. If no transaction history is ready when `/processor/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
         * @summary Get transaction data
         * @param {ProcessorTransactionsGetRequest} processorTransactionsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTransactionsGet(processorTransactionsGetRequest: ProcessorTransactionsGetRequest, options?: any): AxiosPromise<ProcessorTransactionsGetResponse> {
            return localVarFp.processorTransactionsGet(processorTransactionsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/processor/transactions/recurring/get` endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.  This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  This endpoint can only be called on an Item that has already been initialized with Transactions (either during Link, by specifying it in `/link/token/create`; or after Link, by calling `/processor/transactions/get` or `/processor/transactions/sync`). Once all historical transactions have been fetched, call `/processor/transactions/recurring/get` to receive the Recurring Transactions streams and subscribe to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using `/transactions/sync` listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the `historical_update_complete` field in the payload is `true`. If using `/transactions/get`, listen for the [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.  After the initial call, you can call `/processor/transactions/recurring/get` endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.
         * @summary Fetch recurring transaction streams
         * @param {ProcessorTransactionsRecurringGetRequest} processorTransactionsRecurringGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTransactionsRecurringGet(processorTransactionsRecurringGetRequest: ProcessorTransactionsRecurringGetRequest, options?: any): AxiosPromise<ProcessorTransactionsRecurringGetResponse> {
            return localVarFp.processorTransactionsRecurringGet(processorTransactionsRecurringGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/processor/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling `/processor/transactions/refresh`, Plaid will fire a webhook: for `/transactions/sync` users, [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both `/processor/transactions/sync` and `/processor/transactions/get`, [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/processor/transactions/get` or `/processor/transactions/sync`. Note that the `/processor/transactions/refresh` endpoint is not supported for Capital One (`ins_128026`) and will result in a `PRODUCT_NOT_SUPPORTED` error if called on an Item from that institution.  `/processor/transactions/refresh` is offered as an add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
         * @summary Refresh transaction data
         * @param {ProcessorTransactionsRefreshRequest} processorTransactionsRefreshRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTransactionsRefresh(processorTransactionsRefreshRequest: ProcessorTransactionsRefreshRequest, options?: any): AxiosPromise<ProcessorTransactionsRefreshResponse> {
            return localVarFp.processorTransactionsRefresh(processorTransactionsRefreshRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint replaces `/processor/transactions/get` and its associated webhooks for most common use-cases.  The `/processor/transactions/sync` endpoint allows developers to subscribe to all transactions associated with an Item and get updates synchronously in a stream-like manner, using a cursor to track which updates have already been seen. `/processor/transactions/sync` provides the same functionality as `/processor/transactions/get` and can be used instead of `/processor/transactions/get` to simplify the process of tracking transactions updates.  This endpoint provides user-authorized transaction data for `credit`, `depository`, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from `investments` accounts, use `/investments/transactions/get` instead.  Returned transactions data is grouped into three types of update, indicating whether the transaction was added, removed, or modified since the last call to the API.  In the first call to `/processor/transactions/sync` for an Item, the endpoint will return all historical transactions data associated with that Item up until the time of the API call (as \"adds\"), which then generates a `next_cursor` for that Item. In subsequent calls, send the `next_cursor` to receive only the changes that have occurred since the previous call.  Due to the potentially large number of transactions associated with an Item, results are paginated. The `has_more` field specifies if additional calls are necessary to fetch all available transaction updates. Call `/processor/transactions/sync` with the new cursor, pulling all updates, until `has_more` is `false`.  When retrieving paginated updates, track both the `next_cursor` from the latest response and the original cursor from the first call in which `has_more` was `true`; if a call to `/processor/transactions/sync` fails when retrieving a paginated update, which can occur as a result of the [`TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION`](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error, the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.  Whenever new or updated transaction data becomes available, `/processor/transactions/sync` will provide these updates. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item\'s `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, use the `/processor/transactions/refresh` endpoint.  Note that for newly created Items, data may not be immediately available to `/processor/transactions/sync`. Plaid begins preparing transactions data when the Item is created, but the process can take anywhere from a few seconds to several minutes to complete, depending on the number of transactions available.
         * @summary Get incremental transaction updates on an Item
         * @param {ProcessorTransactionsSyncRequest} processorTransactionsSyncRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTransactionsSync(processorTransactionsSyncRequest: ProcessorTransactionsSyncRequest, options?: any): AxiosPromise<ProcessorTransactionsSyncResponse> {
            return localVarFp.processorTransactionsSync(processorTransactionsSyncRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/sandbox/bank_income/fire_webhook` endpoint to manually trigger a Bank Income webhook in the Sandbox environment.
         * @summary Manually fire a bank income webhook in sandbox
         * @param {SandboxBankIncomeFireWebhookRequest} sandboxBankIncomeFireWebhookRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxBankIncomeFireWebhook(sandboxBankIncomeFireWebhookRequest: SandboxBankIncomeFireWebhookRequest, options?: any): AxiosPromise<SandboxBankIncomeFireWebhookResponse> {
            return localVarFp.sandboxBankIncomeFireWebhook(sandboxBankIncomeFireWebhookRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/sandbox/bank_transfer/fire_webhook` endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.
         * @summary Manually fire a Bank Transfer webhook
         * @param {SandboxBankTransferFireWebhookRequest} sandboxBankTransferFireWebhookRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxBankTransferFireWebhook(sandboxBankTransferFireWebhookRequest: SandboxBankTransferFireWebhookRequest, options?: any): AxiosPromise<SandboxBankTransferFireWebhookResponse> {
            return localVarFp.sandboxBankTransferFireWebhook(sandboxBankTransferFireWebhookRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/sandbox/bank_transfer/simulate` endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/bank_transfer/event/sync` or `/bank_transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
         * @summary Simulate a bank transfer event in Sandbox
         * @param {SandboxBankTransferSimulateRequest} sandboxBankTransferSimulateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxBankTransferSimulate(sandboxBankTransferSimulateRequest: SandboxBankTransferSimulateRequest, options?: any): AxiosPromise<SandboxBankTransferSimulateResponse> {
            return localVarFp.sandboxBankTransferSimulate(sandboxBankTransferSimulateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/sandbox/income/fire_webhook` endpoint to manually trigger a Payroll Income webhook in the Sandbox environment.
         * @summary Manually fire an Income webhook
         * @param {SandboxIncomeFireWebhookRequest} sandboxIncomeFireWebhookRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxIncomeFireWebhook(sandboxIncomeFireWebhookRequest: SandboxIncomeFireWebhookRequest, options?: any): AxiosPromise<SandboxIncomeFireWebhookResponse> {
            return localVarFp.sandboxIncomeFireWebhook(sandboxIncomeFireWebhookRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/sandbox/item/fire_webhook` endpoint is used to test that code correctly handles webhooks. This endpoint can trigger the following webhooks:  `DEFAULT_UPDATE`: Transactions update webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `NEW_ACCOUNTS_AVAILABLE`: Webhook to be fired for a given Sandbox Item created with Account Select v2.  `AUTH_DATA_UPDATE`: Webhook to be fired for a given Sandbox Item created with Auth as an enabled product.  `RECURRING_TRANSACTIONS_UPDATE`: Recurring Transactions webhook to be fired for a given Sandbox Item. If the Item does not support Recurring Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `SYNC_UPDATES_AVAILABLE`: Transactions webhook to be fired for a given Sandbox Item.  If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `PRODUCT_READY`: Assets webhook to be fired when a given asset report has been successfully generated. If the Item does not support Assets, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `ERROR`: Assets webhook to be fired when asset report generation has failed. If the Item does not support Assets, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development.
         * @summary Fire a test webhook
         * @param {SandboxItemFireWebhookRequest} sandboxItemFireWebhookRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxItemFireWebhook(sandboxItemFireWebhookRequest: SandboxItemFireWebhookRequest, options?: any): AxiosPromise<SandboxItemFireWebhookResponse> {
            return localVarFp.sandboxItemFireWebhook(sandboxItemFireWebhookRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/sandbox/item/reset_login/` forces an Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link\'s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/item/reset_login`, You can then use Plaid Link update mode to restore the Item to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.
         * @summary Force a Sandbox Item into an error state
         * @param {SandboxItemResetLoginRequest} sandboxItemResetLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxItemResetLogin(sandboxItemResetLoginRequest: SandboxItemResetLoginRequest, options?: any): AxiosPromise<SandboxItemResetLoginResponse> {
            return localVarFp.sandboxItemResetLogin(sandboxItemResetLoginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/sandbox/item/set_verification_status` endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  Note that not all Plaid developer accounts are enabled for micro-deposit based verification by default. Your account must be enabled for this feature in order to test it in Sandbox. To enable this features or check your status, contact your account manager or [submit a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access).  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
         * @summary Set verification status for Sandbox account
         * @param {SandboxItemSetVerificationStatusRequest} sandboxItemSetVerificationStatusRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxItemSetVerificationStatus(sandboxItemSetVerificationStatusRequest: SandboxItemSetVerificationStatusRequest, options?: any): AxiosPromise<SandboxItemSetVerificationStatusResponse> {
            return localVarFp.sandboxItemSetVerificationStatus(sandboxItemSetVerificationStatusRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Save the selected accounts when connecting to the Platypus Oauth institution
         * @summary Save the selected accounts when connecting to the Platypus Oauth institution
         * @param {SandboxOauthSelectAccountsRequest} sandboxOauthSelectAccountsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxOauthSelectAccounts(sandboxOauthSelectAccountsRequest: SandboxOauthSelectAccountsRequest, options?: any): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.sandboxOauthSelectAccounts(sandboxOauthSelectAccountsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/sandbox/payment_profile/reset_login/` forces a Payment Profile into a state where the login is no longer valid. This makes it easy to test update mode for Payment Profile in the Sandbox environment.   After calling `/sandbox/payment_profile/reset_login`, calls to the `/transfer/authorization/create` with the Payment Profile will result in a `decision_rationale` `PAYMENT_PROFILE_LOGIN_REQUIRED`. You can then use update mode for Payment Profile to restore it into a good state.   In order to invoke this endpoint, you must first [create a Payment Profile](https://plaid.com/docs/transfer/add-to-app/#create-a-payment-profile-optional) and [go through the Link flow](https://plaid.com/docs/transfer/add-to-app/#create-a-link-token).
         * @summary Reset the login of a Payment Profile
         * @param {SandboxPaymentProfileResetLoginRequest} sandboxPaymentProfileResetLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxPaymentProfileResetLogin(sandboxPaymentProfileResetLoginRequest: SandboxPaymentProfileResetLoginRequest, options?: any): AxiosPromise<SandboxPaymentProfileResetLoginResponse> {
            return localVarFp.sandboxPaymentProfileResetLogin(sandboxPaymentProfileResetLoginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/sandbox/processor_token/create` endpoint to create a valid `processor_token` for an arbitrary institution ID and test credentials. The created `processor_token` corresponds to a new Sandbox Item. You can then use this `processor_token` with the `/processor/` API endpoints in Sandbox. You can also use `/sandbox/processor_token/create` with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.
         * @summary Create a test Item and processor token
         * @param {SandboxProcessorTokenCreateRequest} sandboxProcessorTokenCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxProcessorTokenCreate(sandboxProcessorTokenCreateRequest: SandboxProcessorTokenCreateRequest, options?: any): AxiosPromise<SandboxProcessorTokenCreateResponse> {
            return localVarFp.sandboxProcessorTokenCreate(sandboxProcessorTokenCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/sandbox/public_token/create` endpoint to create a valid `public_token`  for an arbitrary institution ID, initial products, and test credentials. The created `public_token` maps to a new Sandbox Item. You can then call `/item/public_token/exchange` to exchange the `public_token` for an `access_token` and perform all API actions. `/sandbox/public_token/create` can also be used with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. `/sandbox/public_token/create` cannot be used with OAuth institutions.
         * @summary Create a test Item
         * @param {SandboxPublicTokenCreateRequest} sandboxPublicTokenCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxPublicTokenCreate(sandboxPublicTokenCreateRequest: SandboxPublicTokenCreateRequest, options?: any): AxiosPromise<SandboxPublicTokenCreateResponse> {
            return localVarFp.sandboxPublicTokenCreate(sandboxPublicTokenCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/sandbox/transfer/fire_webhook` endpoint to manually trigger a Transfer webhook in the Sandbox environment.
         * @summary Manually fire a Transfer webhook
         * @param {SandboxTransferFireWebhookRequest} sandboxTransferFireWebhookRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferFireWebhook(sandboxTransferFireWebhookRequest: SandboxTransferFireWebhookRequest, options?: any): AxiosPromise<SandboxTransferFireWebhookResponse> {
            return localVarFp.sandboxTransferFireWebhook(sandboxTransferFireWebhookRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/sandbox/transfer/repayment/simulate` endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.
         * @summary Trigger the creation of a repayment
         * @param {SandboxTransferRepaymentSimulateRequest} sandboxTransferRepaymentSimulateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferRepaymentSimulate(sandboxTransferRepaymentSimulateRequest: SandboxTransferRepaymentSimulateRequest, options?: any): AxiosPromise<SandboxTransferRepaymentSimulateResponse> {
            return localVarFp.sandboxTransferRepaymentSimulate(sandboxTransferRepaymentSimulateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/sandbox/transfer/simulate` endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
         * @summary Simulate a transfer event in Sandbox
         * @param {SandboxTransferSimulateRequest} sandboxTransferSimulateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferSimulate(sandboxTransferSimulateRequest: SandboxTransferSimulateRequest, options?: any): AxiosPromise<SandboxTransferSimulateResponse> {
            return localVarFp.sandboxTransferSimulate(sandboxTransferSimulateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/sandbox/transfer/sweep/simulate` endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all `posted` or `pending` transfers with a sweep status of `unswept` will become `swept`, and all `returned` transfers with a sweep status of `swept` will become `return_swept`.
         * @summary Simulate creating a sweep
         * @param {SandboxTransferSweepSimulateRequest} sandboxTransferSweepSimulateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferSweepSimulate(sandboxTransferSweepSimulateRequest: SandboxTransferSweepSimulateRequest, options?: any): AxiosPromise<SandboxTransferSweepSimulateResponse> {
            return localVarFp.sandboxTransferSweepSimulate(sandboxTransferSweepSimulateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/sandbox/transfer/test_clock/advance` endpoint to advance a `test_clock` in the Sandbox environment.  A test clock object represents an independent timeline and has a `virtual_time` field indicating the current timestamp of the timeline. A test clock can be advanced by incrementing `virtual_time`, but may never go back to a lower `virtual_time`.  If a test clock is advanced, we will simulate the changes that ought to occur during the time that elapsed. For instance, a client creates a weekly recurring transfer with a test clock set at t. When the client advances the test clock by setting `virtual_time` = t + 15 days, 2 new originations should be created, along with the webhook events.  The advancement of the test clock from its current `virtual_time` should be limited such that there are no more than 20 originations resulting from the advance operation on each `recurring_transfer` associated with the `test_clock`. For instance, if the recurring transfer associated with this test clock originates once every 4 weeks, you can advance the `virtual_time` up to 80 weeks on each API call.
         * @summary Advance a test clock
         * @param {SandboxTransferTestClockAdvanceRequest} sandboxTransferTestClockAdvanceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferTestClockAdvance(sandboxTransferTestClockAdvanceRequest: SandboxTransferTestClockAdvanceRequest, options?: any): AxiosPromise<SandboxTransferTestClockAdvanceResponse> {
            return localVarFp.sandboxTransferTestClockAdvance(sandboxTransferTestClockAdvanceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/sandbox/transfer/test_clock/create` endpoint to create a `test_clock` in the Sandbox environment.  A test clock object represents an independent timeline and has a `virtual_time` field indicating the current timestamp of the timeline. Test clocks are used for testing recurring transfers in Sandbox.  A test clock can be associated with up to 5 recurring transfers.
         * @summary Create a test clock
         * @param {SandboxTransferTestClockCreateRequest} sandboxTransferTestClockCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferTestClockCreate(sandboxTransferTestClockCreateRequest: SandboxTransferTestClockCreateRequest, options?: any): AxiosPromise<SandboxTransferTestClockCreateResponse> {
            return localVarFp.sandboxTransferTestClockCreate(sandboxTransferTestClockCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/sandbox/transfer/test_clock/get` endpoint to get a `test_clock` in the Sandbox environment.
         * @summary Get a test clock
         * @param {SandboxTransferTestClockGetRequest} sandboxTransferTestClockGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferTestClockGet(sandboxTransferTestClockGetRequest: SandboxTransferTestClockGetRequest, options?: any): AxiosPromise<SandboxTransferTestClockGetResponse> {
            return localVarFp.sandboxTransferTestClockGet(sandboxTransferTestClockGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/sandbox/transfer/test_clock/list` endpoint to see a list of all your test clocks in the Sandbox environment, by ascending `virtual_time`. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired test clocks.
         * @summary List test clocks
         * @param {SandboxTransferTestClockListRequest} sandboxTransferTestClockListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferTestClockList(sandboxTransferTestClockListRequest: SandboxTransferTestClockListRequest, options?: any): AxiosPromise<SandboxTransferTestClockListResponse> {
            return localVarFp.sandboxTransferTestClockList(sandboxTransferTestClockListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * After calling `/signal/evaluate`, call `/signal/decision/report` to report whether the transaction was initiated. This endpoint will return an [`INVALID_FIELD`](/docs/errors/invalid-request/#invalid_field) error if called a second time with a different value for `initiated`.
         * @summary Report whether you initiated an ACH transaction
         * @param {SignalDecisionReportRequest} signalDecisionReportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalDecisionReport(signalDecisionReportRequest: SignalDecisionReportRequest, options?: any): AxiosPromise<SignalDecisionReportResponse> {
            return localVarFp.signalDecisionReport(signalDecisionReportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use `/signal/evaluate` to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to the error documentation on [Item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time.
         * @summary Evaluate a planned ACH transaction
         * @param {SignalEvaluateRequest} signalEvaluateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalEvaluate(signalEvaluateRequest: SignalEvaluateRequest, options?: any): AxiosPromise<SignalEvaluateResponse> {
            return localVarFp.signalEvaluate(signalEvaluateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * When Link is not initialized with Signal, call `/signal/prepare` to opt-in that Item to the Signal data collection process, developing a Signal score.  If you are using other Plaid products after Link, e.g. Identity or Assets, call `/signal/prepare` after those product calls are complete.  Example flow: Link is initialized with Auth, call `/auth/get` for the account and routing number, call `/identity/get` to retrieve bank ownership details, then call `/signal/prepare` to begin Signal data collection. Later, once you have obtained details about the proposed transaction from the user, call `/signal/evaluate` for a Signal score. For more information please see [Recommendations for initializing Link with specific product combinations](https://www.plaid.com/docs/link/initializing-products/#recommendations-for-initializing-link-with-specific-product-combinations).
         * @summary Opt-in an Item to Signal
         * @param {SignalPrepareRequest} signalPrepareRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalPrepare(signalPrepareRequest: SignalPrepareRequest, options?: any): AxiosPromise<SignalPrepareResponse> {
            return localVarFp.signalPrepare(signalPrepareRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Call the `/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
         * @summary Report a return for an ACH transaction
         * @param {SignalReturnReportRequest} signalReturnReportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalReturnReport(signalReturnReportRequest: SignalReturnReportRequest, options?: any): AxiosPromise<SignalReturnReportResponse> {
            return localVarFp.signalReturnReport(signalReturnReportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/beta/transactions/v1/enhance` endpoint enriches raw transaction data provided directly by clients.  The product is currently in beta.
         * @summary enhance locally-held transaction data
         * @param {TransactionsEnhanceGetRequest} transactionsEnhanceGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsEnhance(transactionsEnhanceGetRequest: TransactionsEnhanceGetRequest, options?: any): AxiosPromise<TransactionsEnhanceGetResponse> {
            return localVarFp.transactionsEnhance(transactionsEnhanceGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transactions/enrich` endpoint enriches raw transaction data generated by your own banking products or retrieved from other non-Plaid sources.
         * @summary Enrich locally-held transaction data
         * @param {TransactionsEnrichGetRequest} transactionsEnrichGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsEnrich(transactionsEnrichGetRequest: TransactionsEnrichGetRequest, options?: any): AxiosPromise<TransactionsEnrichGetResponse> {
            return localVarFp.transactionsEnrich(transactionsEnrichGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Note: All new implementations are encouraged to use `/transactions/sync` rather than `/transactions/get`. `/transactions/sync` provides the same functionality as `/transactions/get` and improves developer ease-of-use for handling transactions updates.  The `/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products/investments/) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/transactions/get` will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item\'s `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the `/transactions/refresh` endpoint.  Note that data may not be immediately available to `/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/transactions/get`, if it wasn\'t. To be alerted when transaction data is ready to be fetched, listen for the [`INITIAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#initial_update) and [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhooks. If no transaction history is ready when `/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
         * @summary Get transaction data
         * @param {TransactionsGetRequest} transactionsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsGet(transactionsGetRequest: TransactionsGetRequest, options?: any): AxiosPromise<TransactionsGetResponse> {
            return localVarFp.transactionsGet(transactionsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transactions/recurring/get` endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.  This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  This endpoint can only be called on an Item that has already been initialized with Transactions (either during Link, by specifying it in `/link/token/create`; or after Link, by calling `/transactions/get` or `/transactions/sync`). Once all historical transactions have been fetched, call `/transactions/recurring/get` to receive the Recurring Transactions streams and subscribe to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using `/transactions/sync` listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the `historical_update_complete` field in the payload is `true`. If using `/transactions/get`, listen for the [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.  After the initial call, you can call `/transactions/recurring/get` endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.
         * @summary Fetch recurring transaction streams
         * @param {TransactionsRecurringGetRequest} transactionsRecurringGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRecurringGet(transactionsRecurringGetRequest: TransactionsRecurringGetRequest, options?: any): AxiosPromise<TransactionsRecurringGetResponse> {
            return localVarFp.transactionsRecurringGet(transactionsRecurringGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling `/transactions/refresh`, Plaid will fire a webhook: for `/transactions/sync` users, [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both `/transactions/sync` and `/transactions/get`, [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/transactions/get` or `/transactions/sync`. Note that the `/transactions/refresh` endpoint is not supported for Capital One (`ins_128026`) and will result in a `PRODUCT_NOT_SUPPORTED` error if called on an Item from that institution.  `/transactions/refresh` is offered as an add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
         * @summary Refresh transaction data
         * @param {TransactionsRefreshRequest} transactionsRefreshRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRefresh(transactionsRefreshRequest: TransactionsRefreshRequest, options?: any): AxiosPromise<TransactionsRefreshResponse> {
            return localVarFp.transactionsRefresh(transactionsRefreshRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transactions/rules/v1/create` endpoint creates transaction categorization rules.  Rules will be applied on the Item\'s transactions returned in `/transactions/get` response.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
         * @summary Create transaction category rule
         * @param {TransactionsRulesCreateRequest} transactionsRulesCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRulesCreate(transactionsRulesCreateRequest: TransactionsRulesCreateRequest, options?: any): AxiosPromise<TransactionsRulesCreateResponse> {
            return localVarFp.transactionsRulesCreate(transactionsRulesCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transactions/rules/v1/list` returns a list of transaction rules created for the Item associated with the access token.
         * @summary Return a list of rules created for the Item associated with the access token.
         * @param {TransactionsRulesListRequest} transactionsRulesListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRulesList(transactionsRulesListRequest: TransactionsRulesListRequest, options?: any): AxiosPromise<TransactionsRulesListResponse> {
            return localVarFp.transactionsRulesList(transactionsRulesListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transactions/rules/v1/remove` endpoint is used to remove a transaction rule.
         * @summary Remove transaction rule
         * @param {TransactionsRulesRemoveRequest} transactionsRulesRemoveRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRulesRemove(transactionsRulesRemoveRequest: TransactionsRulesRemoveRequest, options?: any): AxiosPromise<TransactionsRulesRemoveResponse> {
            return localVarFp.transactionsRulesRemove(transactionsRulesRemoveRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint replaces `/transactions/get` and its associated webhooks for most common use-cases.  The `/transactions/sync` endpoint allows developers to subscribe to all transactions associated with an Item and get updates synchronously in a stream-like manner, using a cursor to track which updates have already been seen. `/transactions/sync` provides the same functionality as `/transactions/get` and can be used instead of `/transactions/get` to simplify the process of tracking transactions updates.  This endpoint provides user-authorized transaction data for `credit`, `depository`, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from `investments` accounts, use `/investments/transactions/get` instead.  Returned transactions data is grouped into three types of update, indicating whether the transaction was added, removed, or modified since the last call to the API.  In the first call to `/transactions/sync` for an Item, the endpoint will return all historical transactions data associated with that Item up until the time of the API call (as \"adds\"), which then generates a `next_cursor` for that Item. In subsequent calls, send the `next_cursor` to receive only the changes that have occurred since the previous call.  Due to the potentially large number of transactions associated with an Item, results are paginated. The `has_more` field specifies if additional calls are necessary to fetch all available transaction updates. Call `/transactions/sync` with the new cursor, pulling all updates, until `has_more` is `false`.  When retrieving paginated updates, track both the `next_cursor` from the latest response and the original cursor from the first call in which `has_more` was `true`; if a call to `/transactions/sync` fails due to the [`TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION`](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error, the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.  Whenever new or updated transaction data becomes available, `/transactions/sync` will provide these updates. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item\'s `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, use the `/transactions/refresh` endpoint.  Note that for newly created Items, data may not be immediately available to `/transactions/sync`. Plaid begins preparing transactions data when the Item is created, but the process can take anywhere from a few seconds to several minutes to complete, depending on the number of transactions available.  To be alerted when new data is available, listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) webhook.
         * @summary Get incremental transaction updates on an Item
         * @param {TransactionsSyncRequest} transactionsSyncRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsSync(transactionsSyncRequest: TransactionsSyncRequest, options?: any): AxiosPromise<TransactionsSyncResponse> {
            return localVarFp.transactionsSync(transactionsSyncRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/authorization/create` endpoint to determine transfer failure risk.  In Plaid\'s Sandbox environment the decisions will be returned as follows:    - To approve a transfer with null rationale code, make an authorization request with an `amount` less than the available balance in the account.    - To approve a transfer with the rationale code `MANUALLY_VERIFIED_ITEM`, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To approve a transfer with the rationale code `ITEM_LOGIN_REQUIRED`, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).    - To decline a transfer with the rationale code `NSF`, the available balance on the account must be less than the authorization `amount`. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code `RISK`, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.  The fields `device.ip_address` and `device.user_agent` are required for all sessions where the end-user is present. For example, when a user is authorizing a one-time payment from their device.
         * @summary Create a transfer authorization
         * @param {TransferAuthorizationCreateRequest} transferAuthorizationCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferAuthorizationCreate(transferAuthorizationCreateRequest: TransferAuthorizationCreateRequest, options?: any): AxiosPromise<TransferAuthorizationCreateResponse> {
            return localVarFp.transferAuthorizationCreate(transferAuthorizationCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/balance/get` endpoint to view a balance held with Plaid.
         * @summary Retrieve a balance held with Plaid
         * @param {TransferBalanceGetRequest} transferBalanceGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferBalanceGet(transferBalanceGetRequest: TransferBalanceGetRequest, options?: any): AxiosPromise<TransferBalanceGetResponse> {
            return localVarFp.transferBalanceGet(transferBalanceGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/cancel` endpoint to cancel a transfer.  A transfer is eligible for cancellation if the `cancellable` property returned by `/transfer/get` is `true`.
         * @summary Cancel a transfer
         * @param {TransferCancelRequest} transferCancelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferCancel(transferCancelRequest: TransferCancelRequest, options?: any): AxiosPromise<TransferCancelResponse> {
            return localVarFp.transferCancel(transferCancelRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/capabilities/get` endpoint to determine the RTP eligibility information of a transfer.
         * @summary Get RTP eligibility information of a transfer
         * @param {TransferCapabilitiesGetRequest} transferCapabilitiesGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferCapabilitiesGet(transferCapabilitiesGetRequest: TransferCapabilitiesGetRequest, options?: any): AxiosPromise<TransferCapabilitiesGetResponse> {
            return localVarFp.transferCapabilitiesGet(transferCapabilitiesGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/configuration/get` endpoint to view your transfer product configurations.
         * @summary Get transfer product configuration
         * @param {TransferConfigurationGetRequest} transferConfigurationGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferConfigurationGet(transferConfigurationGetRequest: TransferConfigurationGetRequest, options?: any): AxiosPromise<TransferConfigurationGetResponse> {
            return localVarFp.transferConfigurationGet(transferConfigurationGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/create` endpoint to initiate a new transfer.
         * @summary Create a transfer
         * @param {TransferCreateRequest} transferCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferCreate(transferCreateRequest: TransferCreateRequest, options?: any): AxiosPromise<TransferCreateResponse> {
            return localVarFp.transferCreate(transferCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Third-party sender customers can use `/transfer/diligence/document/upload` endpoint to upload a document on behalf of its end customer (i.e. originator) to Plaid. You’ll need to send a request of type multipart/form-data. You must provide the `client_id` in the `PLAID-CLIENT-ID` header and `secret` in the `PLAID-SECRET` header.
         * @summary This endpoint allows third-party sender customers to upload a document on behalf of its end customer (i.e. originator) to Plaid. You’ll need to send a request of type multipart/form-data.
         * @param {TransferDiligenceDocumentUploadRequest} transferDiligenceDocumentUploadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferDiligenceDocumentUpload(transferDiligenceDocumentUploadRequest: TransferDiligenceDocumentUploadRequest, options?: any): AxiosPromise<TransferDiligenceDocumentUploadResponse> {
            return localVarFp.transferDiligenceDocumentUpload(transferDiligenceDocumentUploadRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/diligence/submit` endpoint to submit transfer diligence on behalf of the originator.
         * @summary Submit transfer diligence on behalf of the end customer (i.e. the originator).
         * @param {TransferDiligenceSubmitRequest} transferDiligenceSubmitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferDiligenceSubmit(transferDiligenceSubmitRequest: TransferDiligenceSubmitRequest, options?: any): AxiosPromise<TransferDiligenceSubmitResponse> {
            return localVarFp.transferDiligenceSubmit(transferDiligenceSubmitRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/event/list` endpoint to get a list of transfer events based on specified filter criteria.
         * @summary List transfer events
         * @param {TransferEventListRequest} transferEventListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferEventList(transferEventListRequest: TransferEventListRequest, options?: any): AxiosPromise<TransferEventListResponse> {
            return localVarFp.transferEventList(transferEventListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/transfer/event/sync` allows you to request up to the next 25 transfer events that happened after a specific `event_id`. Use the `/transfer/event/sync` endpoint to guarantee you have seen all transfer events.
         * @summary Sync transfer events
         * @param {TransferEventSyncRequest} transferEventSyncRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferEventSync(transferEventSyncRequest: TransferEventSyncRequest, options?: any): AxiosPromise<TransferEventSyncResponse> {
            return localVarFp.transferEventSync(transferEventSyncRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transfer/get` endpoint fetches information about the transfer corresponding to the given `transfer_id`.
         * @summary Retrieve a transfer
         * @param {TransferGetRequest} transferGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferGet(transferGetRequest: TransferGetRequest, options?: any): AxiosPromise<TransferGetResponse> {
            return localVarFp.transferGet(transferGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/intent/create` endpoint to generate a transfer intent object and invoke the Transfer UI.
         * @summary Create a transfer intent object to invoke the Transfer UI
         * @param {TransferIntentCreateRequest} transferIntentCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferIntentCreate(transferIntentCreateRequest: TransferIntentCreateRequest, options?: any): AxiosPromise<TransferIntentCreateResponse> {
            return localVarFp.transferIntentCreate(transferIntentCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/intent/get` endpoint to retrieve more information about a transfer intent.
         * @summary Retrieve more information about a transfer intent
         * @param {{ [key: string]: object; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferIntentGet(requestBody: { [key: string]: object; }, options?: any): AxiosPromise<TransferIntentGetResponse> {
            return localVarFp.transferIntentGet(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/list` endpoint to see a list of all your transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired transfers. 
         * @summary List transfers
         * @param {TransferListRequest} transferListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferList(transferListRequest: TransferListRequest, options?: any): AxiosPromise<TransferListResponse> {
            return localVarFp.transferList(transferListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/metrics/get` endpoint to view your transfer product usage metrics.
         * @summary Get transfer product usage metrics
         * @param {TransferMetricsGetRequest} transferMetricsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferMetricsGet(transferMetricsGetRequest: TransferMetricsGetRequest, options?: any): AxiosPromise<TransferMetricsGetResponse> {
            return localVarFp.transferMetricsGet(transferMetricsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * As an alternative to adding Items via Link, you can also use the `/transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
         * @summary Migrate account into Transfers
         * @param {TransferMigrateAccountRequest} transferMigrateAccountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferMigrateAccount(transferMigrateAccountRequest: TransferMigrateAccountRequest, options?: any): AxiosPromise<TransferMigrateAccountResponse> {
            return localVarFp.transferMigrateAccount(transferMigrateAccountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/originator/create` endpoint to create a new originator and return an `originator_client_id`.
         * @summary Create a new originator
         * @param {TransferOriginatorCreateRequest} transferOriginatorCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOriginatorCreate(transferOriginatorCreateRequest: TransferOriginatorCreateRequest, options?: any): AxiosPromise<TransferOriginatorCreateResponse> {
            return localVarFp.transferOriginatorCreate(transferOriginatorCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transfer/originator/get` endpoint gets status updates for an originator\'s onboarding process. This information is also available via the Transfer page on the Plaid dashboard.
         * @summary Get status of an originator\'s onboarding
         * @param {TransferOriginatorGetRequest} transferOriginatorGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOriginatorGet(transferOriginatorGetRequest: TransferOriginatorGetRequest, options?: any): AxiosPromise<TransferOriginatorGetResponse> {
            return localVarFp.transferOriginatorGet(transferOriginatorGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transfer/originator/list` endpoint gets status updates for all of your originators\' onboarding. This information is also available via the Plaid dashboard.
         * @summary Get status of all originators\' onboarding
         * @param {TransferOriginatorListRequest} transferOriginatorListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOriginatorList(transferOriginatorListRequest: TransferOriginatorListRequest, options?: any): AxiosPromise<TransferOriginatorListResponse> {
            return localVarFp.transferOriginatorList(transferOriginatorListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transfer/questionnaire/create` endpoint generates a Plaid-hosted onboarding UI URL. Redirect the originator to this URL to provide their due diligence information and agree to Plaid’s terms for ACH money movement.
         * @summary Generate a Plaid-hosted onboarding UI URL.
         * @param {TransferQuestionnaireCreateRequest} transferQuestionnaireCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferQuestionnaireCreate(transferQuestionnaireCreateRequest: TransferQuestionnaireCreateRequest, options?: any): AxiosPromise<TransferQuestionnaireCreateResponse> {
            return localVarFp.transferQuestionnaireCreate(transferQuestionnaireCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/recurring/cancel` endpoint to cancel a recurring transfer.  Scheduled transfer that hasn\'t been submitted to bank will be cancelled.
         * @summary Cancel a recurring transfer.
         * @param {TransferRecurringCancelRequest} transferRecurringCancelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRecurringCancel(transferRecurringCancelRequest: TransferRecurringCancelRequest, options?: any): AxiosPromise<TransferRecurringCancelResponse> {
            return localVarFp.transferRecurringCancel(transferRecurringCancelRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/recurring/create` endpoint to initiate a new recurring transfer.
         * @summary Create a recurring transfer
         * @param {TransferRecurringCreateRequest} transferRecurringCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRecurringCreate(transferRecurringCreateRequest: TransferRecurringCreateRequest, options?: any): AxiosPromise<TransferRecurringCreateResponse> {
            return localVarFp.transferRecurringCreate(transferRecurringCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transfer/recurring/get` fetches information about the recurring transfer corresponding to the given `recurring_transfer_id`.
         * @summary Retrieve a recurring transfer
         * @param {TransferRecurringGetRequest} transferRecurringGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRecurringGet(transferRecurringGetRequest: TransferRecurringGetRequest, options?: any): AxiosPromise<TransferRecurringGetResponse> {
            return localVarFp.transferRecurringGet(transferRecurringGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/recurring/list` endpoint to see a list of all your recurring transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired recurring transfers. 
         * @summary List recurring transfers
         * @param {TransferRecurringListRequest} transferRecurringListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRecurringList(transferRecurringListRequest: TransferRecurringListRequest, options?: any): AxiosPromise<TransferRecurringListResponse> {
            return localVarFp.transferRecurringList(transferRecurringListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/refund/cancel` endpoint to cancel a refund.  A refund is eligible for cancellation if it has not yet been submitted to the payment network.
         * @summary Cancel a refund
         * @param {TransferRefundCancelRequest} transferRefundCancelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRefundCancel(transferRefundCancelRequest: TransferRefundCancelRequest, options?: any): AxiosPromise<TransferRefundCancelResponse> {
            return localVarFp.transferRefundCancel(transferRefundCancelRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/refund/create` endpoint to create a refund for a transfer. A transfer can be refunded if the transfer was initiated in the past 180 days.  Processing of the refund will not occur until at least 3 business days following the transfer\'s settlement date, plus any hold/settlement delays. This 3-day window helps better protect your business from regular ACH returns. Consumer initiated returns (unauthorized returns) could still happen for about 60 days from the settlement date. If the original transfer is canceled, returned or failed, all pending refunds will automatically be canceled. Processed refunds cannot be revoked.
         * @summary Create a refund
         * @param {TransferRefundCreateRequest} transferRefundCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRefundCreate(transferRefundCreateRequest: TransferRefundCreateRequest, options?: any): AxiosPromise<TransferRefundCreateResponse> {
            return localVarFp.transferRefundCreate(transferRefundCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transfer/refund/get` endpoint fetches information about the refund corresponding to the given `refund_id`.
         * @summary Retrieve a refund
         * @param {TransferRefundGetRequest} transferRefundGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRefundGet(transferRefundGetRequest: TransferRefundGetRequest, options?: any): AxiosPromise<TransferRefundGetResponse> {
            return localVarFp.transferRefundGet(transferRefundGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transfer/repayment/list` endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given `start_time`.
         * @summary Lists historical repayments
         * @param {TransferRepaymentListRequest} transferRepaymentListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRepaymentList(transferRepaymentListRequest: TransferRepaymentListRequest, options?: any): AxiosPromise<TransferRepaymentListResponse> {
            return localVarFp.transferRepaymentList(transferRepaymentListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transfer/repayment/return/list` endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.
         * @summary List the returns included in a repayment
         * @param {TransferRepaymentReturnListRequest} transferRepaymentReturnListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRepaymentReturnList(transferRepaymentReturnListRequest: TransferRepaymentReturnListRequest, options?: any): AxiosPromise<TransferRepaymentReturnListResponse> {
            return localVarFp.transferRepaymentReturnList(transferRepaymentReturnListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transfer/sweep/get` endpoint fetches a sweep corresponding to the given `sweep_id`.
         * @summary Retrieve a sweep
         * @param {TransferSweepGetRequest} transferSweepGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferSweepGet(transferSweepGetRequest: TransferSweepGetRequest, options?: any): AxiosPromise<TransferSweepGetResponse> {
            return localVarFp.transferSweepGet(transferSweepGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transfer/sweep/list` endpoint fetches sweeps matching the given filters.
         * @summary List sweeps
         * @param {TransferSweepListRequest} transferSweepListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferSweepList(transferSweepListRequest: TransferSweepListRequest, options?: any): AxiosPromise<TransferSweepListResponse> {
            return localVarFp.transferSweepList(transferSweepListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint should be called for each of your end users before they begin a Plaid income flow. This provides you a single token to access all income data associated with the user. You should only create one per end user.  If you call the endpoint multiple times with the same `client_user_id`, the first creation call will succeed and the rest will fail with an error message indicating that the user has been created for the given `client_user_id`.  Ensure that you store the `user_token` along with your user\'s identifier in your database, as it is not possible to retrieve a previously created `user_token`.
         * @summary Create user
         * @param {UserCreateRequest} userCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCreate(userCreateRequest: UserCreateRequest, options?: any): AxiosPromise<UserCreateResponse> {
            return localVarFp.userCreate(userCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an e-wallet. The response is the newly created e-wallet object.
         * @summary Create an e-wallet
         * @param {WalletCreateRequest} walletCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletCreate(walletCreateRequest: WalletCreateRequest, options?: any): AxiosPromise<WalletCreateResponse> {
            return localVarFp.walletCreate(walletCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch an e-wallet. The response includes the current balance.
         * @summary Fetch an e-wallet
         * @param {WalletGetRequest} walletGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGet(walletGetRequest: WalletGetRequest, options?: any): AxiosPromise<WalletGetResponse> {
            return localVarFp.walletGet(walletGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint lists all e-wallets in descending order of creation.
         * @summary Fetch a list of e-wallets
         * @param {WalletListRequest} walletListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletList(walletListRequest: WalletListRequest, options?: any): AxiosPromise<WalletListResponse> {
            return localVarFp.walletList(walletListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate transactions, the amount and reference for the transaction. Transactions will settle in seconds to several days, depending on the underlying payment rail.
         * @summary Execute a transaction using an e-wallet
         * @param {WalletTransactionExecuteRequest} walletTransactionExecuteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletTransactionExecute(walletTransactionExecuteRequest: WalletTransactionExecuteRequest, options?: any): AxiosPromise<WalletTransactionExecuteResponse> {
            return localVarFp.walletTransactionExecute(walletTransactionExecuteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a specific e-wallet transaction
         * @summary Fetch an e-wallet transaction
         * @param {WalletTransactionGetRequest} walletTransactionGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletTransactionGet(walletTransactionGetRequest: WalletTransactionGetRequest, options?: any): AxiosPromise<WalletTransactionGetResponse> {
            return localVarFp.walletTransactionGet(walletTransactionGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the `created_at` time.
         * @summary List e-wallet transactions
         * @param {WalletTransactionListRequest} walletTransactionListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletTransactionList(walletTransactionListRequest: WalletTransactionListRequest, options?: any): AxiosPromise<WalletTransactionListResponse> {
            return localVarFp.walletTransactionList(walletTransactionListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new entity watchlist screening to check your customer against watchlists defined in the associated entity watchlist program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
         * @summary Create a watchlist screening for an entity
         * @param {WatchlistScreeningEntityCreateRequest} watchlistScreeningEntityCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityCreate(watchlistScreeningEntityCreateRequest: WatchlistScreeningEntityCreateRequest, options?: any): AxiosPromise<WatchlistScreeningEntityCreateResponse> {
            return localVarFp.watchlistScreeningEntityCreate(watchlistScreeningEntityCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve an entity watchlist screening.
         * @summary Get an entity screening
         * @param {WatchlistScreeningEntityGetRequest} watchlistScreeningEntityGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityGet(watchlistScreeningEntityGetRequest: WatchlistScreeningEntityGetRequest, options?: any): AxiosPromise<WatchlistScreeningEntityGetResponse> {
            return localVarFp.watchlistScreeningEntityGet(watchlistScreeningEntityGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * List all changes to the entity watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
         * @summary List history for entity watchlist screenings
         * @param {WatchlistScreeningEntityHistoryListRequest} watchlistScreeningEntityHistoryListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityHistoryList(watchlistScreeningEntityHistoryListRequest: WatchlistScreeningEntityHistoryListRequest, options?: any): AxiosPromise<WatchlistScreeningEntityHistoryListResponse> {
            return localVarFp.watchlistScreeningEntityHistoryList(watchlistScreeningEntityHistoryListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * List all hits for the entity watchlist screening.
         * @summary List hits for entity watchlist screenings
         * @param {WatchlistScreeningEntityHitListRequest} watchlistScreeningEntityHitListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityHitList(watchlistScreeningEntityHitListRequest: WatchlistScreeningEntityHitListRequest, options?: any): AxiosPromise<WatchlistScreeningEntityHitListResponse> {
            return localVarFp.watchlistScreeningEntityHitList(watchlistScreeningEntityHitListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * List all entity screenings.
         * @summary List entity watchlist screenings
         * @param {WatchlistScreeningEntityListRequest} watchlistScreeningEntityListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityList(watchlistScreeningEntityListRequest: WatchlistScreeningEntityListRequest, options?: any): AxiosPromise<WatchlistScreeningEntityListResponse> {
            return localVarFp.watchlistScreeningEntityList(watchlistScreeningEntityListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an entity watchlist screening program
         * @summary Get entity watchlist screening program
         * @param {WatchlistScreeningEntityProgramGetRequest} watchlistScreeningEntityProgramGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityProgramGet(watchlistScreeningEntityProgramGetRequest: WatchlistScreeningEntityProgramGetRequest, options?: any): AxiosPromise<WatchlistScreeningEntityProgramGetResponse> {
            return localVarFp.watchlistScreeningEntityProgramGet(watchlistScreeningEntityProgramGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * List all entity watchlist screening programs
         * @summary List entity watchlist screening programs
         * @param {WatchlistScreeningEntityProgramListRequest} watchlistScreeningEntityProgramListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityProgramList(watchlistScreeningEntityProgramListRequest: WatchlistScreeningEntityProgramListRequest, options?: any): AxiosPromise<WatchlistScreeningEntityProgramListResponse> {
            return localVarFp.watchlistScreeningEntityProgramList(watchlistScreeningEntityProgramListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a review for an entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
         * @summary Create a review for an entity watchlist screening
         * @param {WatchlistScreeningEntityReviewCreateRequest} watchlistScreeningEntityReviewCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityReviewCreate(watchlistScreeningEntityReviewCreateRequest: WatchlistScreeningEntityReviewCreateRequest, options?: any): AxiosPromise<WatchlistScreeningEntityReviewCreateResponse> {
            return localVarFp.watchlistScreeningEntityReviewCreate(watchlistScreeningEntityReviewCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * List all reviews for a particular entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
         * @summary List reviews for entity watchlist screenings
         * @param {WatchlistScreeningEntityReviewListRequest} watchlistScreeningEntityReviewListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityReviewList(watchlistScreeningEntityReviewListRequest: WatchlistScreeningEntityReviewListRequest, options?: any): AxiosPromise<WatchlistScreeningEntityReviewListResponse> {
            return localVarFp.watchlistScreeningEntityReviewList(watchlistScreeningEntityReviewListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an entity watchlist screening.
         * @summary Update an entity screening
         * @param {WatchlistScreeningEntityUpdateRequest} watchlistScreeningEntityUpdateRequest The entity screening was successfully updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityUpdate(watchlistScreeningEntityUpdateRequest: WatchlistScreeningEntityUpdateRequest, options?: any): AxiosPromise<WatchlistScreeningEntityUpdateResponse> {
            return localVarFp.watchlistScreeningEntityUpdate(watchlistScreeningEntityUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Watchlist Screening to check your customer against watchlists defined in the associated Watchlist Program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
         * @summary Create a watchlist screening for a person
         * @param {WatchlistScreeningIndividualCreateRequest} watchlistScreeningIndividualCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualCreate(watchlistScreeningIndividualCreateRequest: WatchlistScreeningIndividualCreateRequest, options?: any): AxiosPromise<WatchlistScreeningIndividualCreateResponse> {
            return localVarFp.watchlistScreeningIndividualCreate(watchlistScreeningIndividualCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a previously created individual watchlist screening
         * @summary Retrieve an individual watchlist screening
         * @param {WatchlistScreeningIndividualGetRequest} watchlistScreeningIndividualGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualGet(watchlistScreeningIndividualGetRequest: WatchlistScreeningIndividualGetRequest, options?: any): AxiosPromise<WatchlistScreeningIndividualGetResponse> {
            return localVarFp.watchlistScreeningIndividualGet(watchlistScreeningIndividualGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * List all changes to the individual watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
         * @summary List history for individual watchlist screenings
         * @param {WatchlistScreeningIndividualHistoryListRequest} watchlistScreeningIndividualHistoryListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualHistoryList(watchlistScreeningIndividualHistoryListRequest: WatchlistScreeningIndividualHistoryListRequest, options?: any): AxiosPromise<WatchlistScreeningIndividualHistoryListResponse> {
            return localVarFp.watchlistScreeningIndividualHistoryList(watchlistScreeningIndividualHistoryListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * List all hits found by Plaid for a particular individual watchlist screening.
         * @summary List hits for individual watchlist screening
         * @param {WatchlistScreeningIndividualHitListRequest} watchlistScreeningIndividualHitListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualHitList(watchlistScreeningIndividualHitListRequest: WatchlistScreeningIndividualHitListRequest, options?: any): AxiosPromise<WatchlistScreeningIndividualHitListResponse> {
            return localVarFp.watchlistScreeningIndividualHitList(watchlistScreeningIndividualHitListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * List previously created watchlist screenings for individuals
         * @summary List Individual Watchlist Screenings
         * @param {WatchlistScreeningIndividualListRequest} watchlistScreeningIndividualListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualList(watchlistScreeningIndividualListRequest: WatchlistScreeningIndividualListRequest, options?: any): AxiosPromise<WatchlistScreeningIndividualListResponse> {
            return localVarFp.watchlistScreeningIndividualList(watchlistScreeningIndividualListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an individual watchlist screening program
         * @summary Get individual watchlist screening program
         * @param {WatchlistScreeningIndividualProgramGetRequest} watchlistScreeningIndividualProgramGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualProgramGet(watchlistScreeningIndividualProgramGetRequest: WatchlistScreeningIndividualProgramGetRequest, options?: any): AxiosPromise<WatchlistScreeningIndividualProgramGetResponse> {
            return localVarFp.watchlistScreeningIndividualProgramGet(watchlistScreeningIndividualProgramGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * List all individual watchlist screening programs
         * @summary List individual watchlist screening programs
         * @param {WatchlistScreeningIndividualProgramListRequest} watchlistScreeningIndividualProgramListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualProgramList(watchlistScreeningIndividualProgramListRequest: WatchlistScreeningIndividualProgramListRequest, options?: any): AxiosPromise<WatchlistScreeningIndividualProgramListResponse> {
            return localVarFp.watchlistScreeningIndividualProgramList(watchlistScreeningIndividualProgramListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a review for the individual watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
         * @summary Create a review for an individual watchlist screening
         * @param {WatchlistScreeningIndividualReviewCreateRequest} watchlistScreeningIndividualReviewCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualReviewCreate(watchlistScreeningIndividualReviewCreateRequest: WatchlistScreeningIndividualReviewCreateRequest, options?: any): AxiosPromise<WatchlistScreeningIndividualReviewCreateResponse> {
            return localVarFp.watchlistScreeningIndividualReviewCreate(watchlistScreeningIndividualReviewCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * List all reviews for the individual watchlist screening.
         * @summary List reviews for individual watchlist screenings
         * @param {WatchlistScreeningIndividualReviewListRequest} watchlistScreeningIndividualReviewListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualReviewList(watchlistScreeningIndividualReviewListRequest: WatchlistScreeningIndividualReviewListRequest, options?: any): AxiosPromise<WatchlistScreeningIndividualReviewListResponse> {
            return localVarFp.watchlistScreeningIndividualReviewList(watchlistScreeningIndividualReviewListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a specific individual watchlist screening. This endpoint can be used to add additional customer information, correct outdated information, add a reference id, assign the individual to a reviewer, and update which program it is associated with. Please note that you may not update `search_terms` and `status` at the same time since editing `search_terms` may trigger an automatic `status` change.
         * @summary Update individual watchlist screening
         * @param {WatchlistScreeningIndividualUpdateRequest} watchlistScreeningIndividualUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualUpdate(watchlistScreeningIndividualUpdateRequest: WatchlistScreeningIndividualUpdateRequest, options?: any): AxiosPromise<WatchlistScreeningIndividualUpdateResponse> {
            return localVarFp.watchlistScreeningIndividualUpdate(watchlistScreeningIndividualUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the `Plaid-Verification` header.  The `/webhook_verification_key/get` endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
         * @summary Get webhook verification key
         * @param {WebhookVerificationKeyGetRequest} webhookVerificationKeyGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookVerificationKeyGet(webhookVerificationKeyGetRequest: WebhookVerificationKeyGetRequest, options?: any): AxiosPromise<WebhookVerificationKeyGetResponse> {
            return localVarFp.webhookVerificationKeyGet(webhookVerificationKeyGetRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PlaidApi - object-oriented interface
 * @export
 * @class PlaidApi
 * @extends {BaseAPI}
 */
export class PlaidApi extends BaseAPI {
    /**
     * The `/accounts/balance/get` endpoint returns the real-time balance for each of an Item\'s accounts. While other endpoints may return a balance object, only `/accounts/balance/get` forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, `balance` itself is not a product that can be used to initialize Link. As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints; if you encounter errors, you may find it necessary to adjust your timeout period when making requests.
     * @summary Retrieve real-time balance data
     * @param {AccountsBalanceGetRequest} accountsBalanceGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public accountsBalanceGet(accountsBalanceGetRequest: AccountsBalanceGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).accountsBalanceGet(accountsBalanceGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/accounts/get` endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance. For items that went through the updated account selection pane, this endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [`NEW_ACCOUNTS_AVAILABLE`](https://plaid.com/docs/api/items/#new_accounts_available) webhook and then use Link\'s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, balances returned may not be up-to-date; for realtime balance information, use `/accounts/balance/get` instead. Note that some information is nullable.
     * @summary Retrieve accounts
     * @param {AccountsGetRequest} accountsGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public accountsGet(accountsGetRequest: AccountsGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).accountsGet(accountsGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences
     * @summary Retrieve information about a Plaid application
     * @param {ApplicationGetRequest} applicationGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public applicationGet(applicationGetRequest: ApplicationGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).applicationGet(applicationGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the `/asset_report/audit_copy/create` endpoint to create an `audit_copy_token` and then pass that token to the third party who needs access. Each third party has its own `auditor_id`, for example `fannie_mae`. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
     * @summary Create Asset Report Audit Copy
     * @param {AssetReportAuditCopyCreateRequest} assetReportAuditCopyCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public assetReportAuditCopyCreate(assetReportAuditCopyCreateRequest: AssetReportAuditCopyCreateRequest, options?: any) {
        return PlaidApiFp(this.configuration).assetReportAuditCopyCreate(assetReportAuditCopyCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * `/asset_report/audit_copy/get` allows auditors to get a copy of an Asset Report that was previously shared via the `/asset_report/audit_copy/create` endpoint.  The caller of `/asset_report/audit_copy/create` must provide the `audit_copy_token` to the auditor.  This token can then be used to call `/asset_report/audit_copy/create`.
     * @summary Retrieve an Asset Report Audit Copy
     * @param {AssetReportAuditCopyGetRequest} assetReportAuditCopyGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public assetReportAuditCopyGet(assetReportAuditCopyGetRequest: AssetReportAuditCopyGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).assetReportAuditCopyGet(assetReportAuditCopyGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/asset_report/audit_copy/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
     * @summary Remove Asset Report Audit Copy
     * @param {AssetReportAuditCopyRemoveRequest} assetReportAuditCopyRemoveRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public assetReportAuditCopyRemove(assetReportAuditCopyRemoveRequest: AssetReportAuditCopyRemoveRequest, options?: any) {
        return PlaidApiFp(this.configuration).assetReportAuditCopyRemove(assetReportAuditCopyRemoveRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/asset_report/create` endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the `asset_report_token` return value to the `/asset_report/get` or `/asset_report/pdf/get` endpoints.  The Asset Report takes some time to be created and is not available immediately after calling `/asset_report/create`. When the Asset Report is ready to be retrieved using `/asset_report/get` or `/asset_report/pdf/get`, Plaid will fire a `PRODUCT_READY` webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/products/assets/#webhooks).  The `/asset_report/create` endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the `/asset_report/refresh` endpoint.
     * @summary Create an Asset Report
     * @param {AssetReportCreateRequest} assetReportCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public assetReportCreate(assetReportCreateRequest: AssetReportCreateRequest, options?: any) {
        return PlaidApiFp(this.configuration).assetReportCreate(assetReportCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the `/accounts/get` endpoint. To narrow an Asset Report to only a subset of accounts, use the `/asset_report/filter` endpoint.  To exclude certain Accounts from an Asset Report, first use the `/asset_report/create` endpoint to create the report, then send the `asset_report_token` along with a list of `account_ids` to exclude to the `/asset_report/filter` endpoint, to create a new Asset Report which contains only a subset of the original Asset Report\'s data.  Because Asset Reports are immutable, calling `/asset_report/filter` does not alter the original Asset Report in any way; rather, `/asset_report/filter` creates a new Asset Report with a new token and id. Asset Reports created via `/asset_report/filter` do not contain new Asset data, and are not billed.  Plaid will fire a [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook once generation of the filtered Asset Report has completed.
     * @summary Filter Asset Report
     * @param {AssetReportFilterRequest} assetReportFilterRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public assetReportFilter(assetReportFilterRequest: AssetReportFilterRequest, options?: any) {
        return PlaidApiFp(this.configuration).assetReportFilter(assetReportFilterRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/asset_report/get` endpoint retrieves the Asset Report in JSON format. Before calling `/asset_report/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report.  If report_type was set to `VERIFICATION_OF_EMPLOYMENT` when the Asset Report was created in asset_report/create, debit transactions and transaction amounts won’t be included in the report.  To retrieve an Asset Report with Insights, call the `/asset_report/get` endpoint with `include_insights` set to `true`.
     * @summary Retrieve an Asset Report
     * @param {AssetReportGetRequest} assetReportGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public assetReportGet(assetReportGetRequest: AssetReportGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).assetReportGet(assetReportGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/asset_report/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/asset_report/pdf/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/asset_report/pdf/get` is the PDF binary data. The `request_id`  is returned in the `Plaid-Request-ID` header.  If `report_type` was set to `VERIFICATION_OF_EMPLOYMENT` when the Asset Report was created in `/asset_report/create`, debit transactions and transaction amounts won’t be included in the report.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
     * @summary Retrieve a PDF Asset Report
     * @param {AssetReportPDFGetRequest} assetReportPDFGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public assetReportPdfGet(assetReportPDFGetRequest: AssetReportPDFGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).assetReportPdfGet(assetReportPDFGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * An Asset Report is an immutable snapshot of a user\'s assets. In order to \"refresh\" an Asset Report you created previously, you can use the `/asset_report/refresh` endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to `/asset_report/filter`. By default, the new Asset Report will also use the same parameters you submitted with your original `/asset_report/create` request, but the original `days_requested` value and the values of any parameters in the `options` object can be overridden with new values. To change these arguments, simply supply new values for them in your request to `/asset_report/refresh`. Submit an empty string (\"\") for any previously-populated fields you would like set as empty.
     * @summary Refresh an Asset Report
     * @param {AssetReportRefreshRequest} assetReportRefreshRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public assetReportRefresh(assetReportRefreshRequest: AssetReportRefreshRequest, options?: any) {
        return PlaidApiFp(this.configuration).assetReportRefresh(assetReportRefreshRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/item/remove` endpoint allows you to invalidate an `access_token`, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The `/asset_report/remove` endpoint allows you to remove an Asset Report. Removing an Asset Report invalidates its `asset_report_token`, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any `audit_copy_tokens` associated with the Asset Report.
     * @summary Delete an Asset Report
     * @param {AssetReportRemoveRequest} assetReportRemoveRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public assetReportRemove(assetReportRemoveRequest: AssetReportRemoveRequest, options?: any) {
        return PlaidApiFp(this.configuration).assetReportRemove(assetReportRemoveRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/auth/get` endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item\'s checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if `auth` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Versioning note: In API version 2017-03-08, the schema of the `numbers` object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
     * @summary Retrieve auth data
     * @param {AuthGetRequest} authGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public authGet(authGetRequest: AuthGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).authGet(authGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the `/bank_transfer/balance/get` endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
     * @summary Get balance of your Bank Transfer account
     * @param {BankTransferBalanceGetRequest} bankTransferBalanceGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public bankTransferBalanceGet(bankTransferBalanceGetRequest: BankTransferBalanceGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).bankTransferBalanceGet(bankTransferBalanceGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the `/bank_transfer/cancel` endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/bank_transfer/get` is `true`.
     * @summary Cancel a bank transfer
     * @param {BankTransferCancelRequest} bankTransferCancelRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public bankTransferCancel(bankTransferCancelRequest: BankTransferCancelRequest, options?: any) {
        return PlaidApiFp(this.configuration).bankTransferCancel(bankTransferCancelRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the `/bank_transfer/create` endpoint to initiate a new bank transfer.
     * @summary Create a bank transfer
     * @param {BankTransferCreateRequest} bankTransferCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public bankTransferCreate(bankTransferCreateRequest: BankTransferCreateRequest, options?: any) {
        return PlaidApiFp(this.configuration).bankTransferCreate(bankTransferCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the `/bank_transfer/event/list` endpoint to get a list of Plaid-initiated ACH or bank transfer events based on specified filter criteria. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://plaid.com/docs/auth/coverage/microdeposit-events/).
     * @summary List bank transfer events
     * @param {BankTransferEventListRequest} bankTransferEventListRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public bankTransferEventList(bankTransferEventListRequest: BankTransferEventListRequest, options?: any) {
        return PlaidApiFp(this.configuration).bankTransferEventList(bankTransferEventListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * `/bank_transfer/event/sync` allows you to request up to the next 25 Plaid-initiated bank transfer events that happened after a specific `event_id`. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://www.plaid.com/docs/auth/coverage/microdeposit-events/).
     * @summary Sync bank transfer events
     * @param {BankTransferEventSyncRequest} bankTransferEventSyncRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public bankTransferEventSync(bankTransferEventSyncRequest: BankTransferEventSyncRequest, options?: any) {
        return PlaidApiFp(this.configuration).bankTransferEventSync(bankTransferEventSyncRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/bank_transfer/get` fetches information about the bank transfer corresponding to the given `bank_transfer_id`.
     * @summary Retrieve a bank transfer
     * @param {BankTransferGetRequest} bankTransferGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public bankTransferGet(bankTransferGetRequest: BankTransferGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).bankTransferGet(bankTransferGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the `/bank_transfer/list` endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired bank transfers. 
     * @summary List bank transfers
     * @param {BankTransferListRequest} bankTransferListRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public bankTransferList(bankTransferListRequest: BankTransferListRequest, options?: any) {
        return PlaidApiFp(this.configuration).bankTransferList(bankTransferListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * As an alternative to adding Items via Link, you can also use the `/bank_transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/bank_transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
     * @summary Migrate account into Bank Transfers
     * @param {BankTransferMigrateAccountRequest} bankTransferMigrateAccountRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public bankTransferMigrateAccount(bankTransferMigrateAccountRequest: BankTransferMigrateAccountRequest, options?: any) {
        return PlaidApiFp(this.configuration).bankTransferMigrateAccount(bankTransferMigrateAccountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/bank_transfer/sweep/get` endpoint fetches information about the sweep corresponding to the given `sweep_id`.
     * @summary Retrieve a sweep
     * @param {BankTransferSweepGetRequest} bankTransferSweepGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public bankTransferSweepGet(bankTransferSweepGetRequest: BankTransferSweepGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).bankTransferSweepGet(bankTransferSweepGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/bank_transfer/sweep/list` endpoint fetches information about the sweeps matching the given filters.
     * @summary List sweeps
     * @param {BankTransferSweepListRequest} bankTransferSweepListRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public bankTransferSweepList(bankTransferSweepListRequest: BankTransferSweepListRequest, options?: any) {
        return PlaidApiFp(this.configuration).bankTransferSweepList(bankTransferSweepListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send a request to the `/categories/get` endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.  All implementations are recommended to use the newer `personal_finance_category` taxonomy instead of the older `category` taxonomy supported by this endpoint. The [`personal_finance_category taxonomy` CSV file](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) is available for download and is not accessible via API.
     * @summary Get categories
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public categoriesGet(body: object, options?: any) {
        return PlaidApiFp(this.configuration).categoriesGet(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/payment_initiation/payment/token/create` endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, `link_token`-based flow. The recommended flow is to provide the `payment_id` to `/link/token/create`, which returns a `link_token` used to initialize Link.  The `/payment_initiation/payment/token/create` is used to create a `payment_token`, which can then be used in Link initialization to enter a payment initiation flow. You can only use a `payment_token` once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
     * @summary Create payment token
     * @param {PaymentInitiationPaymentTokenCreateRequest} paymentInitiationPaymentTokenCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public createPaymentToken(paymentInitiationPaymentTokenCreateRequest: PaymentInitiationPaymentTokenCreateRequest, options?: any) {
        return PlaidApiFp(this.configuration).createPaymentToken(paymentInitiationPaymentTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `credit/asset_report/freddie_mac/get` endpoint retrieves the Asset Report in Freddie Mac\'s JSON format.
     * @summary Retrieve an Asset Report with Freddie Mac format. Only Freddie Mac can use this endpoint.
     * @param {{ [key: string]: object; }} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public creditAssetReportFreddieMacGet(requestBody: { [key: string]: object; }, options?: any) {
        return PlaidApiFp(this.configuration).creditAssetReportFreddieMacGet(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Plaid can create an Audit Copy token of an Asset Report and/or Income Report to share with participating Government Sponsored Entity (GSE). If you participate in the Day 1 Certainty™ program, Plaid can supply an Audit Copy token directly to Fannie Mae on your behalf. An Audit Copy token contains the same underlying data as the Asset Report and/or Income Report (result of /credit/payroll_income/get).  Use the `/credit/audit_copy_token/create` endpoint to create an `audit_copy_token` and then pass that token to the GSE who needs access.
     * @summary Create Asset or Income Report Audit Copy Token
     * @param {CreditAuditCopyTokenCreateRequest} creditAuditCopyTokenCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public creditAuditCopyTokenCreate(creditAuditCopyTokenCreateRequest: CreditAuditCopyTokenCreateRequest, options?: any) {
        return PlaidApiFp(this.configuration).creditAuditCopyTokenCreate(creditAuditCopyTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/credit/audit_copy_token/update` endpoint updates an existing  Audit Copy Token by adding the report tokens in the `report_tokens` field to the `audit_copy_token`. If the Audit Copy Token already contains a report of a certain type, it will be replaced with the token provided in the `report_tokens` field.
     * @summary Update an Audit Copy Token
     * @param {CreditAuditCopyTokenUpdateRequest} creditAuditCopyTokenUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public creditAuditCopyTokenUpdate(creditAuditCopyTokenUpdateRequest: CreditAuditCopyTokenUpdateRequest, options?: any) {
        return PlaidApiFp(this.configuration).creditAuditCopyTokenUpdate(creditAuditCopyTokenUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * `/credit/bank_employment/get` returns the employment report(s) derived from bank transaction data for a specified user.
     * @summary Retrieve information from the bank accounts used for employment verification
     * @param {CreditBankEmploymentGetRequest} creditBankEmploymentGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public creditBankEmploymentGet(creditBankEmploymentGetRequest: CreditBankEmploymentGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).creditBankEmploymentGet(creditBankEmploymentGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * `/credit/bank_income/get` returns the bank income report(s) for a specified user.
     * @summary Retrieve information from the bank accounts used for income verification
     * @param {CreditBankIncomeGetRequest} creditBankIncomeGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public creditBankIncomeGet(creditBankIncomeGetRequest: CreditBankIncomeGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).creditBankIncomeGet(creditBankIncomeGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * `/credit/bank_income/pdf/get` returns the most recent bank income report for a specified user in PDF format.
     * @summary Retrieve information from the bank accounts used for income verification in PDF format
     * @param {CreditBankIncomePDFGetRequest} creditBankIncomePDFGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public creditBankIncomePdfGet(creditBankIncomePDFGetRequest: CreditBankIncomePDFGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).creditBankIncomePdfGet(creditBankIncomePDFGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * `/credit/bank_income/refresh` refreshes the bank income report data for a specific user.
     * @summary Refresh a user\'s bank income information
     * @param {CreditBankIncomeRefreshRequest} creditBankIncomeRefreshRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public creditBankIncomeRefresh(creditBankIncomeRefreshRequest: CreditBankIncomeRefreshRequest, options?: any) {
        return PlaidApiFp(this.configuration).creditBankIncomeRefresh(creditBankIncomeRefreshRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * `/credit/bank_income/webhook/update` allows you to subscribe or unsubscribe a user for income webhook notifications.  If a user is subscribed, on significant changes to the user\'s income profile, you will receive a `BANK_INCOME_REFRESH_UPDATE` webhook, prompting you to refresh bank income data for the user.
     * @summary Subscribe and unsubscribe to proactive notifications for a user\'s income profile
     * @param {CreditBankIncomeWebhookUpdateRequest} creditBankIncomeWebhookUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public creditBankIncomeWebhookUpdate(creditBankIncomeWebhookUpdateRequest: CreditBankIncomeWebhookUpdateRequest, options?: any) {
        return PlaidApiFp(this.configuration).creditBankIncomeWebhookUpdate(creditBankIncomeWebhookUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * `/credit/bank_statements/uploads/get` returns data from user-uploaded bank statements.
     * @summary Retrieve data for a user\'s uploaded bank statements
     * @param {CreditBankStatementsUploadsGetRequest} creditBankStatementsUploadsGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public creditBankStatementsUploadsGet(creditBankStatementsUploadsGetRequest: CreditBankStatementsUploadsGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).creditBankStatementsUploadsGet(creditBankStatementsUploadsGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * `/credit/employment/get` returns a list of items with employment information from a user\'s payroll provider that was verified by an end user.
     * @summary Retrieve a summary of an individual\'s employment information
     * @param {CreditEmploymentGetRequest} creditEmploymentGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public creditEmploymentGet(creditEmploymentGetRequest: CreditEmploymentGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).creditEmploymentGet(creditEmploymentGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `credit/asset_report/freddie_mac/get` endpoint retrieves the Verification of Assets and Verification of Employment reports.
     * @summary Retrieve an Asset Report with Freddie Mac format (aka VOA - Verification Of Assets), and a Verification Of Employment (VOE) report if this one is available. Only Freddie Mac can use this endpoint.
     * @param {CreditFreddieMacReportsGetRequest} creditFreddieMacReportsGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public creditFreddieMacReportsGet(creditFreddieMacReportsGetRequest: CreditFreddieMacReportsGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).creditFreddieMacReportsGet(creditFreddieMacReportsGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint gets payroll income information for a specific user, either as a result of the user connecting to their payroll provider or uploading a pay related document.
     * @summary Retrieve a user\'s payroll information
     * @param {CreditPayrollIncomeGetRequest} creditPayrollIncomeGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public creditPayrollIncomeGet(creditPayrollIncomeGetRequest: CreditPayrollIncomeGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).creditPayrollIncomeGet(creditPayrollIncomeGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * `/credit/payroll_income/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification. If the user is eligible for digital verification, that information will be associated with the user token, and in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing `employer` data will increase the chance of receiving a useful result.  When testing in Sandbox, you can control the results by providing special test values in the `employer` and `access_tokens` fields. `employer_good` and `employer_bad` will result in `HIGH` and `LOW` confidence values, respectively. `employer_multi` will result in a `HIGH` confidence with multiple payroll options. Likewise, `access_good` and `access_bad` will result in `HIGH` and `LOW` confidence values, respectively. Any other value for `employer` and `access_tokens` in Sandbox will result in `UNKNOWN` confidence.
     * @summary Check income verification eligibility and optimize conversion
     * @param {CreditPayrollIncomePrecheckRequest} creditPayrollIncomePrecheckRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public creditPayrollIncomePrecheck(creditPayrollIncomePrecheckRequest: CreditPayrollIncomePrecheckRequest, options?: any) {
        return PlaidApiFp(this.configuration).creditPayrollIncomePrecheck(creditPayrollIncomePrecheckRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * `/credit/payroll_income/refresh` refreshes a given digital payroll income verification.
     * @summary Refresh a digital payroll income verification
     * @param {CreditPayrollIncomeRefreshRequest} creditPayrollIncomeRefreshRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public creditPayrollIncomeRefresh(creditPayrollIncomeRefreshRequest: CreditPayrollIncomeRefreshRequest, options?: any) {
        return PlaidApiFp(this.configuration).creditPayrollIncomeRefresh(creditPayrollIncomeRefreshRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * `/credit/payroll_income/risk_signals/get` can be used as part of the Document Income flow to assess a user-uploaded document for signs of potential fraud or tampering. It returns a risk score for each uploaded document that indicates the likelihood of the document being fraudulent, in addition to details on the individual risk signals contributing to the score. `/credit/payroll_income/risk_signals/get` can be called at any time after the `INCOME_VERIFICATION_RISK_SIGNALS` webhook has been fired.  `/credit/payroll_income/risk_signals/get` is offered as an add-on to Document Income and is billed separately. To request access to this endpoint, submit a product access request or contact your Plaid account manager.
     * @summary Retrieve fraud insights for a user\'s manually uploaded document(s).
     * @param {CreditPayrollIncomeRiskSignalsGetRequest} creditPayrollIncomeRiskSignalsGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public creditPayrollIncomeRiskSignalsGet(creditPayrollIncomeRiskSignalsGetRequest: CreditPayrollIncomeRiskSignalsGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).creditPayrollIncomeRiskSignalsGet(creditPayrollIncomeRiskSignalsGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Plaid can share an Asset Report directly with a participating third party on your behalf. The shared Asset Report is the exact same Asset Report originally created in `/asset_report/create`.  To grant a third party access to an Asset Report, use the `/credit/relay/create` endpoint to create a `relay_token` and then pass that token to your third party. Each third party has its own `secondary_client_id`; for example, `ce5bd328dcd34123456`. You\'ll need to create a separate `relay_token` for each third party that needs access to the report on your behalf.
     * @summary Create a relay token to share an Asset Report with a partner client (beta)
     * @param {CreditRelayCreateRequest} creditRelayCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public creditRelayCreate(creditRelayCreateRequest: CreditRelayCreateRequest, options?: any) {
        return PlaidApiFp(this.configuration).creditRelayCreate(creditRelayCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * `/credit/relay/get` allows third parties to receive a report that was shared with them, using a `relay_token` that was created by the report owner.
     * @summary Retrieve the reports associated with a relay token that was shared with you (beta)
     * @param {CreditRelayGetRequest} creditRelayGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public creditRelayGet(creditRelayGetRequest: CreditRelayGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).creditRelayGet(creditRelayGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/credit/relay/refresh` endpoint allows third parties to refresh a report that was relayed to them, using a `relay_token` that was created by the report owner. A new report will be created with the original report parameters, but with the most recent data available based on the `days_requested` value of the original report.
     * @summary Refresh a report of a relay token (beta)
     * @param {CreditRelayRefreshRequest} creditRelayRefreshRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public creditRelayRefresh(creditRelayRefreshRequest: CreditRelayRefreshRequest, options?: any) {
        return PlaidApiFp(this.configuration).creditRelayRefresh(creditRelayRefreshRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/credit/relay/remove` endpoint allows you to invalidate a `relay_token`. The third party holding the token will no longer be able to access or refresh the reports which the `relay_token` gives access to. The original report, associated Items, and other relay tokens that provide access to the same report are not affected and will remain accessible after removing the given `relay_token`.
     * @summary Remove relay token (beta)
     * @param {CreditRelayRemoveRequest} creditRelayRemoveRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public creditRelayRemove(creditRelayRemoveRequest: CreditRelayRemoveRequest, options?: any) {
        return PlaidApiFp(this.configuration).creditRelayRemove(creditRelayRemoveRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/credit/audit_copy_token/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Report data and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
     * @summary Remove an Audit Copy token
     * @param {CreditAuditCopyTokenRemoveRequest} creditAuditCopyTokenRemoveRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public creditReportAuditCopyRemove(creditAuditCopyTokenRemoveRequest: CreditAuditCopyTokenRemoveRequest, options?: any) {
        return PlaidApiFp(this.configuration).creditReportAuditCopyRemove(creditAuditCopyTokenRemoveRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint can be used for your end users after they complete the Link flow. This endpoint returns a list of Link sessions that your user completed, where each session includes the results from the Link flow.  These results include details about the Item that was created and some product related metadata (showing, for example, whether the user finished the bank income verification step).
     * @summary Retrieve Link sessions for your user
     * @param {CreditSessionsGetRequest} creditSessionsGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public creditSessionsGet(creditSessionsGetRequest: CreditSessionsGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).creditSessionsGet(creditSessionsGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve information about a dashboard user.
     * @summary Retrieve a dashboard user
     * @param {DashboardUserGetRequest} dashboardUserGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public dashboardUserGet(dashboardUserGetRequest: DashboardUserGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).dashboardUserGet(dashboardUserGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all dashboard users associated with your account.
     * @summary List dashboard users
     * @param {DashboardUserListRequest} dashboardUserListRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public dashboardUserList(dashboardUserListRequest: DashboardUserListRequest, options?: any) {
        return PlaidApiFp(this.configuration).dashboardUserList(dashboardUserListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint provides an alternative to `/deposit_switch/create` for customers who have not yet fully integrated with Plaid Exchange. Like `/deposit_switch/create`, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
     * @summary Create a deposit switch without using Plaid Exchange
     * @param {DepositSwitchAltCreateRequest} depositSwitchAltCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public depositSwitchAltCreate(depositSwitchAltCreateRequest: DepositSwitchAltCreateRequest, options?: any) {
        return PlaidApiFp(this.configuration).depositSwitchAltCreate(depositSwitchAltCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
     * @summary Create a deposit switch
     * @param {DepositSwitchCreateRequest} depositSwitchCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public depositSwitchCreate(depositSwitchCreateRequest: DepositSwitchCreateRequest, options?: any) {
        return PlaidApiFp(this.configuration).depositSwitchCreate(depositSwitchCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user\'s direct deposit allocation preferences.
     * @summary Retrieve a deposit switch
     * @param {DepositSwitchGetRequest} depositSwitchGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public depositSwitchGet(depositSwitchGetRequest: DepositSwitchGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).depositSwitchGet(depositSwitchGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes. 
     * @summary Create a deposit switch token
     * @param {DepositSwitchTokenCreateRequest} depositSwitchTokenCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public depositSwitchTokenCreate(depositSwitchTokenCreateRequest: DepositSwitchTokenCreateRequest, options?: any) {
        return PlaidApiFp(this.configuration).depositSwitchTokenCreate(depositSwitchTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * `/employers/search` allows you the ability to search Plaid’s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user\'s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
     * @summary Search employer database
     * @param {EmployersSearchRequest} employersSearchRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public employersSearch(employersSearchRequest: EmployersSearchRequest, options?: any) {
        return PlaidApiFp(this.configuration).employersSearch(employersSearchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * `/employment/verification/get` returns a list of employments through a user payroll that was verified by an end user.  This endpoint has been deprecated; new integrations should use `/credit/employment/get` instead.
     * @summary (Deprecated) Retrieve a summary of an individual\'s employment information
     * @param {EmploymentVerificationGetRequest} employmentVerificationGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public employmentVerificationGet(employmentVerificationGetRequest: EmploymentVerificationGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).employmentVerificationGet(employmentVerificationGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A generic webhook receiver endpoint for FDX Event Notifications
     * @summary Webhook receiver for fdx notifications
     * @param {FDXNotification} fDXNotification 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public fdxNotifications(fDXNotification: FDXNotification, options?: any) {
        return PlaidApiFp(this.configuration).fdxNotifications(fDXNotification, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Note: In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29).
     * @summary Retrieve identity data
     * @param {IdentityGetRequest} identityGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public identityGet(identityGetRequest: IdentityGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).identityGet(identityGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/identity/match` endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder\'s financial institution.  This request may take some time to complete if Identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
     * @summary Retrieve identity match score
     * @param {IdentityMatchRequest} identityMatchRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public identityMatch(identityMatchRequest: IdentityMatchRequest, options?: any) {
        return PlaidApiFp(this.configuration).identityMatch(identityMatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * `/identity/refresh` is an optional endpoint for users of the Identity product. It initiates an on-demand extraction to fetch the most up to date Identity information from the Financial Institution. This on-demand extraction takes place in addition to the periodic extractions that automatically occur any Identity-enabled Item. If changes to Identity are discovered after calling `/identity/refresh`, Plaid will fire a webhook [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/identity/#default_update). `/identity/refresh` is offered as an add-on to Identity and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
     * @summary Refresh identity data
     * @param {IdentityRefreshRequest} identityRefreshRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public identityRefresh(identityRefreshRequest: IdentityRefreshRequest, options?: any) {
        return PlaidApiFp(this.configuration).identityRefresh(identityRefreshRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new Identity Verification for the user specified by the `client_user_id` field. The requirements and behavior of the verification are determined by the `template_id` provided. If you don\'t know whether the associated user already has an active Identity Verification, you can specify `\"is_idempotent\": true` in the request body. With idempotency enabled, a new Identity Verification will only be created if one does not already exist for the associated `client_user_id` and `template_id`. If an Identity Verification is found, it will be returned unmodified with an `200 OK` HTTP status code.  You can also use this endpoint to supply information you already have collected about the user; if any of these fields are specified, the screens prompting the user to enter them will be skipped during the Link flow. 
     * @summary Create a new identity verification
     * @param {IdentityVerificationCreateRequest} identityVerificationCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public identityVerificationCreate(identityVerificationCreateRequest: IdentityVerificationCreateRequest, options?: any) {
        return PlaidApiFp(this.configuration).identityVerificationCreate(identityVerificationCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a previously created identity verification.
     * @summary Retrieve Identity Verification
     * @param {IdentityVerificationGetRequest} identityVerificationGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public identityVerificationGet(identityVerificationGetRequest: IdentityVerificationGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).identityVerificationGet(identityVerificationGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Filter and list Identity Verifications created by your account
     * @summary List Identity Verifications
     * @param {IdentityVerificationListRequest} identityVerificationListRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public identityVerificationList(identityVerificationListRequest: IdentityVerificationListRequest, options?: any) {
        return PlaidApiFp(this.configuration).identityVerificationList(identityVerificationListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allow a customer to retry their identity verification
     * @summary Retry an Identity Verification
     * @param {IdentityVerificationRetryRequest} identityVerificationRetryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public identityVerificationRetry(identityVerificationRetryRequest: IdentityVerificationRetryRequest, options?: any) {
        return PlaidApiFp(this.configuration).identityVerificationRetry(identityVerificationRetryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * `/income/verification/create` begins the income verification process by returning an `income_verification_id`. You can then provide the `income_verification_id` to `/link/token/create` under the `income_verification` parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an `INCOME` webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing. 
     * @summary (Deprecated) Create an income verification instance
     * @param {IncomeVerificationCreateRequest} incomeVerificationCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public incomeVerificationCreate(incomeVerificationCreateRequest: IncomeVerificationCreateRequest, options?: any) {
        return PlaidApiFp(this.configuration).incomeVerificationCreate(incomeVerificationCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * `/income/verification/documents/download` provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to `/income/verification/documents/download` is a ZIP file in binary data. If a `document_id` is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The `request_id` is returned in the `Plaid-Request-ID` header.
     * @summary (Deprecated) Download the original documents used for income verification
     * @param {IncomeVerificationDocumentsDownloadRequest} incomeVerificationDocumentsDownloadRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public incomeVerificationDocumentsDownload(incomeVerificationDocumentsDownloadRequest: IncomeVerificationDocumentsDownloadRequest, options?: any) {
        return PlaidApiFp(this.configuration).incomeVerificationDocumentsDownload(incomeVerificationDocumentsDownloadRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * `/income/verification/paystubs/get` returns the information collected from the paystubs that were used to verify an end user\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
     * @summary (Deprecated) Retrieve information from the paystubs used for income verification
     * @param {IncomeVerificationPaystubsGetRequest} incomeVerificationPaystubsGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public incomeVerificationPaystubsGet(incomeVerificationPaystubsGetRequest: IncomeVerificationPaystubsGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).incomeVerificationPaystubsGet(incomeVerificationPaystubsGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * `/income/verification/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a `precheck_id` that can be provided to `/link/token/create`. If the user is eligible for digital verification, providing the `precheck_id` in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the `precheck_id` can still be provided to `/link/token/create` and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either `employer` or `transactions_access_tokens` data will increase the chance of receiving a useful result.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/precheck` instead.
     * @summary (Deprecated) Check digital income verification eligibility and optimize conversion
     * @param {IncomeVerificationPrecheckRequest} incomeVerificationPrecheckRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public incomeVerificationPrecheck(incomeVerificationPrecheckRequest: IncomeVerificationPrecheckRequest, options?: any) {
        return PlaidApiFp(this.configuration).incomeVerificationPrecheck(incomeVerificationPrecheckRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * `/income/verification/taxforms/get` returns the information collected from forms that were used to verify an end user\'\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
     * @summary (Deprecated) Retrieve information from the tax documents used for income verification
     * @param {IncomeVerificationTaxformsGetRequest} incomeVerificationTaxformsGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public incomeVerificationTaxformsGet(incomeVerificationTaxformsGetRequest: IncomeVerificationTaxformsGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).incomeVerificationTaxformsGet(incomeVerificationTaxformsGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institution’s enabled products and a client’s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
     * @summary Get details of all supported institutions
     * @param {InstitutionsGetRequest} institutionsGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public institutionsGet(institutionsGetRequest: InstitutionsGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).institutionsGet(institutionsGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a JSON response containing details on a specified financial institution currently supported by Plaid.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` to authenticate to this endpoint. The `public_key` has been deprecated; all customers are encouraged to use `client_id` and `secret` instead. 
     * @summary Get details of an institution
     * @param {InstitutionsGetByIdRequest} institutionsGetByIdRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public institutionsGetById(institutionsGetByIdRequest: InstitutionsGetByIdRequest, options?: any) {
        return PlaidApiFp(this.configuration).institutionsGetById(institutionsGetByIdRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` parameters to authenticate to this endpoint. The `public_key` parameter has since been deprecated; all customers are encouraged to use `client_id` and `secret` instead. 
     * @summary Search institutions
     * @param {InstitutionsSearchRequest} institutionsSearchRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public institutionsSearch(institutionsSearchRequest: InstitutionsSearchRequest, options?: any) {
        return PlaidApiFp(this.configuration).institutionsSearch(institutionsSearchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/investments/auth/get` endpoint allows developers to receive user-authorized data to facilitate the transfer of holdings
     * @summary Get data needed to authorize an investments transfer
     * @param {InvestmentsAuthGetRequest} investmentsAuthGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public investmentsAuthGet(investmentsAuthGetRequest: InvestmentsAuthGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).investmentsAuthGet(investmentsAuthGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/investments/holdings/get` endpoint allows developers to receive user-authorized stock position data for `investment`-type accounts.
     * @summary Get Investment holdings
     * @param {InvestmentsHoldingsGetRequest} investmentsHoldingsGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public investmentsHoldingsGet(investmentsHoldingsGetRequest: InvestmentsHoldingsGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).investmentsHoldingsGet(investmentsHoldingsGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * `/investments/refresh` is an optional endpoint for users of the Investments product. It initiates an on-demand extraction to fetch the newest investments, holdings and investment transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Investments-enabled Item. If changes to investments are discovered after calling `/investments/refresh`, Plaid will fire webhooks: [`HOLDINGS: DEFAULT_UPDATE`](https://plaid.com/docs/api/products/investments/#holdings-default_update) if any new holdings are detected, and [INVESTMENTS_TRANSACTIONS: DEFAULT_UPDATE](https://plaid.com/docs/api/products/investments/#investments_transactions-default_update) if any new investment transactions are detected. Updated holdings and investment transactions can be fetched by calling `/investments/holdings/get` and `/investments/transactions/get`. \"Note that the `/investments/refresh` endpoint is not supported by all institutions. If called on an Item from an institution that does not support this functionality, it will return a `PRODUCT_NOT_SUPPORTED` error. `/investments/refresh` is offered as an add-on to Investments and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
     * @summary Refresh investment data
     * @param {InvestmentsRefreshRequest} investmentsRefreshRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public investmentsRefresh(investmentsRefreshRequest: InvestmentsRefreshRequest, options?: any) {
        return PlaidApiFp(this.configuration).investmentsRefresh(investmentsRefreshRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/investments/transactions/get` endpoint allows developers to retrieve up to 24 months of user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the `total_investment_transactions` response body field to fetch all available investment transactions.  Note that Investments does not have a webhook to indicate when initial transaction data has loaded. Instead, if transactions data is not ready when `/investments/transactions/get` is first called, Plaid will wait for the data. For this reason, calling `/investments/transactions/get` immediately after Link may take up to one to two minutes to return.
     * @summary Get investment transactions
     * @param {InvestmentsTransactionsGetRequest} investmentsTransactionsGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public investmentsTransactionsGet(investmentsTransactionsGetRequest: InvestmentsTransactionsGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).investmentsTransactionsGet(investmentsTransactionsGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * By default, the `access_token` associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the `/item/access_token/invalidate` endpoint to rotate the `access_token` associated with an Item. The endpoint returns a new `access_token` and immediately invalidates the previous `access_token`. 
     * @summary Invalidate access_token
     * @param {ItemAccessTokenInvalidateRequest} itemAccessTokenInvalidateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public itemAccessTokenInvalidate(itemAccessTokenInvalidateRequest: ItemAccessTokenInvalidateRequest, options?: any) {
        return PlaidApiFp(this.configuration).itemAccessTokenInvalidate(itemAccessTokenInvalidateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a historical log of user consent events
     * @summary List a historical log of user consent events
     * @param {ItemActivityListRequest} itemActivityListRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public itemActivityList(itemActivityListRequest: ItemActivityListRequest, options?: any) {
        return PlaidApiFp(this.configuration).itemActivityList(itemActivityListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user’s connected applications
     * @summary List a user’s connected applications
     * @param {ItemApplicationListRequest} itemApplicationListRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public itemApplicationList(itemApplicationListRequest: ItemApplicationListRequest, options?: any) {
        return PlaidApiFp(this.configuration).itemApplicationList(itemApplicationListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Enable consumers to update product access on selected accounts for an application.
     * @summary Update the scopes of access for a particular application
     * @param {ItemApplicationScopesUpdateRequest} itemApplicationScopesUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public itemApplicationScopesUpdate(itemApplicationScopesUpdateRequest: ItemApplicationScopesUpdateRequest, options?: any) {
        return PlaidApiFp(this.configuration).itemApplicationScopesUpdate(itemApplicationScopesUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Note: As of July 2020, the `/item/public_token/create` endpoint is deprecated. Instead, use `/link/token/create` with an `access_token` to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the `/item/public_token/create` endpoint and then initialize Link with that `public_token`.  A `public_token` is one-time use and expires after 30 minutes. You use a `public_token` to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a `public_token` for an Item even if you did not use Link to create the Item originally.  The `/item/public_token/create` endpoint is **not** used to create your initial `public_token`. If you have not already received an `access_token` for a specific Item, use Link to obtain your `public_token` instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
     * @summary Create public token
     * @param {ItemPublicTokenCreateRequest} itemPublicTokenCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public itemCreatePublicToken(itemPublicTokenCreateRequest: ItemPublicTokenCreateRequest, options?: any) {
        return PlaidApiFp(this.configuration).itemCreatePublicToken(itemPublicTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns information about the status of an Item.
     * @summary Retrieve an Item
     * @param {ItemGetRequest} itemGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public itemGet(itemGetRequest: ItemGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).itemGet(itemGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * `/item/import` creates an Item via your Plaid Exchange Integration and returns an `access_token`. As part of an `/item/import` request, you will include a User ID (`user_auth.user_id`) and Authentication Token (`user_auth.auth_token`) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via `/item/import`, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated.
     * @summary Import Item
     * @param {ItemImportRequest} itemImportRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public itemImport(itemImportRequest: ItemImportRequest, options?: any) {
        return PlaidApiFp(this.configuration).itemImport(itemImportRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Exchange a Link `public_token` for an API `access_token`. Link hands off the `public_token` client-side via the `onSuccess` callback once a user has successfully created an Item. The `public_token` is ephemeral and expires after 30 minutes. An `access_token` does not expire, but can be revoked by calling `/item/remove`.  The response also includes an `item_id` that should be stored with the `access_token`. The `item_id` is used to identify an Item in a webhook. The `item_id` can also be retrieved by making an `/item/get` request.
     * @summary Exchange public token for an access token
     * @param {ItemPublicTokenExchangeRequest} itemPublicTokenExchangeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public itemPublicTokenExchange(itemPublicTokenExchangeRequest: ItemPublicTokenExchangeRequest, options?: any) {
        return PlaidApiFp(this.configuration).itemPublicTokenExchange(itemPublicTokenExchangeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/item/remove` endpoint allows you to remove an Item. Once removed, the `access_token`, as well as any processor tokens or bank account tokens associated with the Item, is no longer valid and cannot be used to access any data that was associated with the Item.  Note that in the Development environment, issuing an `/item/remove`  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via `/item/remove` may still show as an active connection in the institution\'s OAuth permission manager.  API versions 2019-05-29 and earlier return a `removed` boolean as part of the response.
     * @summary Remove an Item
     * @param {ItemRemoveRequest} itemRemoveRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public itemRemove(itemRemoveRequest: ItemRemoveRequest, options?: any) {
        return PlaidApiFp(this.configuration).itemRemove(itemRemoveRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The POST `/item/webhook/update` allows you to update the webhook URL associated with an Item. This request triggers a [`WEBHOOK_UPDATE_ACKNOWLEDGED`](https://plaid.com/docs/api/items/#webhook_update_acknowledged) webhook to the newly specified webhook URL.
     * @summary Update Webhook URL
     * @param {ItemWebhookUpdateRequest} itemWebhookUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public itemWebhookUpdate(itemWebhookUpdateRequest: ItemWebhookUpdateRequest, options?: any) {
        return PlaidApiFp(this.configuration).itemWebhookUpdate(itemWebhookUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/liabilities/get` endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the `account_filters` parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/liabilities/get`.  Note: This request may take some time to complete if `liabilities` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.
     * @summary Retrieve Liabilities data
     * @param {LiabilitiesGetRequest} liabilitiesGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public liabilitiesGet(liabilitiesGetRequest: LiabilitiesGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).liabilitiesGet(liabilitiesGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the `/link_delivery/create` endpoint to create a Hosted Link session.
     * @summary Create Hosted Link session
     * @param {LinkDeliveryCreateRequest} linkDeliveryCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public linkDeliveryCreate(linkDeliveryCreateRequest: LinkDeliveryCreateRequest, options?: any) {
        return PlaidApiFp(this.configuration).linkDeliveryCreate(linkDeliveryCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the `/link_delivery/get` endpoint to get the status of a Hosted Link session.
     * @summary Get Hosted Link session
     * @param {LinkDeliveryGetRequest} linkDeliveryGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public linkDeliveryGet(linkDeliveryGetRequest: LinkDeliveryGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).linkDeliveryGet(linkDeliveryGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Exchange an OAuth `link_correlation_id` for the corresponding `link_token`. The `link_correlation_id` is only available for \'payment_initiation\' products and is provided to the client via the OAuth `redirect_uri` as a query parameter. The `link_correlation_id` is ephemeral and expires in a brief period, after which it can no longer be exchanged for the \'link_token\'.
     * @summary Exchange the Link Correlation Id for a Link Token
     * @param {LinkOAuthCorrelationIdExchangeRequest} linkOAuthCorrelationIdExchangeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public linkOauthCorrelationIdExchange(linkOAuthCorrelationIdExchangeRequest: LinkOAuthCorrelationIdExchangeRequest, options?: any) {
        return PlaidApiFp(this.configuration).linkOauthCorrelationIdExchange(linkOAuthCorrelationIdExchangeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/link/token/create` endpoint creates a `link_token`, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a `public_token`, which can then be exchanged for an `access_token` via `/item/public_token/exchange` as part of the main Link flow.  A `link_token` generated by `/link/token/create` is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.
     * @summary Create Link Token
     * @param {LinkTokenCreateRequest} linkTokenCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public linkTokenCreate(linkTokenCreateRequest: LinkTokenCreateRequest, options?: any) {
        return PlaidApiFp(this.configuration).linkTokenCreate(linkTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/link/token/get` endpoint gets information about a previously-created `link_token` using the `/link/token/create` endpoint. It can be useful for debugging purposes.
     * @summary Get Link Token
     * @param {LinkTokenGetRequest} linkTokenGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public linkTokenGet(linkTokenGetRequest: LinkTokenGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).linkTokenGet(linkTokenGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/partner/customer/create` endpoint is used by reseller partners to create end customers.
     * @summary Creates a new end customer for a Plaid reseller.
     * @param {PartnerCustomerCreateRequest} partnerCustomerCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public partnerCustomerCreate(partnerCustomerCreateRequest: PartnerCustomerCreateRequest, options?: any) {
        return PlaidApiFp(this.configuration).partnerCustomerCreate(partnerCustomerCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/partner/customer/enable` endpoint is used by reseller partners to enable an end customer in the Production environment.
     * @summary Enables a Plaid reseller\'s end customer in the Production environment.
     * @param {PartnerCustomerEnableRequest} partnerCustomerEnableRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public partnerCustomerEnable(partnerCustomerEnableRequest: PartnerCustomerEnableRequest, options?: any) {
        return PlaidApiFp(this.configuration).partnerCustomerEnable(partnerCustomerEnableRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/partner/customer/get` endpoint is used by reseller partners to retrieve data about a single end customer.
     * @summary Returns a Plaid reseller\'s end customer.
     * @param {PartnerCustomerGetRequest} partnerCustomerGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public partnerCustomerGet(partnerCustomerGetRequest: PartnerCustomerGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).partnerCustomerGet(partnerCustomerGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/partner/customer/oauth_institutions/get` endpoint is used by reseller partners to retrieve OAuth-institution registration information about a single end customer. To learn how to set up a webhook to listen to status update events, visit the [reseller documentation](https://plaid.com/docs/account/resellers/#enabling-end-customers).
     * @summary Returns OAuth-institution registration information for a given end customer.
     * @param {PartnerCustomerOAuthInstitutionsGetRequest} partnerCustomerOAuthInstitutionsGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public partnerCustomerOauthInstitutionsGet(partnerCustomerOAuthInstitutionsGetRequest: PartnerCustomerOAuthInstitutionsGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).partnerCustomerOauthInstitutionsGet(partnerCustomerOAuthInstitutionsGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/partner/customer/remove` endpoint is used by reseller partners to remove an end customer. Removing an end customer will remove it from view in the Plaid Dashboard and deactivate its API keys. This endpoint can only be used to remove an end customer that has not yet been enabled in Production.
     * @summary Removes a Plaid reseller\'s end customer.
     * @param {PartnerCustomerRemoveRequest} partnerCustomerRemoveRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public partnerCustomerRemove(partnerCustomerRemoveRequest: PartnerCustomerRemoveRequest, options?: any) {
        return PlaidApiFp(this.configuration).partnerCustomerRemove(partnerCustomerRemoveRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/payment_initiation/consent/create` endpoint is used to create a payment consent, which can be used to initiate payments on behalf of the user. Payment consents are created with `UNAUTHORISED` status by default and must be authorised by the user before payments can be initiated.  Consents can be limited in time and scope, and have constraints that describe limitations for payments.
     * @summary Create payment consent
     * @param {PaymentInitiationConsentCreateRequest} paymentInitiationConsentCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public paymentInitiationConsentCreate(paymentInitiationConsentCreateRequest: PaymentInitiationConsentCreateRequest, options?: any) {
        return PlaidApiFp(this.configuration).paymentInitiationConsentCreate(paymentInitiationConsentCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/payment_initiation/consent/get` endpoint can be used to check the status of a payment consent, as well as to receive basic information such as recipient and constraints.
     * @summary Get payment consent
     * @param {PaymentInitiationConsentGetRequest} paymentInitiationConsentGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public paymentInitiationConsentGet(paymentInitiationConsentGetRequest: PaymentInitiationConsentGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).paymentInitiationConsentGet(paymentInitiationConsentGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/payment_initiation/consent/payment/execute` endpoint can be used to execute payments using payment consent.
     * @summary Execute a single payment using consent
     * @param {PaymentInitiationConsentPaymentExecuteRequest} paymentInitiationConsentPaymentExecuteRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public paymentInitiationConsentPaymentExecute(paymentInitiationConsentPaymentExecuteRequest: PaymentInitiationConsentPaymentExecuteRequest, options?: any) {
        return PlaidApiFp(this.configuration).paymentInitiationConsentPaymentExecute(paymentInitiationConsentPaymentExecuteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/payment_initiation/consent/revoke` endpoint can be used to revoke the payment consent. Once the consent is revoked, it is not possible to initiate payments using it.
     * @summary Revoke payment consent
     * @param {PaymentInitiationConsentRevokeRequest} paymentInitiationConsentRevokeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public paymentInitiationConsentRevoke(paymentInitiationConsentRevokeRequest: PaymentInitiationConsentRevokeRequest, options?: any) {
        return PlaidApiFp(this.configuration).paymentInitiationConsentRevoke(paymentInitiationConsentRevokeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * After creating a payment recipient, you can use the `/payment_initiation/payment/create` endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR, GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency).  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer, GBP-denominated payments will be sent via the Faster Payments network and for non-Eurozone markets typically via the local payment scheme, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer or other local payment schemes will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipient’s account, although at least 90% of standing order payments are sent by 6am.  In the Development environment, payments must be below 5 GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency). For details on any payment limits in Production, contact your Plaid Account Manager.
     * @summary Create a payment
     * @param {PaymentInitiationPaymentCreateRequest} paymentInitiationPaymentCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public paymentInitiationPaymentCreate(paymentInitiationPaymentCreateRequest: PaymentInitiationPaymentCreateRequest, options?: any) {
        return PlaidApiFp(this.configuration).paymentInitiationPaymentCreate(paymentInitiationPaymentCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/payment_initiation/payment/get` endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the `/payment_initiation/payment/get` endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.
     * @summary Get payment details
     * @param {PaymentInitiationPaymentGetRequest} paymentInitiationPaymentGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public paymentInitiationPaymentGet(paymentInitiationPaymentGetRequest: PaymentInitiationPaymentGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).paymentInitiationPaymentGet(paymentInitiationPaymentGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/payment_initiation/payment/list` endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional `count` and `cursor` parameters.
     * @summary List payments
     * @param {PaymentInitiationPaymentListRequest} paymentInitiationPaymentListRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public paymentInitiationPaymentList(paymentInitiationPaymentListRequest: PaymentInitiationPaymentListRequest, options?: any) {
        return PlaidApiFp(this.configuration).paymentInitiationPaymentList(paymentInitiationPaymentListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Reverse a settled payment from a Plaid virtual account.  The original payment must be in a settled state to be refunded. To refund partially, specify the amount as part of the request. If the amount is not specified, the refund amount will be equal to all of the remaining payment amount that has not been refunded yet.  The refund will go back to the source account that initiated the payment. The original payment must have been initiated to a Plaid virtual account so that this account can be used to initiate the refund. 
     * @summary Reverse an existing payment
     * @param {PaymentInitiationPaymentReverseRequest} paymentInitiationPaymentReverseRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public paymentInitiationPaymentReverse(paymentInitiationPaymentReverseRequest: PaymentInitiationPaymentReverseRequest, options?: any) {
        return PlaidApiFp(this.configuration).paymentInitiationPaymentReverse(paymentInitiationPaymentReverseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA) or a non-Eurozone country [supported](https://plaid.com/global) by Plaid. For a standing order (recurring) payment, the recipient must be in the UK.  It is recommended to use `bacs` in the UK and `iban` in EU.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same `recipient_id`. 
     * @summary Create payment recipient
     * @param {PaymentInitiationRecipientCreateRequest} paymentInitiationRecipientCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public paymentInitiationRecipientCreate(paymentInitiationRecipientCreateRequest: PaymentInitiationRecipientCreateRequest, options?: any) {
        return PlaidApiFp(this.configuration).paymentInitiationRecipientCreate(paymentInitiationRecipientCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get details about a payment recipient you have previously created.
     * @summary Get payment recipient
     * @param {PaymentInitiationRecipientGetRequest} paymentInitiationRecipientGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public paymentInitiationRecipientGet(paymentInitiationRecipientGetRequest: PaymentInitiationRecipientGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).paymentInitiationRecipientGet(paymentInitiationRecipientGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/payment_initiation/recipient/list` endpoint list the payment recipients that you have previously created.
     * @summary List payment recipients
     * @param {PaymentInitiationRecipientListRequest} paymentInitiationRecipientListRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public paymentInitiationRecipientList(paymentInitiationRecipientListRequest: PaymentInitiationRecipientListRequest, options?: any) {
        return PlaidApiFp(this.configuration).paymentInitiationRecipientList(paymentInitiationRecipientListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use `/payment_profile/create` endpoint to create a new payment profile. To initiate the account linking experience, call `/link/token/create` and provide the `payment_profile_token` in the `transfer.payment_profile_token` field. You can then use the `payment_profile_token` when creating transfers using `/transfer/authorization/create` and `/transfer/create`.
     * @summary Create payment profile
     * @param {PaymentProfileCreateRequest} paymentProfileCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public paymentProfileCreate(paymentProfileCreateRequest: PaymentProfileCreateRequest, options?: any) {
        return PlaidApiFp(this.configuration).paymentProfileCreate(paymentProfileCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use `/payment_profile/get` endpoint to get the status of a given Payment Profile.
     * @summary Get payment profile
     * @param {PaymentProfileGetRequest} paymentProfileGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public paymentProfileGet(paymentProfileGetRequest: PaymentProfileGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).paymentProfileGet(paymentProfileGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the `/payment_profile/remove` endpoint to remove a given Payment Profile. Once it’s removed, it can no longer be used to create transfers.
     * @summary Remove payment profile
     * @param {PaymentProfileRemoveRequest} paymentProfileRemoveRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public paymentProfileRemove(paymentProfileRemoveRequest: PaymentProfileRemoveRequest, options?: any) {
        return PlaidApiFp(this.configuration).paymentProfileRemove(paymentProfileRemoveRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.
     * @summary Create Apex bank account token
     * @param {ProcessorApexProcessorTokenCreateRequest} processorApexProcessorTokenCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public processorApexProcessorTokenCreate(processorApexProcessorTokenCreateRequest: ProcessorApexProcessorTokenCreateRequest, options?: any) {
        return PlaidApiFp(this.configuration).processorApexProcessorTokenCreate(processorApexProcessorTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/processor/auth/get` endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that\'\'s associated with a given `processor_token`. The endpoint also returns high-level account data and balances when available.  Versioning note: API versions 2019-05-29 and earlier use a different schema for the `numbers` object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14). 
     * @summary Retrieve Auth data
     * @param {ProcessorAuthGetRequest} processorAuthGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public processorAuthGet(processorAuthGetRequest: ProcessorAuthGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).processorAuthGet(processorAuthGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/processor/balance/get` endpoint returns the real-time balance for each of an Item\'s accounts. While other endpoints may return a balance object, only `/processor/balance/get` forces the available and current balance fields to be refreshed rather than cached. 
     * @summary Retrieve Balance data
     * @param {ProcessorBalanceGetRequest} processorBalanceGetRequest The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public processorBalanceGet(processorBalanceGetRequest: ProcessorBalanceGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).processorBalanceGet(processorBalanceGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the `/processor/bank_transfer/create` endpoint to initiate a new bank transfer as a processor
     * @summary Create a bank transfer as a processor
     * @param {ProcessorBankTransferCreateRequest} processorBankTransferCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public processorBankTransferCreate(processorBankTransferCreateRequest: ProcessorBankTransferCreateRequest, options?: any) {
        return PlaidApiFp(this.configuration).processorBankTransferCreate(processorBankTransferCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/processor/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.
     * @summary Retrieve Identity data
     * @param {ProcessorIdentityGetRequest} processorIdentityGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public processorIdentityGet(processorIdentityGetRequest: ProcessorIdentityGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).processorIdentityGet(processorIdentityGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/processor/identity/match` endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder\'s financial institution.  This request may take some time to complete if Identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
     * @summary Retrieve identity match score
     * @param {ProcessorIdentityMatchRequest} processorIdentityMatchRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public processorIdentityMatch(processorIdentityMatchRequest: ProcessorIdentityMatchRequest, options?: any) {
        return PlaidApiFp(this.configuration).processorIdentityMatch(processorIdentityMatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * After calling `/processor/signal/evaluate`, call `/processor/signal/decision/report` to report whether the transaction was initiated. This endpoint will return an [`INVALID_FIELD`](/docs/errors/invalid-request/#invalid_field) error if called a second time with a different value for `initiated`.
     * @summary Report whether you initiated an ACH transaction
     * @param {ProcessorSignalDecisionReportRequest} processorSignalDecisionReportRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public processorSignalDecisionReport(processorSignalDecisionReportRequest: ProcessorSignalDecisionReportRequest, options?: any) {
        return PlaidApiFp(this.configuration).processorSignalDecisionReport(processorSignalDecisionReportRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use `/processor/signal/evaluate` to evaluate a planned ACH transaction as a processor to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/processor/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to our error documentation on [item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time. To reduce this latency, you can call `/signal/prepare` on the Item before you need to request Signal data.
     * @summary Evaluate a planned ACH transaction
     * @param {ProcessorSignalEvaluateRequest} processorSignalEvaluateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public processorSignalEvaluate(processorSignalEvaluateRequest: ProcessorSignalEvaluateRequest, options?: any) {
        return PlaidApiFp(this.configuration).processorSignalEvaluate(processorSignalEvaluateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Call the `/processor/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/processor/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
     * @summary Report a return for an ACH transaction
     * @param {ProcessorSignalReturnReportRequest} processorSignalReturnReportRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public processorSignalReturnReport(processorSignalReturnReportRequest: ProcessorSignalReturnReportRequest, options?: any) {
        return PlaidApiFp(this.configuration).processorSignalReturnReport(processorSignalReturnReportRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).  Note that the Stripe bank account token is a one-time use token. To store bank account information for later use, you can use a Stripe customer object and create an associated bank account from the token, or you can use a Stripe Custom account and create an associated external bank account from the token. This bank account information should work indefinitely, unless the user\'s bank account information changes or they revoke Plaid\'s permissions to access their account. Stripe bank account information cannot be modified once the bank account token has been created. If you ever need to change the bank account details used by Stripe for a specific customer, have the user go through Link again and create a new bank account token from the new `access_token`.  Bank account tokens can also be revoked, using `/item/remove`.
     * @summary Create Stripe bank account token
     * @param {ProcessorStripeBankAccountTokenCreateRequest} processorStripeBankAccountTokenCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public processorStripeBankAccountTokenCreate(processorStripeBankAccountTokenCreateRequest: ProcessorStripeBankAccountTokenCreateRequest, options?: any) {
        return PlaidApiFp(this.configuration).processorStripeBankAccountTokenCreate(processorStripeBankAccountTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Used to create a token suitable for sending to one of Plaid\'s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see `/processor/stripe/bank_account_token/create` for creating tokens for use with Stripe integrations. Once created, a processor token for a given Item cannot be modified or updated. If the account must be linked to a new or different partner resource, create a new Item by having the user go through the Link flow again; a new processor token can then be created from the new `access_token`. Processor tokens can also be revoked, using `/item/remove`.
     * @summary Create processor token
     * @param {ProcessorTokenCreateRequest} processorTokenCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public processorTokenCreate(processorTokenCreateRequest: ProcessorTokenCreateRequest, options?: any) {
        return PlaidApiFp(this.configuration).processorTokenCreate(processorTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Used to get a processor token\'s product permissions. The `products` field will be an empty list if the processor can access all available products.
     * @summary Get a processor token\'s product permissions
     * @param {ProcessorTokenPermissionsGetRequest} processorTokenPermissionsGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public processorTokenPermissionsGet(processorTokenPermissionsGetRequest: ProcessorTokenPermissionsGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).processorTokenPermissionsGet(processorTokenPermissionsGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Used to control a processor\'s access to products on the given processor token. By default, a processor will have access to all available products on the corresponding item. To restrict access to a particular set of products, call this endpoint with the desired products. To restore access to all available products, call this endpoint with an empty list. This endpoint can be called multiple times as your needs and your processor\'s needs change.
     * @summary Control a processor\'s access to products
     * @param {ProcessorTokenPermissionsSetRequest} processorTokenPermissionsSetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public processorTokenPermissionsSet(processorTokenPermissionsSetRequest: ProcessorTokenPermissionsSetRequest, options?: any) {
        return PlaidApiFp(this.configuration).processorTokenPermissionsSet(processorTokenPermissionsSetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/processor/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/processor/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/processor/transactions/get` will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item\'s `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the `/processor/transactions/refresh` endpoint.  Note that data may not be immediately available to `/processor/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/processor/transactions/get`, if it wasn\'t. If no transaction history is ready when `/processor/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
     * @summary Get transaction data
     * @param {ProcessorTransactionsGetRequest} processorTransactionsGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public processorTransactionsGet(processorTransactionsGetRequest: ProcessorTransactionsGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).processorTransactionsGet(processorTransactionsGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/processor/transactions/recurring/get` endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.  This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  This endpoint can only be called on an Item that has already been initialized with Transactions (either during Link, by specifying it in `/link/token/create`; or after Link, by calling `/processor/transactions/get` or `/processor/transactions/sync`). Once all historical transactions have been fetched, call `/processor/transactions/recurring/get` to receive the Recurring Transactions streams and subscribe to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using `/transactions/sync` listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the `historical_update_complete` field in the payload is `true`. If using `/transactions/get`, listen for the [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.  After the initial call, you can call `/processor/transactions/recurring/get` endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.
     * @summary Fetch recurring transaction streams
     * @param {ProcessorTransactionsRecurringGetRequest} processorTransactionsRecurringGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public processorTransactionsRecurringGet(processorTransactionsRecurringGetRequest: ProcessorTransactionsRecurringGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).processorTransactionsRecurringGet(processorTransactionsRecurringGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * `/processor/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling `/processor/transactions/refresh`, Plaid will fire a webhook: for `/transactions/sync` users, [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both `/processor/transactions/sync` and `/processor/transactions/get`, [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/processor/transactions/get` or `/processor/transactions/sync`. Note that the `/processor/transactions/refresh` endpoint is not supported for Capital One (`ins_128026`) and will result in a `PRODUCT_NOT_SUPPORTED` error if called on an Item from that institution.  `/processor/transactions/refresh` is offered as an add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
     * @summary Refresh transaction data
     * @param {ProcessorTransactionsRefreshRequest} processorTransactionsRefreshRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public processorTransactionsRefresh(processorTransactionsRefreshRequest: ProcessorTransactionsRefreshRequest, options?: any) {
        return PlaidApiFp(this.configuration).processorTransactionsRefresh(processorTransactionsRefreshRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint replaces `/processor/transactions/get` and its associated webhooks for most common use-cases.  The `/processor/transactions/sync` endpoint allows developers to subscribe to all transactions associated with an Item and get updates synchronously in a stream-like manner, using a cursor to track which updates have already been seen. `/processor/transactions/sync` provides the same functionality as `/processor/transactions/get` and can be used instead of `/processor/transactions/get` to simplify the process of tracking transactions updates.  This endpoint provides user-authorized transaction data for `credit`, `depository`, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from `investments` accounts, use `/investments/transactions/get` instead.  Returned transactions data is grouped into three types of update, indicating whether the transaction was added, removed, or modified since the last call to the API.  In the first call to `/processor/transactions/sync` for an Item, the endpoint will return all historical transactions data associated with that Item up until the time of the API call (as \"adds\"), which then generates a `next_cursor` for that Item. In subsequent calls, send the `next_cursor` to receive only the changes that have occurred since the previous call.  Due to the potentially large number of transactions associated with an Item, results are paginated. The `has_more` field specifies if additional calls are necessary to fetch all available transaction updates. Call `/processor/transactions/sync` with the new cursor, pulling all updates, until `has_more` is `false`.  When retrieving paginated updates, track both the `next_cursor` from the latest response and the original cursor from the first call in which `has_more` was `true`; if a call to `/processor/transactions/sync` fails when retrieving a paginated update, which can occur as a result of the [`TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION`](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error, the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.  Whenever new or updated transaction data becomes available, `/processor/transactions/sync` will provide these updates. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item\'s `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, use the `/processor/transactions/refresh` endpoint.  Note that for newly created Items, data may not be immediately available to `/processor/transactions/sync`. Plaid begins preparing transactions data when the Item is created, but the process can take anywhere from a few seconds to several minutes to complete, depending on the number of transactions available.
     * @summary Get incremental transaction updates on an Item
     * @param {ProcessorTransactionsSyncRequest} processorTransactionsSyncRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public processorTransactionsSync(processorTransactionsSyncRequest: ProcessorTransactionsSyncRequest, options?: any) {
        return PlaidApiFp(this.configuration).processorTransactionsSync(processorTransactionsSyncRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the `/sandbox/bank_income/fire_webhook` endpoint to manually trigger a Bank Income webhook in the Sandbox environment.
     * @summary Manually fire a bank income webhook in sandbox
     * @param {SandboxBankIncomeFireWebhookRequest} sandboxBankIncomeFireWebhookRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public sandboxBankIncomeFireWebhook(sandboxBankIncomeFireWebhookRequest: SandboxBankIncomeFireWebhookRequest, options?: any) {
        return PlaidApiFp(this.configuration).sandboxBankIncomeFireWebhook(sandboxBankIncomeFireWebhookRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the `/sandbox/bank_transfer/fire_webhook` endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.
     * @summary Manually fire a Bank Transfer webhook
     * @param {SandboxBankTransferFireWebhookRequest} sandboxBankTransferFireWebhookRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public sandboxBankTransferFireWebhook(sandboxBankTransferFireWebhookRequest: SandboxBankTransferFireWebhookRequest, options?: any) {
        return PlaidApiFp(this.configuration).sandboxBankTransferFireWebhook(sandboxBankTransferFireWebhookRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the `/sandbox/bank_transfer/simulate` endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/bank_transfer/event/sync` or `/bank_transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
     * @summary Simulate a bank transfer event in Sandbox
     * @param {SandboxBankTransferSimulateRequest} sandboxBankTransferSimulateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public sandboxBankTransferSimulate(sandboxBankTransferSimulateRequest: SandboxBankTransferSimulateRequest, options?: any) {
        return PlaidApiFp(this.configuration).sandboxBankTransferSimulate(sandboxBankTransferSimulateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the `/sandbox/income/fire_webhook` endpoint to manually trigger a Payroll Income webhook in the Sandbox environment.
     * @summary Manually fire an Income webhook
     * @param {SandboxIncomeFireWebhookRequest} sandboxIncomeFireWebhookRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public sandboxIncomeFireWebhook(sandboxIncomeFireWebhookRequest: SandboxIncomeFireWebhookRequest, options?: any) {
        return PlaidApiFp(this.configuration).sandboxIncomeFireWebhook(sandboxIncomeFireWebhookRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/sandbox/item/fire_webhook` endpoint is used to test that code correctly handles webhooks. This endpoint can trigger the following webhooks:  `DEFAULT_UPDATE`: Transactions update webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `NEW_ACCOUNTS_AVAILABLE`: Webhook to be fired for a given Sandbox Item created with Account Select v2.  `AUTH_DATA_UPDATE`: Webhook to be fired for a given Sandbox Item created with Auth as an enabled product.  `RECURRING_TRANSACTIONS_UPDATE`: Recurring Transactions webhook to be fired for a given Sandbox Item. If the Item does not support Recurring Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `SYNC_UPDATES_AVAILABLE`: Transactions webhook to be fired for a given Sandbox Item.  If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `PRODUCT_READY`: Assets webhook to be fired when a given asset report has been successfully generated. If the Item does not support Assets, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `ERROR`: Assets webhook to be fired when asset report generation has failed. If the Item does not support Assets, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development.
     * @summary Fire a test webhook
     * @param {SandboxItemFireWebhookRequest} sandboxItemFireWebhookRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public sandboxItemFireWebhook(sandboxItemFireWebhookRequest: SandboxItemFireWebhookRequest, options?: any) {
        return PlaidApiFp(this.configuration).sandboxItemFireWebhook(sandboxItemFireWebhookRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * `/sandbox/item/reset_login/` forces an Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link\'s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/item/reset_login`, You can then use Plaid Link update mode to restore the Item to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.
     * @summary Force a Sandbox Item into an error state
     * @param {SandboxItemResetLoginRequest} sandboxItemResetLoginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public sandboxItemResetLogin(sandboxItemResetLoginRequest: SandboxItemResetLoginRequest, options?: any) {
        return PlaidApiFp(this.configuration).sandboxItemResetLogin(sandboxItemResetLoginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/sandbox/item/set_verification_status` endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  Note that not all Plaid developer accounts are enabled for micro-deposit based verification by default. Your account must be enabled for this feature in order to test it in Sandbox. To enable this features or check your status, contact your account manager or [submit a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access).  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
     * @summary Set verification status for Sandbox account
     * @param {SandboxItemSetVerificationStatusRequest} sandboxItemSetVerificationStatusRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public sandboxItemSetVerificationStatus(sandboxItemSetVerificationStatusRequest: SandboxItemSetVerificationStatusRequest, options?: any) {
        return PlaidApiFp(this.configuration).sandboxItemSetVerificationStatus(sandboxItemSetVerificationStatusRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Save the selected accounts when connecting to the Platypus Oauth institution
     * @summary Save the selected accounts when connecting to the Platypus Oauth institution
     * @param {SandboxOauthSelectAccountsRequest} sandboxOauthSelectAccountsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public sandboxOauthSelectAccounts(sandboxOauthSelectAccountsRequest: SandboxOauthSelectAccountsRequest, options?: any) {
        return PlaidApiFp(this.configuration).sandboxOauthSelectAccounts(sandboxOauthSelectAccountsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * `/sandbox/payment_profile/reset_login/` forces a Payment Profile into a state where the login is no longer valid. This makes it easy to test update mode for Payment Profile in the Sandbox environment.   After calling `/sandbox/payment_profile/reset_login`, calls to the `/transfer/authorization/create` with the Payment Profile will result in a `decision_rationale` `PAYMENT_PROFILE_LOGIN_REQUIRED`. You can then use update mode for Payment Profile to restore it into a good state.   In order to invoke this endpoint, you must first [create a Payment Profile](https://plaid.com/docs/transfer/add-to-app/#create-a-payment-profile-optional) and [go through the Link flow](https://plaid.com/docs/transfer/add-to-app/#create-a-link-token).
     * @summary Reset the login of a Payment Profile
     * @param {SandboxPaymentProfileResetLoginRequest} sandboxPaymentProfileResetLoginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public sandboxPaymentProfileResetLogin(sandboxPaymentProfileResetLoginRequest: SandboxPaymentProfileResetLoginRequest, options?: any) {
        return PlaidApiFp(this.configuration).sandboxPaymentProfileResetLogin(sandboxPaymentProfileResetLoginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the `/sandbox/processor_token/create` endpoint to create a valid `processor_token` for an arbitrary institution ID and test credentials. The created `processor_token` corresponds to a new Sandbox Item. You can then use this `processor_token` with the `/processor/` API endpoints in Sandbox. You can also use `/sandbox/processor_token/create` with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.
     * @summary Create a test Item and processor token
     * @param {SandboxProcessorTokenCreateRequest} sandboxProcessorTokenCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public sandboxProcessorTokenCreate(sandboxProcessorTokenCreateRequest: SandboxProcessorTokenCreateRequest, options?: any) {
        return PlaidApiFp(this.configuration).sandboxProcessorTokenCreate(sandboxProcessorTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the `/sandbox/public_token/create` endpoint to create a valid `public_token`  for an arbitrary institution ID, initial products, and test credentials. The created `public_token` maps to a new Sandbox Item. You can then call `/item/public_token/exchange` to exchange the `public_token` for an `access_token` and perform all API actions. `/sandbox/public_token/create` can also be used with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. `/sandbox/public_token/create` cannot be used with OAuth institutions.
     * @summary Create a test Item
     * @param {SandboxPublicTokenCreateRequest} sandboxPublicTokenCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public sandboxPublicTokenCreate(sandboxPublicTokenCreateRequest: SandboxPublicTokenCreateRequest, options?: any) {
        return PlaidApiFp(this.configuration).sandboxPublicTokenCreate(sandboxPublicTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the `/sandbox/transfer/fire_webhook` endpoint to manually trigger a Transfer webhook in the Sandbox environment.
     * @summary Manually fire a Transfer webhook
     * @param {SandboxTransferFireWebhookRequest} sandboxTransferFireWebhookRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public sandboxTransferFireWebhook(sandboxTransferFireWebhookRequest: SandboxTransferFireWebhookRequest, options?: any) {
        return PlaidApiFp(this.configuration).sandboxTransferFireWebhook(sandboxTransferFireWebhookRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the `/sandbox/transfer/repayment/simulate` endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.
     * @summary Trigger the creation of a repayment
     * @param {SandboxTransferRepaymentSimulateRequest} sandboxTransferRepaymentSimulateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public sandboxTransferRepaymentSimulate(sandboxTransferRepaymentSimulateRequest: SandboxTransferRepaymentSimulateRequest, options?: any) {
        return PlaidApiFp(this.configuration).sandboxTransferRepaymentSimulate(sandboxTransferRepaymentSimulateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the `/sandbox/transfer/simulate` endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
     * @summary Simulate a transfer event in Sandbox
     * @param {SandboxTransferSimulateRequest} sandboxTransferSimulateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public sandboxTransferSimulate(sandboxTransferSimulateRequest: SandboxTransferSimulateRequest, options?: any) {
        return PlaidApiFp(this.configuration).sandboxTransferSimulate(sandboxTransferSimulateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the `/sandbox/transfer/sweep/simulate` endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all `posted` or `pending` transfers with a sweep status of `unswept` will become `swept`, and all `returned` transfers with a sweep status of `swept` will become `return_swept`.
     * @summary Simulate creating a sweep
     * @param {SandboxTransferSweepSimulateRequest} sandboxTransferSweepSimulateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public sandboxTransferSweepSimulate(sandboxTransferSweepSimulateRequest: SandboxTransferSweepSimulateRequest, options?: any) {
        return PlaidApiFp(this.configuration).sandboxTransferSweepSimulate(sandboxTransferSweepSimulateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the `/sandbox/transfer/test_clock/advance` endpoint to advance a `test_clock` in the Sandbox environment.  A test clock object represents an independent timeline and has a `virtual_time` field indicating the current timestamp of the timeline. A test clock can be advanced by incrementing `virtual_time`, but may never go back to a lower `virtual_time`.  If a test clock is advanced, we will simulate the changes that ought to occur during the time that elapsed. For instance, a client creates a weekly recurring transfer with a test clock set at t. When the client advances the test clock by setting `virtual_time` = t + 15 days, 2 new originations should be created, along with the webhook events.  The advancement of the test clock from its current `virtual_time` should be limited such that there are no more than 20 originations resulting from the advance operation on each `recurring_transfer` associated with the `test_clock`. For instance, if the recurring transfer associated with this test clock originates once every 4 weeks, you can advance the `virtual_time` up to 80 weeks on each API call.
     * @summary Advance a test clock
     * @param {SandboxTransferTestClockAdvanceRequest} sandboxTransferTestClockAdvanceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public sandboxTransferTestClockAdvance(sandboxTransferTestClockAdvanceRequest: SandboxTransferTestClockAdvanceRequest, options?: any) {
        return PlaidApiFp(this.configuration).sandboxTransferTestClockAdvance(sandboxTransferTestClockAdvanceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the `/sandbox/transfer/test_clock/create` endpoint to create a `test_clock` in the Sandbox environment.  A test clock object represents an independent timeline and has a `virtual_time` field indicating the current timestamp of the timeline. Test clocks are used for testing recurring transfers in Sandbox.  A test clock can be associated with up to 5 recurring transfers.
     * @summary Create a test clock
     * @param {SandboxTransferTestClockCreateRequest} sandboxTransferTestClockCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public sandboxTransferTestClockCreate(sandboxTransferTestClockCreateRequest: SandboxTransferTestClockCreateRequest, options?: any) {
        return PlaidApiFp(this.configuration).sandboxTransferTestClockCreate(sandboxTransferTestClockCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the `/sandbox/transfer/test_clock/get` endpoint to get a `test_clock` in the Sandbox environment.
     * @summary Get a test clock
     * @param {SandboxTransferTestClockGetRequest} sandboxTransferTestClockGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public sandboxTransferTestClockGet(sandboxTransferTestClockGetRequest: SandboxTransferTestClockGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).sandboxTransferTestClockGet(sandboxTransferTestClockGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the `/sandbox/transfer/test_clock/list` endpoint to see a list of all your test clocks in the Sandbox environment, by ascending `virtual_time`. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired test clocks.
     * @summary List test clocks
     * @param {SandboxTransferTestClockListRequest} sandboxTransferTestClockListRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public sandboxTransferTestClockList(sandboxTransferTestClockListRequest: SandboxTransferTestClockListRequest, options?: any) {
        return PlaidApiFp(this.configuration).sandboxTransferTestClockList(sandboxTransferTestClockListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * After calling `/signal/evaluate`, call `/signal/decision/report` to report whether the transaction was initiated. This endpoint will return an [`INVALID_FIELD`](/docs/errors/invalid-request/#invalid_field) error if called a second time with a different value for `initiated`.
     * @summary Report whether you initiated an ACH transaction
     * @param {SignalDecisionReportRequest} signalDecisionReportRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public signalDecisionReport(signalDecisionReportRequest: SignalDecisionReportRequest, options?: any) {
        return PlaidApiFp(this.configuration).signalDecisionReport(signalDecisionReportRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use `/signal/evaluate` to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to the error documentation on [Item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time.
     * @summary Evaluate a planned ACH transaction
     * @param {SignalEvaluateRequest} signalEvaluateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public signalEvaluate(signalEvaluateRequest: SignalEvaluateRequest, options?: any) {
        return PlaidApiFp(this.configuration).signalEvaluate(signalEvaluateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * When Link is not initialized with Signal, call `/signal/prepare` to opt-in that Item to the Signal data collection process, developing a Signal score.  If you are using other Plaid products after Link, e.g. Identity or Assets, call `/signal/prepare` after those product calls are complete.  Example flow: Link is initialized with Auth, call `/auth/get` for the account and routing number, call `/identity/get` to retrieve bank ownership details, then call `/signal/prepare` to begin Signal data collection. Later, once you have obtained details about the proposed transaction from the user, call `/signal/evaluate` for a Signal score. For more information please see [Recommendations for initializing Link with specific product combinations](https://www.plaid.com/docs/link/initializing-products/#recommendations-for-initializing-link-with-specific-product-combinations).
     * @summary Opt-in an Item to Signal
     * @param {SignalPrepareRequest} signalPrepareRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public signalPrepare(signalPrepareRequest: SignalPrepareRequest, options?: any) {
        return PlaidApiFp(this.configuration).signalPrepare(signalPrepareRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Call the `/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
     * @summary Report a return for an ACH transaction
     * @param {SignalReturnReportRequest} signalReturnReportRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public signalReturnReport(signalReturnReportRequest: SignalReturnReportRequest, options?: any) {
        return PlaidApiFp(this.configuration).signalReturnReport(signalReturnReportRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/beta/transactions/v1/enhance` endpoint enriches raw transaction data provided directly by clients.  The product is currently in beta.
     * @summary enhance locally-held transaction data
     * @param {TransactionsEnhanceGetRequest} transactionsEnhanceGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public transactionsEnhance(transactionsEnhanceGetRequest: TransactionsEnhanceGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).transactionsEnhance(transactionsEnhanceGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/transactions/enrich` endpoint enriches raw transaction data generated by your own banking products or retrieved from other non-Plaid sources.
     * @summary Enrich locally-held transaction data
     * @param {TransactionsEnrichGetRequest} transactionsEnrichGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public transactionsEnrich(transactionsEnrichGetRequest: TransactionsEnrichGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).transactionsEnrich(transactionsEnrichGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Note: All new implementations are encouraged to use `/transactions/sync` rather than `/transactions/get`. `/transactions/sync` provides the same functionality as `/transactions/get` and improves developer ease-of-use for handling transactions updates.  The `/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products/investments/) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/transactions/get` will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item\'s `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the `/transactions/refresh` endpoint.  Note that data may not be immediately available to `/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/transactions/get`, if it wasn\'t. To be alerted when transaction data is ready to be fetched, listen for the [`INITIAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#initial_update) and [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhooks. If no transaction history is ready when `/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
     * @summary Get transaction data
     * @param {TransactionsGetRequest} transactionsGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public transactionsGet(transactionsGetRequest: TransactionsGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).transactionsGet(transactionsGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/transactions/recurring/get` endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.  This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  This endpoint can only be called on an Item that has already been initialized with Transactions (either during Link, by specifying it in `/link/token/create`; or after Link, by calling `/transactions/get` or `/transactions/sync`). Once all historical transactions have been fetched, call `/transactions/recurring/get` to receive the Recurring Transactions streams and subscribe to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using `/transactions/sync` listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the `historical_update_complete` field in the payload is `true`. If using `/transactions/get`, listen for the [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.  After the initial call, you can call `/transactions/recurring/get` endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.
     * @summary Fetch recurring transaction streams
     * @param {TransactionsRecurringGetRequest} transactionsRecurringGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public transactionsRecurringGet(transactionsRecurringGetRequest: TransactionsRecurringGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).transactionsRecurringGet(transactionsRecurringGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * `/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling `/transactions/refresh`, Plaid will fire a webhook: for `/transactions/sync` users, [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both `/transactions/sync` and `/transactions/get`, [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/transactions/get` or `/transactions/sync`. Note that the `/transactions/refresh` endpoint is not supported for Capital One (`ins_128026`) and will result in a `PRODUCT_NOT_SUPPORTED` error if called on an Item from that institution.  `/transactions/refresh` is offered as an add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
     * @summary Refresh transaction data
     * @param {TransactionsRefreshRequest} transactionsRefreshRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public transactionsRefresh(transactionsRefreshRequest: TransactionsRefreshRequest, options?: any) {
        return PlaidApiFp(this.configuration).transactionsRefresh(transactionsRefreshRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/transactions/rules/v1/create` endpoint creates transaction categorization rules.  Rules will be applied on the Item\'s transactions returned in `/transactions/get` response.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
     * @summary Create transaction category rule
     * @param {TransactionsRulesCreateRequest} transactionsRulesCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public transactionsRulesCreate(transactionsRulesCreateRequest: TransactionsRulesCreateRequest, options?: any) {
        return PlaidApiFp(this.configuration).transactionsRulesCreate(transactionsRulesCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/transactions/rules/v1/list` returns a list of transaction rules created for the Item associated with the access token.
     * @summary Return a list of rules created for the Item associated with the access token.
     * @param {TransactionsRulesListRequest} transactionsRulesListRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public transactionsRulesList(transactionsRulesListRequest: TransactionsRulesListRequest, options?: any) {
        return PlaidApiFp(this.configuration).transactionsRulesList(transactionsRulesListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/transactions/rules/v1/remove` endpoint is used to remove a transaction rule.
     * @summary Remove transaction rule
     * @param {TransactionsRulesRemoveRequest} transactionsRulesRemoveRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public transactionsRulesRemove(transactionsRulesRemoveRequest: TransactionsRulesRemoveRequest, options?: any) {
        return PlaidApiFp(this.configuration).transactionsRulesRemove(transactionsRulesRemoveRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint replaces `/transactions/get` and its associated webhooks for most common use-cases.  The `/transactions/sync` endpoint allows developers to subscribe to all transactions associated with an Item and get updates synchronously in a stream-like manner, using a cursor to track which updates have already been seen. `/transactions/sync` provides the same functionality as `/transactions/get` and can be used instead of `/transactions/get` to simplify the process of tracking transactions updates.  This endpoint provides user-authorized transaction data for `credit`, `depository`, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from `investments` accounts, use `/investments/transactions/get` instead.  Returned transactions data is grouped into three types of update, indicating whether the transaction was added, removed, or modified since the last call to the API.  In the first call to `/transactions/sync` for an Item, the endpoint will return all historical transactions data associated with that Item up until the time of the API call (as \"adds\"), which then generates a `next_cursor` for that Item. In subsequent calls, send the `next_cursor` to receive only the changes that have occurred since the previous call.  Due to the potentially large number of transactions associated with an Item, results are paginated. The `has_more` field specifies if additional calls are necessary to fetch all available transaction updates. Call `/transactions/sync` with the new cursor, pulling all updates, until `has_more` is `false`.  When retrieving paginated updates, track both the `next_cursor` from the latest response and the original cursor from the first call in which `has_more` was `true`; if a call to `/transactions/sync` fails due to the [`TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION`](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error, the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.  Whenever new or updated transaction data becomes available, `/transactions/sync` will provide these updates. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item\'s `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, use the `/transactions/refresh` endpoint.  Note that for newly created Items, data may not be immediately available to `/transactions/sync`. Plaid begins preparing transactions data when the Item is created, but the process can take anywhere from a few seconds to several minutes to complete, depending on the number of transactions available.  To be alerted when new data is available, listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) webhook.
     * @summary Get incremental transaction updates on an Item
     * @param {TransactionsSyncRequest} transactionsSyncRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public transactionsSync(transactionsSyncRequest: TransactionsSyncRequest, options?: any) {
        return PlaidApiFp(this.configuration).transactionsSync(transactionsSyncRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the `/transfer/authorization/create` endpoint to determine transfer failure risk.  In Plaid\'s Sandbox environment the decisions will be returned as follows:    - To approve a transfer with null rationale code, make an authorization request with an `amount` less than the available balance in the account.    - To approve a transfer with the rationale code `MANUALLY_VERIFIED_ITEM`, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To approve a transfer with the rationale code `ITEM_LOGIN_REQUIRED`, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).    - To decline a transfer with the rationale code `NSF`, the available balance on the account must be less than the authorization `amount`. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code `RISK`, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.  The fields `device.ip_address` and `device.user_agent` are required for all sessions where the end-user is present. For example, when a user is authorizing a one-time payment from their device.
     * @summary Create a transfer authorization
     * @param {TransferAuthorizationCreateRequest} transferAuthorizationCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public transferAuthorizationCreate(transferAuthorizationCreateRequest: TransferAuthorizationCreateRequest, options?: any) {
        return PlaidApiFp(this.configuration).transferAuthorizationCreate(transferAuthorizationCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the `/transfer/balance/get` endpoint to view a balance held with Plaid.
     * @summary Retrieve a balance held with Plaid
     * @param {TransferBalanceGetRequest} transferBalanceGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public transferBalanceGet(transferBalanceGetRequest: TransferBalanceGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).transferBalanceGet(transferBalanceGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the `/transfer/cancel` endpoint to cancel a transfer.  A transfer is eligible for cancellation if the `cancellable` property returned by `/transfer/get` is `true`.
     * @summary Cancel a transfer
     * @param {TransferCancelRequest} transferCancelRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public transferCancel(transferCancelRequest: TransferCancelRequest, options?: any) {
        return PlaidApiFp(this.configuration).transferCancel(transferCancelRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the `/transfer/capabilities/get` endpoint to determine the RTP eligibility information of a transfer.
     * @summary Get RTP eligibility information of a transfer
     * @param {TransferCapabilitiesGetRequest} transferCapabilitiesGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public transferCapabilitiesGet(transferCapabilitiesGetRequest: TransferCapabilitiesGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).transferCapabilitiesGet(transferCapabilitiesGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the `/transfer/configuration/get` endpoint to view your transfer product configurations.
     * @summary Get transfer product configuration
     * @param {TransferConfigurationGetRequest} transferConfigurationGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public transferConfigurationGet(transferConfigurationGetRequest: TransferConfigurationGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).transferConfigurationGet(transferConfigurationGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the `/transfer/create` endpoint to initiate a new transfer.
     * @summary Create a transfer
     * @param {TransferCreateRequest} transferCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public transferCreate(transferCreateRequest: TransferCreateRequest, options?: any) {
        return PlaidApiFp(this.configuration).transferCreate(transferCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Third-party sender customers can use `/transfer/diligence/document/upload` endpoint to upload a document on behalf of its end customer (i.e. originator) to Plaid. You’ll need to send a request of type multipart/form-data. You must provide the `client_id` in the `PLAID-CLIENT-ID` header and `secret` in the `PLAID-SECRET` header.
     * @summary This endpoint allows third-party sender customers to upload a document on behalf of its end customer (i.e. originator) to Plaid. You’ll need to send a request of type multipart/form-data.
     * @param {TransferDiligenceDocumentUploadRequest} transferDiligenceDocumentUploadRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public transferDiligenceDocumentUpload(transferDiligenceDocumentUploadRequest: TransferDiligenceDocumentUploadRequest, options?: any) {
        return PlaidApiFp(this.configuration).transferDiligenceDocumentUpload(transferDiligenceDocumentUploadRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the `/transfer/diligence/submit` endpoint to submit transfer diligence on behalf of the originator.
     * @summary Submit transfer diligence on behalf of the end customer (i.e. the originator).
     * @param {TransferDiligenceSubmitRequest} transferDiligenceSubmitRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public transferDiligenceSubmit(transferDiligenceSubmitRequest: TransferDiligenceSubmitRequest, options?: any) {
        return PlaidApiFp(this.configuration).transferDiligenceSubmit(transferDiligenceSubmitRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the `/transfer/event/list` endpoint to get a list of transfer events based on specified filter criteria.
     * @summary List transfer events
     * @param {TransferEventListRequest} transferEventListRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public transferEventList(transferEventListRequest: TransferEventListRequest, options?: any) {
        return PlaidApiFp(this.configuration).transferEventList(transferEventListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * `/transfer/event/sync` allows you to request up to the next 25 transfer events that happened after a specific `event_id`. Use the `/transfer/event/sync` endpoint to guarantee you have seen all transfer events.
     * @summary Sync transfer events
     * @param {TransferEventSyncRequest} transferEventSyncRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public transferEventSync(transferEventSyncRequest: TransferEventSyncRequest, options?: any) {
        return PlaidApiFp(this.configuration).transferEventSync(transferEventSyncRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/transfer/get` endpoint fetches information about the transfer corresponding to the given `transfer_id`.
     * @summary Retrieve a transfer
     * @param {TransferGetRequest} transferGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public transferGet(transferGetRequest: TransferGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).transferGet(transferGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the `/transfer/intent/create` endpoint to generate a transfer intent object and invoke the Transfer UI.
     * @summary Create a transfer intent object to invoke the Transfer UI
     * @param {TransferIntentCreateRequest} transferIntentCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public transferIntentCreate(transferIntentCreateRequest: TransferIntentCreateRequest, options?: any) {
        return PlaidApiFp(this.configuration).transferIntentCreate(transferIntentCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the `/transfer/intent/get` endpoint to retrieve more information about a transfer intent.
     * @summary Retrieve more information about a transfer intent
     * @param {{ [key: string]: object; }} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public transferIntentGet(requestBody: { [key: string]: object; }, options?: any) {
        return PlaidApiFp(this.configuration).transferIntentGet(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the `/transfer/list` endpoint to see a list of all your transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired transfers. 
     * @summary List transfers
     * @param {TransferListRequest} transferListRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public transferList(transferListRequest: TransferListRequest, options?: any) {
        return PlaidApiFp(this.configuration).transferList(transferListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the `/transfer/metrics/get` endpoint to view your transfer product usage metrics.
     * @summary Get transfer product usage metrics
     * @param {TransferMetricsGetRequest} transferMetricsGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public transferMetricsGet(transferMetricsGetRequest: TransferMetricsGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).transferMetricsGet(transferMetricsGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * As an alternative to adding Items via Link, you can also use the `/transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
     * @summary Migrate account into Transfers
     * @param {TransferMigrateAccountRequest} transferMigrateAccountRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public transferMigrateAccount(transferMigrateAccountRequest: TransferMigrateAccountRequest, options?: any) {
        return PlaidApiFp(this.configuration).transferMigrateAccount(transferMigrateAccountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the `/transfer/originator/create` endpoint to create a new originator and return an `originator_client_id`.
     * @summary Create a new originator
     * @param {TransferOriginatorCreateRequest} transferOriginatorCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public transferOriginatorCreate(transferOriginatorCreateRequest: TransferOriginatorCreateRequest, options?: any) {
        return PlaidApiFp(this.configuration).transferOriginatorCreate(transferOriginatorCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/transfer/originator/get` endpoint gets status updates for an originator\'s onboarding process. This information is also available via the Transfer page on the Plaid dashboard.
     * @summary Get status of an originator\'s onboarding
     * @param {TransferOriginatorGetRequest} transferOriginatorGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public transferOriginatorGet(transferOriginatorGetRequest: TransferOriginatorGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).transferOriginatorGet(transferOriginatorGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/transfer/originator/list` endpoint gets status updates for all of your originators\' onboarding. This information is also available via the Plaid dashboard.
     * @summary Get status of all originators\' onboarding
     * @param {TransferOriginatorListRequest} transferOriginatorListRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public transferOriginatorList(transferOriginatorListRequest: TransferOriginatorListRequest, options?: any) {
        return PlaidApiFp(this.configuration).transferOriginatorList(transferOriginatorListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/transfer/questionnaire/create` endpoint generates a Plaid-hosted onboarding UI URL. Redirect the originator to this URL to provide their due diligence information and agree to Plaid’s terms for ACH money movement.
     * @summary Generate a Plaid-hosted onboarding UI URL.
     * @param {TransferQuestionnaireCreateRequest} transferQuestionnaireCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public transferQuestionnaireCreate(transferQuestionnaireCreateRequest: TransferQuestionnaireCreateRequest, options?: any) {
        return PlaidApiFp(this.configuration).transferQuestionnaireCreate(transferQuestionnaireCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the `/transfer/recurring/cancel` endpoint to cancel a recurring transfer.  Scheduled transfer that hasn\'t been submitted to bank will be cancelled.
     * @summary Cancel a recurring transfer.
     * @param {TransferRecurringCancelRequest} transferRecurringCancelRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public transferRecurringCancel(transferRecurringCancelRequest: TransferRecurringCancelRequest, options?: any) {
        return PlaidApiFp(this.configuration).transferRecurringCancel(transferRecurringCancelRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the `/transfer/recurring/create` endpoint to initiate a new recurring transfer.
     * @summary Create a recurring transfer
     * @param {TransferRecurringCreateRequest} transferRecurringCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public transferRecurringCreate(transferRecurringCreateRequest: TransferRecurringCreateRequest, options?: any) {
        return PlaidApiFp(this.configuration).transferRecurringCreate(transferRecurringCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/transfer/recurring/get` fetches information about the recurring transfer corresponding to the given `recurring_transfer_id`.
     * @summary Retrieve a recurring transfer
     * @param {TransferRecurringGetRequest} transferRecurringGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public transferRecurringGet(transferRecurringGetRequest: TransferRecurringGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).transferRecurringGet(transferRecurringGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the `/transfer/recurring/list` endpoint to see a list of all your recurring transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired recurring transfers. 
     * @summary List recurring transfers
     * @param {TransferRecurringListRequest} transferRecurringListRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public transferRecurringList(transferRecurringListRequest: TransferRecurringListRequest, options?: any) {
        return PlaidApiFp(this.configuration).transferRecurringList(transferRecurringListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the `/transfer/refund/cancel` endpoint to cancel a refund.  A refund is eligible for cancellation if it has not yet been submitted to the payment network.
     * @summary Cancel a refund
     * @param {TransferRefundCancelRequest} transferRefundCancelRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public transferRefundCancel(transferRefundCancelRequest: TransferRefundCancelRequest, options?: any) {
        return PlaidApiFp(this.configuration).transferRefundCancel(transferRefundCancelRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the `/transfer/refund/create` endpoint to create a refund for a transfer. A transfer can be refunded if the transfer was initiated in the past 180 days.  Processing of the refund will not occur until at least 3 business days following the transfer\'s settlement date, plus any hold/settlement delays. This 3-day window helps better protect your business from regular ACH returns. Consumer initiated returns (unauthorized returns) could still happen for about 60 days from the settlement date. If the original transfer is canceled, returned or failed, all pending refunds will automatically be canceled. Processed refunds cannot be revoked.
     * @summary Create a refund
     * @param {TransferRefundCreateRequest} transferRefundCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public transferRefundCreate(transferRefundCreateRequest: TransferRefundCreateRequest, options?: any) {
        return PlaidApiFp(this.configuration).transferRefundCreate(transferRefundCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/transfer/refund/get` endpoint fetches information about the refund corresponding to the given `refund_id`.
     * @summary Retrieve a refund
     * @param {TransferRefundGetRequest} transferRefundGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public transferRefundGet(transferRefundGetRequest: TransferRefundGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).transferRefundGet(transferRefundGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/transfer/repayment/list` endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given `start_time`.
     * @summary Lists historical repayments
     * @param {TransferRepaymentListRequest} transferRepaymentListRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public transferRepaymentList(transferRepaymentListRequest: TransferRepaymentListRequest, options?: any) {
        return PlaidApiFp(this.configuration).transferRepaymentList(transferRepaymentListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/transfer/repayment/return/list` endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.
     * @summary List the returns included in a repayment
     * @param {TransferRepaymentReturnListRequest} transferRepaymentReturnListRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public transferRepaymentReturnList(transferRepaymentReturnListRequest: TransferRepaymentReturnListRequest, options?: any) {
        return PlaidApiFp(this.configuration).transferRepaymentReturnList(transferRepaymentReturnListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/transfer/sweep/get` endpoint fetches a sweep corresponding to the given `sweep_id`.
     * @summary Retrieve a sweep
     * @param {TransferSweepGetRequest} transferSweepGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public transferSweepGet(transferSweepGetRequest: TransferSweepGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).transferSweepGet(transferSweepGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/transfer/sweep/list` endpoint fetches sweeps matching the given filters.
     * @summary List sweeps
     * @param {TransferSweepListRequest} transferSweepListRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public transferSweepList(transferSweepListRequest: TransferSweepListRequest, options?: any) {
        return PlaidApiFp(this.configuration).transferSweepList(transferSweepListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint should be called for each of your end users before they begin a Plaid income flow. This provides you a single token to access all income data associated with the user. You should only create one per end user.  If you call the endpoint multiple times with the same `client_user_id`, the first creation call will succeed and the rest will fail with an error message indicating that the user has been created for the given `client_user_id`.  Ensure that you store the `user_token` along with your user\'s identifier in your database, as it is not possible to retrieve a previously created `user_token`.
     * @summary Create user
     * @param {UserCreateRequest} userCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public userCreate(userCreateRequest: UserCreateRequest, options?: any) {
        return PlaidApiFp(this.configuration).userCreate(userCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create an e-wallet. The response is the newly created e-wallet object.
     * @summary Create an e-wallet
     * @param {WalletCreateRequest} walletCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public walletCreate(walletCreateRequest: WalletCreateRequest, options?: any) {
        return PlaidApiFp(this.configuration).walletCreate(walletCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch an e-wallet. The response includes the current balance.
     * @summary Fetch an e-wallet
     * @param {WalletGetRequest} walletGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public walletGet(walletGetRequest: WalletGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).walletGet(walletGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint lists all e-wallets in descending order of creation.
     * @summary Fetch a list of e-wallets
     * @param {WalletListRequest} walletListRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public walletList(walletListRequest: WalletListRequest, options?: any) {
        return PlaidApiFp(this.configuration).walletList(walletListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate transactions, the amount and reference for the transaction. Transactions will settle in seconds to several days, depending on the underlying payment rail.
     * @summary Execute a transaction using an e-wallet
     * @param {WalletTransactionExecuteRequest} walletTransactionExecuteRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public walletTransactionExecute(walletTransactionExecuteRequest: WalletTransactionExecuteRequest, options?: any) {
        return PlaidApiFp(this.configuration).walletTransactionExecute(walletTransactionExecuteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch a specific e-wallet transaction
     * @summary Fetch an e-wallet transaction
     * @param {WalletTransactionGetRequest} walletTransactionGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public walletTransactionGet(walletTransactionGetRequest: WalletTransactionGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).walletTransactionGet(walletTransactionGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the `created_at` time.
     * @summary List e-wallet transactions
     * @param {WalletTransactionListRequest} walletTransactionListRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public walletTransactionList(walletTransactionListRequest: WalletTransactionListRequest, options?: any) {
        return PlaidApiFp(this.configuration).walletTransactionList(walletTransactionListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new entity watchlist screening to check your customer against watchlists defined in the associated entity watchlist program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
     * @summary Create a watchlist screening for an entity
     * @param {WatchlistScreeningEntityCreateRequest} watchlistScreeningEntityCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public watchlistScreeningEntityCreate(watchlistScreeningEntityCreateRequest: WatchlistScreeningEntityCreateRequest, options?: any) {
        return PlaidApiFp(this.configuration).watchlistScreeningEntityCreate(watchlistScreeningEntityCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve an entity watchlist screening.
     * @summary Get an entity screening
     * @param {WatchlistScreeningEntityGetRequest} watchlistScreeningEntityGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public watchlistScreeningEntityGet(watchlistScreeningEntityGetRequest: WatchlistScreeningEntityGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).watchlistScreeningEntityGet(watchlistScreeningEntityGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all changes to the entity watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
     * @summary List history for entity watchlist screenings
     * @param {WatchlistScreeningEntityHistoryListRequest} watchlistScreeningEntityHistoryListRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public watchlistScreeningEntityHistoryList(watchlistScreeningEntityHistoryListRequest: WatchlistScreeningEntityHistoryListRequest, options?: any) {
        return PlaidApiFp(this.configuration).watchlistScreeningEntityHistoryList(watchlistScreeningEntityHistoryListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all hits for the entity watchlist screening.
     * @summary List hits for entity watchlist screenings
     * @param {WatchlistScreeningEntityHitListRequest} watchlistScreeningEntityHitListRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public watchlistScreeningEntityHitList(watchlistScreeningEntityHitListRequest: WatchlistScreeningEntityHitListRequest, options?: any) {
        return PlaidApiFp(this.configuration).watchlistScreeningEntityHitList(watchlistScreeningEntityHitListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all entity screenings.
     * @summary List entity watchlist screenings
     * @param {WatchlistScreeningEntityListRequest} watchlistScreeningEntityListRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public watchlistScreeningEntityList(watchlistScreeningEntityListRequest: WatchlistScreeningEntityListRequest, options?: any) {
        return PlaidApiFp(this.configuration).watchlistScreeningEntityList(watchlistScreeningEntityListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an entity watchlist screening program
     * @summary Get entity watchlist screening program
     * @param {WatchlistScreeningEntityProgramGetRequest} watchlistScreeningEntityProgramGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public watchlistScreeningEntityProgramGet(watchlistScreeningEntityProgramGetRequest: WatchlistScreeningEntityProgramGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).watchlistScreeningEntityProgramGet(watchlistScreeningEntityProgramGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all entity watchlist screening programs
     * @summary List entity watchlist screening programs
     * @param {WatchlistScreeningEntityProgramListRequest} watchlistScreeningEntityProgramListRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public watchlistScreeningEntityProgramList(watchlistScreeningEntityProgramListRequest: WatchlistScreeningEntityProgramListRequest, options?: any) {
        return PlaidApiFp(this.configuration).watchlistScreeningEntityProgramList(watchlistScreeningEntityProgramListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a review for an entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
     * @summary Create a review for an entity watchlist screening
     * @param {WatchlistScreeningEntityReviewCreateRequest} watchlistScreeningEntityReviewCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public watchlistScreeningEntityReviewCreate(watchlistScreeningEntityReviewCreateRequest: WatchlistScreeningEntityReviewCreateRequest, options?: any) {
        return PlaidApiFp(this.configuration).watchlistScreeningEntityReviewCreate(watchlistScreeningEntityReviewCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all reviews for a particular entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
     * @summary List reviews for entity watchlist screenings
     * @param {WatchlistScreeningEntityReviewListRequest} watchlistScreeningEntityReviewListRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public watchlistScreeningEntityReviewList(watchlistScreeningEntityReviewListRequest: WatchlistScreeningEntityReviewListRequest, options?: any) {
        return PlaidApiFp(this.configuration).watchlistScreeningEntityReviewList(watchlistScreeningEntityReviewListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an entity watchlist screening.
     * @summary Update an entity screening
     * @param {WatchlistScreeningEntityUpdateRequest} watchlistScreeningEntityUpdateRequest The entity screening was successfully updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public watchlistScreeningEntityUpdate(watchlistScreeningEntityUpdateRequest: WatchlistScreeningEntityUpdateRequest, options?: any) {
        return PlaidApiFp(this.configuration).watchlistScreeningEntityUpdate(watchlistScreeningEntityUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new Watchlist Screening to check your customer against watchlists defined in the associated Watchlist Program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
     * @summary Create a watchlist screening for a person
     * @param {WatchlistScreeningIndividualCreateRequest} watchlistScreeningIndividualCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public watchlistScreeningIndividualCreate(watchlistScreeningIndividualCreateRequest: WatchlistScreeningIndividualCreateRequest, options?: any) {
        return PlaidApiFp(this.configuration).watchlistScreeningIndividualCreate(watchlistScreeningIndividualCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a previously created individual watchlist screening
     * @summary Retrieve an individual watchlist screening
     * @param {WatchlistScreeningIndividualGetRequest} watchlistScreeningIndividualGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public watchlistScreeningIndividualGet(watchlistScreeningIndividualGetRequest: WatchlistScreeningIndividualGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).watchlistScreeningIndividualGet(watchlistScreeningIndividualGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all changes to the individual watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
     * @summary List history for individual watchlist screenings
     * @param {WatchlistScreeningIndividualHistoryListRequest} watchlistScreeningIndividualHistoryListRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public watchlistScreeningIndividualHistoryList(watchlistScreeningIndividualHistoryListRequest: WatchlistScreeningIndividualHistoryListRequest, options?: any) {
        return PlaidApiFp(this.configuration).watchlistScreeningIndividualHistoryList(watchlistScreeningIndividualHistoryListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all hits found by Plaid for a particular individual watchlist screening.
     * @summary List hits for individual watchlist screening
     * @param {WatchlistScreeningIndividualHitListRequest} watchlistScreeningIndividualHitListRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public watchlistScreeningIndividualHitList(watchlistScreeningIndividualHitListRequest: WatchlistScreeningIndividualHitListRequest, options?: any) {
        return PlaidApiFp(this.configuration).watchlistScreeningIndividualHitList(watchlistScreeningIndividualHitListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List previously created watchlist screenings for individuals
     * @summary List Individual Watchlist Screenings
     * @param {WatchlistScreeningIndividualListRequest} watchlistScreeningIndividualListRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public watchlistScreeningIndividualList(watchlistScreeningIndividualListRequest: WatchlistScreeningIndividualListRequest, options?: any) {
        return PlaidApiFp(this.configuration).watchlistScreeningIndividualList(watchlistScreeningIndividualListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an individual watchlist screening program
     * @summary Get individual watchlist screening program
     * @param {WatchlistScreeningIndividualProgramGetRequest} watchlistScreeningIndividualProgramGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public watchlistScreeningIndividualProgramGet(watchlistScreeningIndividualProgramGetRequest: WatchlistScreeningIndividualProgramGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).watchlistScreeningIndividualProgramGet(watchlistScreeningIndividualProgramGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all individual watchlist screening programs
     * @summary List individual watchlist screening programs
     * @param {WatchlistScreeningIndividualProgramListRequest} watchlistScreeningIndividualProgramListRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public watchlistScreeningIndividualProgramList(watchlistScreeningIndividualProgramListRequest: WatchlistScreeningIndividualProgramListRequest, options?: any) {
        return PlaidApiFp(this.configuration).watchlistScreeningIndividualProgramList(watchlistScreeningIndividualProgramListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a review for the individual watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
     * @summary Create a review for an individual watchlist screening
     * @param {WatchlistScreeningIndividualReviewCreateRequest} watchlistScreeningIndividualReviewCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public watchlistScreeningIndividualReviewCreate(watchlistScreeningIndividualReviewCreateRequest: WatchlistScreeningIndividualReviewCreateRequest, options?: any) {
        return PlaidApiFp(this.configuration).watchlistScreeningIndividualReviewCreate(watchlistScreeningIndividualReviewCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all reviews for the individual watchlist screening.
     * @summary List reviews for individual watchlist screenings
     * @param {WatchlistScreeningIndividualReviewListRequest} watchlistScreeningIndividualReviewListRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public watchlistScreeningIndividualReviewList(watchlistScreeningIndividualReviewListRequest: WatchlistScreeningIndividualReviewListRequest, options?: any) {
        return PlaidApiFp(this.configuration).watchlistScreeningIndividualReviewList(watchlistScreeningIndividualReviewListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a specific individual watchlist screening. This endpoint can be used to add additional customer information, correct outdated information, add a reference id, assign the individual to a reviewer, and update which program it is associated with. Please note that you may not update `search_terms` and `status` at the same time since editing `search_terms` may trigger an automatic `status` change.
     * @summary Update individual watchlist screening
     * @param {WatchlistScreeningIndividualUpdateRequest} watchlistScreeningIndividualUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public watchlistScreeningIndividualUpdate(watchlistScreeningIndividualUpdateRequest: WatchlistScreeningIndividualUpdateRequest, options?: any) {
        return PlaidApiFp(this.configuration).watchlistScreeningIndividualUpdate(watchlistScreeningIndividualUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the `Plaid-Verification` header.  The `/webhook_verification_key/get` endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
     * @summary Get webhook verification key
     * @param {WebhookVerificationKeyGetRequest} webhookVerificationKeyGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public webhookVerificationKeyGet(webhookVerificationKeyGetRequest: WebhookVerificationKeyGetRequest, options?: any) {
        return PlaidApiFp(this.configuration).webhookVerificationKeyGet(webhookVerificationKeyGetRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


